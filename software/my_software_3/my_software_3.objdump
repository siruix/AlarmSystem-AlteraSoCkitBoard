
my_software_3.elf:     file format elf32-littlenios2
my_software_3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x110401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x11040000 paddr 0x11040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x11040020 paddr 0x11040020 align 2**12
         filesz 0x0000ef40 memsz 0x0000ef40 flags r-x
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x1104ef60 align 2**12
         filesz 0x00002830 memsz 0x00002b50 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  11040000  11040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  11040020  11040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000eda8  110401b8  110401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dd8  00000000  1104ef60  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  00000dd8  1104fd38  00010dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000320  00002830  11051790  00012830  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00012830  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000fd8  00000000  00000000  00012858  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002754e  00000000  00000000  00013830  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ab88  00000000  00000000  0003ad7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000b668  00000000  00000000  00045906  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001fd4  00000000  00000000  00050f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000358d  00000000  00000000  00052f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011adb  00000000  00000000  000564d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  00067fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b30  00000000  00000000  00068010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0006c4f1  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0006c4f4  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0006c4f7  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006c4f8  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006c4f9  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006c4fd  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006c501  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0006c505  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0006c50e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0006c517  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  0006c520  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002a  00000000  00000000  0006c52a  2**0
                  CONTENTS, READONLY
 28 .jdi          0000516f  00000000  00000000  0006c554  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000f9fc4  00000000  00000000  000716c3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
11040000 l    d  .entry	00000000 .entry
11040020 l    d  .exceptions	00000000 .exceptions
110401b8 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000dd8 l    d  .rwdata	00000000 .rwdata
00002830 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../my_software_3_bsp//obj/HAL/src/crt0.o
11040200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
11040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 AUDIO.c
00002870 l     O .bss	00000028 reg_file
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 LED.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 main.c
11041da0 l     F .text	00000080 timer_isr
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
11042a40 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
11043094 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
11043b4c l     F .text	00000034 __sprint_r
00000c12 l     O .rodata	00000010 blanks.3515
00000c22 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
11045bfc l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
11047638 l     F .text	00000008 __fp_lock
11047640 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00000dd8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000c58 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00000da0 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
1104c234 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1104c34c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1104c378 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1104c8ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1104c9dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1104cac8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1104cca0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002824 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1104cf20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1104d05c l     F .text	00000038 alt_dev_reg
00001794 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1104d350 l     F .text	00000204 altera_avalon_jtag_uart_irq
1104d554 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
1104dd98 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1104e16c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1104e344 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
1104e47c l     F .text	00000050 alt_get_errno
1104e4cc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
11042068 g     F .text	00000048 display_time_elapsed
11049f90 g     F .text	00000074 _mprec_log10
110411b8 g     F .text	00000184 I2C_Read
1104a080 g     F .text	00000084 __any_on
1104acf0 g     F .text	00000064 _isatty_r
00000c88 g     O .rodata	00000028 __mprec_tinytens
1104cbe8 g     F .text	00000078 alt_main
110438b8 g     F .text	00000044 __ashldi3
11043964 g     F .text	00000084 _puts_r
11041e20 g     F .text	00000060 button_monitor_isr
000028c0 g     O .bss	00000100 alt_irq
1104ad54 g     F .text	0000006c _lseek_r
1104fd38 g       *ABS*	00000000 __flash_rwdata_start
1104bc64 g     F .text	0000005c __eqdf2
11041ae0 g     F .text	0000003c ui_is_mic_record
00002b50 g       *ABS*	00000000 __alt_heap_start
11040204 g     F .text	000001d0 AUDIO_Init
11043928 g     F .text	0000003c printf
11040614 g     F .text	00000078 AUDIO_AdcEnableHighPassFilter
1104a8a4 g     F .text	0000005c __sseek
110476c8 g     F .text	0000010c __sinit
11048360 g     F .text	0000009c _setlocale_r
11047654 g     F .text	00000064 __sfmoreglue
1104cc80 g     F .text	00000020 __malloc_unlock
11042790 g     F .text	0000013c __divsf3
11048f58 g     F .text	00000128 memmove
110476b8 g     F .text	00000010 _cleanup
11040de4 g     F .text	000000f0 aduio_RegWrite
11041090 g     F .text	0000002c AUDIO_FifoClear
1104915c g     F .text	000000a8 _Balloc
11041890 g     F .text	0000002c LED_AllOff
1104bd1c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
1104103c g     F .text	00000054 AUDIO_AdcFifoGetData
110415ac g     F .text	0000012c i2c_write
11040000 g     F .entry	0000001c __reset
11040020 g       *ABS*	00000000 __flash_exceptions_start
1104ac88 g     F .text	00000068 _fstat_r
00002854 g     O .bss	00000004 errno
11042ffc g     F .text	00000038 __make_dp
11043520 g     F .text	0000002c __make_fp
00002860 g     O .bss	00000004 alt_argv
0000a7f4 g       *ABS*	00000000 _gp
1104cef0 g     F .text	00000030 usleep
1104221c g     F .text	00000060 show_menu
00001614 g     O .rwdata	00000180 alt_fd_list
1104e8a8 g     F .text	00000090 alt_find_dev
11048e60 g     F .text	000000f8 memcpy
11041828 g     F .text	0000003c LED_Display
11047648 g     F .text	0000000c _cleanup_r
1104be40 g     F .text	000000d4 __floatsidf
11041e80 g     F .text	00000084 button_monitor_start
1104e404 g     F .text	00000078 alt_io_redirect
1104bde4 g     F .text	0000005c __ltdf2
1104ef60 g       *ABS*	00000000 __DTOR_END__
110439e8 g     F .text	00000014 puts
11049eec g     F .text	000000a4 __ratio
11041f04 g     F .text	00000164 init_audio
1104d754 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
110438fc g     F .text	0000002c _printf_r
110431b4 g     F .text	00000008 __udivsi3
1104c93c g     F .text	000000a0 isatty
11040ccc g     F .text	0000008c AUDIO_EnableByPass
00000cd8 g     O .rodata	000000c8 __mprec_tens
11041bc4 g     F .text	00000164 Red_Temp
110483fc g     F .text	0000000c __locale_charset
11045a48 g     F .text	00000040 vsnprintf
1104eb00 g     F .text	0000008c alt_icache_flush
1104133c g     F .text	0000017c I2C_MultipleRead
00002850 g     O .bss	00000004 __malloc_top_pad
11040aac g     F .text	00000110 AUDIO_SetLineInVol
000027fc g     O .rwdata	00000004 __mb_cur_max
11048408 g     F .text	0000000c _localeconv_r
1104955c g     F .text	0000003c __i2b
11047d1c g     F .text	000004e4 __sfvwrite_r
1104a764 g     F .text	00000064 _sbrk_r
11041a54 g     F .text	0000008c myprintf_dword_array
1104adc0 g     F .text	0000006c _read_r
000011d8 g     O .rwdata	0000000c __lc_ctype
00002818 g     O .rwdata	00000004 alt_max_fd
11043770 g     F .text	00000104 __unpack_d
1104ab38 g     F .text	0000013c _fclose_r
11047608 g     F .text	00000030 fflush
0000284c g     O .bss	00000004 __malloc_max_sbrked_mem
1104c73c g     F .text	000001b0 alt_irq_register
11042928 g     F .text	00000044 __extendsfdf2
11042d94 g     F .text	00000054 __adddf3
11049c60 g     F .text	00000148 __b2d
1104b3f4 g     F .text	0000058c __umoddi3
1104cb18 g     F .text	000000d0 lseek
000027f4 g     O .rwdata	00000004 _global_impure_ptr
1104a104 g     F .text	000005fc _realloc_r
00002b50 g       *ABS*	00000000 __bss_end
1104c64c g     F .text	000000f0 alt_iic_isr_register
1104e784 g     F .text	00000104 alt_tick
1104ae2c g     F .text	000005c8 __udivdi3
00000cb0 g     O .rodata	00000028 __mprec_bigtens
11049340 g     F .text	00000104 __s2b
1104bfe8 g     F .text	0000011c __floatunsidf
1104059c g     F .text	00000078 AUDIO_MicBoost
11049a00 g     F .text	00000058 __mcmp
00002834 g     O .bss	00000004 is_alarm_on
110403d4 g     F .text	00000180 AUDIO_REG_READ
110478e0 g     F .text	00000018 __fp_lock_all
1104c600 g     F .text	0000004c alt_ic_irq_enabled
110410bc g     F .text	000000fc I2C_Write
1104e6ec g     F .text	00000098 alt_alarm_stop
00002858 g     O .bss	00000004 alt_irq_active
110400ec g     F .exceptions	000000cc alt_irq_handler
000015ec g     O .rwdata	00000028 alt_dev_null
1104339c g     F .text	000000c8 __unpack_f
110414b8 g     F .text	00000084 i2c_start
1104e128 g     F .text	00000044 alt_dcache_flush_all
11049444 g     F .text	00000068 __hi0bits
1104bf14 g     F .text	000000d4 __fixdfsi
00002830 g       *ABS*	00000000 __ram_rwdata_end
00002810 g     O .rwdata	00000008 alt_dev_list
1104cf70 g     F .text	000000ec write
110428cc g     F .text	0000005c __gtsf2
00000dd8 g       *ABS*	00000000 __ram_rodata_end
1104c3c8 g     F .text	000000ac fstat
11043874 g     F .text	00000044 __lshrdi3
11041960 g     F .text	0000006c myprintf
11049778 g     F .text	0000012c __pow5mult
00002844 g     O .bss	00000004 __nlocale_changed
110431bc g     F .text	00000008 __umodsi3
11040d58 g     F .text	0000008c AUDIO_EnableSiteTone
00002b50 g       *ABS*	00000000 end
11043270 g     F .text	0000012c __pack_f
11041864 g     F .text	0000002c LED_AllOn
1104d290 g     F .text	000000c0 altera_avalon_jtag_uart_init
1104ef60 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
1104de0c g     F .text	00000088 alt_avalon_timer_sc_init
110431c4 g     F .text	000000ac __clzsi2
1104d96c g     F .text	00000224 altera_avalon_jtag_uart_write
110478d0 g     F .text	00000004 __sfp_lock_acquire
11048d68 g     F .text	000000f8 memchr
11043b80 g     F .text	00001df8 ___vfprintf_internal_r
110439fc g     F .text	00000058 _sprintf_r
11047a4c g     F .text	000002d0 _free_r
1104ed84 g     F .text	000001a0 __call_exitprocs
00002840 g     O .bss	00000004 __mlocale_changed
00002800 g     O .rwdata	00000004 __malloc_sbrk_base
110401b8 g     F .text	0000004c _start
00002868 g     O .bss	00000004 _alt_tick_rate
110498a4 g     F .text	0000015c __lshift
1104db90 g     F .text	00000208 alt_avalon_spi_command
0000286c g     O .bss	00000004 _alt_nticks
1104ccf0 g     F .text	000000f0 read
1104d0c8 g     F .text	00000064 alt_sys_init
11041d28 g     F .text	00000078 TIMER_Init
1104ec54 g     F .text	00000130 __register_exitproc
1104073c g     F .text	0000008c AUDIO_DacEnableSoftMute
11049598 g     F .text	000001e0 __multiply
1104d5f8 g     F .text	00000068 altera_avalon_jtag_uart_close
00000dd8 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00002898 g     O .bss	00000028 __malloc_current_mallinfo
11040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
11049da8 g     F .text	00000144 __d2b
00002830 g     O .bss	00000001 hour
1104d12c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1104ea4c g     F .text	000000b4 alt_get_fd
1104dfd4 g     F .text	00000154 alt_busy_sleep
1104c164 g     F .text	000000d0 __fpcmp_parts_d
11040ed4 g     F .text	000000a4 aduio_RegRead
1104aad4 g     F .text	00000064 _close_r
1104ebd8 g     F .text	0000007c memcmp
1104d1ec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00002b50 g       *ABS*	00000000 __alt_stack_base
1104d23c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
11045a88 g     F .text	00000174 __swsetup_r
110420b0 g     F .text	0000005c init
11042e48 g     F .text	000001b4 __divdf3
110477d4 g     F .text	000000fc __sfp
1104a004 g     F .text	0000007c __copybits
1104068c g     F .text	000000b0 AUDIO_DacDeemphasisControl
000011e4 g     O .rwdata	00000408 __malloc_av_
110478dc g     F .text	00000004 __sinit_lock_release
1104599c g     F .text	000000ac _vsnprintf_r
1104153c g     F .text	00000070 i2c_stop
1104b980 g     F .text	000002e4 __muldf3
1104a7c8 g     F .text	00000054 __sread
00000aa8 g     O .rodata	00000010 __thenan_sf
1104e938 g     F .text	00000114 alt_find_file
1104e1bc g     F .text	000000a0 alt_dev_llist_insert
1104cc60 g     F .text	00000020 __malloc_lock
1104ce40 g     F .text	000000b0 sbrk
11040934 g     F .text	00000090 AUDIO_SetInputSource
11047420 g     F .text	000001e8 _fflush_r
1104aa18 g     F .text	000000bc _calloc_r
11040554 g     F .text	00000048 AUDIO_InterfaceActive
00002830 g       *ABS*	00000000 __bss_start
11049080 g     F .text	000000dc memset
1104227c g     F .text	00000514 main
00002864 g     O .bss	00000004 alt_envp
00002848 g     O .bss	00000004 __malloc_max_total_mem
1104d18c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
110416d8 g     F .text	00000150 i2c_read
00002838 g     O .bss	00000004 record_sample_rate
1104a900 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
1104ac74 g     F .text	00000014 fclose
11043034 g     F .text	00000060 __truncdfsf2
000029c0 g     O .bss	00000190 _atexit0
11045e04 g     F .text	0000161c _dtoa_r
110485e4 g     F .text	00000784 _malloc_r
0000281c g     O .rwdata	00000004 alt_errno
11048200 g     F .text	000000a8 _fwalk
11041b1c g     F .text	000000a8 ui_get_sample_rate
11043108 g     F .text	00000050 __divsi3
00000ab8 g     O .rodata	00000014 __thenan_df
11047910 g     F .text	0000013c _malloc_trim_r
1104ef60 g       *ABS*	00000000 __CTOR_END__
11040854 g     F .text	000000e0 AUDIO_LineInMute
1104a908 g     F .text	000000a4 strcmp
110407c8 g     F .text	0000008c AUDIO_MicMute
1104ef60 g       *ABS*	00000000 __flash_rodata_start
1104ef60 g       *ABS*	00000000 __DTOR_LIST__
00002831 g     O .bss	00000001 min
1104bcc0 g     F .text	0000005c __nedf2
1104d094 g     F .text	00000034 alt_irq_init
1104cde0 g     F .text	00000060 alt_release_fd
11043a54 g     F .text	0000006c sprintf
00000acc g     O .rodata	00000100 __clz_tab
11041930 g     F .text	00000030 debug_output
0000283c g     O .bss	00000004 _PathLocale
1104eb8c g     F .text	00000014 atexit
1104210c g     F .text	00000110 dump_record_data
00002832 g     O .bss	00000001 sec
1104a9ac g     F .text	0000006c _write_r
11048414 g     F .text	0000001c setlocale
000027f8 g     O .rwdata	00000004 _impure_ptr
0000285c g     O .bss	00000004 alt_argc
1104e2b8 g     F .text	0000005c _do_dtors
11041000 g     F .text	0000003c AUDIO_AdcFifoNotEmpty
11040020 g       .exceptions	00000000 alt_irq_entry
11049c00 g     F .text	00000060 __ulp
1104a700 g     F .text	00000038 __isinfd
110478f8 g     F .text	00000018 __fp_unlock_all
11040fb4 g     F .text	0000004c AUDIO_DacFifoSetData
00002808 g     O .rwdata	00000008 alt_fs_list
110419cc g     F .text	00000088 myprintf_hex_array
11040020 g       *ABS*	00000000 __ram_exceptions_start
110409c4 g     F .text	000000e8 AUDIO_SetSampleRate
11048430 g     F .text	0000000c localeconv
00000000 g       *ABS*	00000000 __alt_mem_DDR3
1104c474 g     F .text	00000050 alt_ic_isr_register
00002830 g       *ABS*	00000000 _edata
00002b50 g       *ABS*	00000000 _end
11040bbc g     F .text	00000110 AUDIO_SetLineOutVol
110401b8 g       *ABS*	00000000 __ram_exceptions_end
1104d660 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
1104c560 g     F .text	000000a0 alt_ic_irq_disable
1104a81c g     F .text	00000088 __swrite
00002804 g     O .rwdata	00000004 __malloc_trim_threshold
1104e888 g     F .text	00000020 altera_nios2_qsys_irq_init
1104eba0 g     F .text	00000038 exit
110418bc g     F .text	00000074 LED_LightCount
110482a8 g     F .text	000000b8 _fwalk_reent
1104296c g     F .text	000000d4 __floatunsisf
11049a58 g     F .text	000001a8 __mdiff
11043158 g     F .text	0000005c __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
11040020 g     F .exceptions	00000000 alt_exception
110478d4 g     F .text	00000004 __sfp_lock_release
11043464 g     F .text	000000bc __fpcmp_parts_f
1104ef24 g     F .text	0000003c _exit
1104a738 g     F .text	0000002c __isnand
1104de94 g     F .text	00000140 alt_alarm_start
1104c104 g     F .text	00000060 __muldi3
1104843c g     F .text	000001a8 __smakebuf_r
11043ac0 g     F .text	0000008c strlen
1104e598 g     F .text	00000154 open
11040f78 g     F .text	0000003c AUDIO_DacFifoNotFull
1104bd80 g     F .text	00000064 __gedf2
1104e314 g     F .text	00000030 alt_icache_flush_all
00002820 g     O .rwdata	00000004 alt_priority_mask
1104c4c4 g     F .text	0000009c alt_ic_irq_enable
11045978 g     F .text	00000024 __vfprintf_internal
11042de8 g     F .text	00000060 __subdf3
110494ac g     F .text	000000b0 __lo0bits
00002828 g     O .rwdata	00000008 alt_alarm_list
1104e25c g     F .text	0000005c _do_ctors
1104c284 g     F .text	000000c8 close
1104ca48 g     F .text	00000080 alt_load
1104354c g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
110478d8 g     F .text	00000004 __sinit_lock_acquire
1104922c g     F .text	00000114 __multadd
00000269 g     O .rodata	00000700 szMenu
11049204 g     F .text	00000028 _Bfree



Disassembly of section .entry:

11040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
11040000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
11040004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
11040008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1104000c:	00bffd16 	blt	zero,r2,11040004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
11040010:	00444134 	movhi	at,4356
    ori r1, r1, %lo(_start)
11040014:	08406e14 	ori	at,at,440
    jmp r1
11040018:	0800683a 	jmp	at
1104001c:	00000000 	call	10000000 <__alt_data_end>

Disassembly of section .exceptions:

11040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
11040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
11040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
11040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1104002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
11040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
11040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
11040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1104003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
11040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
11040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
11040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1104004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
11040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
11040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
11040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1104005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
11040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
11040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
11040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1104006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
11040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
11040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
11040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1104007c:	10000326 	beq	r2,zero,1104008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
11040080:	20000226 	beq	r4,zero,1104008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
11040084:	10400ec0 	call	110400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
11040088:	00000306 	br	11040098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1104008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
11040090:	e8bfff17 	ldw	r2,-4(ea)

11040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
11040094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
11040098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1104009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
110400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
110400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
110400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
110400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
110400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
110400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
110400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
110400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
110400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
110400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
110400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
110400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
110400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
110400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
110400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
110400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
110400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
110400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
110400e8:	ef80083a 	eret

110400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
110400ec:	defff904 	addi	sp,sp,-28
110400f0:	dfc00615 	stw	ra,24(sp)
110400f4:	df000515 	stw	fp,20(sp)
110400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
110400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
11040100:	0005313a 	rdctl	r2,ipending
11040104:	e0bffe15 	stw	r2,-8(fp)

  return active;
11040108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1104010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
11040110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
11040114:	00800044 	movi	r2,1
11040118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1104011c:	e0fffb17 	ldw	r3,-20(fp)
11040120:	e0bffc17 	ldw	r2,-16(fp)
11040124:	1884703a 	and	r2,r3,r2
11040128:	10001726 	beq	r2,zero,11040188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1104012c:	00c00034 	movhi	r3,0
11040130:	18ca3004 	addi	r3,r3,10432
11040134:	e0bffd17 	ldw	r2,-12(fp)
11040138:	100490fa 	slli	r2,r2,3
1104013c:	1885883a 	add	r2,r3,r2
11040140:	10c00017 	ldw	r3,0(r2)
11040144:	01000034 	movhi	r4,0
11040148:	210a3004 	addi	r4,r4,10432
1104014c:	e0bffd17 	ldw	r2,-12(fp)
11040150:	100490fa 	slli	r2,r2,3
11040154:	2085883a 	add	r2,r4,r2
11040158:	10800104 	addi	r2,r2,4
1104015c:	10800017 	ldw	r2,0(r2)
11040160:	1009883a 	mov	r4,r2
11040164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
11040168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1104016c:	0005313a 	rdctl	r2,ipending
11040170:	e0bfff15 	stw	r2,-4(fp)

  return active;
11040174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
11040178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1104017c:	e0bffb17 	ldw	r2,-20(fp)
11040180:	103fe31e 	bne	r2,zero,11040110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
11040184:	00000706 	br	110401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
11040188:	e0bffc17 	ldw	r2,-16(fp)
1104018c:	1085883a 	add	r2,r2,r2
11040190:	e0bffc15 	stw	r2,-16(fp)
      i++;
11040194:	e0bffd17 	ldw	r2,-12(fp)
11040198:	10800044 	addi	r2,r2,1
1104019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
110401a0:	003fde06 	br	1104011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
110401a4:	e037883a 	mov	sp,fp
110401a8:	dfc00117 	ldw	ra,4(sp)
110401ac:	df000017 	ldw	fp,0(sp)
110401b0:	dec00204 	addi	sp,sp,8
110401b4:	f800283a 	ret

Disassembly of section .text:

110401b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
110401b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
110401bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
110401c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
110401c4:	00bffd16 	blt	zero,r2,110401bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
110401c8:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
110401cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
110401d0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
110401d4:	d6a9fd14 	ori	gp,gp,42996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
110401d8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
110401dc:	108a0c14 	ori	r2,r2,10288

    movhi r3, %hi(__bss_end)
110401e0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
110401e4:	18cad414 	ori	r3,r3,11088

    beq r2, r3, 1f
110401e8:	10c00326 	beq	r2,r3,110401f8 <_start+0x40>

0:
    stw zero, (r2)
110401ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
110401f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
110401f4:	10fffd36 	bltu	r2,r3,110401ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
110401f8:	104ca480 	call	1104ca48 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
110401fc:	104cbe80 	call	1104cbe8 <alt_main>

11040200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
11040200:	003fff06 	br	11040200 <alt_after_alt_main>

11040204 <AUDIO_Init>:

/////////////////////////////////////////////////////////////////////////
///////////// External function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool AUDIO_Init(void){
11040204:	defffd04 	addi	sp,sp,-12
11040208:	dfc00215 	stw	ra,8(sp)
1104020c:	df000115 	stw	fp,4(sp)
11040210:	df000104 	addi	fp,sp,4
   bool bSuccess = TRUE;
11040214:	00800044 	movi	r2,1
11040218:	e0bfff15 	stw	r2,-4(fp)
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init...\r\n"));
1104021c:	01000034 	movhi	r4,0
11040220:	21000004 	addi	r4,r4,0
11040224:	10419600 	call	11041960 <myprintf>

    if (bSuccess)
11040228:	e0bfff17 	ldw	r2,-4(fp)
1104022c:	10000426 	beq	r2,zero,11040240 <AUDIO_Init+0x3c>
        bSuccess = aduio_RegWrite(15, 0x0000);  // reset
11040230:	010003c4 	movi	r4,15
11040234:	000b883a 	mov	r5,zero
11040238:	1040de40 	call	11040de4 <aduio_RegWrite>
1104023c:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
11040240:	e0bfff17 	ldw	r2,-4(fp)
11040244:	10000426 	beq	r2,zero,11040258 <AUDIO_Init+0x54>
        bSuccess = aduio_RegWrite(9, 0x0000);  // inactive interface         
11040248:	01000244 	movi	r4,9
1104024c:	000b883a 	mov	r5,zero
11040250:	1040de40 	call	11040de4 <aduio_RegWrite>
11040254:	e0bfff15 	stw	r2,-4(fp)
       
    //usleep(20*1000);    
    if (bSuccess)
11040258:	e0bfff17 	ldw	r2,-4(fp)
1104025c:	10000426 	beq	r2,zero,11040270 <AUDIO_Init+0x6c>
        bSuccess = aduio_RegWrite(0, 0x0017);  // Left Line In: set left line in volume
11040260:	0009883a 	mov	r4,zero
11040264:	014005c4 	movi	r5,23
11040268:	1040de40 	call	11040de4 <aduio_RegWrite>
1104026c:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
11040270:	e0bfff17 	ldw	r2,-4(fp)
11040274:	10000426 	beq	r2,zero,11040288 <AUDIO_Init+0x84>
        bSuccess = aduio_RegWrite(1, 0x0017);  // Right Line In: set right line in volume
11040278:	01000044 	movi	r4,1
1104027c:	014005c4 	movi	r5,23
11040280:	1040de40 	call	11040de4 <aduio_RegWrite>
11040284:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
11040288:	e0bfff17 	ldw	r2,-4(fp)
1104028c:	10000426 	beq	r2,zero,110402a0 <AUDIO_Init+0x9c>
        bSuccess = aduio_RegWrite(2, 0x005B);  // Left Headphone Out: set left line out volume
11040290:	01000084 	movi	r4,2
11040294:	014016c4 	movi	r5,91
11040298:	1040de40 	call	11040de4 <aduio_RegWrite>
1104029c:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
110402a0:	e0bfff17 	ldw	r2,-4(fp)
110402a4:	10000426 	beq	r2,zero,110402b8 <AUDIO_Init+0xb4>
        bSuccess = aduio_RegWrite(3, 0x005B);  // Right Headphone Out: set right line out volume
110402a8:	010000c4 	movi	r4,3
110402ac:	014016c4 	movi	r5,91
110402b0:	1040de40 	call	11040de4 <aduio_RegWrite>
110402b4:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)      
110402b8:	e0bfff17 	ldw	r2,-4(fp)
110402bc:	10000426 	beq	r2,zero,110402d0 <AUDIO_Init+0xcc>
        bSuccess = aduio_RegWrite(4, 0x0014);  // Analogue Audio Path Control: set mic as input and enable dac
110402c0:	01000104 	movi	r4,4
110402c4:	01400504 	movi	r5,20
110402c8:	1040de40 	call	11040de4 <aduio_RegWrite>
110402cc:	e0bfff15 	stw	r2,-4(fp)
                
    if (bSuccess)
110402d0:	e0bfff17 	ldw	r2,-4(fp)
110402d4:	10000426 	beq	r2,zero,110402e8 <AUDIO_Init+0xe4>
        bSuccess = aduio_RegWrite(5, 0x0000);  // Digital Audio Path Control: disable soft mute         
110402d8:	01000144 	movi	r4,5
110402dc:	000b883a 	mov	r5,zero
110402e0:	1040de40 	call	11040de4 <aduio_RegWrite>
110402e4:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
110402e8:	e0bfff17 	ldw	r2,-4(fp)
110402ec:	10000426 	beq	r2,zero,11040300 <AUDIO_Init+0xfc>
        bSuccess = aduio_RegWrite(6, 0);  // power down control: power on all         
110402f0:	01000184 	movi	r4,6
110402f4:	000b883a 	mov	r5,zero
110402f8:	1040de40 	call	11040de4 <aduio_RegWrite>
110402fc:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040300:	e0bfff17 	ldw	r2,-4(fp)
11040304:	10000426 	beq	r2,zero,11040318 <AUDIO_Init+0x114>
        bSuccess = aduio_RegWrite(7, 0x0042);  // I2S, iwl=16-bits, Enable Master Mode         
11040308:	010001c4 	movi	r4,7
1104030c:	01401084 	movi	r5,66
11040310:	1040de40 	call	11040de4 <aduio_RegWrite>
11040314:	e0bfff15 	stw	r2,-4(fp)
//        bSuccess = aduio_RegWrite(7, 0x0041);  // MSB-First, left justified, iwl=16-bits, Enable Master Mode         

    if (bSuccess)
11040318:	e0bfff17 	ldw	r2,-4(fp)
1104031c:	10000426 	beq	r2,zero,11040330 <AUDIO_Init+0x12c>
        bSuccess = aduio_RegWrite(8, 0x0002);  // Normal, Base OVer-Sampleing Rate 384 fs (BOSR=1)         
11040320:	01000204 	movi	r4,8
11040324:	01400084 	movi	r5,2
11040328:	1040de40 	call	11040de4 <aduio_RegWrite>
1104032c:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040330:	e0bfff17 	ldw	r2,-4(fp)
11040334:	10000426 	beq	r2,zero,11040348 <AUDIO_Init+0x144>
        bSuccess = aduio_RegWrite(16, 0x007B);//ALC CONTROL 1
11040338:	01000404 	movi	r4,16
1104033c:	01401ec4 	movi	r5,123
11040340:	1040de40 	call	11040de4 <aduio_RegWrite>
11040344:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040348:	e0bfff17 	ldw	r2,-4(fp)
1104034c:	10000426 	beq	r2,zero,11040360 <AUDIO_Init+0x15c>
        bSuccess = aduio_RegWrite(17, 0x0032);//ALC CONTROL 2
11040350:	01000444 	movi	r4,17
11040354:	01400c84 	movi	r5,50
11040358:	1040de40 	call	11040de4 <aduio_RegWrite>
1104035c:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040360:	e0bfff17 	ldw	r2,-4(fp)
11040364:	10000426 	beq	r2,zero,11040378 <AUDIO_Init+0x174>
        bSuccess = aduio_RegWrite(18, 0x0000);//NOISE GATE
11040368:	01000484 	movi	r4,18
1104036c:	000b883a 	mov	r5,zero
11040370:	1040de40 	call	11040de4 <aduio_RegWrite>
11040374:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040378:	e0bfff17 	ldw	r2,-4(fp)
1104037c:	10000426 	beq	r2,zero,11040390 <AUDIO_Init+0x18c>
        bSuccess = aduio_RegWrite(9, 0x0001);  // active interface
11040380:	01000244 	movi	r4,9
11040384:	01400044 	movi	r5,1
11040388:	1040de40 	call	11040de4 <aduio_RegWrite>
1104038c:	e0bfff15 	stw	r2,-4(fp)
        
        
         
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init %s\r\n", bSuccess?"success":"fail"));        
11040390:	e0bfff17 	ldw	r2,-4(fp)
11040394:	10000326 	beq	r2,zero,110403a4 <AUDIO_Init+0x1a0>
11040398:	00800034 	movhi	r2,0
1104039c:	10800604 	addi	r2,r2,24
110403a0:	00000206 	br	110403ac <AUDIO_Init+0x1a8>
110403a4:	00800034 	movhi	r2,0
110403a8:	10800804 	addi	r2,r2,32
110403ac:	01000034 	movhi	r4,0
110403b0:	21000a04 	addi	r4,r4,40
110403b4:	100b883a 	mov	r5,r2
110403b8:	10419600 	call	11041960 <myprintf>
    
    return bSuccess;
110403bc:	e0bfff17 	ldw	r2,-4(fp)

}
110403c0:	e037883a 	mov	sp,fp
110403c4:	dfc00117 	ldw	ra,4(sp)
110403c8:	df000017 	ldw	fp,0(sp)
110403cc:	dec00204 	addi	sp,sp,8
110403d0:	f800283a 	ret

110403d4 <AUDIO_REG_READ>:

bool AUDIO_REG_READ(void){
110403d4:	defffd04 	addi	sp,sp,-12
110403d8:	dfc00215 	stw	ra,8(sp)
110403dc:	df000115 	stw	fp,4(sp)
110403e0:	df000104 	addi	fp,sp,4
   bool bSuccess = TRUE;
110403e4:	00800044 	movi	r2,1
110403e8:	e0bfff15 	stw	r2,-4(fp)
    AUDIO_DEBUG(("[AUDIO] AUDIO_REG_READ...\r\n"));
110403ec:	01000034 	movhi	r4,0
110403f0:	21001004 	addi	r4,r4,64
110403f4:	10419600 	call	11041960 <myprintf>

    if (bSuccess)
110403f8:	e0bfff17 	ldw	r2,-4(fp)
110403fc:	10000326 	beq	r2,zero,1104040c <AUDIO_REG_READ+0x38>
        bSuccess = aduio_RegRead(0);
11040400:	0009883a 	mov	r4,zero
11040404:	1040ed40 	call	11040ed4 <aduio_RegRead>
11040408:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
1104040c:	e0bfff17 	ldw	r2,-4(fp)
11040410:	10000326 	beq	r2,zero,11040420 <AUDIO_REG_READ+0x4c>
        bSuccess = aduio_RegRead(1);
11040414:	01000044 	movi	r4,1
11040418:	1040ed40 	call	11040ed4 <aduio_RegRead>
1104041c:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040420:	e0bfff17 	ldw	r2,-4(fp)
11040424:	10000326 	beq	r2,zero,11040434 <AUDIO_REG_READ+0x60>
        bSuccess = aduio_RegRead(2);
11040428:	01000084 	movi	r4,2
1104042c:	1040ed40 	call	11040ed4 <aduio_RegRead>
11040430:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040434:	e0bfff17 	ldw	r2,-4(fp)
11040438:	10000326 	beq	r2,zero,11040448 <AUDIO_REG_READ+0x74>
        bSuccess = aduio_RegRead(3);
1104043c:	010000c4 	movi	r4,3
11040440:	1040ed40 	call	11040ed4 <aduio_RegRead>
11040444:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040448:	e0bfff17 	ldw	r2,-4(fp)
1104044c:	10000326 	beq	r2,zero,1104045c <AUDIO_REG_READ+0x88>
        bSuccess = aduio_RegRead(4);
11040450:	01000104 	movi	r4,4
11040454:	1040ed40 	call	11040ed4 <aduio_RegRead>
11040458:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
1104045c:	e0bfff17 	ldw	r2,-4(fp)
11040460:	10000326 	beq	r2,zero,11040470 <AUDIO_REG_READ+0x9c>
        bSuccess = aduio_RegRead(5);
11040464:	01000144 	movi	r4,5
11040468:	1040ed40 	call	11040ed4 <aduio_RegRead>
1104046c:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040470:	e0bfff17 	ldw	r2,-4(fp)
11040474:	10000326 	beq	r2,zero,11040484 <AUDIO_REG_READ+0xb0>
        bSuccess = aduio_RegRead(6);
11040478:	01000184 	movi	r4,6
1104047c:	1040ed40 	call	11040ed4 <aduio_RegRead>
11040480:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040484:	e0bfff17 	ldw	r2,-4(fp)
11040488:	10000326 	beq	r2,zero,11040498 <AUDIO_REG_READ+0xc4>
        bSuccess = aduio_RegRead(7);
1104048c:	010001c4 	movi	r4,7
11040490:	1040ed40 	call	11040ed4 <aduio_RegRead>
11040494:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
11040498:	e0bfff17 	ldw	r2,-4(fp)
1104049c:	10000326 	beq	r2,zero,110404ac <AUDIO_REG_READ+0xd8>
        bSuccess = aduio_RegRead(8);
110404a0:	01000204 	movi	r4,8
110404a4:	1040ed40 	call	11040ed4 <aduio_RegRead>
110404a8:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
110404ac:	e0bfff17 	ldw	r2,-4(fp)
110404b0:	10000326 	beq	r2,zero,110404c0 <AUDIO_REG_READ+0xec>
        bSuccess = aduio_RegRead(9);
110404b4:	01000244 	movi	r4,9
110404b8:	1040ed40 	call	11040ed4 <aduio_RegRead>
110404bc:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
110404c0:	e0bfff17 	ldw	r2,-4(fp)
110404c4:	10000326 	beq	r2,zero,110404d4 <AUDIO_REG_READ+0x100>
        bSuccess = aduio_RegRead(15);
110404c8:	010003c4 	movi	r4,15
110404cc:	1040ed40 	call	11040ed4 <aduio_RegRead>
110404d0:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
110404d4:	e0bfff17 	ldw	r2,-4(fp)
110404d8:	10000326 	beq	r2,zero,110404e8 <AUDIO_REG_READ+0x114>
        bSuccess = aduio_RegRead(16);
110404dc:	01000404 	movi	r4,16
110404e0:	1040ed40 	call	11040ed4 <aduio_RegRead>
110404e4:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
110404e8:	e0bfff17 	ldw	r2,-4(fp)
110404ec:	10000326 	beq	r2,zero,110404fc <AUDIO_REG_READ+0x128>
        bSuccess = aduio_RegRead(17);
110404f0:	01000444 	movi	r4,17
110404f4:	1040ed40 	call	11040ed4 <aduio_RegRead>
110404f8:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
110404fc:	e0bfff17 	ldw	r2,-4(fp)
11040500:	10000326 	beq	r2,zero,11040510 <AUDIO_REG_READ+0x13c>
        bSuccess =aduio_RegRead(18);
11040504:	01000484 	movi	r4,18
11040508:	1040ed40 	call	11040ed4 <aduio_RegRead>
1104050c:	e0bfff15 	stw	r2,-4(fp)


    AUDIO_DEBUG(("[AUDIO] AUDIO_REG_READ %s\r\n", bSuccess?"success":"fail"));
11040510:	e0bfff17 	ldw	r2,-4(fp)
11040514:	10000326 	beq	r2,zero,11040524 <AUDIO_REG_READ+0x150>
11040518:	00800034 	movhi	r2,0
1104051c:	10800604 	addi	r2,r2,24
11040520:	00000206 	br	1104052c <AUDIO_REG_READ+0x158>
11040524:	00800034 	movhi	r2,0
11040528:	10800804 	addi	r2,r2,32
1104052c:	01000034 	movhi	r4,0
11040530:	21001704 	addi	r4,r4,92
11040534:	100b883a 	mov	r5,r2
11040538:	10419600 	call	11041960 <myprintf>

    return bSuccess;
1104053c:	e0bfff17 	ldw	r2,-4(fp)

    }
11040540:	e037883a 	mov	sp,fp
11040544:	dfc00117 	ldw	ra,4(sp)
11040548:	df000017 	ldw	fp,0(sp)
1104054c:	dec00204 	addi	sp,sp,8
11040550:	f800283a 	ret

11040554 <AUDIO_InterfaceActive>:

bool AUDIO_InterfaceActive(bool bActive){
11040554:	defffc04 	addi	sp,sp,-16
11040558:	dfc00315 	stw	ra,12(sp)
1104055c:	df000215 	stw	fp,8(sp)
11040560:	df000204 	addi	fp,sp,8
11040564:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    bSuccess = aduio_RegWrite(9, bActive?0x0001:0x0000); 
11040568:	e0bfff17 	ldw	r2,-4(fp)
1104056c:	1004c03a 	cmpne	r2,r2,zero
11040570:	10803fcc 	andi	r2,r2,255
11040574:	01000244 	movi	r4,9
11040578:	100b883a 	mov	r5,r2
1104057c:	1040de40 	call	11040de4 <aduio_RegWrite>
11040580:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
11040584:	e0bffe17 	ldw	r2,-8(fp)
}
11040588:	e037883a 	mov	sp,fp
1104058c:	dfc00117 	ldw	ra,4(sp)
11040590:	df000017 	ldw	fp,0(sp)
11040594:	dec00204 	addi	sp,sp,8
11040598:	f800283a 	ret

1104059c <AUDIO_MicBoost>:

bool AUDIO_MicBoost(bool bBoost){
1104059c:	defffb04 	addi	sp,sp,-20
110405a0:	dfc00415 	stw	ra,16(sp)
110405a4:	df000315 	stw	fp,12(sp)
110405a8:	df000304 	addi	fp,sp,12
110405ac:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[4];
110405b0:	00800034 	movhi	r2,0
110405b4:	108a1c04 	addi	r2,r2,10352
110405b8:	1080020b 	ldhu	r2,8(r2)
110405bc:	e0bffd0d 	sth	r2,-12(fp)
    if (bBoost)
110405c0:	e0bfff17 	ldw	r2,-4(fp)
110405c4:	10000426 	beq	r2,zero,110405d8 <AUDIO_MicBoost+0x3c>
        control |= 0x0001;
110405c8:	e0bffd0b 	ldhu	r2,-12(fp)
110405cc:	10800054 	ori	r2,r2,1
110405d0:	e0bffd0d 	sth	r2,-12(fp)
110405d4:	00000406 	br	110405e8 <AUDIO_MicBoost+0x4c>
    else        
        control &= 0xFFFE;
110405d8:	e0fffd0b 	ldhu	r3,-12(fp)
110405dc:	00bfff84 	movi	r2,-2
110405e0:	1884703a 	and	r2,r3,r2
110405e4:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
110405e8:	e0bffd0b 	ldhu	r2,-12(fp)
110405ec:	01000104 	movi	r4,4
110405f0:	100b883a 	mov	r5,r2
110405f4:	1040de40 	call	11040de4 <aduio_RegWrite>
110405f8:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
110405fc:	e0bffe17 	ldw	r2,-8(fp)
}
11040600:	e037883a 	mov	sp,fp
11040604:	dfc00117 	ldw	ra,4(sp)
11040608:	df000017 	ldw	fp,0(sp)
1104060c:	dec00204 	addi	sp,sp,8
11040610:	f800283a 	ret

11040614 <AUDIO_AdcEnableHighPassFilter>:

bool AUDIO_AdcEnableHighPassFilter(bool bEnable){
11040614:	defffb04 	addi	sp,sp,-20
11040618:	dfc00415 	stw	ra,16(sp)
1104061c:	df000315 	stw	fp,12(sp)
11040620:	df000304 	addi	fp,sp,12
11040624:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
11040628:	00800034 	movhi	r2,0
1104062c:	108a1c04 	addi	r2,r2,10352
11040630:	1080028b 	ldhu	r2,10(r2)
11040634:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
11040638:	e0bfff17 	ldw	r2,-4(fp)
1104063c:	10000526 	beq	r2,zero,11040654 <AUDIO_AdcEnableHighPassFilter+0x40>
        control &= 0xFFFE;
11040640:	e0fffd0b 	ldhu	r3,-12(fp)
11040644:	00bfff84 	movi	r2,-2
11040648:	1884703a 	and	r2,r3,r2
1104064c:	e0bffd0d 	sth	r2,-12(fp)
11040650:	00000306 	br	11040660 <AUDIO_AdcEnableHighPassFilter+0x4c>
    else        
        control |= 0x0001;
11040654:	e0bffd0b 	ldhu	r2,-12(fp)
11040658:	10800054 	ori	r2,r2,1
1104065c:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
11040660:	e0bffd0b 	ldhu	r2,-12(fp)
11040664:	01000144 	movi	r4,5
11040668:	100b883a 	mov	r5,r2
1104066c:	1040de40 	call	11040de4 <aduio_RegWrite>
11040670:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;    
11040674:	e0bffe17 	ldw	r2,-8(fp)
}
11040678:	e037883a 	mov	sp,fp
1104067c:	dfc00117 	ldw	ra,4(sp)
11040680:	df000017 	ldw	fp,0(sp)
11040684:	dec00204 	addi	sp,sp,8
11040688:	f800283a 	ret

1104068c <AUDIO_DacDeemphasisControl>:



bool AUDIO_DacDeemphasisControl(alt_u8 deemphasis_type){
1104068c:	defffb04 	addi	sp,sp,-20
11040690:	dfc00415 	stw	ra,16(sp)
11040694:	df000315 	stw	fp,12(sp)
11040698:	df000304 	addi	fp,sp,12
1104069c:	2005883a 	mov	r2,r4
110406a0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
110406a4:	00800034 	movhi	r2,0
110406a8:	108a1c04 	addi	r2,r2,10352
110406ac:	1080028b 	ldhu	r2,10(r2)
110406b0:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFFF9;
110406b4:	e0fffd0b 	ldhu	r3,-12(fp)
110406b8:	00bffe44 	movi	r2,-7
110406bc:	1884703a 	and	r2,r3,r2
110406c0:	e0bffd0d 	sth	r2,-12(fp)
    switch(deemphasis_type){
110406c4:	e0bfff03 	ldbu	r2,-4(fp)
110406c8:	10c000a0 	cmpeqi	r3,r2,2
110406cc:	1800081e 	bne	r3,zero,110406f0 <AUDIO_DacDeemphasisControl+0x64>
110406d0:	10c000e0 	cmpeqi	r3,r2,3
110406d4:	18000a1e 	bne	r3,zero,11040700 <AUDIO_DacDeemphasisControl+0x74>
110406d8:	10800060 	cmpeqi	r2,r2,1
110406dc:	10000c26 	beq	r2,zero,11040710 <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_48K: control |= ((0x03) << 1); break;
110406e0:	e0bffd0b 	ldhu	r2,-12(fp)
110406e4:	10800194 	ori	r2,r2,6
110406e8:	e0bffd0d 	sth	r2,-12(fp)
110406ec:	00000806 	br	11040710 <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_44K1: control |= ((0x02) << 1); break;
110406f0:	e0bffd0b 	ldhu	r2,-12(fp)
110406f4:	10800114 	ori	r2,r2,4
110406f8:	e0bffd0d 	sth	r2,-12(fp)
110406fc:	00000406 	br	11040710 <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_32K: control |= ((0x01) << 1); break;
11040700:	e0bffd0b 	ldhu	r2,-12(fp)
11040704:	10800094 	ori	r2,r2,2
11040708:	e0bffd0d 	sth	r2,-12(fp)
1104070c:	0001883a 	nop
    }
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
11040710:	e0bffd0b 	ldhu	r2,-12(fp)
11040714:	01000144 	movi	r4,5
11040718:	100b883a 	mov	r5,r2
1104071c:	1040de40 	call	11040de4 <aduio_RegWrite>
11040720:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;       
11040724:	e0bffe17 	ldw	r2,-8(fp)
}
11040728:	e037883a 	mov	sp,fp
1104072c:	dfc00117 	ldw	ra,4(sp)
11040730:	df000017 	ldw	fp,0(sp)
11040734:	dec00204 	addi	sp,sp,8
11040738:	f800283a 	ret

1104073c <AUDIO_DacEnableSoftMute>:

bool AUDIO_DacEnableSoftMute(bool bEnable){
1104073c:	defffb04 	addi	sp,sp,-20
11040740:	dfc00415 	stw	ra,16(sp)
11040744:	df000315 	stw	fp,12(sp)
11040748:	df000304 	addi	fp,sp,12
1104074c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[5];
11040750:	00800034 	movhi	r2,0
11040754:	108a1c04 	addi	r2,r2,10352
11040758:	1080028b 	ldhu	r2,10(r2)
1104075c:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 3;
11040760:	00800204 	movi	r2,8
11040764:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
11040768:	e0bfff17 	ldw	r2,-4(fp)
1104076c:	10000526 	beq	r2,zero,11040784 <AUDIO_DacEnableSoftMute+0x48>
        control |= mask;
11040770:	e0fffd0b 	ldhu	r3,-12(fp)
11040774:	e0bffd8b 	ldhu	r2,-10(fp)
11040778:	1884b03a 	or	r2,r3,r2
1104077c:	e0bffd0d 	sth	r2,-12(fp)
11040780:	00000606 	br	1104079c <AUDIO_DacEnableSoftMute+0x60>
    else        
        control &= ~mask;
11040784:	e0bffd8b 	ldhu	r2,-10(fp)
11040788:	0084303a 	nor	r2,zero,r2
1104078c:	1007883a 	mov	r3,r2
11040790:	e0bffd0b 	ldhu	r2,-12(fp)
11040794:	1884703a 	and	r2,r3,r2
11040798:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
1104079c:	e0bffd0b 	ldhu	r2,-12(fp)
110407a0:	01000144 	movi	r4,5
110407a4:	100b883a 	mov	r5,r2
110407a8:	1040de40 	call	11040de4 <aduio_RegWrite>
110407ac:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
110407b0:	e0bffe17 	ldw	r2,-8(fp)
}
110407b4:	e037883a 	mov	sp,fp
110407b8:	dfc00117 	ldw	ra,4(sp)
110407bc:	df000017 	ldw	fp,0(sp)
110407c0:	dec00204 	addi	sp,sp,8
110407c4:	f800283a 	ret

110407c8 <AUDIO_MicMute>:

bool AUDIO_MicMute(bool bMute){
110407c8:	defffb04 	addi	sp,sp,-20
110407cc:	dfc00415 	stw	ra,16(sp)
110407d0:	df000315 	stw	fp,12(sp)
110407d4:	df000304 	addi	fp,sp,12
110407d8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
110407dc:	00800034 	movhi	r2,0
110407e0:	108a1c04 	addi	r2,r2,10352
110407e4:	1080020b 	ldhu	r2,8(r2)
110407e8:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 1;
110407ec:	00800084 	movi	r2,2
110407f0:	e0bffd8d 	sth	r2,-10(fp)
    if (bMute)
110407f4:	e0bfff17 	ldw	r2,-4(fp)
110407f8:	10000526 	beq	r2,zero,11040810 <AUDIO_MicMute+0x48>
        control |= mask;
110407fc:	e0fffd0b 	ldhu	r3,-12(fp)
11040800:	e0bffd8b 	ldhu	r2,-10(fp)
11040804:	1884b03a 	or	r2,r3,r2
11040808:	e0bffd0d 	sth	r2,-12(fp)
1104080c:	00000606 	br	11040828 <AUDIO_MicMute+0x60>
    else        
        control &= ~mask;
11040810:	e0bffd8b 	ldhu	r2,-10(fp)
11040814:	0084303a 	nor	r2,zero,r2
11040818:	1007883a 	mov	r3,r2
1104081c:	e0bffd0b 	ldhu	r2,-12(fp)
11040820:	1884703a 	and	r2,r3,r2
11040824:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
11040828:	e0bffd0b 	ldhu	r2,-12(fp)
1104082c:	01000104 	movi	r4,4
11040830:	100b883a 	mov	r5,r2
11040834:	1040de40 	call	11040de4 <aduio_RegWrite>
11040838:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
1104083c:	e0bffe17 	ldw	r2,-8(fp)
}
11040840:	e037883a 	mov	sp,fp
11040844:	dfc00117 	ldw	ra,4(sp)
11040848:	df000017 	ldw	fp,0(sp)
1104084c:	dec00204 	addi	sp,sp,8
11040850:	f800283a 	ret

11040854 <AUDIO_LineInMute>:

bool AUDIO_LineInMute(bool bMute){
11040854:	defffa04 	addi	sp,sp,-24
11040858:	dfc00515 	stw	ra,20(sp)
1104085c:	df000415 	stw	fp,16(sp)
11040860:	df000404 	addi	fp,sp,16
11040864:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control_l, control_r;
    alt_u16 mask;
    control_l = reg_file[0];
11040868:	00800034 	movhi	r2,0
1104086c:	108a1c04 	addi	r2,r2,10352
11040870:	1080000b 	ldhu	r2,0(r2)
11040874:	e0bffd0d 	sth	r2,-12(fp)
    control_r = reg_file[1];
11040878:	00800034 	movhi	r2,0
1104087c:	108a1c04 	addi	r2,r2,10352
11040880:	1080008b 	ldhu	r2,2(r2)
11040884:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 7;
11040888:	00802004 	movi	r2,128
1104088c:	e0bffe0d 	sth	r2,-8(fp)
    if (bMute){
11040890:	e0bfff17 	ldw	r2,-4(fp)
11040894:	10000926 	beq	r2,zero,110408bc <AUDIO_LineInMute+0x68>
        control_l |= mask;
11040898:	e0fffd0b 	ldhu	r3,-12(fp)
1104089c:	e0bffe0b 	ldhu	r2,-8(fp)
110408a0:	1884b03a 	or	r2,r3,r2
110408a4:	e0bffd0d 	sth	r2,-12(fp)
        control_r |= mask;
110408a8:	e0fffd8b 	ldhu	r3,-10(fp)
110408ac:	e0bffe0b 	ldhu	r2,-8(fp)
110408b0:	1884b03a 	or	r2,r3,r2
110408b4:	e0bffd8d 	sth	r2,-10(fp)
110408b8:	00000c06 	br	110408ec <AUDIO_LineInMute+0x98>
    }else{        
        control_l &= ~mask;
110408bc:	e0bffe0b 	ldhu	r2,-8(fp)
110408c0:	0084303a 	nor	r2,zero,r2
110408c4:	1007883a 	mov	r3,r2
110408c8:	e0bffd0b 	ldhu	r2,-12(fp)
110408cc:	1884703a 	and	r2,r3,r2
110408d0:	e0bffd0d 	sth	r2,-12(fp)
        control_r &= ~mask;
110408d4:	e0bffe0b 	ldhu	r2,-8(fp)
110408d8:	0084303a 	nor	r2,zero,r2
110408dc:	1007883a 	mov	r3,r2
110408e0:	e0bffd8b 	ldhu	r2,-10(fp)
110408e4:	1884703a 	and	r2,r3,r2
110408e8:	e0bffd8d 	sth	r2,-10(fp)
    }        
    bSuccess = aduio_RegWrite(0, control_l);  // Left Line In: set left line in volume
110408ec:	e0bffd0b 	ldhu	r2,-12(fp)
110408f0:	0009883a 	mov	r4,zero
110408f4:	100b883a 	mov	r5,r2
110408f8:	1040de40 	call	11040de4 <aduio_RegWrite>
110408fc:	e0bffc15 	stw	r2,-16(fp)
    if (bSuccess)
11040900:	e0bffc17 	ldw	r2,-16(fp)
11040904:	10000526 	beq	r2,zero,1104091c <AUDIO_LineInMute+0xc8>
        bSuccess = aduio_RegWrite(1, control_r);  // Left Line In: set left line in volume
11040908:	e0bffd8b 	ldhu	r2,-10(fp)
1104090c:	01000044 	movi	r4,1
11040910:	100b883a 	mov	r5,r2
11040914:	1040de40 	call	11040de4 <aduio_RegWrite>
11040918:	e0bffc15 	stw	r2,-16(fp)
    return bSuccess;        
1104091c:	e0bffc17 	ldw	r2,-16(fp)
}
11040920:	e037883a 	mov	sp,fp
11040924:	dfc00117 	ldw	ra,4(sp)
11040928:	df000017 	ldw	fp,0(sp)
1104092c:	dec00204 	addi	sp,sp,8
11040930:	f800283a 	ret

11040934 <AUDIO_SetInputSource>:


bool AUDIO_SetInputSource(alt_u8 InputSource){
11040934:	defffb04 	addi	sp,sp,-20
11040938:	dfc00415 	stw	ra,16(sp)
1104093c:	df000315 	stw	fp,12(sp)
11040940:	df000304 	addi	fp,sp,12
11040944:	2005883a 	mov	r2,r4
11040948:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
1104094c:	00800034 	movhi	r2,0
11040950:	108a1c04 	addi	r2,r2,10352
11040954:	1080020b 	ldhu	r2,8(r2)
11040958:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 2;
1104095c:	00800104 	movi	r2,4
11040960:	e0bffd8d 	sth	r2,-10(fp)
    if (InputSource == SOURCE_MIC)
11040964:	e0bfff03 	ldbu	r2,-4(fp)
11040968:	1000051e 	bne	r2,zero,11040980 <AUDIO_SetInputSource+0x4c>
        control |= mask;
1104096c:	e0fffd0b 	ldhu	r3,-12(fp)
11040970:	e0bffd8b 	ldhu	r2,-10(fp)
11040974:	1884b03a 	or	r2,r3,r2
11040978:	e0bffd0d 	sth	r2,-12(fp)
1104097c:	00000606 	br	11040998 <AUDIO_SetInputSource+0x64>
    else        
        control &= ~mask;
11040980:	e0bffd8b 	ldhu	r2,-10(fp)
11040984:	0084303a 	nor	r2,zero,r2
11040988:	1007883a 	mov	r3,r2
1104098c:	e0bffd0b 	ldhu	r2,-12(fp)
11040990:	1884703a 	and	r2,r3,r2
11040994:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
11040998:	e0bffd0b 	ldhu	r2,-12(fp)
1104099c:	01000104 	movi	r4,4
110409a0:	100b883a 	mov	r5,r2
110409a4:	1040de40 	call	11040de4 <aduio_RegWrite>
110409a8:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;       
110409ac:	e0bffe17 	ldw	r2,-8(fp)
}
110409b0:	e037883a 	mov	sp,fp
110409b4:	dfc00117 	ldw	ra,4(sp)
110409b8:	df000017 	ldw	fp,0(sp)
110409bc:	dec00204 	addi	sp,sp,8
110409c0:	f800283a 	ret

110409c4 <AUDIO_SetSampleRate>:

// See datasheet page 39
bool AUDIO_SetSampleRate(alt_u8 SampleRate){
110409c4:	defffb04 	addi	sp,sp,-20
110409c8:	dfc00415 	stw	ra,16(sp)
110409cc:	df000315 	stw	fp,12(sp)
110409d0:	df000304 	addi	fp,sp,12
110409d4:	2005883a 	mov	r2,r4
110409d8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = 0;
110409dc:	e03ffd0d 	sth	zero,-12(fp)

    switch(SampleRate){
110409e0:	e0bfff03 	ldbu	r2,-4(fp)
110409e4:	10c001e8 	cmpgeui	r3,r2,7
110409e8:	1800221e 	bne	r3,zero,11040a74 <AUDIO_SetSampleRate+0xb0>
110409ec:	1085883a 	add	r2,r2,r2
110409f0:	1087883a 	add	r3,r2,r2
110409f4:	00844134 	movhi	r2,4356
110409f8:	10828204 	addi	r2,r2,2568
110409fc:	1885883a 	add	r2,r3,r2
11040a00:	10800017 	ldw	r2,0(r2)
11040a04:	1000683a 	jmp	r2
11040a08:	11040a24 	muli	r4,r2,4136
11040a0c:	11040a2c 	andhi	r4,r2,4136
11040a10:	11040a38 	rdprs	r4,r2,4136
11040a14:	11040a44 	addi	r4,r2,4137
11040a18:	11040a50 	cmplti	r4,r2,4137
11040a1c:	11040a5c 	xori	r4,r2,4137
11040a20:	11040a68 	cmpgeui	r4,r2,4137
         // MCLK = 18.432
        case RATE_ADC48K_DAC48K: control = (0x0) << 2; break;
11040a24:	e03ffd0d 	sth	zero,-12(fp)
11040a28:	00001206 	br	11040a74 <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC48K_DAC8K: control = (0x1) << 2; break;
11040a2c:	00800104 	movi	r2,4
11040a30:	e0bffd0d 	sth	r2,-12(fp)
11040a34:	00000f06 	br	11040a74 <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC8K_DAC48K: control = (0x2) << 2; break;
11040a38:	00800204 	movi	r2,8
11040a3c:	e0bffd0d 	sth	r2,-12(fp)
11040a40:	00000c06 	br	11040a74 <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC8K_DAC8K: control = (0x3) << 2; break;
11040a44:	00800304 	movi	r2,12
11040a48:	e0bffd0d 	sth	r2,-12(fp)
11040a4c:	00000906 	br	11040a74 <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC32K_DAC32K: control = (0x6) << 2; break;
11040a50:	00800604 	movi	r2,24
11040a54:	e0bffd0d 	sth	r2,-12(fp)
11040a58:	00000606 	br	11040a74 <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC96K_DAC96K: control = (0x7) << 2; break;
11040a5c:	00800704 	movi	r2,28
11040a60:	e0bffd0d 	sth	r2,-12(fp)
11040a64:	00000306 	br	11040a74 <AUDIO_SetSampleRate+0xb0>
        case RATE_ADC44K1_DAC44K1: control = (0x8) << 2; break;
11040a68:	00800804 	movi	r2,32
11040a6c:	e0bffd0d 	sth	r2,-12(fp)
11040a70:	0001883a 	nop
        // MCLK = 11.2896
      //  case RATE_ADC44K1_DAC8K: control = (0x9) << 2; break;
      //  case RATE_ADC8K_DAC44K1: control = (0xA) << 2; break;
    }
    control |= 0x02; // BOSR=1 (384fs = 384*48k = 18.432M)
11040a74:	e0bffd0b 	ldhu	r2,-12(fp)
11040a78:	10800094 	ori	r2,r2,2
11040a7c:	e0bffd0d 	sth	r2,-12(fp)
        
    bSuccess = aduio_RegWrite(8, control);  // Left Line In: set left line in volume
11040a80:	e0bffd0b 	ldhu	r2,-12(fp)
11040a84:	01000204 	movi	r4,8
11040a88:	100b883a 	mov	r5,r2
11040a8c:	1040de40 	call	11040de4 <aduio_RegWrite>
11040a90:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
11040a94:	e0bffe17 	ldw	r2,-8(fp)
}
11040a98:	e037883a 	mov	sp,fp
11040a9c:	dfc00117 	ldw	ra,4(sp)
11040aa0:	df000017 	ldw	fp,0(sp)
11040aa4:	dec00204 	addi	sp,sp,8
11040aa8:	f800283a 	ret

11040aac <AUDIO_SetLineInVol>:





bool AUDIO_SetLineInVol(alt_u16 l_vol, alt_u16 r_vol){
11040aac:	defffa04 	addi	sp,sp,-24
11040ab0:	dfc00515 	stw	ra,20(sp)
11040ab4:	df000415 	stw	fp,16(sp)
11040ab8:	df000404 	addi	fp,sp,16
11040abc:	2007883a 	mov	r3,r4
11040ac0:	2805883a 	mov	r2,r5
11040ac4:	e0fffe0d 	sth	r3,-8(fp)
11040ac8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    
    // left
    control = reg_file[0];
11040acc:	00800034 	movhi	r2,0
11040ad0:	108a1c04 	addi	r2,r2,10352
11040ad4:	1080000b 	ldhu	r2,0(r2)
11040ad8:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFFC0;
11040adc:	e0fffd0b 	ldhu	r3,-12(fp)
11040ae0:	00bff004 	movi	r2,-64
11040ae4:	1884703a 	and	r2,r3,r2
11040ae8:	e0bffd0d 	sth	r2,-12(fp)
    control += l_vol & 0x3F;
11040aec:	e0bffe0b 	ldhu	r2,-8(fp)
11040af0:	10800fcc 	andi	r2,r2,63
11040af4:	1007883a 	mov	r3,r2
11040af8:	e0bffd0b 	ldhu	r2,-12(fp)
11040afc:	1885883a 	add	r2,r3,r2
11040b00:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(0, control);
11040b04:	e0bffd0b 	ldhu	r2,-12(fp)
11040b08:	0009883a 	mov	r4,zero
11040b0c:	100b883a 	mov	r5,r2
11040b10:	1040de40 	call	11040de4 <aduio_RegWrite>
11040b14:	e0bffc15 	stw	r2,-16(fp)
    
    if (bSuccess){
11040b18:	e0bffc17 	ldw	r2,-16(fp)
11040b1c:	10001326 	beq	r2,zero,11040b6c <AUDIO_SetLineInVol+0xc0>
        // right
        control = reg_file[1];
11040b20:	00800034 	movhi	r2,0
11040b24:	108a1c04 	addi	r2,r2,10352
11040b28:	1080008b 	ldhu	r2,2(r2)
11040b2c:	e0bffd0d 	sth	r2,-12(fp)
        control &= 0xFFC0;
11040b30:	e0fffd0b 	ldhu	r3,-12(fp)
11040b34:	00bff004 	movi	r2,-64
11040b38:	1884703a 	and	r2,r3,r2
11040b3c:	e0bffd0d 	sth	r2,-12(fp)
        control += r_vol & 0x3F;
11040b40:	e0bfff0b 	ldhu	r2,-4(fp)
11040b44:	10800fcc 	andi	r2,r2,63
11040b48:	1007883a 	mov	r3,r2
11040b4c:	e0bffd0b 	ldhu	r2,-12(fp)
11040b50:	1885883a 	add	r2,r3,r2
11040b54:	e0bffd0d 	sth	r2,-12(fp)
        bSuccess = aduio_RegWrite(1, control);        
11040b58:	e0bffd0b 	ldhu	r2,-12(fp)
11040b5c:	01000044 	movi	r4,1
11040b60:	100b883a 	mov	r5,r2
11040b64:	1040de40 	call	11040de4 <aduio_RegWrite>
11040b68:	e0bffc15 	stw	r2,-16(fp)
    }
    
    AUDIO_DEBUG(("[AUDIO] set Line-In vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));        
11040b6c:	e17ffe0b 	ldhu	r5,-8(fp)
11040b70:	e0ffff0b 	ldhu	r3,-4(fp)
11040b74:	e0bffc17 	ldw	r2,-16(fp)
11040b78:	10000326 	beq	r2,zero,11040b88 <AUDIO_SetLineInVol+0xdc>
11040b7c:	00800034 	movhi	r2,0
11040b80:	10800604 	addi	r2,r2,24
11040b84:	00000206 	br	11040b90 <AUDIO_SetLineInVol+0xe4>
11040b88:	00800034 	movhi	r2,0
11040b8c:	10800804 	addi	r2,r2,32
11040b90:	01000034 	movhi	r4,0
11040b94:	21001e04 	addi	r4,r4,120
11040b98:	180d883a 	mov	r6,r3
11040b9c:	100f883a 	mov	r7,r2
11040ba0:	10419600 	call	11041960 <myprintf>
    return bSuccess;
11040ba4:	e0bffc17 	ldw	r2,-16(fp)
}
11040ba8:	e037883a 	mov	sp,fp
11040bac:	dfc00117 	ldw	ra,4(sp)
11040bb0:	df000017 	ldw	fp,0(sp)
11040bb4:	dec00204 	addi	sp,sp,8
11040bb8:	f800283a 	ret

11040bbc <AUDIO_SetLineOutVol>:

bool AUDIO_SetLineOutVol(alt_u16 l_vol, alt_u16 r_vol){
11040bbc:	defffa04 	addi	sp,sp,-24
11040bc0:	dfc00515 	stw	ra,20(sp)
11040bc4:	df000415 	stw	fp,16(sp)
11040bc8:	df000404 	addi	fp,sp,16
11040bcc:	2007883a 	mov	r3,r4
11040bd0:	2805883a 	mov	r2,r5
11040bd4:	e0fffe0d 	sth	r3,-8(fp)
11040bd8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;

 
    // left
    control = reg_file[2];
11040bdc:	00800034 	movhi	r2,0
11040be0:	108a1c04 	addi	r2,r2,10352
11040be4:	1080010b 	ldhu	r2,4(r2)
11040be8:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFF80;
11040bec:	e0fffd0b 	ldhu	r3,-12(fp)
11040bf0:	00bfe004 	movi	r2,-128
11040bf4:	1884703a 	and	r2,r3,r2
11040bf8:	e0bffd0d 	sth	r2,-12(fp)
    control += l_vol & 0x7F;
11040bfc:	e0bffe0b 	ldhu	r2,-8(fp)
11040c00:	10801fcc 	andi	r2,r2,127
11040c04:	1007883a 	mov	r3,r2
11040c08:	e0bffd0b 	ldhu	r2,-12(fp)
11040c0c:	1885883a 	add	r2,r3,r2
11040c10:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(2, control);
11040c14:	e0bffd0b 	ldhu	r2,-12(fp)
11040c18:	01000084 	movi	r4,2
11040c1c:	100b883a 	mov	r5,r2
11040c20:	1040de40 	call	11040de4 <aduio_RegWrite>
11040c24:	e0bffc15 	stw	r2,-16(fp)
    
    if (bSuccess){
11040c28:	e0bffc17 	ldw	r2,-16(fp)
11040c2c:	10001326 	beq	r2,zero,11040c7c <AUDIO_SetLineOutVol+0xc0>
        // right
        control = reg_file[3];
11040c30:	00800034 	movhi	r2,0
11040c34:	108a1c04 	addi	r2,r2,10352
11040c38:	1080018b 	ldhu	r2,6(r2)
11040c3c:	e0bffd0d 	sth	r2,-12(fp)
        control &= 0xFF80;
11040c40:	e0fffd0b 	ldhu	r3,-12(fp)
11040c44:	00bfe004 	movi	r2,-128
11040c48:	1884703a 	and	r2,r3,r2
11040c4c:	e0bffd0d 	sth	r2,-12(fp)
        control += r_vol & 0x7F;
11040c50:	e0bfff0b 	ldhu	r2,-4(fp)
11040c54:	10801fcc 	andi	r2,r2,127
11040c58:	1007883a 	mov	r3,r2
11040c5c:	e0bffd0b 	ldhu	r2,-12(fp)
11040c60:	1885883a 	add	r2,r3,r2
11040c64:	e0bffd0d 	sth	r2,-12(fp)
        bSuccess = aduio_RegWrite(3, control);        
11040c68:	e0bffd0b 	ldhu	r2,-12(fp)
11040c6c:	010000c4 	movi	r4,3
11040c70:	100b883a 	mov	r5,r2
11040c74:	1040de40 	call	11040de4 <aduio_RegWrite>
11040c78:	e0bffc15 	stw	r2,-16(fp)
    }    
    
    AUDIO_DEBUG(("[AUDIO] set Line-Out vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));
11040c7c:	e17ffe0b 	ldhu	r5,-8(fp)
11040c80:	e0ffff0b 	ldhu	r3,-4(fp)
11040c84:	e0bffc17 	ldw	r2,-16(fp)
11040c88:	10000326 	beq	r2,zero,11040c98 <AUDIO_SetLineOutVol+0xdc>
11040c8c:	00800034 	movhi	r2,0
11040c90:	10800604 	addi	r2,r2,24
11040c94:	00000206 	br	11040ca0 <AUDIO_SetLineOutVol+0xe4>
11040c98:	00800034 	movhi	r2,0
11040c9c:	10800804 	addi	r2,r2,32
11040ca0:	01000034 	movhi	r4,0
11040ca4:	21002704 	addi	r4,r4,156
11040ca8:	180d883a 	mov	r6,r3
11040cac:	100f883a 	mov	r7,r2
11040cb0:	10419600 	call	11041960 <myprintf>
    
    return bSuccess;
11040cb4:	e0bffc17 	ldw	r2,-16(fp)
}
11040cb8:	e037883a 	mov	sp,fp
11040cbc:	dfc00117 	ldw	ra,4(sp)
11040cc0:	df000017 	ldw	fp,0(sp)
11040cc4:	dec00204 	addi	sp,sp,8
11040cc8:	f800283a 	ret

11040ccc <AUDIO_EnableByPass>:


bool AUDIO_EnableByPass(bool bEnable){
11040ccc:	defffb04 	addi	sp,sp,-20
11040cd0:	dfc00415 	stw	ra,16(sp)
11040cd4:	df000315 	stw	fp,12(sp)
11040cd8:	df000304 	addi	fp,sp,12
11040cdc:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
11040ce0:	00800034 	movhi	r2,0
11040ce4:	108a1c04 	addi	r2,r2,10352
11040ce8:	1080020b 	ldhu	r2,8(r2)
11040cec:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 3;
11040cf0:	00800204 	movi	r2,8
11040cf4:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
11040cf8:	e0bfff17 	ldw	r2,-4(fp)
11040cfc:	10000526 	beq	r2,zero,11040d14 <AUDIO_EnableByPass+0x48>
        control |= mask;
11040d00:	e0fffd0b 	ldhu	r3,-12(fp)
11040d04:	e0bffd8b 	ldhu	r2,-10(fp)
11040d08:	1884b03a 	or	r2,r3,r2
11040d0c:	e0bffd0d 	sth	r2,-12(fp)
11040d10:	00000606 	br	11040d2c <AUDIO_EnableByPass+0x60>
    else        
        control &= ~mask;
11040d14:	e0bffd8b 	ldhu	r2,-10(fp)
11040d18:	0084303a 	nor	r2,zero,r2
11040d1c:	1007883a 	mov	r3,r2
11040d20:	e0bffd0b 	ldhu	r2,-12(fp)
11040d24:	1884703a 	and	r2,r3,r2
11040d28:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control); 
11040d2c:	e0bffd0b 	ldhu	r2,-12(fp)
11040d30:	01000104 	movi	r4,4
11040d34:	100b883a 	mov	r5,r2
11040d38:	1040de40 	call	11040de4 <aduio_RegWrite>
11040d3c:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;  	
11040d40:	e0bffe17 	ldw	r2,-8(fp)
}
11040d44:	e037883a 	mov	sp,fp
11040d48:	dfc00117 	ldw	ra,4(sp)
11040d4c:	df000017 	ldw	fp,0(sp)
11040d50:	dec00204 	addi	sp,sp,8
11040d54:	f800283a 	ret

11040d58 <AUDIO_EnableSiteTone>:

bool AUDIO_EnableSiteTone(bool bEnable){
11040d58:	defffb04 	addi	sp,sp,-20
11040d5c:	dfc00415 	stw	ra,16(sp)
11040d60:	df000315 	stw	fp,12(sp)
11040d64:	df000304 	addi	fp,sp,12
11040d68:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
11040d6c:	00800034 	movhi	r2,0
11040d70:	108a1c04 	addi	r2,r2,10352
11040d74:	1080020b 	ldhu	r2,8(r2)
11040d78:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 5;
11040d7c:	00800804 	movi	r2,32
11040d80:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
11040d84:	e0bfff17 	ldw	r2,-4(fp)
11040d88:	10000526 	beq	r2,zero,11040da0 <AUDIO_EnableSiteTone+0x48>
        control |= mask;
11040d8c:	e0fffd0b 	ldhu	r3,-12(fp)
11040d90:	e0bffd8b 	ldhu	r2,-10(fp)
11040d94:	1884b03a 	or	r2,r3,r2
11040d98:	e0bffd0d 	sth	r2,-12(fp)
11040d9c:	00000606 	br	11040db8 <AUDIO_EnableSiteTone+0x60>
    else        
        control &= ~mask;
11040da0:	e0bffd8b 	ldhu	r2,-10(fp)
11040da4:	0084303a 	nor	r2,zero,r2
11040da8:	1007883a 	mov	r3,r2
11040dac:	e0bffd0b 	ldhu	r2,-12(fp)
11040db0:	1884703a 	and	r2,r3,r2
11040db4:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control); 
11040db8:	e0bffd0b 	ldhu	r2,-12(fp)
11040dbc:	01000104 	movi	r4,4
11040dc0:	100b883a 	mov	r5,r2
11040dc4:	1040de40 	call	11040de4 <aduio_RegWrite>
11040dc8:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
11040dcc:	e0bffe17 	ldw	r2,-8(fp)
}
11040dd0:	e037883a 	mov	sp,fp
11040dd4:	dfc00117 	ldw	ra,4(sp)
11040dd8:	df000017 	ldw	fp,0(sp)
11040ddc:	dec00204 	addi	sp,sp,8
11040de0:	f800283a 	ret

11040de4 <aduio_RegWrite>:

/////////////////////////////////////////////////////////////////////////
///////////// Interla function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool aduio_RegWrite(alt_u8 reg_index, alt_u16 data16){
11040de4:	defff904 	addi	sp,sp,-28
11040de8:	dfc00615 	stw	ra,24(sp)
11040dec:	df000515 	stw	fp,20(sp)
11040df0:	df000504 	addi	fp,sp,20
11040df4:	2007883a 	mov	r3,r4
11040df8:	2805883a 	mov	r2,r5
11040dfc:	e0fffe05 	stb	r3,-8(fp)
11040e00:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 data, control;
    if (reg_index <= 10)
11040e04:	e0bffe03 	ldbu	r2,-8(fp)
11040e08:	108002e8 	cmpgeui	r2,r2,11
11040e0c:	1000071e 	bne	r2,zero,11040e2c <aduio_RegWrite+0x48>
        reg_file[reg_index] = data16;
11040e10:	e0bffe03 	ldbu	r2,-8(fp)
11040e14:	00c00034 	movhi	r3,0
11040e18:	18ca1c04 	addi	r3,r3,10352
11040e1c:	1085883a 	add	r2,r2,r2
11040e20:	1885883a 	add	r2,r3,r2
11040e24:	e0ffff0b 	ldhu	r3,-4(fp)
11040e28:	10c0000d 	sth	r3,0(r2)
    data = data16 & 0xFF;
11040e2c:	e0bfff0b 	ldhu	r2,-4(fp)
11040e30:	e0bffc05 	stb	r2,-16(fp)
    control = (reg_index << 1) & 0xFE;
11040e34:	e0bffe03 	ldbu	r2,-8(fp)
11040e38:	1085883a 	add	r2,r2,r2
11040e3c:	e0bffc45 	stb	r2,-15(fp)
    control |= ((data16 >> 8) & 0x01);
11040e40:	e0bfff0b 	ldhu	r2,-4(fp)
11040e44:	1004d23a 	srli	r2,r2,8
11040e48:	1080004c 	andi	r2,r2,1
11040e4c:	1007883a 	mov	r3,r2
11040e50:	e0bffc43 	ldbu	r2,-15(fp)
11040e54:	1884b03a 	or	r2,r3,r2
11040e58:	e0bffc45 	stb	r2,-15(fp)
    AUDIO_DEBUG(("[AUDIO] set audio reg[%02d] = %04Xh\r\n", reg_index, data16));
11040e5c:	e0fffe03 	ldbu	r3,-8(fp)
11040e60:	e0bfff0b 	ldhu	r2,-4(fp)
11040e64:	01000034 	movhi	r4,0
11040e68:	21003104 	addi	r4,r4,196
11040e6c:	180b883a 	mov	r5,r3
11040e70:	100d883a 	mov	r6,r2
11040e74:	10419600 	call	11041960 <myprintf>
    bSuccess = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, I2C_AUDIO_ADDR, control, data);
11040e78:	e0bffc43 	ldbu	r2,-15(fp)
11040e7c:	e0fffc03 	ldbu	r3,-16(fp)
11040e80:	d8c00015 	stw	r3,0(sp)
11040e84:	01040034 	movhi	r4,4096
11040e88:	21000404 	addi	r4,r4,16
11040e8c:	01440034 	movhi	r5,4096
11040e90:	01800d04 	movi	r6,52
11040e94:	100f883a 	mov	r7,r2
11040e98:	10410bc0 	call	110410bc <I2C_Write>
11040e9c:	e0bffd15 	stw	r2,-12(fp)
    if (!bSuccess) 
11040ea0:	e0bffd17 	ldw	r2,-12(fp)
11040ea4:	1000031e 	bne	r2,zero,11040eb4 <aduio_RegWrite+0xd0>
        AUDIO_DEBUG(("[AUDIO] write reg fail!!!!\r\n"));
11040ea8:	01000034 	movhi	r4,0
11040eac:	21003b04 	addi	r4,r4,236
11040eb0:	10419600 	call	11041960 <myprintf>
    usleep(50*1000);  // wait audio chip read        
11040eb4:	0130d414 	movui	r4,50000
11040eb8:	104cef00 	call	1104cef0 <usleep>
    return bSuccess;        
11040ebc:	e0bffd17 	ldw	r2,-12(fp)
}
11040ec0:	e037883a 	mov	sp,fp
11040ec4:	dfc00117 	ldw	ra,4(sp)
11040ec8:	df000017 	ldw	fp,0(sp)
11040ecc:	dec00204 	addi	sp,sp,8
11040ed0:	f800283a 	ret

11040ed4 <aduio_RegRead>:

bool  aduio_RegRead(alt_u8 reg_index){
11040ed4:	defff904 	addi	sp,sp,-28
11040ed8:	dfc00615 	stw	ra,24(sp)
11040edc:	df000515 	stw	fp,20(sp)
11040ee0:	df000504 	addi	fp,sp,20
11040ee4:	2005883a 	mov	r2,r4
11040ee8:	e0bfff05 	stb	r2,-4(fp)
	bool bSuccess;
    alt_u8 control;
    alt_u16 *data;
    control = (reg_index << 1) & 0xFE;
11040eec:	e0bfff03 	ldbu	r2,-4(fp)
11040ef0:	1085883a 	add	r2,r2,r2
11040ef4:	e0bffc05 	stb	r2,-16(fp)
    bSuccess = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, I2C_AUDIO_ADDR, control, data);
11040ef8:	e0bffc03 	ldbu	r2,-16(fp)
11040efc:	e0fffd17 	ldw	r3,-12(fp)
11040f00:	d8c00015 	stw	r3,0(sp)
11040f04:	01040034 	movhi	r4,4096
11040f08:	21000404 	addi	r4,r4,16
11040f0c:	01440034 	movhi	r5,4096
11040f10:	01800d04 	movi	r6,52
11040f14:	100f883a 	mov	r7,r2
11040f18:	10411b80 	call	110411b8 <I2C_Read>
11040f1c:	e0bffe15 	stw	r2,-8(fp)
    if (!bSuccess)
11040f20:	e0bffe17 	ldw	r2,-8(fp)
11040f24:	1000031e 	bne	r2,zero,11040f34 <aduio_RegRead+0x60>
            AUDIO_DEBUG(("[AUDIO] read reg fail!!!!\r\n"));
11040f28:	01000034 	movhi	r4,0
11040f2c:	21004304 	addi	r4,r4,268
11040f30:	10419600 	call	11041960 <myprintf>
    AUDIO_DEBUG(("[AUDIO] read audio reg[%02d] = %04Xh\r\n", reg_index, *data));
11040f34:	e0ffff03 	ldbu	r3,-4(fp)
11040f38:	e0bffd17 	ldw	r2,-12(fp)
11040f3c:	1080000b 	ldhu	r2,0(r2)
11040f40:	10bfffcc 	andi	r2,r2,65535
11040f44:	01000034 	movhi	r4,0
11040f48:	21004a04 	addi	r4,r4,296
11040f4c:	180b883a 	mov	r5,r3
11040f50:	100d883a 	mov	r6,r2
11040f54:	10419600 	call	11041960 <myprintf>
    usleep(50*1000);
11040f58:	0130d414 	movui	r4,50000
11040f5c:	104cef00 	call	1104cef0 <usleep>
    return bSuccess;
11040f60:	e0bffe17 	ldw	r2,-8(fp)
}
11040f64:	e037883a 	mov	sp,fp
11040f68:	dfc00117 	ldw	ra,4(sp)
11040f6c:	df000017 	ldw	fp,0(sp)
11040f70:	dec00204 	addi	sp,sp,8
11040f74:	f800283a 	ret

11040f78 <AUDIO_DacFifoNotFull>:

/////////////////////////////////////////////////////////////////////////
///////////// Audio Play & Recor ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// check whether the dac-fifo is full.
bool AUDIO_DacFifoNotFull(void){
11040f78:	defffe04 	addi	sp,sp,-8
11040f7c:	df000115 	stw	fp,4(sp)
11040f80:	df000104 	addi	fp,sp,4
    bool bReady;
    bReady = AUDIO_DAC_FULL()?FALSE:TRUE;
11040f84:	00844234 	movhi	r2,4360
11040f88:	10841504 	addi	r2,r2,4180
11040f8c:	10800037 	ldwio	r2,0(r2)
11040f90:	1080004c 	andi	r2,r2,1
11040f94:	1005003a 	cmpeq	r2,r2,zero
11040f98:	10803fcc 	andi	r2,r2,255
11040f9c:	e0bfff15 	stw	r2,-4(fp)
    return bReady;
11040fa0:	e0bfff17 	ldw	r2,-4(fp)
}
11040fa4:	e037883a 	mov	sp,fp
11040fa8:	df000017 	ldw	fp,0(sp)
11040fac:	dec00104 	addi	sp,sp,4
11040fb0:	f800283a 	ret

11040fb4 <AUDIO_DacFifoSetData>:

// call AUDIO_PlayIsReady to make sure the fifo is not full before call this function 
void AUDIO_DacFifoSetData(short ch_left, short ch_right){
11040fb4:	defffd04 	addi	sp,sp,-12
11040fb8:	df000215 	stw	fp,8(sp)
11040fbc:	df000204 	addi	fp,sp,8
11040fc0:	2007883a 	mov	r3,r4
11040fc4:	2805883a 	mov	r2,r5
11040fc8:	e0fffe0d 	sth	r3,-8(fp)
11040fcc:	e0bfff0d 	sth	r2,-4(fp)
    AUDIO_DAC_WRITE_L(ch_left);
11040fd0:	e0fffe0f 	ldh	r3,-8(fp)
11040fd4:	00844234 	movhi	r2,4360
11040fd8:	10841004 	addi	r2,r2,4160
11040fdc:	10c00035 	stwio	r3,0(r2)
    AUDIO_DAC_WRITE_R(ch_right);
11040fe0:	e0ffff0f 	ldh	r3,-4(fp)
11040fe4:	00844234 	movhi	r2,4360
11040fe8:	10841104 	addi	r2,r2,4164
11040fec:	10c00035 	stwio	r3,0(r2)
}
11040ff0:	e037883a 	mov	sp,fp
11040ff4:	df000017 	ldw	fp,0(sp)
11040ff8:	dec00104 	addi	sp,sp,4
11040ffc:	f800283a 	ret

11041000 <AUDIO_AdcFifoNotEmpty>:

// wheck whether there is data available in adc-fifo
bool AUDIO_AdcFifoNotEmpty(void){
11041000:	defffe04 	addi	sp,sp,-8
11041004:	df000115 	stw	fp,4(sp)
11041008:	df000104 	addi	fp,sp,4
    bool bReady;
    bReady = AUDIO_ADC_EMPTY()?FALSE:TRUE;
1104100c:	00844234 	movhi	r2,4360
11041010:	10841504 	addi	r2,r2,4180
11041014:	10800037 	ldwio	r2,0(r2)
11041018:	1080008c 	andi	r2,r2,2
1104101c:	1005003a 	cmpeq	r2,r2,zero
11041020:	10803fcc 	andi	r2,r2,255
11041024:	e0bfff15 	stw	r2,-4(fp)
    return bReady;
11041028:	e0bfff17 	ldw	r2,-4(fp)
}
1104102c:	e037883a 	mov	sp,fp
11041030:	df000017 	ldw	fp,0(sp)
11041034:	dec00104 	addi	sp,sp,4
11041038:	f800283a 	ret

1104103c <AUDIO_AdcFifoGetData>:


// make sure the data is available before call this fucntion
void AUDIO_AdcFifoGetData(short *pch_left, short *pch_right){
1104103c:	defffd04 	addi	sp,sp,-12
11041040:	df000215 	stw	fp,8(sp)
11041044:	df000204 	addi	fp,sp,8
11041048:	e13ffe15 	stw	r4,-8(fp)
1104104c:	e17fff15 	stw	r5,-4(fp)
    *pch_left = AUDIO_ADC_READ_L();
11041050:	00844234 	movhi	r2,4360
11041054:	10841204 	addi	r2,r2,4168
11041058:	10800037 	ldwio	r2,0(r2)
1104105c:	1007883a 	mov	r3,r2
11041060:	e0bffe17 	ldw	r2,-8(fp)
11041064:	10c0000d 	sth	r3,0(r2)
    *pch_right = AUDIO_ADC_READ_R();
11041068:	00844234 	movhi	r2,4360
1104106c:	10841304 	addi	r2,r2,4172
11041070:	10800037 	ldwio	r2,0(r2)
11041074:	1007883a 	mov	r3,r2
11041078:	e0bfff17 	ldw	r2,-4(fp)
1104107c:	10c0000d 	sth	r3,0(r2)
    
}
11041080:	e037883a 	mov	sp,fp
11041084:	df000017 	ldw	fp,0(sp)
11041088:	dec00104 	addi	sp,sp,4
1104108c:	f800283a 	ret

11041090 <AUDIO_FifoClear>:

void AUDIO_FifoClear(void){
11041090:	deffff04 	addi	sp,sp,-4
11041094:	df000015 	stw	fp,0(sp)
11041098:	d839883a 	mov	fp,sp
    AUDIO_FIFO_CLEAR();
1104109c:	00c00044 	movi	r3,1
110410a0:	00844234 	movhi	r2,4360
110410a4:	10841404 	addi	r2,r2,4176
110410a8:	10c00035 	stwio	r3,0(r2)
}
110410ac:	e037883a 	mov	sp,fp
110410b0:	df000017 	ldw	fp,0(sp)
110410b4:	dec00104 	addi	sp,sp,4
110410b8:	f800283a 	ret

110410bc <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
110410bc:	defff804 	addi	sp,sp,-32
110410c0:	dfc00715 	stw	ra,28(sp)
110410c4:	df000615 	stw	fp,24(sp)
110410c8:	df000604 	addi	fp,sp,24
110410cc:	e13ffb15 	stw	r4,-20(fp)
110410d0:	e17ffc15 	stw	r5,-16(fp)
110410d4:	3007883a 	mov	r3,r6
110410d8:	3805883a 	mov	r2,r7
110410dc:	e1000217 	ldw	r4,8(fp)
110410e0:	e0fffd05 	stb	r3,-12(fp)
110410e4:	e0bffe05 	stb	r2,-8(fp)
110410e8:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
110410ec:	00800044 	movi	r2,1
110410f0:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
110410f4:	e13ffb17 	ldw	r4,-20(fp)
110410f8:	e17ffc17 	ldw	r5,-16(fp)
110410fc:	10414b80 	call	110414b8 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
11041100:	e0bffd03 	ldbu	r2,-12(fp)
11041104:	10803fcc 	andi	r2,r2,255
11041108:	e13ffb17 	ldw	r4,-20(fp)
1104110c:	e17ffc17 	ldw	r5,-16(fp)
11041110:	100d883a 	mov	r6,r2
11041114:	10415ac0 	call	110415ac <i2c_write>
11041118:	1000041e 	bne	r2,zero,1104112c <I2C_Write+0x70>
        bSuccess = FALSE;
1104111c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
11041120:	01000034 	movhi	r4,0
11041124:	21005404 	addi	r4,r4,336
11041128:	10419600 	call	11041960 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
1104112c:	e0bffa17 	ldw	r2,-24(fp)
11041130:	10000a26 	beq	r2,zero,1104115c <I2C_Write+0xa0>
11041134:	e0bffe03 	ldbu	r2,-8(fp)
11041138:	e13ffb17 	ldw	r4,-20(fp)
1104113c:	e17ffc17 	ldw	r5,-16(fp)
11041140:	100d883a 	mov	r6,r2
11041144:	10415ac0 	call	110415ac <i2c_write>
11041148:	1000041e 	bne	r2,zero,1104115c <I2C_Write+0xa0>
        bSuccess = FALSE;
1104114c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
11041150:	01000034 	movhi	r4,0
11041154:	21005c04 	addi	r4,r4,368
11041158:	10419600 	call	11041960 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
1104115c:	e0bffa17 	ldw	r2,-24(fp)
11041160:	10000a26 	beq	r2,zero,1104118c <I2C_Write+0xd0>
11041164:	e0bfff03 	ldbu	r2,-4(fp)
11041168:	e13ffb17 	ldw	r4,-20(fp)
1104116c:	e17ffc17 	ldw	r5,-16(fp)
11041170:	100d883a 	mov	r6,r2
11041174:	10415ac0 	call	110415ac <i2c_write>
11041178:	1000041e 	bne	r2,zero,1104118c <I2C_Write+0xd0>
        bSuccess = FALSE;
1104117c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
11041180:	01000034 	movhi	r4,0
11041184:	21006504 	addi	r4,r4,404
11041188:	10419600 	call	11041960 <myprintf>
    }
    i2c_stop(clk_base, data_base);
1104118c:	e13ffb17 	ldw	r4,-20(fp)
11041190:	e17ffc17 	ldw	r5,-16(fp)
11041194:	104153c0 	call	1104153c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
11041198:	0106d604 	movi	r4,7000
1104119c:	104cef00 	call	1104cef0 <usleep>
    
    return bSuccess;
110411a0:	e0bffa17 	ldw	r2,-24(fp)

    
}
110411a4:	e037883a 	mov	sp,fp
110411a8:	dfc00117 	ldw	ra,4(sp)
110411ac:	df000017 	ldw	fp,0(sp)
110411b0:	dec00204 	addi	sp,sp,8
110411b4:	f800283a 	ret

110411b8 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
110411b8:	defff704 	addi	sp,sp,-36
110411bc:	dfc00815 	stw	ra,32(sp)
110411c0:	df000715 	stw	fp,28(sp)
110411c4:	df000704 	addi	fp,sp,28
110411c8:	e13ffc15 	stw	r4,-16(fp)
110411cc:	e17ffd15 	stw	r5,-12(fp)
110411d0:	3007883a 	mov	r3,r6
110411d4:	3805883a 	mov	r2,r7
110411d8:	e0fffe05 	stb	r3,-8(fp)
110411dc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
110411e0:	00800044 	movi	r2,1
110411e4:	e0bff915 	stw	r2,-28(fp)


    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
110411e8:	e13ffc17 	ldw	r4,-16(fp)
110411ec:	e17ffd17 	ldw	r5,-12(fp)
110411f0:	10414b80 	call	110414b8 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
110411f4:	e0bffe03 	ldbu	r2,-8(fp)
110411f8:	10803fcc 	andi	r2,r2,255
110411fc:	e13ffc17 	ldw	r4,-16(fp)
11041200:	e17ffd17 	ldw	r5,-12(fp)
11041204:	100d883a 	mov	r6,r2
11041208:	10415ac0 	call	110415ac <i2c_write>
1104120c:	1000041e 	bne	r2,zero,11041220 <I2C_Read+0x68>
        bSuccess = FALSE;
11041210:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
11041214:	01000034 	movhi	r4,0
11041218:	21005404 	addi	r4,r4,336
1104121c:	10419600 	call	11041960 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
11041220:	e0bff917 	ldw	r2,-28(fp)
11041224:	10000a26 	beq	r2,zero,11041250 <I2C_Read+0x98>
11041228:	e0bfff03 	ldbu	r2,-4(fp)
1104122c:	e13ffc17 	ldw	r4,-16(fp)
11041230:	e17ffd17 	ldw	r5,-12(fp)
11041234:	100d883a 	mov	r6,r2
11041238:	10415ac0 	call	110415ac <i2c_write>
1104123c:	1000041e 	bne	r2,zero,11041250 <I2C_Read+0x98>
        bSuccess = FALSE;
11041240:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
11041244:	01000034 	movhi	r4,0
11041248:	21005c04 	addi	r4,r4,368
1104124c:	10419600 	call	11041960 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
11041250:	e13ffc17 	ldw	r4,-16(fp)
11041254:	e17ffd17 	ldw	r5,-12(fp)
11041258:	10414b80 	call	110414b8 <i2c_start>
    DeviceAddr |= 1; // Read
1104125c:	e0bffe03 	ldbu	r2,-8(fp)
11041260:	10800054 	ori	r2,r2,1
11041264:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
11041268:	e0bff917 	ldw	r2,-28(fp)
1104126c:	10000b26 	beq	r2,zero,1104129c <I2C_Read+0xe4>
11041270:	e0bffe03 	ldbu	r2,-8(fp)
11041274:	10803fcc 	andi	r2,r2,255
11041278:	e13ffc17 	ldw	r4,-16(fp)
1104127c:	e17ffd17 	ldw	r5,-12(fp)
11041280:	100d883a 	mov	r6,r2
11041284:	10415ac0 	call	110415ac <i2c_write>
11041288:	1000041e 	bne	r2,zero,1104129c <I2C_Read+0xe4>
        bSuccess = FALSE;
1104128c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
11041290:	01000034 	movhi	r4,0
11041294:	21006d04 	addi	r4,r4,436
11041298:	10419600 	call	11041960 <myprintf>
    }
    
    if (bSuccess){
1104129c:	e0bff917 	ldw	r2,-28(fp)
110412a0:	10000526 	beq	r2,zero,110412b8 <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlDataL, TRUE);  // read
110412a4:	e13ffc17 	ldw	r4,-16(fp)
110412a8:	e17ffd17 	ldw	r5,-12(fp)
110412ac:	e1bffa17 	ldw	r6,-24(fp)
110412b0:	01c00044 	movi	r7,1
110412b4:	10416d80 	call	110416d8 <i2c_read>
    }
    if (bSuccess){
110412b8:	e0bff917 	ldw	r2,-28(fp)
110412bc:	10000526 	beq	r2,zero,110412d4 <I2C_Read+0x11c>
            i2c_read(clk_base, data_base, pControlDataH, FALSE);  // read
110412c0:	e13ffc17 	ldw	r4,-16(fp)
110412c4:	e17ffd17 	ldw	r5,-12(fp)
110412c8:	e1bffb17 	ldw	r6,-20(fp)
110412cc:	000f883a 	mov	r7,zero
110412d0:	10416d80 	call	110416d8 <i2c_read>
        }
    i2c_stop(clk_base, data_base);
110412d4:	e13ffc17 	ldw	r4,-16(fp)
110412d8:	e17ffd17 	ldw	r5,-12(fp)
110412dc:	104153c0 	call	1104153c <i2c_stop>
    
    *pControlData=*pControlDataH;
110412e0:	e0bffb17 	ldw	r2,-20(fp)
110412e4:	10800003 	ldbu	r2,0(r2)
110412e8:	10c03fcc 	andi	r3,r2,255
110412ec:	e0800217 	ldw	r2,8(fp)
110412f0:	10c0000d 	sth	r3,0(r2)
    *pControlData=(*pControlData<<8)|*pControlDataL;
110412f4:	e0800217 	ldw	r2,8(fp)
110412f8:	1080000b 	ldhu	r2,0(r2)
110412fc:	10bfffcc 	andi	r2,r2,65535
11041300:	1004923a 	slli	r2,r2,8
11041304:	1007883a 	mov	r3,r2
11041308:	e0bffa17 	ldw	r2,-24(fp)
1104130c:	10800003 	ldbu	r2,0(r2)
11041310:	10803fcc 	andi	r2,r2,255
11041314:	1884b03a 	or	r2,r3,r2
11041318:	1007883a 	mov	r3,r2
1104131c:	e0800217 	ldw	r2,8(fp)
11041320:	10c0000d 	sth	r3,0(r2)

    return bSuccess;
11041324:	e0bff917 	ldw	r2,-28(fp)
}
11041328:	e037883a 	mov	sp,fp
1104132c:	dfc00117 	ldw	ra,4(sp)
11041330:	df000017 	ldw	fp,0(sp)
11041334:	dec00204 	addi	sp,sp,8
11041338:	f800283a 	ret

1104133c <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
1104133c:	defff604 	addi	sp,sp,-40
11041340:	dfc00915 	stw	ra,36(sp)
11041344:	df000815 	stw	fp,32(sp)
11041348:	df000804 	addi	fp,sp,32
1104134c:	e13ffb15 	stw	r4,-20(fp)
11041350:	e17ffc15 	stw	r5,-16(fp)
11041354:	3005883a 	mov	r2,r6
11041358:	e1fffe15 	stw	r7,-8(fp)
1104135c:	e0c00217 	ldw	r3,8(fp)
11041360:	e0bffd05 	stb	r2,-12(fp)
11041364:	e0ffff0d 	sth	r3,-4(fp)
    int i;
    bool bSuccess = TRUE;
11041368:	00800044 	movi	r2,1
1104136c:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
11041370:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
11041374:	e13ffb17 	ldw	r4,-20(fp)
11041378:	e17ffc17 	ldw	r5,-16(fp)
1104137c:	10414b80 	call	110414b8 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
11041380:	e0bffd03 	ldbu	r2,-12(fp)
11041384:	10803fcc 	andi	r2,r2,255
11041388:	e13ffb17 	ldw	r4,-20(fp)
1104138c:	e17ffc17 	ldw	r5,-16(fp)
11041390:	100d883a 	mov	r6,r2
11041394:	10415ac0 	call	110415ac <i2c_write>
11041398:	1000041e 	bne	r2,zero,110413ac <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
1104139c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
110413a0:	01000034 	movhi	r4,0
110413a4:	21005404 	addi	r4,r4,336
110413a8:	10419600 	call	11041960 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
110413ac:	e0bff917 	ldw	r2,-28(fp)
110413b0:	10000a26 	beq	r2,zero,110413dc <I2C_MultipleRead+0xa0>
110413b4:	e0bffa03 	ldbu	r2,-24(fp)
110413b8:	e13ffb17 	ldw	r4,-20(fp)
110413bc:	e17ffc17 	ldw	r5,-16(fp)
110413c0:	100d883a 	mov	r6,r2
110413c4:	10415ac0 	call	110415ac <i2c_write>
110413c8:	1000041e 	bne	r2,zero,110413dc <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
110413cc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
110413d0:	01000034 	movhi	r4,0
110413d4:	21005c04 	addi	r4,r4,368
110413d8:	10419600 	call	11041960 <myprintf>
    }    
    if (bSuccess)        
110413dc:	e0bff917 	ldw	r2,-28(fp)
110413e0:	10000326 	beq	r2,zero,110413f0 <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
110413e4:	e13ffb17 	ldw	r4,-20(fp)
110413e8:	e17ffc17 	ldw	r5,-16(fp)
110413ec:	10414b80 	call	110414b8 <i2c_start>
    DeviceAddr |= 1; // Read
110413f0:	e0bffd03 	ldbu	r2,-12(fp)
110413f4:	10800054 	ori	r2,r2,1
110413f8:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
110413fc:	e0bff917 	ldw	r2,-28(fp)
11041400:	10000b26 	beq	r2,zero,11041430 <I2C_MultipleRead+0xf4>
11041404:	e0bffd03 	ldbu	r2,-12(fp)
11041408:	10803fcc 	andi	r2,r2,255
1104140c:	e13ffb17 	ldw	r4,-20(fp)
11041410:	e17ffc17 	ldw	r5,-16(fp)
11041414:	100d883a 	mov	r6,r2
11041418:	10415ac0 	call	110415ac <i2c_write>
1104141c:	1000041e 	bne	r2,zero,11041430 <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
11041420:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
11041424:	01000034 	movhi	r4,0
11041428:	21006d04 	addi	r4,r4,436
1104142c:	10419600 	call	11041960 <myprintf>
    }
    
    if (bSuccess){
11041430:	e0bff917 	ldw	r2,-28(fp)
11041434:	10001726 	beq	r2,zero,11041494 <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
11041438:	e03ff815 	stw	zero,-32(fp)
1104143c:	00001006 	br	11041480 <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
11041440:	e0bff817 	ldw	r2,-32(fp)
11041444:	e0fffe17 	ldw	r3,-8(fp)
11041448:	1887883a 	add	r3,r3,r2
1104144c:	e0bfff0b 	ldhu	r2,-4(fp)
11041450:	113fffc4 	addi	r4,r2,-1
11041454:	e0bff817 	ldw	r2,-32(fp)
11041458:	2084c03a 	cmpne	r2,r4,r2
1104145c:	10803fcc 	andi	r2,r2,255
11041460:	e13ffb17 	ldw	r4,-20(fp)
11041464:	e17ffc17 	ldw	r5,-16(fp)
11041468:	180d883a 	mov	r6,r3
1104146c:	100f883a 	mov	r7,r2
11041470:	10416d80 	call	110416d8 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
11041474:	e0bff817 	ldw	r2,-32(fp)
11041478:	10800044 	addi	r2,r2,1
1104147c:	e0bff815 	stw	r2,-32(fp)
11041480:	e0bfff0b 	ldhu	r2,-4(fp)
11041484:	e0fff817 	ldw	r3,-32(fp)
11041488:	1880020e 	bge	r3,r2,11041494 <I2C_MultipleRead+0x158>
1104148c:	e0bff917 	ldw	r2,-28(fp)
11041490:	103feb1e 	bne	r2,zero,11041440 <I2C_MultipleRead+0x104>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
11041494:	e13ffb17 	ldw	r4,-20(fp)
11041498:	e17ffc17 	ldw	r5,-16(fp)
1104149c:	104153c0 	call	1104153c <i2c_stop>
    
    return bSuccess;    
110414a0:	e0bff917 	ldw	r2,-28(fp)
    
}
110414a4:	e037883a 	mov	sp,fp
110414a8:	dfc00117 	ldw	ra,4(sp)
110414ac:	df000017 	ldw	fp,0(sp)
110414b0:	dec00204 	addi	sp,sp,8
110414b4:	f800283a 	ret

110414b8 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
110414b8:	defffc04 	addi	sp,sp,-16
110414bc:	dfc00315 	stw	ra,12(sp)
110414c0:	df000215 	stw	fp,8(sp)
110414c4:	df000204 	addi	fp,sp,8
110414c8:	e13ffe15 	stw	r4,-8(fp)
110414cc:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
110414d0:	e0bfff17 	ldw	r2,-4(fp)
110414d4:	10800104 	addi	r2,r2,4
110414d8:	00c00044 	movi	r3,1
110414dc:	10c00035 	stwio	r3,0(r2)
    
    
    
    // start condition 
    SDA_HIGH(data_base); // data high
110414e0:	e0bfff17 	ldw	r2,-4(fp)
110414e4:	00c00044 	movi	r3,1
110414e8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
110414ec:	e0bffe17 	ldw	r2,-8(fp)
110414f0:	00c00044 	movi	r3,1
110414f4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
110414f8:	01000044 	movi	r4,1
110414fc:	104cef00 	call	1104cef0 <usleep>
     
    SDA_LOW(data_base); // data low
11041500:	e0bfff17 	ldw	r2,-4(fp)
11041504:	0007883a 	mov	r3,zero
11041508:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
1104150c:	01000044 	movi	r4,1
11041510:	104cef00 	call	1104cef0 <usleep>
    SCL_LOW(clk_base); // clock low
11041514:	e0bffe17 	ldw	r2,-8(fp)
11041518:	0007883a 	mov	r3,zero
1104151c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
11041520:	01000044 	movi	r4,1
11041524:	104cef00 	call	1104cef0 <usleep>
}
11041528:	e037883a 	mov	sp,fp
1104152c:	dfc00117 	ldw	ra,4(sp)
11041530:	df000017 	ldw	fp,0(sp)
11041534:	dec00204 	addi	sp,sp,8
11041538:	f800283a 	ret

1104153c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
1104153c:	defffc04 	addi	sp,sp,-16
11041540:	dfc00315 	stw	ra,12(sp)
11041544:	df000215 	stw	fp,8(sp)
11041548:	df000204 	addi	fp,sp,8
1104154c:	e13ffe15 	stw	r4,-8(fp)
11041550:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
11041554:	e0bfff17 	ldw	r2,-4(fp)
11041558:	10800104 	addi	r2,r2,4
1104155c:	00c00044 	movi	r3,1
11041560:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
11041564:	e0bfff17 	ldw	r2,-4(fp)
11041568:	0007883a 	mov	r3,zero
1104156c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
11041570:	e0bffe17 	ldw	r2,-8(fp)
11041574:	00c00044 	movi	r3,1
11041578:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
1104157c:	01000044 	movi	r4,1
11041580:	104cef00 	call	1104cef0 <usleep>
    SDA_HIGH(data_base); // data high
11041584:	e0bfff17 	ldw	r2,-4(fp)
11041588:	00c00044 	movi	r3,1
1104158c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
11041590:	01000044 	movi	r4,1
11041594:	104cef00 	call	1104cef0 <usleep>
}
11041598:	e037883a 	mov	sp,fp
1104159c:	dfc00117 	ldw	ra,4(sp)
110415a0:	df000017 	ldw	fp,0(sp)
110415a4:	dec00204 	addi	sp,sp,8
110415a8:	f800283a 	ret

110415ac <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
110415ac:	defff804 	addi	sp,sp,-32
110415b0:	dfc00715 	stw	ra,28(sp)
110415b4:	df000615 	stw	fp,24(sp)
110415b8:	df000604 	addi	fp,sp,24
110415bc:	e13ffd15 	stw	r4,-12(fp)
110415c0:	e17ffe15 	stw	r5,-8(fp)
110415c4:	3005883a 	mov	r2,r6
110415c8:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
110415cc:	00bfe004 	movi	r2,-128
110415d0:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
110415d4:	e0bffe17 	ldw	r2,-8(fp)
110415d8:	10800104 	addi	r2,r2,4
110415dc:	00c00044 	movi	r3,1
110415e0:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
110415e4:	e03ffb15 	stw	zero,-20(fp)
110415e8:	00001f06 	br	11041668 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
110415ec:	e0bffd17 	ldw	r2,-12(fp)
110415f0:	0007883a 	mov	r3,zero
110415f4:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
110415f8:	e0ffff03 	ldbu	r3,-4(fp)
110415fc:	e0bffa03 	ldbu	r2,-24(fp)
11041600:	1884703a 	and	r2,r3,r2
11041604:	10803fcc 	andi	r2,r2,255
11041608:	10000426 	beq	r2,zero,1104161c <i2c_write+0x70>
            SDA_HIGH(data_base);
1104160c:	e0bffe17 	ldw	r2,-8(fp)
11041610:	00c00044 	movi	r3,1
11041614:	10c00035 	stwio	r3,0(r2)
11041618:	00000306 	br	11041628 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
1104161c:	e0bffe17 	ldw	r2,-8(fp)
11041620:	0007883a 	mov	r3,zero
11041624:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
11041628:	e0bffa03 	ldbu	r2,-24(fp)
1104162c:	1004d07a 	srli	r2,r2,1
11041630:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
11041634:	e0bffd17 	ldw	r2,-12(fp)
11041638:	00c00044 	movi	r3,1
1104163c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
11041640:	01000044 	movi	r4,1
11041644:	104cef00 	call	1104cef0 <usleep>
        SCL_LOW(clk_base);
11041648:	e0bffd17 	ldw	r2,-12(fp)
1104164c:	0007883a 	mov	r3,zero
11041650:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
11041654:	01000044 	movi	r4,1
11041658:	104cef00 	call	1104cef0 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
1104165c:	e0bffb17 	ldw	r2,-20(fp)
11041660:	10800044 	addi	r2,r2,1
11041664:	e0bffb15 	stw	r2,-20(fp)
11041668:	e0bffb17 	ldw	r2,-20(fp)
1104166c:	10800210 	cmplti	r2,r2,8
11041670:	103fde1e 	bne	r2,zero,110415ec <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
11041674:	e0bffe17 	ldw	r2,-8(fp)
11041678:	10800104 	addi	r2,r2,4
1104167c:	0007883a 	mov	r3,zero
11041680:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
11041684:	e0bffd17 	ldw	r2,-12(fp)
11041688:	00c00044 	movi	r3,1
1104168c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
11041690:	01000044 	movi	r4,1
11041694:	104cef00 	call	1104cef0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
11041698:	e0bffe17 	ldw	r2,-8(fp)
1104169c:	10800037 	ldwio	r2,0(r2)
110416a0:	1005003a 	cmpeq	r2,r2,zero
110416a4:	10803fcc 	andi	r2,r2,255
110416a8:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
110416ac:	e0bffd17 	ldw	r2,-12(fp)
110416b0:	0007883a 	mov	r3,zero
110416b4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
110416b8:	01000044 	movi	r4,1
110416bc:	104cef00 	call	1104cef0 <usleep>
    return bAck;
110416c0:	e0bffc17 	ldw	r2,-16(fp)
}    
110416c4:	e037883a 	mov	sp,fp
110416c8:	dfc00117 	ldw	ra,4(sp)
110416cc:	df000017 	ldw	fp,0(sp)
110416d0:	dec00204 	addi	sp,sp,8
110416d4:	f800283a 	ret

110416d8 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
110416d8:	defff804 	addi	sp,sp,-32
110416dc:	dfc00715 	stw	ra,28(sp)
110416e0:	df000615 	stw	fp,24(sp)
110416e4:	df000604 	addi	fp,sp,24
110416e8:	e13ffc15 	stw	r4,-16(fp)
110416ec:	e17ffd15 	stw	r5,-12(fp)
110416f0:	e1bffe15 	stw	r6,-8(fp)
110416f4:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
110416f8:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
110416fc:	e0bffd17 	ldw	r2,-12(fp)
11041700:	10800104 	addi	r2,r2,4
11041704:	0007883a 	mov	r3,zero
11041708:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
1104170c:	e0bffc17 	ldw	r2,-16(fp)
11041710:	0007883a 	mov	r3,zero
11041714:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
11041718:	01000044 	movi	r4,1
1104171c:	104cef00 	call	1104cef0 <usleep>

    for(i=0;i<8;i++){
11041720:	e03ffb15 	stw	zero,-20(fp)
11041724:	00001606 	br	11041780 <i2c_read+0xa8>
        Data <<= 1;
11041728:	e0bffa03 	ldbu	r2,-24(fp)
1104172c:	1085883a 	add	r2,r2,r2
11041730:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
11041734:	e0bffc17 	ldw	r2,-16(fp)
11041738:	00c00044 	movi	r3,1
1104173c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
11041740:	01000044 	movi	r4,1
11041744:	104cef00 	call	1104cef0 <usleep>
        if (SDA_READ(data_base))  // read data   
11041748:	e0bffd17 	ldw	r2,-12(fp)
1104174c:	10800037 	ldwio	r2,0(r2)
11041750:	10000326 	beq	r2,zero,11041760 <i2c_read+0x88>
            Data |= 0x01;
11041754:	e0bffa03 	ldbu	r2,-24(fp)
11041758:	10800054 	ori	r2,r2,1
1104175c:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
11041760:	e0bffc17 	ldw	r2,-16(fp)
11041764:	0007883a 	mov	r3,zero
11041768:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
1104176c:	01000044 	movi	r4,1
11041770:	104cef00 	call	1104cef0 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
11041774:	e0bffb17 	ldw	r2,-20(fp)
11041778:	10800044 	addi	r2,r2,1
1104177c:	e0bffb15 	stw	r2,-20(fp)
11041780:	e0bffb17 	ldw	r2,-20(fp)
11041784:	10800210 	cmplti	r2,r2,8
11041788:	103fe71e 	bne	r2,zero,11041728 <i2c_read+0x50>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
1104178c:	e0bffc17 	ldw	r2,-16(fp)
11041790:	0007883a 	mov	r3,zero
11041794:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
11041798:	e0bffd17 	ldw	r2,-12(fp)
1104179c:	10800104 	addi	r2,r2,4
110417a0:	00c00044 	movi	r3,1
110417a4:	10c00035 	stwio	r3,0(r2)
    if (bAck)
110417a8:	e0bfff17 	ldw	r2,-4(fp)
110417ac:	10000426 	beq	r2,zero,110417c0 <i2c_read+0xe8>
        SDA_LOW(data_base);
110417b0:	e0bffd17 	ldw	r2,-12(fp)
110417b4:	0007883a 	mov	r3,zero
110417b8:	10c00035 	stwio	r3,0(r2)
110417bc:	00000306 	br	110417cc <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
110417c0:	e0bffd17 	ldw	r2,-12(fp)
110417c4:	00c00044 	movi	r3,1
110417c8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
110417cc:	e0bffc17 	ldw	r2,-16(fp)
110417d0:	00c00044 	movi	r3,1
110417d4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
110417d8:	01000044 	movi	r4,1
110417dc:	104cef00 	call	1104cef0 <usleep>
    SCL_LOW(clk_base); // clock low
110417e0:	e0bffc17 	ldw	r2,-16(fp)
110417e4:	0007883a 	mov	r3,zero
110417e8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
110417ec:	01000044 	movi	r4,1
110417f0:	104cef00 	call	1104cef0 <usleep>
    SDA_LOW(data_base);  // data low
110417f4:	e0bffd17 	ldw	r2,-12(fp)
110417f8:	0007883a 	mov	r3,zero
110417fc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
11041800:	01000044 	movi	r4,1
11041804:	104cef00 	call	1104cef0 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
11041808:	e0bffe17 	ldw	r2,-8(fp)
1104180c:	e0fffa03 	ldbu	r3,-24(fp)
11041810:	10c00005 	stb	r3,0(r2)
}
11041814:	e037883a 	mov	sp,fp
11041818:	dfc00117 	ldw	ra,4(sp)
1104181c:	df000017 	ldw	fp,0(sp)
11041820:	dec00204 	addi	sp,sp,8
11041824:	f800283a 	ret

11041828 <LED_Display>:
#define LED_INIT_MASK   (0x01 << 3)

#define LED_SET(mask)   IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, mask)


void LED_Display(alt_u8 Mask){ // 1: light, 0:unlight
11041828:	defffd04 	addi	sp,sp,-12
1104182c:	df000215 	stw	fp,8(sp)
11041830:	df000204 	addi	fp,sp,8
11041834:	2005883a 	mov	r2,r4
11041838:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 ThisMask;
    ThisMask = Mask;//
1104183c:	e0bfff03 	ldbu	r2,-4(fp)
11041840:	e0bffe05 	stb	r2,-8(fp)
    LED_SET(ThisMask);  //0:ligh, 1:unlight
11041844:	e0fffe03 	ldbu	r3,-8(fp)
11041848:	00840034 	movhi	r2,4096
1104184c:	10800c04 	addi	r2,r2,48
11041850:	10c00035 	stwio	r3,0(r2)
    
}
11041854:	e037883a 	mov	sp,fp
11041858:	df000017 	ldw	fp,0(sp)
1104185c:	dec00104 	addi	sp,sp,4
11041860:	f800283a 	ret

11041864 <LED_AllOn>:


void LED_AllOn(void){
11041864:	defffe04 	addi	sp,sp,-8
11041868:	dfc00115 	stw	ra,4(sp)
1104186c:	df000015 	stw	fp,0(sp)
11041870:	d839883a 	mov	fp,sp
    LED_Display(0xFF);
11041874:	01003fc4 	movi	r4,255
11041878:	10418280 	call	11041828 <LED_Display>
}
1104187c:	e037883a 	mov	sp,fp
11041880:	dfc00117 	ldw	ra,4(sp)
11041884:	df000017 	ldw	fp,0(sp)
11041888:	dec00204 	addi	sp,sp,8
1104188c:	f800283a 	ret

11041890 <LED_AllOff>:

void LED_AllOff(void){
11041890:	defffe04 	addi	sp,sp,-8
11041894:	dfc00115 	stw	ra,4(sp)
11041898:	df000015 	stw	fp,0(sp)
1104189c:	d839883a 	mov	fp,sp
    LED_Display(0x00);       
110418a0:	0009883a 	mov	r4,zero
110418a4:	10418280 	call	11041828 <LED_Display>
}
110418a8:	e037883a 	mov	sp,fp
110418ac:	dfc00117 	ldw	ra,4(sp)
110418b0:	df000017 	ldw	fp,0(sp)
110418b4:	dec00204 	addi	sp,sp,8
110418b8:	f800283a 	ret

110418bc <LED_LightCount>:


void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
110418bc:	defffb04 	addi	sp,sp,-20
110418c0:	dfc00415 	stw	ra,16(sp)
110418c4:	df000315 	stw	fp,12(sp)
110418c8:	df000304 	addi	fp,sp,12
110418cc:	2005883a 	mov	r2,r4
110418d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 Mask = 0;
110418d4:	e03ffd05 	stb	zero,-12(fp)
    int i;
    for(i=0;i<LightCount;i++){
110418d8:	e03ffe15 	stw	zero,-8(fp)
110418dc:	00000906 	br	11041904 <LED_LightCount+0x48>
        Mask <<= 1;
110418e0:	e0bffd03 	ldbu	r2,-12(fp)
110418e4:	1085883a 	add	r2,r2,r2
110418e8:	e0bffd05 	stb	r2,-12(fp)
        Mask |= 0x01;
110418ec:	e0bffd03 	ldbu	r2,-12(fp)
110418f0:	10800054 	ori	r2,r2,1
110418f4:	e0bffd05 	stb	r2,-12(fp)


void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
	alt_u8 Mask = 0;
    int i;
    for(i=0;i<LightCount;i++){
110418f8:	e0bffe17 	ldw	r2,-8(fp)
110418fc:	10800044 	addi	r2,r2,1
11041900:	e0bffe15 	stw	r2,-8(fp)
11041904:	e0bfff03 	ldbu	r2,-4(fp)
11041908:	e0fffe17 	ldw	r3,-8(fp)
1104190c:	18bff416 	blt	r3,r2,110418e0 <LED_LightCount+0x24>
        Mask <<= 1;
        Mask |= 0x01;
    }
    LED_Display(Mask);  //0:ligh, 1:unlight
11041910:	e0bffd03 	ldbu	r2,-12(fp)
11041914:	1009883a 	mov	r4,r2
11041918:	10418280 	call	11041828 <LED_Display>
    
}
1104191c:	e037883a 	mov	sp,fp
11041920:	dfc00117 	ldw	ra,4(sp)
11041924:	df000017 	ldw	fp,0(sp)
11041928:	dec00204 	addi	sp,sp,8
1104192c:	f800283a 	ret

11041930 <debug_output>:
    if (!UART_IsOpened())
        UART_Open();
    UART_WriteString(pMessage);  // UART debug
}
#else
void debug_output(char *pMessage){
11041930:	defffd04 	addi	sp,sp,-12
11041934:	dfc00215 	stw	ra,8(sp)
11041938:	df000115 	stw	fp,4(sp)
1104193c:	df000104 	addi	fp,sp,4
11041940:	e13fff15 	stw	r4,-4(fp)
    printf(pMessage);
11041944:	e13fff17 	ldw	r4,-4(fp)
11041948:	10439280 	call	11043928 <printf>
}
1104194c:	e037883a 	mov	sp,fp
11041950:	dfc00117 	ldw	ra,4(sp)
11041954:	df000017 	ldw	fp,0(sp)
11041958:	dec00204 	addi	sp,sp,8
1104195c:	f800283a 	ret

11041960 <myprintf>:

#endif


int myprintf(char *format, ...){
11041960:	deff7804 	addi	sp,sp,-544
11041964:	dfc08415 	stw	ra,528(sp)
11041968:	df008315 	stw	fp,524(sp)
1104196c:	df008304 	addi	fp,sp,524
11041970:	e1400215 	stw	r5,8(fp)
11041974:	e1800315 	stw	r6,12(fp)
11041978:	e1c00415 	stw	r7,16(fp)
1104197c:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
11041980:	e0800204 	addi	r2,fp,8
11041984:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
11041988:	e0bffe17 	ldw	r2,-8(fp)
1104198c:	e0ff7e04 	addi	r3,fp,-520
11041990:	1809883a 	mov	r4,r3
11041994:	01408004 	movi	r5,512
11041998:	e1bfff17 	ldw	r6,-4(fp)
1104199c:	100f883a 	mov	r7,r2
110419a0:	1045a480 	call	11045a48 <vsnprintf>
110419a4:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
110419a8:	e0bf7e04 	addi	r2,fp,-520
110419ac:	1009883a 	mov	r4,r2
110419b0:	10419300 	call	11041930 <debug_output>

    return rc;    
110419b4:	e0bf7d17 	ldw	r2,-524(fp)
}
110419b8:	e037883a 	mov	sp,fp
110419bc:	dfc00117 	ldw	ra,4(sp)
110419c0:	df000017 	ldw	fp,0(sp)
110419c4:	dec00504 	addi	sp,sp,20
110419c8:	f800283a 	ret

110419cc <myprintf_hex_array>:


int myprintf_hex_array(unsigned char *pHex, int len){
110419cc:	defff704 	addi	sp,sp,-36
110419d0:	dfc00815 	stw	ra,32(sp)
110419d4:	df000715 	stw	fp,28(sp)
110419d8:	df000704 	addi	fp,sp,28
110419dc:	e13ffe15 	stw	r4,-8(fp)
110419e0:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
110419e4:	e03ff915 	stw	zero,-28(fp)
110419e8:	00001106 	br	11041a30 <myprintf_hex_array+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
110419ec:	e0bff917 	ldw	r2,-28(fp)
110419f0:	e0fffe17 	ldw	r3,-8(fp)
110419f4:	1885883a 	add	r2,r3,r2
110419f8:	10800003 	ldbu	r2,0(r2)
110419fc:	10803fcc 	andi	r2,r2,255
11041a00:	e0fffa04 	addi	r3,fp,-24
11041a04:	1809883a 	mov	r4,r3
11041a08:	01400034 	movhi	r5,0
11041a0c:	29407604 	addi	r5,r5,472
11041a10:	100d883a 	mov	r6,r2
11041a14:	1043a540 	call	11043a54 <sprintf>
        DEBUG((szText));
11041a18:	e0bffa04 	addi	r2,fp,-24
11041a1c:	1009883a 	mov	r4,r2
11041a20:	10419600 	call	11041960 <myprintf>


int myprintf_hex_array(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
11041a24:	e0bff917 	ldw	r2,-28(fp)
11041a28:	10800044 	addi	r2,r2,1
11041a2c:	e0bff915 	stw	r2,-28(fp)
11041a30:	e0fff917 	ldw	r3,-28(fp)
11041a34:	e0bfff17 	ldw	r2,-4(fp)
11041a38:	18bfec16 	blt	r3,r2,110419ec <myprintf_hex_array+0x20>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
11041a3c:	e0bfff17 	ldw	r2,-4(fp)
}
11041a40:	e037883a 	mov	sp,fp
11041a44:	dfc00117 	ldw	ra,4(sp)
11041a48:	df000017 	ldw	fp,0(sp)
11041a4c:	dec00204 	addi	sp,sp,8
11041a50:	f800283a 	ret

11041a54 <myprintf_dword_array>:

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
11041a54:	defff704 	addi	sp,sp,-36
11041a58:	dfc00815 	stw	ra,32(sp)
11041a5c:	df000715 	stw	fp,28(sp)
11041a60:	df000704 	addi	fp,sp,28
11041a64:	e13ffe15 	stw	r4,-8(fp)
11041a68:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
11041a6c:	e03ff915 	stw	zero,-28(fp)
11041a70:	00001206 	br	11041abc <myprintf_dword_array+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
11041a74:	e0bff917 	ldw	r2,-28(fp)
11041a78:	1085883a 	add	r2,r2,r2
11041a7c:	1085883a 	add	r2,r2,r2
11041a80:	e0fffe17 	ldw	r3,-8(fp)
11041a84:	1885883a 	add	r2,r3,r2
11041a88:	10800017 	ldw	r2,0(r2)
11041a8c:	e0fffa04 	addi	r3,fp,-24
11041a90:	1809883a 	mov	r4,r3
11041a94:	01400034 	movhi	r5,0
11041a98:	29407804 	addi	r5,r5,480
11041a9c:	100d883a 	mov	r6,r2
11041aa0:	1043a540 	call	11043a54 <sprintf>
        DEBUG((szText));
11041aa4:	e0bffa04 	addi	r2,fp,-24
11041aa8:	1009883a 	mov	r4,r2
11041aac:	10419600 	call	11041960 <myprintf>
}

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
11041ab0:	e0bff917 	ldw	r2,-28(fp)
11041ab4:	10800044 	addi	r2,r2,1
11041ab8:	e0bff915 	stw	r2,-28(fp)
11041abc:	e0fff917 	ldw	r3,-28(fp)
11041ac0:	e0bfff17 	ldw	r2,-4(fp)
11041ac4:	18bfeb16 	blt	r3,r2,11041a74 <myprintf_dword_array+0x20>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
11041ac8:	e0bfff17 	ldw	r2,-4(fp)
}
11041acc:	e037883a 	mov	sp,fp
11041ad0:	dfc00117 	ldw	ra,4(sp)
11041ad4:	df000017 	ldw	fp,0(sp)
11041ad8:	dec00204 	addi	sp,sp,8
11041adc:	f800283a 	ret

11041ae0 <ui_is_mic_record>:
volatile alt_u8 sec = 0;
volatile bool is_alarm_on = FALSE;
///////////////////////////////////////////////////////////////////////////////
//////////// Internal function implement(body) ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool ui_is_mic_record(void){
11041ae0:	defffe04 	addi	sp,sp,-8
11041ae4:	df000115 	stw	fp,4(sp)
11041ae8:	df000104 	addi	fp,sp,4
    bool bMicRecord;
    bMicRecord = (IORD(SW_BASE, 0) & 0x01)?FALSE:TRUE;
11041aec:	00840034 	movhi	r2,4096
11041af0:	10800804 	addi	r2,r2,32
11041af4:	10800037 	ldwio	r2,0(r2)
11041af8:	1080004c 	andi	r2,r2,1
11041afc:	1005003a 	cmpeq	r2,r2,zero
11041b00:	10803fcc 	andi	r2,r2,255
11041b04:	e0bfff15 	stw	r2,-4(fp)
    return bMicRecord;    
11041b08:	e0bfff17 	ldw	r2,-4(fp)
}
11041b0c:	e037883a 	mov	sp,fp
11041b10:	df000017 	ldw	fp,0(sp)
11041b14:	dec00104 	addi	sp,sp,4
11041b18:	f800283a 	ret

11041b1c <ui_get_sample_rate>:

int ui_get_sample_rate(void){
11041b1c:	defffd04 	addi	sp,sp,-12
11041b20:	df000215 	stw	fp,8(sp)
11041b24:	df000204 	addi	fp,sp,8
    int sample_rate = 96000;
11041b28:	00800074 	movhi	r2,1
11041b2c:	109dc004 	addi	r2,r2,30464
11041b30:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 mask;
    mask = IORD(SW_BASE, 0);
11041b34:	00840034 	movhi	r2,4096
11041b38:	10800804 	addi	r2,r2,32
11041b3c:	10800037 	ldwio	r2,0(r2)
11041b40:	e0bfff15 	stw	r2,-4(fp)
    mask = (mask >> 1) & 0x07;
11041b44:	e0bfff17 	ldw	r2,-4(fp)
11041b48:	1004d07a 	srli	r2,r2,1
11041b4c:	108001cc 	andi	r2,r2,7
11041b50:	e0bfff15 	stw	r2,-4(fp)
    if (mask == 1)
11041b54:	e0bfff17 	ldw	r2,-4(fp)
11041b58:	10800058 	cmpnei	r2,r2,1
11041b5c:	1000031e 	bne	r2,zero,11041b6c <ui_get_sample_rate+0x50>
        sample_rate = 48000;
11041b60:	00aee014 	movui	r2,48000
11041b64:	e0bffe15 	stw	r2,-8(fp)
11041b68:	00001106 	br	11041bb0 <ui_get_sample_rate+0x94>
    else if (mask == 2)
11041b6c:	e0bfff17 	ldw	r2,-4(fp)
11041b70:	10800098 	cmpnei	r2,r2,2
11041b74:	1000031e 	bne	r2,zero,11041b84 <ui_get_sample_rate+0x68>
        sample_rate = 44100;
11041b78:	00ab1114 	movui	r2,44100
11041b7c:	e0bffe15 	stw	r2,-8(fp)
11041b80:	00000b06 	br	11041bb0 <ui_get_sample_rate+0x94>
    else if (mask == 3)
11041b84:	e0bfff17 	ldw	r2,-4(fp)
11041b88:	108000d8 	cmpnei	r2,r2,3
11041b8c:	1000031e 	bne	r2,zero,11041b9c <ui_get_sample_rate+0x80>
        sample_rate = 32000;
11041b90:	009f4004 	movi	r2,32000
11041b94:	e0bffe15 	stw	r2,-8(fp)
11041b98:	00000506 	br	11041bb0 <ui_get_sample_rate+0x94>
    else if (mask == 4)
11041b9c:	e0bfff17 	ldw	r2,-4(fp)
11041ba0:	10800118 	cmpnei	r2,r2,4
11041ba4:	1000021e 	bne	r2,zero,11041bb0 <ui_get_sample_rate+0x94>
        sample_rate = 8000;
11041ba8:	0087d004 	movi	r2,8000
11041bac:	e0bffe15 	stw	r2,-8(fp)
    return sample_rate;      
11041bb0:	e0bffe17 	ldw	r2,-8(fp)
} 
11041bb4:	e037883a 	mov	sp,fp
11041bb8:	df000017 	ldw	fp,0(sp)
11041bbc:	dec00104 	addi	sp,sp,4
11041bc0:	f800283a 	ret

11041bc4 <Red_Temp>:

float Red_Temp(void)
{
11041bc4:	defff504 	addi	sp,sp,-44
11041bc8:	dfc00a15 	stw	ra,40(sp)
11041bcc:	df000915 	stw	fp,36(sp)
11041bd0:	df000904 	addi	fp,sp,36
		int read_len;
		const alt_u32 write_length = 0;
11041bd4:	e03ffb15 	stw	zero,-20(fp)
		const alt_u8 *write_data = NULL;
11041bd8:	e03ffc15 	stw	zero,-16(fp)
		alt_u8 read_data[2];
		alt_u16 read_value;
		const alt_u32 flags = 0;
11041bdc:	e03ffd15 	stw	zero,-12(fp)
		float fTemp;

		read_len = alt_avalon_spi_command(SPI_TEMPERATURE_BASE,0,
11041be0:	00800084 	movi	r2,2
11041be4:	d8800015 	stw	r2,0(sp)
		                                  write_length, write_data,
		                                  sizeof(read_data),
		                                  (alt_u8 *)&read_data,
11041be8:	e0bfff84 	addi	r2,fp,-2
		alt_u8 read_data[2];
		alt_u16 read_value;
		const alt_u32 flags = 0;
		float fTemp;

		read_len = alt_avalon_spi_command(SPI_TEMPERATURE_BASE,0,
11041bec:	d8800115 	stw	r2,4(sp)
11041bf0:	e0bffd17 	ldw	r2,-12(fp)
11041bf4:	d8800215 	stw	r2,8(sp)
11041bf8:	01044234 	movhi	r4,4360
11041bfc:	21040804 	addi	r4,r4,4128
11041c00:	000b883a 	mov	r5,zero
11041c04:	e1bffb17 	ldw	r6,-20(fp)
11041c08:	e1fffc17 	ldw	r7,-16(fp)
11041c0c:	104db900 	call	1104db90 <alt_avalon_spi_command>
11041c10:	e0bffe15 	stw	r2,-8(fp)
		                                  sizeof(read_data),
		                                  (alt_u8 *)&read_data,
		                                  flags
		                                  );

		if (read_len == sizeof(read_data))
11041c14:	e0bffe17 	ldw	r2,-8(fp)
11041c18:	10800098 	cmpnei	r2,r2,2
11041c1c:	10003b1e 	bne	r2,zero,11041d0c <Red_Temp+0x148>
		{
			read_value = read_data[0]; // MSB
11041c20:	e0bfff83 	ldbu	r2,-2(fp)
11041c24:	10803fcc 	andi	r2,r2,255
11041c28:	e0bfff0d 	sth	r2,-4(fp)
			read_value <<= 8;
11041c2c:	e0bfff0b 	ldhu	r2,-4(fp)
11041c30:	1004923a 	slli	r2,r2,8
11041c34:	e0bfff0d 	sth	r2,-4(fp)
			read_value |= read_data[1];
11041c38:	e0bfffc3 	ldbu	r2,-1(fp)
11041c3c:	10c03fcc 	andi	r3,r2,255
11041c40:	e0bfff0b 	ldhu	r2,-4(fp)
11041c44:	1884b03a 	or	r2,r3,r2
11041c48:	e0bfff0d 	sth	r2,-4(fp)

			if ((read_value & 0xC000) == 0x00)
11041c4c:	e0bfff0b 	ldhu	r2,-4(fp)
11041c50:	10b0000c 	andi	r2,r2,49152
11041c54:	10002d1e 	bne	r2,zero,11041d0c <Red_Temp+0x148>
			{
				if ((0x2000 & read_value) == 0x2000)
11041c58:	e0bfff0b 	ldhu	r2,-4(fp)
11041c5c:	1088000c 	andi	r2,r2,8192
11041c60:	10bfffcc 	andi	r2,r2,65535
11041c64:	10002026 	beq	r2,zero,11041ce8 <Red_Temp+0x124>
				{
					fTemp = ((float)read_value - 16384.0)/32.0;
11041c68:	e0bfff0b 	ldhu	r2,-4(fp)
11041c6c:	1009883a 	mov	r4,r2
11041c70:	104296c0 	call	1104296c <__floatunsisf>
11041c74:	1007883a 	mov	r3,r2
11041c78:	1809883a 	mov	r4,r3
11041c7c:	10429280 	call	11042928 <__extendsfdf2>
11041c80:	100b883a 	mov	r5,r2
11041c84:	180d883a 	mov	r6,r3
11041c88:	2809883a 	mov	r4,r5
11041c8c:	300b883a 	mov	r5,r6
11041c90:	000d883a 	mov	r6,zero
11041c94:	01d03434 	movhi	r7,16592
11041c98:	1042de80 	call	11042de8 <__subdf3>
11041c9c:	1009883a 	mov	r4,r2
11041ca0:	180b883a 	mov	r5,r3
11041ca4:	2005883a 	mov	r2,r4
11041ca8:	2807883a 	mov	r3,r5
11041cac:	1009883a 	mov	r4,r2
11041cb0:	180b883a 	mov	r5,r3
11041cb4:	000d883a 	mov	r6,zero
11041cb8:	01d01034 	movhi	r7,16448
11041cbc:	1042e480 	call	11042e48 <__divdf3>
11041cc0:	1009883a 	mov	r4,r2
11041cc4:	180b883a 	mov	r5,r3
11041cc8:	2005883a 	mov	r2,r4
11041ccc:	2807883a 	mov	r3,r5
11041cd0:	1009883a 	mov	r4,r2
11041cd4:	180b883a 	mov	r5,r3
11041cd8:	10430340 	call	11043034 <__truncdfsf2>
11041cdc:	1007883a 	mov	r3,r2
11041ce0:	e0fffa15 	stw	r3,-24(fp)
11041ce4:	00000906 	br	11041d0c <Red_Temp+0x148>
				}
				else
				{
					fTemp = (float)read_value/32.0;
11041ce8:	e0bfff0b 	ldhu	r2,-4(fp)
11041cec:	1009883a 	mov	r4,r2
11041cf0:	104296c0 	call	1104296c <__floatunsisf>
11041cf4:	1007883a 	mov	r3,r2
11041cf8:	1809883a 	mov	r4,r3
11041cfc:	01508034 	movhi	r5,16896
11041d00:	10427900 	call	11042790 <__divsf3>
11041d04:	1007883a 	mov	r3,r2
11041d08:	e0fffa15 	stw	r3,-24(fp)
				}
			}
		}
		return(fTemp);
11041d0c:	e0fffa17 	ldw	r3,-24(fp)
11041d10:	1805883a 	mov	r2,r3
}
11041d14:	e037883a 	mov	sp,fp
11041d18:	dfc00117 	ldw	ra,4(sp)
11041d1c:	df000017 	ldw	fp,0(sp)
11041d20:	dec00204 	addi	sp,sp,8
11041d24:	f800283a 	ret

11041d28 <TIMER_Init>:
void TIMER_Init(void){
11041d28:	defffe04 	addi	sp,sp,-8
11041d2c:	dfc00115 	stw	ra,4(sp)
11041d30:	df000015 	stw	fp,0(sp)
11041d34:	d839883a 	mov	fp,sp
	//Timer Initialization
	  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
11041d38:	00c000c4 	movi	r3,3
11041d3c:	00844234 	movhi	r2,4360
11041d40:	10840104 	addi	r2,r2,4100
11041d44:	10c00035 	stwio	r3,0(r2)
	  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
11041d48:	0007883a 	mov	r3,zero
11041d4c:	00844234 	movhi	r2,4360
11041d50:	10840004 	addi	r2,r2,4096
11041d54:	10c00035 	stwio	r3,0(r2)
	if(alt_irq_register(TIMER_IRQ, (void *)0, timer_isr) != 0)
11041d58:	01000104 	movi	r4,4
11041d5c:	000b883a 	mov	r5,zero
11041d60:	01844134 	movhi	r6,4356
11041d64:	31876804 	addi	r6,r6,7584
11041d68:	104c73c0 	call	1104c73c <alt_irq_register>
11041d6c:	10000326 	beq	r2,zero,11041d7c <TIMER_Init+0x54>
		{
			printf("[SW-MONITOR]register timer IRQ fail\r\n");;
11041d70:	01000034 	movhi	r4,0
11041d74:	21007a04 	addi	r4,r4,488
11041d78:	10439e80 	call	110439e8 <puts>
		}
	//Start timer and begin the work
	  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
11041d7c:	00c001c4 	movi	r3,7
11041d80:	00844234 	movhi	r2,4360
11041d84:	10840104 	addi	r2,r2,4100
11041d88:	10c00035 	stwio	r3,0(r2)
}
11041d8c:	e037883a 	mov	sp,fp
11041d90:	dfc00117 	ldw	ra,4(sp)
11041d94:	df000017 	ldw	fp,0(sp)
11041d98:	dec00204 	addi	sp,sp,8
11041d9c:	f800283a 	ret

11041da0 <timer_isr>:

static void timer_isr(void* context, alt_u32 id){
11041da0:	defffd04 	addi	sp,sp,-12
11041da4:	df000215 	stw	fp,8(sp)
11041da8:	df000204 	addi	fp,sp,8
11041dac:	e13ffe15 	stw	r4,-8(fp)
11041db0:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
11041db4:	0007883a 	mov	r3,zero
11041db8:	00844234 	movhi	r2,4360
11041dbc:	10840004 	addi	r2,r2,4096
11041dc0:	10c00035 	stwio	r3,0(r2)
	sec ++;
11041dc4:	d0a00f83 	ldbu	r2,-32706(gp)
11041dc8:	10800044 	addi	r2,r2,1
11041dcc:	d0a00f85 	stb	r2,-32706(gp)
	if(sec == 60)
11041dd0:	d0a00f83 	ldbu	r2,-32706(gp)
11041dd4:	10803fcc 	andi	r2,r2,255
11041dd8:	10800f18 	cmpnei	r2,r2,60
11041ddc:	10000c1e 	bne	r2,zero,11041e10 <timer_isr+0x70>
	{
	   sec = 0;
11041de0:	d0200f85 	stb	zero,-32706(gp)
	   min ++;
11041de4:	d0a00f43 	ldbu	r2,-32707(gp)
11041de8:	10800044 	addi	r2,r2,1
11041dec:	d0a00f45 	stb	r2,-32707(gp)
	   if(min == 60)
11041df0:	d0a00f43 	ldbu	r2,-32707(gp)
11041df4:	10803fcc 	andi	r2,r2,255
11041df8:	10800f18 	cmpnei	r2,r2,60
11041dfc:	1000041e 	bne	r2,zero,11041e10 <timer_isr+0x70>
	   {
		   min = 0;
11041e00:	d0200f45 	stb	zero,-32707(gp)
		   hour++;
11041e04:	d0a00f03 	ldbu	r2,-32708(gp)
11041e08:	10800044 	addi	r2,r2,1
11041e0c:	d0a00f05 	stb	r2,-32708(gp)
	   }
	}
}
11041e10:	e037883a 	mov	sp,fp
11041e14:	df000017 	ldw	fp,0(sp)
11041e18:	dec00104 	addi	sp,sp,4
11041e1c:	f800283a 	ret

11041e20 <button_monitor_isr>:

void button_monitor_isr(void* context, alt_u32 id){
11041e20:	defffc04 	addi	sp,sp,-16
11041e24:	df000315 	stw	fp,12(sp)
11041e28:	df000304 	addi	fp,sp,12
11041e2c:	e13ffe15 	stw	r4,-8(fp)
11041e30:	e17fff15 	stw	r5,-4(fp)
    volatile alt_u32* pPressedMask = (volatile alt_u32*)context;
11041e34:	e0bffe17 	ldw	r2,-8(fp)
11041e38:	e0bffd15 	stw	r2,-12(fp)
    *pPressedMask |= IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE) & 0x0F;  // 4-button 
11041e3c:	e0bffd17 	ldw	r2,-12(fp)
11041e40:	10c00017 	ldw	r3,0(r2)
11041e44:	00840034 	movhi	r2,4096
11041e48:	10801304 	addi	r2,r2,76
11041e4c:	10800037 	ldwio	r2,0(r2)
11041e50:	108003cc 	andi	r2,r2,15
11041e54:	1886b03a 	or	r3,r3,r2
11041e58:	e0bffd17 	ldw	r2,-12(fp)
11041e5c:	10c00015 	stw	r3,0(r2)
    
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0); 
11041e60:	0007883a 	mov	r3,zero
11041e64:	00840034 	movhi	r2,4096
11041e68:	10801304 	addi	r2,r2,76
11041e6c:	10c00035 	stwio	r3,0(r2)
}
11041e70:	e037883a 	mov	sp,fp
11041e74:	df000017 	ldw	fp,0(sp)
11041e78:	dec00104 	addi	sp,sp,4
11041e7c:	f800283a 	ret

11041e80 <button_monitor_start>:

bool button_monitor_start(volatile alt_u32 *pPressedMask){
11041e80:	defffc04 	addi	sp,sp,-16
11041e84:	dfc00315 	stw	ra,12(sp)
11041e88:	df000215 	stw	fp,8(sp)
11041e8c:	df000204 	addi	fp,sp,8
11041e90:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
11041e94:	00800044 	movi	r2,1
11041e98:	e0bffe15 	stw	r2,-8(fp)
    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0x0F); // 4-button
11041e9c:	00c003c4 	movi	r3,15
11041ea0:	00840034 	movhi	r2,4096
11041ea4:	10801204 	addi	r2,r2,72
11041ea8:	10c00035 	stwio	r3,0(r2)
    
    // Reset the edge catpure register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0); 
11041eac:	0007883a 	mov	r3,zero
11041eb0:	00840034 	movhi	r2,4096
11041eb4:	10801304 	addi	r2,r2,76
11041eb8:	10c00035 	stwio	r3,0(r2)
    
    // register IRQ
    if (bSuccess && (alt_irq_register(KEY_IRQ, (void *)pPressedMask, button_monitor_isr) != 0)){
11041ebc:	e0bffe17 	ldw	r2,-8(fp)
11041ec0:	10000a26 	beq	r2,zero,11041eec <button_monitor_start+0x6c>
11041ec4:	01000044 	movi	r4,1
11041ec8:	e17fff17 	ldw	r5,-4(fp)
11041ecc:	01844134 	movhi	r6,4356
11041ed0:	31878804 	addi	r6,r6,7712
11041ed4:	104c73c0 	call	1104c73c <alt_irq_register>
11041ed8:	10000426 	beq	r2,zero,11041eec <button_monitor_start+0x6c>
        printf("[SW-MONITOR]register button IRQ fail\r\n");
11041edc:	01000034 	movhi	r4,0
11041ee0:	21008404 	addi	r4,r4,528
11041ee4:	10439e80 	call	110439e8 <puts>
        bSuccess = FALSE;
11041ee8:	e03ffe15 	stw	zero,-8(fp)
    }
    
    return bSuccess;        
11041eec:	e0bffe17 	ldw	r2,-8(fp)
}
11041ef0:	e037883a 	mov	sp,fp
11041ef4:	dfc00117 	ldw	ra,4(sp)
11041ef8:	df000017 	ldw	fp,0(sp)
11041efc:	dec00204 	addi	sp,sp,8
11041f00:	f800283a 	ret

11041f04 <init_audio>:


bool init_audio(AUDIO_FUNC audio_func){
11041f04:	defffc04 	addi	sp,sp,-16
11041f08:	dfc00315 	stw	ra,12(sp)
11041f0c:	df000215 	stw	fp,8(sp)
11041f10:	df000204 	addi	fp,sp,8
11041f14:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
11041f18:	00800044 	movi	r2,1
11041f1c:	e0bffe15 	stw	r2,-8(fp)
    AUDIO_InterfaceActive(FALSE);
11041f20:	0009883a 	mov	r4,zero
11041f24:	10405540 	call	11040554 <AUDIO_InterfaceActive>
    //
    if (audio_func == MIC_RECORD){
11041f28:	e0bfff17 	ldw	r2,-4(fp)
11041f2c:	10000b1e 	bne	r2,zero,11041f5c <init_audio+0x58>
        AUDIO_SetInputSource(SOURCE_MIC);
11041f30:	0009883a 	mov	r4,zero
11041f34:	10409340 	call	11040934 <AUDIO_SetInputSource>
        AUDIO_DacEnableSoftMute(TRUE);
11041f38:	01000044 	movi	r4,1
11041f3c:	104073c0 	call	1104073c <AUDIO_DacEnableSoftMute>
        AUDIO_AdcEnableHighPassFilter(FALSE);
11041f40:	0009883a 	mov	r4,zero
11041f44:	10406140 	call	11040614 <AUDIO_AdcEnableHighPassFilter>
        AUDIO_MicMute(FALSE);
11041f48:	0009883a 	mov	r4,zero
11041f4c:	10407c80 	call	110407c8 <AUDIO_MicMute>
        AUDIO_LineInMute(TRUE);
11041f50:	01000044 	movi	r4,1
11041f54:	10408540 	call	11040854 <AUDIO_LineInMute>
11041f58:	00002106 	br	11041fe0 <init_audio+0xdc>
    }else if (audio_func == LINEIN_RECORD){
11041f5c:	e0bfff17 	ldw	r2,-4(fp)
11041f60:	10800058 	cmpnei	r2,r2,1
11041f64:	10000e1e 	bne	r2,zero,11041fa0 <init_audio+0x9c>
        AUDIO_SetInputSource(SOURCE_LINEIN);
11041f68:	01000044 	movi	r4,1
11041f6c:	10409340 	call	11040934 <AUDIO_SetInputSource>
        AUDIO_DacEnableSoftMute(TRUE);
11041f70:	01000044 	movi	r4,1
11041f74:	104073c0 	call	1104073c <AUDIO_DacEnableSoftMute>
        AUDIO_AdcEnableHighPassFilter(FALSE);
11041f78:	0009883a 	mov	r4,zero
11041f7c:	10406140 	call	11040614 <AUDIO_AdcEnableHighPassFilter>
        AUDIO_MicMute(TRUE);
11041f80:	01000044 	movi	r4,1
11041f84:	10407c80 	call	110407c8 <AUDIO_MicMute>
        AUDIO_LineInMute(FALSE);
11041f88:	0009883a 	mov	r4,zero
11041f8c:	10408540 	call	11040854 <AUDIO_LineInMute>
        AUDIO_SetLineInVol(0x17, 0x17);  // max 0x1F, min:0; 0x17: 0dB (assume max input is 2.0v rms)
11041f90:	010005c4 	movi	r4,23
11041f94:	014005c4 	movi	r5,23
11041f98:	1040aac0 	call	11040aac <AUDIO_SetLineInVol>
11041f9c:	00001006 	br	11041fe0 <init_audio+0xdc>
    }else if (audio_func == LINEOUT_PLAY){
11041fa0:	e0bfff17 	ldw	r2,-4(fp)
11041fa4:	10800098 	cmpnei	r2,r2,2
11041fa8:	10000d1e 	bne	r2,zero,11041fe0 <init_audio+0xdc>
        AUDIO_DacEnableSoftMute(TRUE);
11041fac:	01000044 	movi	r4,1
11041fb0:	104073c0 	call	1104073c <AUDIO_DacEnableSoftMute>
        AUDIO_MicMute(TRUE);
11041fb4:	01000044 	movi	r4,1
11041fb8:	10407c80 	call	110407c8 <AUDIO_MicMute>
        AUDIO_LineInMute(FALSE);
11041fbc:	0009883a 	mov	r4,zero
11041fc0:	10408540 	call	11040854 <AUDIO_LineInMute>
        AUDIO_DacEnableSoftMute(FALSE);
11041fc4:	0009883a 	mov	r4,zero
11041fc8:	104073c0 	call	1104073c <AUDIO_DacEnableSoftMute>
        //AUDIO_DacDeemphasisControl(DEEMPHASIS_48K);
        AUDIO_SetLineOutVol(LINEOUT_DEFUALT_VOL, LINEOUT_DEFUALT_VOL); // max 7F, min: 30, 0x79: 0 db
11041fcc:	01001e44 	movi	r4,121
11041fd0:	01401e44 	movi	r5,121
11041fd4:	1040bbc0 	call	11040bbc <AUDIO_SetLineOutVol>
        AUDIO_DacEnableSoftMute(FALSE);
11041fd8:	0009883a 	mov	r4,zero
11041fdc:	104073c0 	call	1104073c <AUDIO_DacEnableSoftMute>
    }
    
    if (record_sample_rate == 8000)
11041fe0:	d0a01117 	ldw	r2,-32700(gp)
11041fe4:	1087d018 	cmpnei	r2,r2,8000
11041fe8:	1000031e 	bne	r2,zero,11041ff8 <init_audio+0xf4>
        AUDIO_SetSampleRate(RATE_ADC8K_DAC8K);
11041fec:	010000c4 	movi	r4,3
11041ff0:	10409c40 	call	110409c4 <AUDIO_SetSampleRate>
11041ff4:	00001406 	br	11042048 <init_audio+0x144>
    else if (record_sample_rate == 32000)
11041ff8:	d0a01117 	ldw	r2,-32700(gp)
11041ffc:	109f4018 	cmpnei	r2,r2,32000
11042000:	1000031e 	bne	r2,zero,11042010 <init_audio+0x10c>
        AUDIO_SetSampleRate(RATE_ADC32K_DAC32K);
11042004:	01000104 	movi	r4,4
11042008:	10409c40 	call	110409c4 <AUDIO_SetSampleRate>
1104200c:	00000e06 	br	11042048 <init_audio+0x144>
    else if (record_sample_rate == 48000)
11042010:	d0e01117 	ldw	r3,-32700(gp)
11042014:	00aee014 	movui	r2,48000
11042018:	1880031e 	bne	r3,r2,11042028 <init_audio+0x124>
        AUDIO_SetSampleRate(RATE_ADC48K_DAC48K);
1104201c:	0009883a 	mov	r4,zero
11042020:	10409c40 	call	110409c4 <AUDIO_SetSampleRate>
11042024:	00000806 	br	11042048 <init_audio+0x144>
    else if (record_sample_rate == 44100)
11042028:	d0e01117 	ldw	r3,-32700(gp)
1104202c:	00ab1114 	movui	r2,44100
11042030:	1880031e 	bne	r3,r2,11042040 <init_audio+0x13c>
        AUDIO_SetSampleRate(RATE_ADC44K1_DAC44K1);
11042034:	01000184 	movi	r4,6
11042038:	10409c40 	call	110409c4 <AUDIO_SetSampleRate>
1104203c:	00000206 	br	11042048 <init_audio+0x144>
    else    
        AUDIO_SetSampleRate(RATE_ADC96K_DAC96K);
11042040:	01000144 	movi	r4,5
11042044:	10409c40 	call	110409c4 <AUDIO_SetSampleRate>
    //
    AUDIO_InterfaceActive(TRUE);
11042048:	01000044 	movi	r4,1
1104204c:	10405540 	call	11040554 <AUDIO_InterfaceActive>
    
    return bSuccess;             
11042050:	e0bffe17 	ldw	r2,-8(fp)
}
11042054:	e037883a 	mov	sp,fp
11042058:	dfc00117 	ldw	ra,4(sp)
1104205c:	df000017 	ldw	fp,0(sp)
11042060:	dec00204 	addi	sp,sp,8
11042064:	f800283a 	ret

11042068 <display_time_elapsed>:


alt_u32 display_time_elapsed(alt_u32 sample_num){
11042068:	defffc04 	addi	sp,sp,-16
1104206c:	dfc00315 	stw	ra,12(sp)
11042070:	df000215 	stw	fp,8(sp)
11042074:	df000204 	addi	fp,sp,8
11042078:	e13fff15 	stw	r4,-4(fp)
    // assume sample rate is 48K
    alt_u32 time;
    time = sample_num * 100 / record_sample_rate;
1104207c:	e0bfff17 	ldw	r2,-4(fp)
11042080:	10c01924 	muli	r3,r2,100
11042084:	d0a01117 	ldw	r2,-32700(gp)
11042088:	1809883a 	mov	r4,r3
1104208c:	100b883a 	mov	r5,r2
11042090:	10431b40 	call	110431b4 <__udivsi3>
11042094:	e0bffe15 	stw	r2,-8(fp)
    return time;
11042098:	e0bffe17 	ldw	r2,-8(fp)
}
1104209c:	e037883a 	mov	sp,fp
110420a0:	dfc00117 	ldw	ra,4(sp)
110420a4:	df000017 	ldw	fp,0(sp)
110420a8:	dec00204 	addi	sp,sp,8
110420ac:	f800283a 	ret

110420b0 <init>:


bool init(void){
110420b0:	defffd04 	addi	sp,sp,-12
110420b4:	dfc00215 	stw	ra,8(sp)
110420b8:	df000115 	stw	fp,4(sp)
110420bc:	df000104 	addi	fp,sp,4
    bool bSuccess = TRUE;
110420c0:	00800044 	movi	r2,1
110420c4:	e0bfff15 	stw	r2,-4(fp)

    LED_AllOff();
110420c8:	10418900 	call	11041890 <LED_AllOff>
    printf("Welcome Audio Demo\n");
110420cc:	01000034 	movhi	r4,0
110420d0:	21008e04 	addi	r4,r4,568
110420d4:	10439e80 	call	110439e8 <puts>

    // prepare    
    if (!AUDIO_Init()){
110420d8:	10402040 	call	11040204 <AUDIO_Init>
110420dc:	1000041e 	bne	r2,zero,110420f0 <init+0x40>
        printf("Audio Init Error\r\n");
110420e0:	01000034 	movhi	r4,0
110420e4:	21009304 	addi	r4,r4,588
110420e8:	10439e80 	call	110439e8 <puts>
        bSuccess = FALSE;
110420ec:	e03fff15 	stw	zero,-4(fp)
/*    if (!AUDIO_REG_READ()){
         printf("AUDIO REG READ Error\r\n");
         bSuccess = FALSE;
       }
*/
    TIMER_Init();
110420f0:	1041d280 	call	11041d28 <TIMER_Init>
        return bSuccess;
110420f4:	e0bfff17 	ldw	r2,-4(fp)
}
110420f8:	e037883a 	mov	sp,fp
110420fc:	dfc00117 	ldw	ra,4(sp)
11042100:	df000017 	ldw	fp,0(sp)
11042104:	dec00204 	addi	sp,sp,8
11042108:	f800283a 	ret

1104210c <dump_record_data>:

void dump_record_data(alt_u32 *pData, alt_u32 len){
1104210c:	defff804 	addi	sp,sp,-32
11042110:	dfc00715 	stw	ra,28(sp)
11042114:	df000615 	stw	fp,24(sp)
11042118:	df000604 	addi	fp,sp,24
1104211c:	e13ffe15 	stw	r4,-8(fp)
11042120:	e17fff15 	stw	r5,-4(fp)
    short sample_l, sample_r, sample_max = 0;
11042124:	e03ffa0d 	sth	zero,-24(fp)
    alt_u32 data;
    int i;
    //return ;
    for(i=0;i<len;i++){
11042128:	e03ffb15 	stw	zero,-20(fp)
1104212c:	00002e06 	br	110421e8 <dump_record_data+0xdc>
        data = *pData++;
11042130:	e0bffe17 	ldw	r2,-8(fp)
11042134:	10800017 	ldw	r2,0(r2)
11042138:	e0bffc15 	stw	r2,-16(fp)
1104213c:	e0bffe17 	ldw	r2,-8(fp)
11042140:	10800104 	addi	r2,r2,4
11042144:	e0bffe15 	stw	r2,-8(fp)
        sample_l = (short)((data >> 16) & 0xFFFF); 
11042148:	e0bffc17 	ldw	r2,-16(fp)
1104214c:	1004d43a 	srli	r2,r2,16
11042150:	e0bffd0d 	sth	r2,-12(fp)
        sample_r = (short)(data & 0xFFFF);
11042154:	e0bffc17 	ldw	r2,-16(fp)
11042158:	e0bffd8d 	sth	r2,-10(fp)
        //printf("[%d]%d/%d\n", i, sample_l, sample_r);
        if (sample_l > 0 && sample_max <  sample_l)
1104215c:	e0bffd0f 	ldh	r2,-12(fp)
11042160:	0080050e 	bge	zero,r2,11042178 <dump_record_data+0x6c>
11042164:	e0fffa0f 	ldh	r3,-24(fp)
11042168:	e0bffd0f 	ldh	r2,-12(fp)
1104216c:	1880020e 	bge	r3,r2,11042178 <dump_record_data+0x6c>
            sample_max = sample_l;
11042170:	e0bffd0b 	ldhu	r2,-12(fp)
11042174:	e0bffa0d 	sth	r2,-24(fp)
        if (sample_l < 0 && sample_max <  -sample_l)
11042178:	e0bffd0f 	ldh	r2,-12(fp)
1104217c:	1000070e 	bge	r2,zero,1104219c <dump_record_data+0x90>
11042180:	e0fffa0f 	ldh	r3,-24(fp)
11042184:	e0bffd0f 	ldh	r2,-12(fp)
11042188:	0085c83a 	sub	r2,zero,r2
1104218c:	1880030e 	bge	r3,r2,1104219c <dump_record_data+0x90>
            sample_max = -sample_l;
11042190:	e0bffd0b 	ldhu	r2,-12(fp)
11042194:	0085c83a 	sub	r2,zero,r2
11042198:	e0bffa0d 	sth	r2,-24(fp)
        if (sample_r > 0 && sample_max <  sample_r)
1104219c:	e0bffd8f 	ldh	r2,-10(fp)
110421a0:	0080050e 	bge	zero,r2,110421b8 <dump_record_data+0xac>
110421a4:	e0fffa0f 	ldh	r3,-24(fp)
110421a8:	e0bffd8f 	ldh	r2,-10(fp)
110421ac:	1880020e 	bge	r3,r2,110421b8 <dump_record_data+0xac>
            sample_max = sample_r;
110421b0:	e0bffd8b 	ldhu	r2,-10(fp)
110421b4:	e0bffa0d 	sth	r2,-24(fp)
        if (sample_r < 0 && sample_max <  -sample_r)
110421b8:	e0bffd8f 	ldh	r2,-10(fp)
110421bc:	1000070e 	bge	r2,zero,110421dc <dump_record_data+0xd0>
110421c0:	e0fffa0f 	ldh	r3,-24(fp)
110421c4:	e0bffd8f 	ldh	r2,-10(fp)
110421c8:	0085c83a 	sub	r2,zero,r2
110421cc:	1880030e 	bge	r3,r2,110421dc <dump_record_data+0xd0>
            sample_max = -sample_r;
110421d0:	e0bffd8b 	ldhu	r2,-10(fp)
110421d4:	0085c83a 	sub	r2,zero,r2
110421d8:	e0bffa0d 	sth	r2,-24(fp)
void dump_record_data(alt_u32 *pData, alt_u32 len){
    short sample_l, sample_r, sample_max = 0;
    alt_u32 data;
    int i;
    //return ;
    for(i=0;i<len;i++){
110421dc:	e0bffb17 	ldw	r2,-20(fp)
110421e0:	10800044 	addi	r2,r2,1
110421e4:	e0bffb15 	stw	r2,-20(fp)
110421e8:	e0fffb17 	ldw	r3,-20(fp)
110421ec:	e0bfff17 	ldw	r2,-4(fp)
110421f0:	18bfcf36 	bltu	r3,r2,11042130 <dump_record_data+0x24>
        if (sample_r > 0 && sample_max <  sample_r)
            sample_max = sample_r;
        if (sample_r < 0 && sample_max <  -sample_r)
            sample_max = -sample_r;
    }
    printf("max=%d\n\n", sample_max);
110421f4:	e0bffa0f 	ldh	r2,-24(fp)
110421f8:	01000034 	movhi	r4,0
110421fc:	21009804 	addi	r4,r4,608
11042200:	100b883a 	mov	r5,r2
11042204:	10439280 	call	11043928 <printf>
}
11042208:	e037883a 	mov	sp,fp
1104220c:	dfc00117 	ldw	ra,4(sp)
11042210:	df000017 	ldw	fp,0(sp)
11042214:	dec00204 	addi	sp,sp,8
11042218:	f800283a 	ret

1104221c <show_menu>:
    "               DOWN/UP/UP------>32K\n",
    "               UP/DOWN/DOWN---->8K\n",
    "\n\n"
};

void show_menu(void){
1104221c:	defffd04 	addi	sp,sp,-12
11042220:	dfc00215 	stw	ra,8(sp)
11042224:	df000115 	stw	fp,4(sp)
11042228:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
1104222c:	e03fff15 	stw	zero,-4(fp)
11042230:	00000a06 	br	1104225c <show_menu+0x40>
        printf(szMenu[i]);
11042234:	e0bfff17 	ldw	r2,-4(fp)
11042238:	100691fa 	slli	r3,r2,7
1104223c:	00800034 	movhi	r2,0
11042240:	10809a44 	addi	r2,r2,617
11042244:	1885883a 	add	r2,r3,r2
11042248:	1009883a 	mov	r4,r2
1104224c:	10439280 	call	11043928 <printf>
    "\n\n"
};

void show_menu(void){
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
11042250:	e0bfff17 	ldw	r2,-4(fp)
11042254:	10800044 	addi	r2,r2,1
11042258:	e0bfff15 	stw	r2,-4(fp)
1104225c:	e0bfff17 	ldw	r2,-4(fp)
11042260:	108003b0 	cmpltui	r2,r2,14
11042264:	103ff31e 	bne	r2,zero,11042234 <show_menu+0x18>
        printf(szMenu[i]);
}
11042268:	e037883a 	mov	sp,fp
1104226c:	dfc00117 	ldw	ra,4(sp)
11042270:	df000017 	ldw	fp,0(sp)
11042274:	dec00204 	addi	sp,sp,8
11042278:	f800283a 	ret

1104227c <main>:

int main()
{
1104227c:	deffe704 	addi	sp,sp,-100
11042280:	dfc01815 	stw	ra,96(sp)
11042284:	df001715 	stw	fp,92(sp)
11042288:	dc801615 	stw	r18,88(sp)
1104228c:	dc401515 	stw	r17,84(sp)
11042290:	dc001415 	stw	r16,80(sp)
11042294:	df001404 	addi	fp,sp,80
    typedef enum{
        ST_STANDY,
        ST_RECODING,
        ST_PLAYING
    }STATE;
    STATE state = ST_STANDY;
11042298:	e03fee15 	stw	zero,-72(fp)
    volatile alt_u32 button_mask=0;
1104229c:	e03ffe15 	stw	zero,-8(fp)
    bool bRecordPressed, bPlayPressed, bError = FALSE;
110422a0:	e03fef15 	stw	zero,-68(fp)


    float Board_temperature;

    
    show_menu();
110422a4:	104221c0 	call	1104221c <show_menu>
    if (!init())
110422a8:	10420b00 	call	110420b0 <init>
110422ac:	1000021e 	bne	r2,zero,110422b8 <main+0x3c>
        return 0;
110422b0:	0005883a 	mov	r2,zero
110422b4:	00012e06 	br	11042770 <main+0x4f4>

 #ifdef USE_DDR3_FOR_DATA
    pBuf = (alt_u32 *)DDR3_BASE;
110422b8:	e03ff715 	stw	zero,-36(fp)
    buf_sample_size = DDR3_SPAN/sizeof(alt_u32);
110422bc:	00810034 	movhi	r2,1024
110422c0:	e0bff815 	stw	r2,-32(fp)
    if (!pBuf){
        printf("malloc fail\r\n");
        return 0;
    }
#endif
    button_monitor_start(&button_mask);  // button IRQ
110422c4:	e0bffe04 	addi	r2,fp,-8
110422c8:	1009883a 	mov	r4,r2
110422cc:	1041e800 	call	11041e80 <button_monitor_start>
    printf("ready\n\n");
110422d0:	01000034 	movhi	r4,0
110422d4:	21025b04 	addi	r4,r4,2412
110422d8:	10439e80 	call	110439e8 <puts>
    
    
    // test
    record_sample_rate = ui_get_sample_rate(); 
110422dc:	1041b1c0 	call	11041b1c <ui_get_sample_rate>
110422e0:	d0a01115 	stw	r2,-32700(gp)
    RecordLen = buf_sample_size;
110422e4:	e0bff817 	ldw	r2,-32(fp)
110422e8:	e0bff215 	stw	r2,-56(fp)
110422ec:	00000106 	br	110422f4 <main+0x78>
                    PlayLen++;
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
            }
        }        
    }
110422f0:	0001883a 	nop
    RecordLen = buf_sample_size;
    //
    
    // infinite loop
    while(1){
    	if((sec%5 == 0))
110422f4:	d0a00f83 	ldbu	r2,-32706(gp)
110422f8:	10803fcc 	andi	r2,r2,255
110422fc:	1009883a 	mov	r4,r2
11042300:	01400144 	movi	r5,5
11042304:	10431bc0 	call	110431bc <__umodsi3>
11042308:	10803fcc 	andi	r2,r2,255
1104230c:	10001c1e 	bne	r2,zero,11042380 <main+0x104>
    	{
    	     Board_temperature=Red_Temp();
11042310:	1041bc40 	call	11041bc4 <Red_Temp>
11042314:	e0bff915 	stw	r2,-28(fp)
    	     printf(" %02d:%02d:%02d :  Board temperature: %.2f*C;\n",hour,min,sec,Board_temperature);
11042318:	d0a00f03 	ldbu	r2,-32708(gp)
1104231c:	14803fcc 	andi	r18,r2,255
11042320:	d0a00f43 	ldbu	r2,-32707(gp)
11042324:	14403fcc 	andi	r17,r2,255
11042328:	d0a00f83 	ldbu	r2,-32706(gp)
1104232c:	14003fcc 	andi	r16,r2,255
11042330:	e13ff917 	ldw	r4,-28(fp)
11042334:	10429280 	call	11042928 <__extendsfdf2>
11042338:	1009883a 	mov	r4,r2
1104233c:	180b883a 	mov	r5,r3
11042340:	d9000015 	stw	r4,0(sp)
11042344:	d9400115 	stw	r5,4(sp)
11042348:	01000034 	movhi	r4,0
1104234c:	21025d04 	addi	r4,r4,2420
11042350:	900b883a 	mov	r5,r18
11042354:	880d883a 	mov	r6,r17
11042358:	800f883a 	mov	r7,r16
1104235c:	10439280 	call	11043928 <printf>
    	     if(Board_temperature > ALARM_TEMP)
11042360:	e13ff917 	ldw	r4,-28(fp)
11042364:	01508c34 	movhi	r5,16944
11042368:	10428cc0 	call	110428cc <__gtsf2>
1104236c:	0080030e 	bge	zero,r2,1104237c <main+0x100>
    	    	 is_alarm_on = TRUE;
11042370:	00800044 	movi	r2,1
11042374:	d0a01015 	stw	r2,-32704(gp)
11042378:	00000106 	br	11042380 <main+0x104>
    	     else
    	    	 is_alarm_on = FALSE;
1104237c:	d0201015 	stw	zero,-32704(gp)
    	}

        // 
        bRecordPressed = (button_mask & RECORD_BUTTON)?TRUE:FALSE;
11042380:	e0bffe17 	ldw	r2,-8(fp)
11042384:	1080020c 	andi	r2,r2,8
11042388:	1004c03a 	cmpne	r2,r2,zero
1104238c:	10803fcc 	andi	r2,r2,255
11042390:	e0bffa15 	stw	r2,-24(fp)
        bPlayPressed = (button_mask & PLAY_BUTTON)?TRUE:FALSE;
11042394:	e0bffe17 	ldw	r2,-8(fp)
11042398:	1080010c 	andi	r2,r2,4
1104239c:	1004c03a 	cmpne	r2,r2,zero
110423a0:	10803fcc 	andi	r2,r2,255
110423a4:	e0bffb15 	stw	r2,-20(fp)
        if (bPlayPressed || bRecordPressed) 
110423a8:	e0bffb17 	ldw	r2,-20(fp)
110423ac:	1000021e 	bne	r2,zero,110423b8 <main+0x13c>
110423b0:	e0bffa17 	ldw	r2,-24(fp)
110423b4:	10000126 	beq	r2,zero,110423bc <main+0x140>
            button_mask = 0;
110423b8:	e03ffe15 	stw	zero,-8(fp)
        if (state == ST_STANDY){
110423bc:	e0bfee17 	ldw	r2,-72(fp)
110423c0:	1000401e 	bne	r2,zero,110424c4 <main+0x248>
            if (bRecordPressed){
110423c4:	e0bffa17 	ldw	r2,-24(fp)
110423c8:	10002326 	beq	r2,zero,11042458 <main+0x1dc>
            	LED_Display(0x08);
110423cc:	01000204 	movi	r4,8
110423d0:	10418280 	call	11041828 <LED_Display>
                bool bMicRecord;
                record_sample_rate = ui_get_sample_rate();
110423d4:	1041b1c0 	call	11041b1c <ui_get_sample_rate>
110423d8:	d0a01115 	stw	r2,-32700(gp)
                bMicRecord = ui_is_mic_record();
110423dc:	1041ae00 	call	11041ae0 <ui_is_mic_record>
110423e0:	e0bffc15 	stw	r2,-16(fp)
                AUDIO_FifoClear();
110423e4:	10410900 	call	11041090 <AUDIO_FifoClear>
                init_audio(bMicRecord?MIC_RECORD:LINEIN_RECORD);
110423e8:	e0bffc17 	ldw	r2,-16(fp)
110423ec:	1005003a 	cmpeq	r2,r2,zero
110423f0:	10803fcc 	andi	r2,r2,255
110423f4:	1009883a 	mov	r4,r2
110423f8:	1041f040 	call	11041f04 <init_audio>
                AUDIO_FifoClear();
110423fc:	10410900 	call	11041090 <AUDIO_FifoClear>
                state = ST_RECODING;
11042400:	00800044 	movi	r2,1
11042404:	e0bfee15 	stw	r2,-72(fp)
                alt_ic_irq_disable(0, TIMER_IRQ);
11042408:	0009883a 	mov	r4,zero
1104240c:	01400104 	movi	r5,4
11042410:	104c5600 	call	1104c560 <alt_ic_irq_disable>
                if (bMicRecord){
11042414:	e0bffc17 	ldw	r2,-16(fp)
11042418:	10000626 	beq	r2,zero,11042434 <main+0x1b8>
                    printf("MIC recording (sample rate = %d)...\r\n", record_sample_rate);
1104241c:	d0a01117 	ldw	r2,-32700(gp)
11042420:	01000034 	movhi	r4,0
11042424:	21026904 	addi	r4,r4,2468
11042428:	100b883a 	mov	r5,r2
1104242c:	10439280 	call	11043928 <printf>
11042430:	00000506 	br	11042448 <main+0x1cc>
                }else{
                    printf("LINE-IN recording (sample rate = %d)...\r\n", record_sample_rate);
11042434:	d0a01117 	ldw	r2,-32700(gp)
11042438:	01000034 	movhi	r4,0
1104243c:	21027304 	addi	r4,r4,2508
11042440:	100b883a 	mov	r5,r2
11042444:	10439280 	call	11043928 <printf>
                }                    
                pRecording = pBuf;
11042448:	e0bff717 	ldw	r2,-36(fp)
1104244c:	e0bff115 	stw	r2,-60(fp)
                RecordLen = 0;
11042450:	e03ff215 	stw	zero,-56(fp)
11042454:	00001906 	br	110424bc <main+0x240>
            }else if (bPlayPressed && is_alarm_on){
11042458:	e0bffb17 	ldw	r2,-20(fp)
1104245c:	10001726 	beq	r2,zero,110424bc <main+0x240>
11042460:	d0a01017 	ldw	r2,-32704(gp)
11042464:	10001526 	beq	r2,zero,110424bc <main+0x240>
                if (RecordLen == 0){
11042468:	e0bff217 	ldw	r2,-56(fp)
1104246c:	1000041e 	bne	r2,zero,11042480 <main+0x204>
                    printf("Please record before play audio\r\n");
11042470:	01000034 	movhi	r4,0
11042474:	21027e04 	addi	r4,r4,2552
11042478:	10439e80 	call	110439e8 <puts>
1104247c:	00000f06 	br	110424bc <main+0x240>
                }else{
                	LED_Display(0x04);
11042480:	01000104 	movi	r4,4
11042484:	10418280 	call	11041828 <LED_Display>
                    AUDIO_FifoClear();
11042488:	10410900 	call	11041090 <AUDIO_FifoClear>
                    init_audio(LINEOUT_PLAY);
1104248c:	01000084 	movi	r4,2
11042490:	1041f040 	call	11041f04 <init_audio>
                    state = ST_PLAYING;
11042494:	00800084 	movi	r2,2
11042498:	e0bfee15 	stw	r2,-72(fp)
                    printf("playing (sample rate = %d)...\r\n", record_sample_rate);
1104249c:	d0a01117 	ldw	r2,-32700(gp)
110424a0:	01000034 	movhi	r4,0
110424a4:	21028704 	addi	r4,r4,2588
110424a8:	100b883a 	mov	r5,r2
110424ac:	10439280 	call	11043928 <printf>
                    pPlaying = pBuf;
110424b0:	e0bff717 	ldw	r2,-36(fp)
110424b4:	e0bff015 	stw	r2,-64(fp)
                    PlayLen = 0;
110424b8:	e03ff315 	stw	zero,-52(fp)
                }  
            }
            bError = FALSE;
110424bc:	e03fef15 	stw	zero,-68(fp)
                    PlayLen++;
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
            }
        }        
    }
110424c0:	003f8b06 	br	110422f0 <main+0x74>
                    pPlaying = pBuf;
                    PlayLen = 0;
                }  
            }
            bError = FALSE;
        }else if (state == ST_RECODING){
110424c4:	e0bfee17 	ldw	r2,-72(fp)
110424c8:	10800058 	cmpnei	r2,r2,1
110424cc:	1000501e 	bne	r2,zero,11042610 <main+0x394>
            if (bRecordPressed || (RecordLen >= buf_sample_size) || bError){
110424d0:	e0bffa17 	ldw	r2,-24(fp)
110424d4:	1000051e 	bne	r2,zero,110424ec <main+0x270>
110424d8:	e0fff217 	ldw	r3,-56(fp)
110424dc:	e0bff817 	ldw	r2,-32(fp)
110424e0:	1880022e 	bgeu	r3,r2,110424ec <main+0x270>
110424e4:	e0bfef17 	ldw	r2,-68(fp)
110424e8:	10001726 	beq	r2,zero,11042548 <main+0x2cc>
                // stop record

            	LED_AllOff();
110424ec:	10418900 	call	11041890 <LED_AllOff>
            	printf("record stop\n");
110424f0:	01000034 	movhi	r4,0
110424f4:	21028f04 	addi	r4,r4,2620
110424f8:	10439e80 	call	110439e8 <puts>
            	printf("record %d samples\n", (int)RecordLen);
110424fc:	e0bff217 	ldw	r2,-56(fp)
11042500:	01000034 	movhi	r4,0
11042504:	21029204 	addi	r4,r4,2632
11042508:	100b883a 	mov	r5,r2
1104250c:	10439280 	call	11043928 <printf>
                printf("record time=%lu\n", display_time_elapsed(RecordLen));
11042510:	e13ff217 	ldw	r4,-56(fp)
11042514:	10420680 	call	11042068 <display_time_elapsed>
11042518:	01000034 	movhi	r4,0
1104251c:	21029704 	addi	r4,r4,2652
11042520:	100b883a 	mov	r5,r2
11042524:	10439280 	call	11043928 <printf>
                state = ST_STANDY;
11042528:	e03fee15 	stw	zero,-72(fp)
                dump_record_data(pBuf, RecordLen);
1104252c:	e13ff717 	ldw	r4,-36(fp)
11042530:	e17ff217 	ldw	r5,-56(fp)
11042534:	104210c0 	call	1104210c <dump_record_data>
                alt_ic_irq_enable(0, TIMER_IRQ);
11042538:	0009883a 	mov	r4,zero
1104253c:	01400104 	movi	r5,4
11042540:	104c4c40 	call	1104c4c4 <alt_ic_irq_enable>
11042544:	00003106 	br	1104260c <main+0x390>
            }else{
                // continue recoding
                int i = 0;
11042548:	e03ff515 	stw	zero,-44(fp)
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
1104254c:	00002806 	br	110425f0 <main+0x374>
                    try_cnt = 0;
11042550:	e03ff415 	stw	zero,-48(fp)
                    while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT){ // wait while empty
11042554:	00000306 	br	11042564 <main+0x2e8>
                        try_cnt++;    
11042558:	e0bff417 	ldw	r2,-48(fp)
1104255c:	10800044 	addi	r2,r2,1
11042560:	e0bff415 	stw	r2,-48(fp)
            }else{
                // continue recoding
                int i = 0;
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
                    try_cnt = 0;
                    while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT){ // wait while empty
11042564:	10410000 	call	11041000 <AUDIO_AdcFifoNotEmpty>
11042568:	1000031e 	bne	r2,zero,11042578 <main+0x2fc>
1104256c:	e0bff417 	ldw	r2,-48(fp)
11042570:	10810030 	cmpltui	r2,r2,1024
11042574:	103ff81e 	bne	r2,zero,11042558 <main+0x2dc>
                        try_cnt++;    
                    }    
                    if (try_cnt >= MAX_TRY_CNT){
11042578:	e0bff417 	ldw	r2,-48(fp)
1104257c:	10810030 	cmpltui	r2,r2,1024
11042580:	1000031e 	bne	r2,zero,11042590 <main+0x314>
                        bError = TRUE;
11042584:	00800044 	movi	r2,1
11042588:	e0bfef15 	stw	r2,-68(fp)
                        break;
1104258c:	00001f06 	br	1104260c <main+0x390>
                    }    
                    AUDIO_AdcFifoGetData(&ch_left, &ch_right);
11042590:	e0ffff84 	addi	r3,fp,-2
11042594:	e0bfff04 	addi	r2,fp,-4
11042598:	1809883a 	mov	r4,r3
1104259c:	100b883a 	mov	r5,r2
110425a0:	104103c0 	call	1104103c <AUDIO_AdcFifoGetData>
                    data = (ch_left << 16) | ch_right;
110425a4:	e0bfff8b 	ldhu	r2,-2(fp)
110425a8:	10bfffcc 	andi	r2,r2,65535
110425ac:	1006943a 	slli	r3,r2,16
110425b0:	e0bfff0b 	ldhu	r2,-4(fp)
110425b4:	10bfffcc 	andi	r2,r2,65535
110425b8:	1884b03a 	or	r2,r3,r2
110425bc:	e0bffd15 	stw	r2,-12(fp)
                    *pRecording++ = data;
110425c0:	e0bff117 	ldw	r2,-60(fp)
110425c4:	e0fffd17 	ldw	r3,-12(fp)
110425c8:	10c00015 	stw	r3,0(r2)
110425cc:	e0bff117 	ldw	r2,-60(fp)
110425d0:	10800104 	addi	r2,r2,4
110425d4:	e0bff115 	stw	r2,-60(fp)
                    RecordLen++;
110425d8:	e0bff217 	ldw	r2,-56(fp)
110425dc:	10800044 	addi	r2,r2,1
110425e0:	e0bff215 	stw	r2,-56(fp)
                    i++;
110425e4:	e0bff517 	ldw	r2,-44(fp)
110425e8:	10800044 	addi	r2,r2,1
110425ec:	e0bff515 	stw	r2,-44(fp)
                dump_record_data(pBuf, RecordLen);
                alt_ic_irq_enable(0, TIMER_IRQ);
            }else{
                // continue recoding
                int i = 0;
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
110425f0:	e0bff517 	ldw	r2,-44(fp)
110425f4:	10803e88 	cmpgei	r2,r2,250
110425f8:	10005b1e 	bne	r2,zero,11042768 <main+0x4ec>
110425fc:	e0fff217 	ldw	r3,-56(fp)
11042600:	e0bff817 	ldw	r2,-32(fp)
11042604:	18bfd236 	bltu	r3,r2,11042550 <main+0x2d4>
11042608:	00005706 	br	11042768 <main+0x4ec>
                    PlayLen++;
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
            }
        }        
    }
1104260c:	003f3806 	br	110422f0 <main+0x74>
                    RecordLen++;
                    i++;

                }  // while
            }     
        }else if (state == ST_PLAYING){
11042610:	e0bfee17 	ldw	r2,-72(fp)
11042614:	10800098 	cmpnei	r2,r2,2
11042618:	103f351e 	bne	r2,zero,110422f0 <main+0x74>
            if (bPlayPressed || (PlayLen >= RecordLen) || bError){
1104261c:	e0bffb17 	ldw	r2,-20(fp)
11042620:	1000051e 	bne	r2,zero,11042638 <main+0x3bc>
11042624:	e0fff317 	ldw	r3,-52(fp)
11042628:	e0bff217 	ldw	r2,-56(fp)
1104262c:	1880022e 	bgeu	r3,r2,11042638 <main+0x3bc>
11042630:	e0bfef17 	ldw	r2,-68(fp)
11042634:	10001726 	beq	r2,zero,11042694 <main+0x418>
                // stop playing
            	LED_AllOff();
11042638:	10418900 	call	11041890 <LED_AllOff>
                printf("Play Stop %s\r\n", bError?"(Error)":"");
1104263c:	e0bfef17 	ldw	r2,-68(fp)
11042640:	10000326 	beq	r2,zero,11042650 <main+0x3d4>
11042644:	00800034 	movhi	r2,0
11042648:	10829c04 	addi	r2,r2,2672
1104264c:	00000206 	br	11042658 <main+0x3dc>
11042650:	00800034 	movhi	r2,0
11042654:	10829e04 	addi	r2,r2,2680
11042658:	01000034 	movhi	r4,0
1104265c:	21029f04 	addi	r4,r4,2684
11042660:	100b883a 	mov	r5,r2
11042664:	10439280 	call	11043928 <printf>
                printf("play time=%lu\n", display_time_elapsed(PlayLen));
11042668:	e13ff317 	ldw	r4,-52(fp)
1104266c:	10420680 	call	11042068 <display_time_elapsed>
11042670:	01000034 	movhi	r4,0
11042674:	2102a304 	addi	r4,r4,2700
11042678:	100b883a 	mov	r5,r2
1104267c:	10439280 	call	11043928 <printf>
                printf("Standby\n\n");
11042680:	01000034 	movhi	r4,0
11042684:	2102a704 	addi	r4,r4,2716
11042688:	10439e80 	call	110439e8 <puts>
                state = ST_STANDY;
1104268c:	e03fee15 	stw	zero,-72(fp)
11042690:	00003606 	br	1104276c <main+0x4f0>
            }else{
                // continue playing
                int i = 0;
11042694:	e03ff615 	stw	zero,-40(fp)
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
11042698:	00002c06 	br	1104274c <main+0x4d0>
                    try_cnt = 0;                
1104269c:	e03ff415 	stw	zero,-48(fp)
                    while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT){  // wait while full
110426a0:	00000306 	br	110426b0 <main+0x434>
                        try_cnt++;
110426a4:	e0bff417 	ldw	r2,-48(fp)
110426a8:	10800044 	addi	r2,r2,1
110426ac:	e0bff415 	stw	r2,-48(fp)
            }else{
                // continue playing
                int i = 0;
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
                    try_cnt = 0;                
                    while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT){  // wait while full
110426b0:	1040f780 	call	11040f78 <AUDIO_DacFifoNotFull>
110426b4:	1000031e 	bne	r2,zero,110426c4 <main+0x448>
110426b8:	e0bff417 	ldw	r2,-48(fp)
110426bc:	10810030 	cmpltui	r2,r2,1024
110426c0:	103ff81e 	bne	r2,zero,110426a4 <main+0x428>
                        try_cnt++;
                    }    
                    if (try_cnt >= MAX_TRY_CNT){
110426c4:	e0bff417 	ldw	r2,-48(fp)
110426c8:	10810030 	cmpltui	r2,r2,1024
110426cc:	1000031e 	bne	r2,zero,110426dc <main+0x460>
                        bError = TRUE;
110426d0:	00800044 	movi	r2,1
110426d4:	e0bfef15 	stw	r2,-68(fp)
                        break;
110426d8:	00002406 	br	1104276c <main+0x4f0>
                    }    
                    data = *pPlaying++;
110426dc:	e0bff017 	ldw	r2,-64(fp)
110426e0:	10800017 	ldw	r2,0(r2)
110426e4:	e0bffd15 	stw	r2,-12(fp)
110426e8:	e0bff017 	ldw	r2,-64(fp)
110426ec:	10800104 	addi	r2,r2,4
110426f0:	e0bff015 	stw	r2,-64(fp)
                   
                    //data = 0;
                    ch_left = data >> 16;
110426f4:	e0bffd17 	ldw	r2,-12(fp)
110426f8:	1004d43a 	srli	r2,r2,16
110426fc:	e0bfff8d 	sth	r2,-2(fp)
                    ch_right = data & 0xFFFF;
11042700:	e0bffd17 	ldw	r2,-12(fp)
11042704:	e0bfff0d 	sth	r2,-4(fp)
                    AUDIO_DacFifoSetData(ch_left, ch_right);  
11042708:	e0bfff8b 	ldhu	r2,-2(fp)
1104270c:	10ffffcc 	andi	r3,r2,65535
11042710:	18e0001c 	xori	r3,r3,32768
11042714:	18e00004 	addi	r3,r3,-32768
11042718:	e0bfff0b 	ldhu	r2,-4(fp)
1104271c:	10bfffcc 	andi	r2,r2,65535
11042720:	10a0001c 	xori	r2,r2,32768
11042724:	10a00004 	addi	r2,r2,-32768
11042728:	1809883a 	mov	r4,r3
1104272c:	100b883a 	mov	r5,r2
11042730:	1040fb40 	call	11040fb4 <AUDIO_DacFifoSetData>
                    i++;
11042734:	e0bff617 	ldw	r2,-40(fp)
11042738:	10800044 	addi	r2,r2,1
1104273c:	e0bff615 	stw	r2,-40(fp)
                    PlayLen++;
11042740:	e0bff317 	ldw	r2,-52(fp)
11042744:	10800044 	addi	r2,r2,1
11042748:	e0bff315 	stw	r2,-52(fp)
                printf("Standby\n\n");
                state = ST_STANDY;
            }else{
                // continue playing
                int i = 0;
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
1104274c:	e0bff617 	ldw	r2,-40(fp)
11042750:	10803e88 	cmpgei	r2,r2,250
11042754:	103ee61e 	bne	r2,zero,110422f0 <main+0x74>
11042758:	e0fff317 	ldw	r3,-52(fp)
1104275c:	e0bff217 	ldw	r2,-56(fp)
11042760:	18bfce36 	bltu	r3,r2,1104269c <main+0x420>
                    PlayLen++;
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
            }
        }        
    }
11042764:	003ee206 	br	110422f0 <main+0x74>
                dump_record_data(pBuf, RecordLen);
                alt_ic_irq_enable(0, TIMER_IRQ);
            }else{
                // continue recoding
                int i = 0;
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
11042768:	0001883a 	nop
                    PlayLen++;
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
            }
        }        
    }
1104276c:	003ee006 	br	110422f0 <main+0x74>


    
}
11042770:	e037883a 	mov	sp,fp
11042774:	dfc00417 	ldw	ra,16(sp)
11042778:	df000317 	ldw	fp,12(sp)
1104277c:	dc800217 	ldw	r18,8(sp)
11042780:	dc400117 	ldw	r17,4(sp)
11042784:	dc000017 	ldw	r16,0(sp)
11042788:	dec00504 	addi	sp,sp,20
1104278c:	f800283a 	ret

11042790 <__divsf3>:
11042790:	defff504 	addi	sp,sp,-44
11042794:	d9000915 	stw	r4,36(sp)
11042798:	d9400815 	stw	r5,32(sp)
1104279c:	d9000904 	addi	r4,sp,36
110427a0:	d9400404 	addi	r5,sp,16
110427a4:	dfc00a15 	stw	ra,40(sp)
110427a8:	104339c0 	call	1104339c <__unpack_f>
110427ac:	d9000804 	addi	r4,sp,32
110427b0:	d80b883a 	mov	r5,sp
110427b4:	104339c0 	call	1104339c <__unpack_f>
110427b8:	d8c00417 	ldw	r3,16(sp)
110427bc:	00800044 	movi	r2,1
110427c0:	10c00536 	bltu	r2,r3,110427d8 <__divsf3+0x48>
110427c4:	d9000404 	addi	r4,sp,16
110427c8:	10432700 	call	11043270 <__pack_f>
110427cc:	dfc00a17 	ldw	ra,40(sp)
110427d0:	dec00b04 	addi	sp,sp,44
110427d4:	f800283a 	ret
110427d8:	d9000017 	ldw	r4,0(sp)
110427dc:	11000536 	bltu	r2,r4,110427f4 <__divsf3+0x64>
110427e0:	d809883a 	mov	r4,sp
110427e4:	10432700 	call	11043270 <__pack_f>
110427e8:	dfc00a17 	ldw	ra,40(sp)
110427ec:	dec00b04 	addi	sp,sp,44
110427f0:	f800283a 	ret
110427f4:	d9800517 	ldw	r6,20(sp)
110427f8:	d9400117 	ldw	r5,4(sp)
110427fc:	00800104 	movi	r2,4
11042800:	314af03a 	xor	r5,r6,r5
11042804:	d9400515 	stw	r5,20(sp)
11042808:	18800226 	beq	r3,r2,11042814 <__divsf3+0x84>
1104280c:	01400084 	movi	r5,2
11042810:	1940041e 	bne	r3,r5,11042824 <__divsf3+0x94>
11042814:	193feb1e 	bne	r3,r4,110427c4 <__divsf3+0x34>
11042818:	01000034 	movhi	r4,0
1104281c:	2102aa04 	addi	r4,r4,2728
11042820:	003fe906 	br	110427c8 <__divsf3+0x38>
11042824:	20802226 	beq	r4,r2,110428b0 <__divsf3+0x120>
11042828:	21402526 	beq	r4,r5,110428c0 <__divsf3+0x130>
1104282c:	d9000617 	ldw	r4,24(sp)
11042830:	d8c00217 	ldw	r3,8(sp)
11042834:	d8800717 	ldw	r2,28(sp)
11042838:	d9400317 	ldw	r5,12(sp)
1104283c:	20c7c83a 	sub	r3,r4,r3
11042840:	d8c00615 	stw	r3,24(sp)
11042844:	1140032e 	bgeu	r2,r5,11042854 <__divsf3+0xc4>
11042848:	18ffffc4 	addi	r3,r3,-1
1104284c:	1085883a 	add	r2,r2,r2
11042850:	d8c00615 	stw	r3,24(sp)
11042854:	00c007c4 	movi	r3,31
11042858:	01100034 	movhi	r4,16384
1104285c:	000d883a 	mov	r6,zero
11042860:	18ffffc4 	addi	r3,r3,-1
11042864:	11400236 	bltu	r2,r5,11042870 <__divsf3+0xe0>
11042868:	310cb03a 	or	r6,r6,r4
1104286c:	1145c83a 	sub	r2,r2,r5
11042870:	2008d07a 	srli	r4,r4,1
11042874:	1085883a 	add	r2,r2,r2
11042878:	183ff91e 	bne	r3,zero,11042860 <__divsf3+0xd0>
1104287c:	31001fcc 	andi	r4,r6,127
11042880:	00c01004 	movi	r3,64
11042884:	20c00226 	beq	r4,r3,11042890 <__divsf3+0x100>
11042888:	d9800715 	stw	r6,28(sp)
1104288c:	003fcd06 	br	110427c4 <__divsf3+0x34>
11042890:	30c0200c 	andi	r3,r6,128
11042894:	183ffc1e 	bne	r3,zero,11042888 <__divsf3+0xf8>
11042898:	103ffb26 	beq	r2,zero,11042888 <__divsf3+0xf8>
1104289c:	31801004 	addi	r6,r6,64
110428a0:	00bfe004 	movi	r2,-128
110428a4:	308c703a 	and	r6,r6,r2
110428a8:	d9800715 	stw	r6,28(sp)
110428ac:	003fc506 	br	110427c4 <__divsf3+0x34>
110428b0:	d8000715 	stw	zero,28(sp)
110428b4:	d8000615 	stw	zero,24(sp)
110428b8:	d9000404 	addi	r4,sp,16
110428bc:	003fc206 	br	110427c8 <__divsf3+0x38>
110428c0:	d8800415 	stw	r2,16(sp)
110428c4:	d9000404 	addi	r4,sp,16
110428c8:	003fbf06 	br	110427c8 <__divsf3+0x38>

110428cc <__gtsf2>:
110428cc:	defff504 	addi	sp,sp,-44
110428d0:	d9000915 	stw	r4,36(sp)
110428d4:	d9400815 	stw	r5,32(sp)
110428d8:	d9000904 	addi	r4,sp,36
110428dc:	d9400404 	addi	r5,sp,16
110428e0:	dfc00a15 	stw	ra,40(sp)
110428e4:	104339c0 	call	1104339c <__unpack_f>
110428e8:	d9000804 	addi	r4,sp,32
110428ec:	d80b883a 	mov	r5,sp
110428f0:	104339c0 	call	1104339c <__unpack_f>
110428f4:	d8c00417 	ldw	r3,16(sp)
110428f8:	00800044 	movi	r2,1
110428fc:	10c0082e 	bgeu	r2,r3,11042920 <__gtsf2+0x54>
11042900:	d8c00017 	ldw	r3,0(sp)
11042904:	10c0062e 	bgeu	r2,r3,11042920 <__gtsf2+0x54>
11042908:	d9000404 	addi	r4,sp,16
1104290c:	d80b883a 	mov	r5,sp
11042910:	10434640 	call	11043464 <__fpcmp_parts_f>
11042914:	dfc00a17 	ldw	ra,40(sp)
11042918:	dec00b04 	addi	sp,sp,44
1104291c:	f800283a 	ret
11042920:	00bfffc4 	movi	r2,-1
11042924:	003ffb06 	br	11042914 <__gtsf2+0x48>

11042928 <__extendsfdf2>:
11042928:	defff904 	addi	sp,sp,-28
1104292c:	d9000515 	stw	r4,20(sp)
11042930:	d9400104 	addi	r5,sp,4
11042934:	d9000504 	addi	r4,sp,20
11042938:	dfc00615 	stw	ra,24(sp)
1104293c:	104339c0 	call	1104339c <__unpack_f>
11042940:	d9c00417 	ldw	r7,16(sp)
11042944:	d9000117 	ldw	r4,4(sp)
11042948:	d9400217 	ldw	r5,8(sp)
1104294c:	3804d0ba 	srli	r2,r7,2
11042950:	d9800317 	ldw	r6,12(sp)
11042954:	380e97ba 	slli	r7,r7,30
11042958:	d8800015 	stw	r2,0(sp)
1104295c:	1042ffc0 	call	11042ffc <__make_dp>
11042960:	dfc00617 	ldw	ra,24(sp)
11042964:	dec00704 	addi	sp,sp,28
11042968:	f800283a 	ret

1104296c <__floatunsisf>:
1104296c:	defffa04 	addi	sp,sp,-24
11042970:	dc000415 	stw	r16,16(sp)
11042974:	dfc00515 	stw	ra,20(sp)
11042978:	d8000115 	stw	zero,4(sp)
1104297c:	2021883a 	mov	r16,r4
11042980:	20001326 	beq	r4,zero,110429d0 <__floatunsisf+0x64>
11042984:	008000c4 	movi	r2,3
11042988:	d8800015 	stw	r2,0(sp)
1104298c:	00800784 	movi	r2,30
11042990:	d8800215 	stw	r2,8(sp)
11042994:	10431c40 	call	110431c4 <__clzsi2>
11042998:	10ffffc4 	addi	r3,r2,-1
1104299c:	18001416 	blt	r3,zero,110429f0 <__floatunsisf+0x84>
110429a0:	18002526 	beq	r3,zero,11042a38 <__floatunsisf+0xcc>
110429a4:	80e0983a 	sll	r16,r16,r3
110429a8:	00c007c4 	movi	r3,31
110429ac:	1885c83a 	sub	r2,r3,r2
110429b0:	dc000315 	stw	r16,12(sp)
110429b4:	d8800215 	stw	r2,8(sp)
110429b8:	d809883a 	mov	r4,sp
110429bc:	10432700 	call	11043270 <__pack_f>
110429c0:	dfc00517 	ldw	ra,20(sp)
110429c4:	dc000417 	ldw	r16,16(sp)
110429c8:	dec00604 	addi	sp,sp,24
110429cc:	f800283a 	ret
110429d0:	00800084 	movi	r2,2
110429d4:	d809883a 	mov	r4,sp
110429d8:	d8800015 	stw	r2,0(sp)
110429dc:	10432700 	call	11043270 <__pack_f>
110429e0:	dfc00517 	ldw	ra,20(sp)
110429e4:	dc000417 	ldw	r16,16(sp)
110429e8:	dec00604 	addi	sp,sp,24
110429ec:	f800283a 	ret
110429f0:	00c7c83a 	sub	r3,zero,r3
110429f4:	01000044 	movi	r4,1
110429f8:	20c8983a 	sll	r4,r4,r3
110429fc:	80c6d83a 	srl	r3,r16,r3
11042a00:	213fffc4 	addi	r4,r4,-1
11042a04:	2420703a 	and	r16,r4,r16
11042a08:	8020c03a 	cmpne	r16,r16,zero
11042a0c:	010007c4 	movi	r4,31
11042a10:	80c6b03a 	or	r3,r16,r3
11042a14:	2085c83a 	sub	r2,r4,r2
11042a18:	d809883a 	mov	r4,sp
11042a1c:	d8c00315 	stw	r3,12(sp)
11042a20:	d8800215 	stw	r2,8(sp)
11042a24:	10432700 	call	11043270 <__pack_f>
11042a28:	dfc00517 	ldw	ra,20(sp)
11042a2c:	dc000417 	ldw	r16,16(sp)
11042a30:	dec00604 	addi	sp,sp,24
11042a34:	f800283a 	ret
11042a38:	dc000315 	stw	r16,12(sp)
11042a3c:	003fde06 	br	110429b8 <__floatunsisf+0x4c>

11042a40 <_fpadd_parts>:
11042a40:	2005883a 	mov	r2,r4
11042a44:	21000017 	ldw	r4,0(r4)
11042a48:	01c00044 	movi	r7,1
11042a4c:	3900622e 	bgeu	r7,r4,11042bd8 <_fpadd_parts+0x198>
11042a50:	28c00017 	ldw	r3,0(r5)
11042a54:	38c05f2e 	bgeu	r7,r3,11042bd4 <_fpadd_parts+0x194>
11042a58:	01c00104 	movi	r7,4
11042a5c:	21c0c626 	beq	r4,r7,11042d78 <_fpadd_parts+0x338>
11042a60:	19c05c26 	beq	r3,r7,11042bd4 <_fpadd_parts+0x194>
11042a64:	01c00084 	movi	r7,2
11042a68:	19c06b26 	beq	r3,r7,11042c18 <_fpadd_parts+0x1d8>
11042a6c:	21c05926 	beq	r4,r7,11042bd4 <_fpadd_parts+0x194>
11042a70:	11c00217 	ldw	r7,8(r2)
11042a74:	2ac00217 	ldw	r11,8(r5)
11042a78:	13000317 	ldw	r12,12(r2)
11042a7c:	13400417 	ldw	r13,16(r2)
11042a80:	3ac9c83a 	sub	r4,r7,r11
11042a84:	2a000317 	ldw	r8,12(r5)
11042a88:	2a400417 	ldw	r9,16(r5)
11042a8c:	2015883a 	mov	r10,r4
11042a90:	20007516 	blt	r4,zero,11042c68 <_fpadd_parts+0x228>
11042a94:	00c00fc4 	movi	r3,63
11042a98:	1a805016 	blt	r3,r10,11042bdc <_fpadd_parts+0x19c>
11042a9c:	0100870e 	bge	zero,r4,11042cbc <_fpadd_parts+0x27c>
11042aa0:	50fff804 	addi	r3,r10,-32
11042aa4:	18009916 	blt	r3,zero,11042d0c <_fpadd_parts+0x2cc>
11042aa8:	48d6d83a 	srl	r11,r9,r3
11042aac:	001d883a 	mov	r14,zero
11042ab0:	18009e16 	blt	r3,zero,11042d2c <_fpadd_parts+0x2ec>
11042ab4:	01000044 	movi	r4,1
11042ab8:	20c6983a 	sll	r3,r4,r3
11042abc:	0015883a 	mov	r10,zero
11042ac0:	513fffc4 	addi	r4,r10,-1
11042ac4:	2295403a 	cmpgeu	r10,r4,r10
11042ac8:	1a87c83a 	sub	r3,r3,r10
11042acc:	1a52703a 	and	r9,r3,r9
11042ad0:	2210703a 	and	r8,r4,r8
11042ad4:	4250b03a 	or	r8,r8,r9
11042ad8:	4010c03a 	cmpne	r8,r8,zero
11042adc:	42d0b03a 	or	r8,r8,r11
11042ae0:	7013883a 	mov	r9,r14
11042ae4:	11000117 	ldw	r4,4(r2)
11042ae8:	28800117 	ldw	r2,4(r5)
11042aec:	20804126 	beq	r4,r2,11042bf4 <_fpadd_parts+0x1b4>
11042af0:	20006326 	beq	r4,zero,11042c80 <_fpadd_parts+0x240>
11042af4:	4305c83a 	sub	r2,r8,r12
11042af8:	4091803a 	cmpltu	r8,r8,r2
11042afc:	4b47c83a 	sub	r3,r9,r13
11042b00:	1a07c83a 	sub	r3,r3,r8
11042b04:	18006316 	blt	r3,zero,11042c94 <_fpadd_parts+0x254>
11042b08:	30000115 	stw	zero,4(r6)
11042b0c:	31c00215 	stw	r7,8(r6)
11042b10:	30800315 	stw	r2,12(r6)
11042b14:	30c00415 	stw	r3,16(r6)
11042b18:	11ffffc4 	addi	r7,r2,-1
11042b1c:	388b403a 	cmpgeu	r5,r7,r2
11042b20:	194bc83a 	sub	r5,r3,r5
11042b24:	01040034 	movhi	r4,4096
11042b28:	213fffc4 	addi	r4,r4,-1
11042b2c:	21401736 	bltu	r4,r5,11042b8c <_fpadd_parts+0x14c>
11042b30:	29008226 	beq	r5,r4,11042d3c <_fpadd_parts+0x2fc>
11042b34:	31400217 	ldw	r5,8(r6)
11042b38:	02840034 	movhi	r10,4096
11042b3c:	52bfffc4 	addi	r10,r10,-1
11042b40:	033fff84 	movi	r12,-2
11042b44:	297fffc4 	addi	r5,r5,-1
11042b48:	00000106 	br	11042b50 <_fpadd_parts+0x110>
11042b4c:	3a804a26 	beq	r7,r10,11042c78 <_fpadd_parts+0x238>
11042b50:	1089883a 	add	r4,r2,r2
11042b54:	2091803a 	cmpltu	r8,r4,r2
11042b58:	18c7883a 	add	r3,r3,r3
11042b5c:	227fffc4 	addi	r9,r4,-1
11042b60:	40d1883a 	add	r8,r8,r3
11042b64:	490f403a 	cmpgeu	r7,r9,r4
11042b68:	41cfc83a 	sub	r7,r8,r7
11042b6c:	2817883a 	mov	r11,r5
11042b70:	2005883a 	mov	r2,r4
11042b74:	4007883a 	mov	r3,r8
11042b78:	297fffc4 	addi	r5,r5,-1
11042b7c:	51fff32e 	bgeu	r10,r7,11042b4c <_fpadd_parts+0x10c>
11042b80:	31000315 	stw	r4,12(r6)
11042b84:	32000415 	stw	r8,16(r6)
11042b88:	32c00215 	stw	r11,8(r6)
11042b8c:	010000c4 	movi	r4,3
11042b90:	31000015 	stw	r4,0(r6)
11042b94:	01080034 	movhi	r4,8192
11042b98:	213fffc4 	addi	r4,r4,-1
11042b9c:	20c00b2e 	bgeu	r4,r3,11042bcc <_fpadd_parts+0x18c>
11042ba0:	180e97fa 	slli	r7,r3,31
11042ba4:	1008d07a 	srli	r4,r2,1
11042ba8:	31400217 	ldw	r5,8(r6)
11042bac:	1806d07a 	srli	r3,r3,1
11042bb0:	1080004c 	andi	r2,r2,1
11042bb4:	3908b03a 	or	r4,r7,r4
11042bb8:	1108b03a 	or	r4,r2,r4
11042bbc:	29400044 	addi	r5,r5,1
11042bc0:	31000315 	stw	r4,12(r6)
11042bc4:	30c00415 	stw	r3,16(r6)
11042bc8:	31400215 	stw	r5,8(r6)
11042bcc:	3005883a 	mov	r2,r6
11042bd0:	f800283a 	ret
11042bd4:	2805883a 	mov	r2,r5
11042bd8:	f800283a 	ret
11042bdc:	59c01e0e 	bge	r11,r7,11042c58 <_fpadd_parts+0x218>
11042be0:	11000117 	ldw	r4,4(r2)
11042be4:	28800117 	ldw	r2,4(r5)
11042be8:	0011883a 	mov	r8,zero
11042bec:	0013883a 	mov	r9,zero
11042bf0:	20bfbf1e 	bne	r4,r2,11042af0 <_fpadd_parts+0xb0>
11042bf4:	4305883a 	add	r2,r8,r12
11042bf8:	1207803a 	cmpltu	r3,r2,r8
11042bfc:	4b53883a 	add	r9,r9,r13
11042c00:	1a47883a 	add	r3,r3,r9
11042c04:	31000115 	stw	r4,4(r6)
11042c08:	31c00215 	stw	r7,8(r6)
11042c0c:	30800315 	stw	r2,12(r6)
11042c10:	30c00415 	stw	r3,16(r6)
11042c14:	003fdd06 	br	11042b8c <_fpadd_parts+0x14c>
11042c18:	20ffef1e 	bne	r4,r3,11042bd8 <_fpadd_parts+0x198>
11042c1c:	31000015 	stw	r4,0(r6)
11042c20:	10c00117 	ldw	r3,4(r2)
11042c24:	30c00115 	stw	r3,4(r6)
11042c28:	10c00217 	ldw	r3,8(r2)
11042c2c:	11000117 	ldw	r4,4(r2)
11042c30:	29400117 	ldw	r5,4(r5)
11042c34:	30c00215 	stw	r3,8(r6)
11042c38:	10c00317 	ldw	r3,12(r2)
11042c3c:	2908703a 	and	r4,r5,r4
11042c40:	30c00315 	stw	r3,12(r6)
11042c44:	10c00417 	ldw	r3,16(r2)
11042c48:	31000115 	stw	r4,4(r6)
11042c4c:	3005883a 	mov	r2,r6
11042c50:	30c00415 	stw	r3,16(r6)
11042c54:	f800283a 	ret
11042c58:	580f883a 	mov	r7,r11
11042c5c:	0019883a 	mov	r12,zero
11042c60:	001b883a 	mov	r13,zero
11042c64:	003f9f06 	br	11042ae4 <_fpadd_parts+0xa4>
11042c68:	0115c83a 	sub	r10,zero,r4
11042c6c:	00c00fc4 	movi	r3,63
11042c70:	1abfda16 	blt	r3,r10,11042bdc <_fpadd_parts+0x19c>
11042c74:	003f8906 	br	11042a9c <_fpadd_parts+0x5c>
11042c78:	627fb52e 	bgeu	r12,r9,11042b50 <_fpadd_parts+0x110>
11042c7c:	003fc006 	br	11042b80 <_fpadd_parts+0x140>
11042c80:	6205c83a 	sub	r2,r12,r8
11042c84:	6099803a 	cmpltu	r12,r12,r2
11042c88:	6a47c83a 	sub	r3,r13,r9
11042c8c:	1b07c83a 	sub	r3,r3,r12
11042c90:	183f9d0e 	bge	r3,zero,11042b08 <_fpadd_parts+0xc8>
11042c94:	0085c83a 	sub	r2,zero,r2
11042c98:	1008c03a 	cmpne	r4,r2,zero
11042c9c:	00c7c83a 	sub	r3,zero,r3
11042ca0:	1907c83a 	sub	r3,r3,r4
11042ca4:	01000044 	movi	r4,1
11042ca8:	31000115 	stw	r4,4(r6)
11042cac:	31c00215 	stw	r7,8(r6)
11042cb0:	30800315 	stw	r2,12(r6)
11042cb4:	30c00415 	stw	r3,16(r6)
11042cb8:	003f9706 	br	11042b18 <_fpadd_parts+0xd8>
11042cbc:	203f8926 	beq	r4,zero,11042ae4 <_fpadd_parts+0xa4>
11042cc0:	50fff804 	addi	r3,r10,-32
11042cc4:	3a8f883a 	add	r7,r7,r10
11042cc8:	18002316 	blt	r3,zero,11042d58 <_fpadd_parts+0x318>
11042ccc:	68d6d83a 	srl	r11,r13,r3
11042cd0:	001d883a 	mov	r14,zero
11042cd4:	18001c16 	blt	r3,zero,11042d48 <_fpadd_parts+0x308>
11042cd8:	01000044 	movi	r4,1
11042cdc:	20c6983a 	sll	r3,r4,r3
11042ce0:	0015883a 	mov	r10,zero
11042ce4:	513fffc4 	addi	r4,r10,-1
11042ce8:	2295403a 	cmpgeu	r10,r4,r10
11042cec:	1a87c83a 	sub	r3,r3,r10
11042cf0:	1b5a703a 	and	r13,r3,r13
11042cf4:	2318703a 	and	r12,r4,r12
11042cf8:	6358b03a 	or	r12,r12,r13
11042cfc:	6018c03a 	cmpne	r12,r12,zero
11042d00:	62d8b03a 	or	r12,r12,r11
11042d04:	701b883a 	mov	r13,r14
11042d08:	003f7606 	br	11042ae4 <_fpadd_parts+0xa4>
11042d0c:	4808907a 	slli	r4,r9,1
11042d10:	02c007c4 	movi	r11,31
11042d14:	5a97c83a 	sub	r11,r11,r10
11042d18:	22c8983a 	sll	r4,r4,r11
11042d1c:	4296d83a 	srl	r11,r8,r10
11042d20:	4a9cd83a 	srl	r14,r9,r10
11042d24:	22d6b03a 	or	r11,r4,r11
11042d28:	003f6106 	br	11042ab0 <_fpadd_parts+0x70>
11042d2c:	00c00044 	movi	r3,1
11042d30:	1a94983a 	sll	r10,r3,r10
11042d34:	0007883a 	mov	r3,zero
11042d38:	003f6106 	br	11042ac0 <_fpadd_parts+0x80>
11042d3c:	013fff84 	movi	r4,-2
11042d40:	21ff7c2e 	bgeu	r4,r7,11042b34 <_fpadd_parts+0xf4>
11042d44:	003f9106 	br	11042b8c <_fpadd_parts+0x14c>
11042d48:	00c00044 	movi	r3,1
11042d4c:	1a94983a 	sll	r10,r3,r10
11042d50:	0007883a 	mov	r3,zero
11042d54:	003fe306 	br	11042ce4 <_fpadd_parts+0x2a4>
11042d58:	6816907a 	slli	r11,r13,1
11042d5c:	010007c4 	movi	r4,31
11042d60:	2289c83a 	sub	r4,r4,r10
11042d64:	5908983a 	sll	r4,r11,r4
11042d68:	6296d83a 	srl	r11,r12,r10
11042d6c:	6a9cd83a 	srl	r14,r13,r10
11042d70:	22d6b03a 	or	r11,r4,r11
11042d74:	003fd706 	br	11042cd4 <_fpadd_parts+0x294>
11042d78:	193f971e 	bne	r3,r4,11042bd8 <_fpadd_parts+0x198>
11042d7c:	11000117 	ldw	r4,4(r2)
11042d80:	28c00117 	ldw	r3,4(r5)
11042d84:	20ff9426 	beq	r4,r3,11042bd8 <_fpadd_parts+0x198>
11042d88:	00800034 	movhi	r2,0
11042d8c:	1082ae04 	addi	r2,r2,2744
11042d90:	f800283a 	ret

11042d94 <__adddf3>:
11042d94:	deffec04 	addi	sp,sp,-80
11042d98:	d9001115 	stw	r4,68(sp)
11042d9c:	d9401215 	stw	r5,72(sp)
11042da0:	d9001104 	addi	r4,sp,68
11042da4:	d9400a04 	addi	r5,sp,40
11042da8:	dfc01315 	stw	ra,76(sp)
11042dac:	d9c01015 	stw	r7,64(sp)
11042db0:	d9800f15 	stw	r6,60(sp)
11042db4:	10437700 	call	11043770 <__unpack_d>
11042db8:	d9000f04 	addi	r4,sp,60
11042dbc:	d9400504 	addi	r5,sp,20
11042dc0:	10437700 	call	11043770 <__unpack_d>
11042dc4:	d9000a04 	addi	r4,sp,40
11042dc8:	d9400504 	addi	r5,sp,20
11042dcc:	d80d883a 	mov	r6,sp
11042dd0:	1042a400 	call	11042a40 <_fpadd_parts>
11042dd4:	1009883a 	mov	r4,r2
11042dd8:	104354c0 	call	1104354c <__pack_d>
11042ddc:	dfc01317 	ldw	ra,76(sp)
11042de0:	dec01404 	addi	sp,sp,80
11042de4:	f800283a 	ret

11042de8 <__subdf3>:
11042de8:	deffec04 	addi	sp,sp,-80
11042dec:	d9001115 	stw	r4,68(sp)
11042df0:	d9401215 	stw	r5,72(sp)
11042df4:	d9001104 	addi	r4,sp,68
11042df8:	d9400a04 	addi	r5,sp,40
11042dfc:	dfc01315 	stw	ra,76(sp)
11042e00:	d9c01015 	stw	r7,64(sp)
11042e04:	d9800f15 	stw	r6,60(sp)
11042e08:	10437700 	call	11043770 <__unpack_d>
11042e0c:	d9000f04 	addi	r4,sp,60
11042e10:	d9400504 	addi	r5,sp,20
11042e14:	10437700 	call	11043770 <__unpack_d>
11042e18:	d8800617 	ldw	r2,24(sp)
11042e1c:	d9000a04 	addi	r4,sp,40
11042e20:	d9400504 	addi	r5,sp,20
11042e24:	d80d883a 	mov	r6,sp
11042e28:	1080005c 	xori	r2,r2,1
11042e2c:	d8800615 	stw	r2,24(sp)
11042e30:	1042a400 	call	11042a40 <_fpadd_parts>
11042e34:	1009883a 	mov	r4,r2
11042e38:	104354c0 	call	1104354c <__pack_d>
11042e3c:	dfc01317 	ldw	ra,76(sp)
11042e40:	dec01404 	addi	sp,sp,80
11042e44:	f800283a 	ret

11042e48 <__divdf3>:
11042e48:	defff104 	addi	sp,sp,-60
11042e4c:	d9000c15 	stw	r4,48(sp)
11042e50:	d9400d15 	stw	r5,52(sp)
11042e54:	d9000c04 	addi	r4,sp,48
11042e58:	d9400504 	addi	r5,sp,20
11042e5c:	dfc00e15 	stw	ra,56(sp)
11042e60:	d9800a15 	stw	r6,40(sp)
11042e64:	d9c00b15 	stw	r7,44(sp)
11042e68:	10437700 	call	11043770 <__unpack_d>
11042e6c:	d9000a04 	addi	r4,sp,40
11042e70:	d80b883a 	mov	r5,sp
11042e74:	10437700 	call	11043770 <__unpack_d>
11042e78:	d8c00517 	ldw	r3,20(sp)
11042e7c:	00800044 	movi	r2,1
11042e80:	10c00536 	bltu	r2,r3,11042e98 <__divdf3+0x50>
11042e84:	d9000504 	addi	r4,sp,20
11042e88:	104354c0 	call	1104354c <__pack_d>
11042e8c:	dfc00e17 	ldw	ra,56(sp)
11042e90:	dec00f04 	addi	sp,sp,60
11042e94:	f800283a 	ret
11042e98:	d9000017 	ldw	r4,0(sp)
11042e9c:	11000536 	bltu	r2,r4,11042eb4 <__divdf3+0x6c>
11042ea0:	d809883a 	mov	r4,sp
11042ea4:	104354c0 	call	1104354c <__pack_d>
11042ea8:	dfc00e17 	ldw	ra,56(sp)
11042eac:	dec00f04 	addi	sp,sp,60
11042eb0:	f800283a 	ret
11042eb4:	d9800617 	ldw	r6,24(sp)
11042eb8:	d9400117 	ldw	r5,4(sp)
11042ebc:	00800104 	movi	r2,4
11042ec0:	314af03a 	xor	r5,r6,r5
11042ec4:	d9400615 	stw	r5,24(sp)
11042ec8:	18800226 	beq	r3,r2,11042ed4 <__divdf3+0x8c>
11042ecc:	01400084 	movi	r5,2
11042ed0:	1940041e 	bne	r3,r5,11042ee4 <__divdf3+0x9c>
11042ed4:	193feb1e 	bne	r3,r4,11042e84 <__divdf3+0x3c>
11042ed8:	01000034 	movhi	r4,0
11042edc:	2102ae04 	addi	r4,r4,2744
11042ee0:	003fe906 	br	11042e88 <__divdf3+0x40>
11042ee4:	20803326 	beq	r4,r2,11042fb4 <__divdf3+0x16c>
11042ee8:	21403726 	beq	r4,r5,11042fc8 <__divdf3+0x180>
11042eec:	d8800217 	ldw	r2,8(sp)
11042ef0:	d9000717 	ldw	r4,28(sp)
11042ef4:	d8c00917 	ldw	r3,36(sp)
11042ef8:	da000417 	ldw	r8,16(sp)
11042efc:	2089c83a 	sub	r4,r4,r2
11042f00:	d9000715 	stw	r4,28(sp)
11042f04:	d8800817 	ldw	r2,32(sp)
11042f08:	dbc00317 	ldw	r15,12(sp)
11042f0c:	1a000236 	bltu	r3,r8,11042f18 <__divdf3+0xd0>
11042f10:	40c0081e 	bne	r8,r3,11042f34 <__divdf3+0xec>
11042f14:	13c0072e 	bgeu	r2,r15,11042f34 <__divdf3+0xec>
11042f18:	108b883a 	add	r5,r2,r2
11042f1c:	288d803a 	cmpltu	r6,r5,r2
11042f20:	18c7883a 	add	r3,r3,r3
11042f24:	213fffc4 	addi	r4,r4,-1
11042f28:	2805883a 	mov	r2,r5
11042f2c:	30c7883a 	add	r3,r6,r3
11042f30:	d9000715 	stw	r4,28(sp)
11042f34:	01400f44 	movi	r5,61
11042f38:	000f883a 	mov	r7,zero
11042f3c:	01040034 	movhi	r4,4096
11042f40:	0019883a 	mov	r12,zero
11042f44:	001b883a 	mov	r13,zero
11042f48:	201697fa 	slli	r11,r4,31
11042f4c:	3814d07a 	srli	r10,r7,1
11042f50:	297fffc4 	addi	r5,r5,-1
11042f54:	1a000936 	bltu	r3,r8,11042f7c <__divdf3+0x134>
11042f58:	13cdc83a 	sub	r6,r2,r15
11042f5c:	1193803a 	cmpltu	r9,r2,r6
11042f60:	1a1dc83a 	sub	r14,r3,r8
11042f64:	40c0011e 	bne	r8,r3,11042f6c <__divdf3+0x124>
11042f68:	13c00436 	bltu	r2,r15,11042f7c <__divdf3+0x134>
11042f6c:	3005883a 	mov	r2,r6
11042f70:	7247c83a 	sub	r3,r14,r9
11042f74:	61d8b03a 	or	r12,r12,r7
11042f78:	691ab03a 	or	r13,r13,r4
11042f7c:	108d883a 	add	r6,r2,r2
11042f80:	3093803a 	cmpltu	r9,r6,r2
11042f84:	18c7883a 	add	r3,r3,r3
11042f88:	5a8eb03a 	or	r7,r11,r10
11042f8c:	2008d07a 	srli	r4,r4,1
11042f90:	3005883a 	mov	r2,r6
11042f94:	48c7883a 	add	r3,r9,r3
11042f98:	283feb1e 	bne	r5,zero,11042f48 <__divdf3+0x100>
11042f9c:	61003fcc 	andi	r4,r12,255
11042fa0:	01402004 	movi	r5,128
11042fa4:	21400b26 	beq	r4,r5,11042fd4 <__divdf3+0x18c>
11042fa8:	db000815 	stw	r12,32(sp)
11042fac:	db400915 	stw	r13,36(sp)
11042fb0:	003fb406 	br	11042e84 <__divdf3+0x3c>
11042fb4:	d8000815 	stw	zero,32(sp)
11042fb8:	d8000915 	stw	zero,36(sp)
11042fbc:	d8000715 	stw	zero,28(sp)
11042fc0:	d9000504 	addi	r4,sp,20
11042fc4:	003fb006 	br	11042e88 <__divdf3+0x40>
11042fc8:	d8800515 	stw	r2,20(sp)
11042fcc:	d9000504 	addi	r4,sp,20
11042fd0:	003fad06 	br	11042e88 <__divdf3+0x40>
11042fd4:	6140400c 	andi	r5,r12,256
11042fd8:	283ff31e 	bne	r5,zero,11042fa8 <__divdf3+0x160>
11042fdc:	30c4b03a 	or	r2,r6,r3
11042fe0:	103ff126 	beq	r2,zero,11042fa8 <__divdf3+0x160>
11042fe4:	6109883a 	add	r4,r12,r4
11042fe8:	2305803a 	cmpltu	r2,r4,r12
11042fec:	033fc004 	movi	r12,-256
11042ff0:	2318703a 	and	r12,r4,r12
11042ff4:	135b883a 	add	r13,r2,r13
11042ff8:	003feb06 	br	11042fa8 <__divdf3+0x160>

11042ffc <__make_dp>:
11042ffc:	defff904 	addi	sp,sp,-28
11043000:	d8800717 	ldw	r2,28(sp)
11043004:	d9000015 	stw	r4,0(sp)
11043008:	d809883a 	mov	r4,sp
1104300c:	dfc00515 	stw	ra,20(sp)
11043010:	d9c00615 	stw	r7,24(sp)
11043014:	d9400115 	stw	r5,4(sp)
11043018:	d9800215 	stw	r6,8(sp)
1104301c:	d9c00315 	stw	r7,12(sp)
11043020:	d8800415 	stw	r2,16(sp)
11043024:	104354c0 	call	1104354c <__pack_d>
11043028:	dfc00517 	ldw	ra,20(sp)
1104302c:	dec00704 	addi	sp,sp,28
11043030:	f800283a 	ret

11043034 <__truncdfsf2>:
11043034:	defff804 	addi	sp,sp,-32
11043038:	d9000515 	stw	r4,20(sp)
1104303c:	d9400615 	stw	r5,24(sp)
11043040:	d9000504 	addi	r4,sp,20
11043044:	d80b883a 	mov	r5,sp
11043048:	dfc00715 	stw	ra,28(sp)
1104304c:	10437700 	call	11043770 <__unpack_d>
11043050:	d8800317 	ldw	r2,12(sp)
11043054:	d8c00417 	ldw	r3,16(sp)
11043058:	01100034 	movhi	r4,16384
1104305c:	213fffc4 	addi	r4,r4,-1
11043060:	100ed7ba 	srli	r7,r2,30
11043064:	180690ba 	slli	r3,r3,2
11043068:	1104703a 	and	r2,r2,r4
1104306c:	19ceb03a 	or	r7,r3,r7
11043070:	10000126 	beq	r2,zero,11043078 <__truncdfsf2+0x44>
11043074:	39c00054 	ori	r7,r7,1
11043078:	d9000017 	ldw	r4,0(sp)
1104307c:	d9400117 	ldw	r5,4(sp)
11043080:	d9800217 	ldw	r6,8(sp)
11043084:	10435200 	call	11043520 <__make_fp>
11043088:	dfc00717 	ldw	ra,28(sp)
1104308c:	dec00804 	addi	sp,sp,32
11043090:	f800283a 	ret

11043094 <udivmodsi4>:
11043094:	2005883a 	mov	r2,r4
11043098:	2900182e 	bgeu	r5,r4,110430fc <udivmodsi4+0x68>
1104309c:	28001716 	blt	r5,zero,110430fc <udivmodsi4+0x68>
110430a0:	01000804 	movi	r4,32
110430a4:	00c00044 	movi	r3,1
110430a8:	00000206 	br	110430b4 <udivmodsi4+0x20>
110430ac:	20001126 	beq	r4,zero,110430f4 <udivmodsi4+0x60>
110430b0:	28000516 	blt	r5,zero,110430c8 <udivmodsi4+0x34>
110430b4:	294b883a 	add	r5,r5,r5
110430b8:	213fffc4 	addi	r4,r4,-1
110430bc:	18c7883a 	add	r3,r3,r3
110430c0:	28bffa36 	bltu	r5,r2,110430ac <udivmodsi4+0x18>
110430c4:	18000b26 	beq	r3,zero,110430f4 <udivmodsi4+0x60>
110430c8:	0009883a 	mov	r4,zero
110430cc:	11400236 	bltu	r2,r5,110430d8 <udivmodsi4+0x44>
110430d0:	1145c83a 	sub	r2,r2,r5
110430d4:	20c8b03a 	or	r4,r4,r3
110430d8:	1806d07a 	srli	r3,r3,1
110430dc:	280ad07a 	srli	r5,r5,1
110430e0:	183ffa1e 	bne	r3,zero,110430cc <udivmodsi4+0x38>
110430e4:	3000021e 	bne	r6,zero,110430f0 <udivmodsi4+0x5c>
110430e8:	2005883a 	mov	r2,r4
110430ec:	f800283a 	ret
110430f0:	f800283a 	ret
110430f4:	0009883a 	mov	r4,zero
110430f8:	003ffa06 	br	110430e4 <udivmodsi4+0x50>
110430fc:	00c00044 	movi	r3,1
11043100:	0009883a 	mov	r4,zero
11043104:	003ff106 	br	110430cc <udivmodsi4+0x38>

11043108 <__divsi3>:
11043108:	defffe04 	addi	sp,sp,-8
1104310c:	dfc00115 	stw	ra,4(sp)
11043110:	dc000015 	stw	r16,0(sp)
11043114:	20000a16 	blt	r4,zero,11043140 <__divsi3+0x38>
11043118:	0021883a 	mov	r16,zero
1104311c:	28000b16 	blt	r5,zero,1104314c <__divsi3+0x44>
11043120:	000d883a 	mov	r6,zero
11043124:	10430940 	call	11043094 <udivmodsi4>
11043128:	80000126 	beq	r16,zero,11043130 <__divsi3+0x28>
1104312c:	0085c83a 	sub	r2,zero,r2
11043130:	dfc00117 	ldw	ra,4(sp)
11043134:	dc000017 	ldw	r16,0(sp)
11043138:	dec00204 	addi	sp,sp,8
1104313c:	f800283a 	ret
11043140:	0109c83a 	sub	r4,zero,r4
11043144:	04000044 	movi	r16,1
11043148:	283ff50e 	bge	r5,zero,11043120 <__divsi3+0x18>
1104314c:	014bc83a 	sub	r5,zero,r5
11043150:	8400005c 	xori	r16,r16,1
11043154:	003ff206 	br	11043120 <__divsi3+0x18>

11043158 <__modsi3>:
11043158:	deffff04 	addi	sp,sp,-4
1104315c:	dfc00015 	stw	ra,0(sp)
11043160:	20000516 	blt	r4,zero,11043178 <__modsi3+0x20>
11043164:	28000c16 	blt	r5,zero,11043198 <__modsi3+0x40>
11043168:	01800044 	movi	r6,1
1104316c:	dfc00017 	ldw	ra,0(sp)
11043170:	dec00104 	addi	sp,sp,4
11043174:	10430941 	jmpi	11043094 <udivmodsi4>
11043178:	0109c83a 	sub	r4,zero,r4
1104317c:	28000b16 	blt	r5,zero,110431ac <__modsi3+0x54>
11043180:	01800044 	movi	r6,1
11043184:	10430940 	call	11043094 <udivmodsi4>
11043188:	0085c83a 	sub	r2,zero,r2
1104318c:	dfc00017 	ldw	ra,0(sp)
11043190:	dec00104 	addi	sp,sp,4
11043194:	f800283a 	ret
11043198:	014bc83a 	sub	r5,zero,r5
1104319c:	01800044 	movi	r6,1
110431a0:	dfc00017 	ldw	ra,0(sp)
110431a4:	dec00104 	addi	sp,sp,4
110431a8:	10430941 	jmpi	11043094 <udivmodsi4>
110431ac:	014bc83a 	sub	r5,zero,r5
110431b0:	003ff306 	br	11043180 <__modsi3+0x28>

110431b4 <__udivsi3>:
110431b4:	000d883a 	mov	r6,zero
110431b8:	10430941 	jmpi	11043094 <udivmodsi4>

110431bc <__umodsi3>:
110431bc:	01800044 	movi	r6,1
110431c0:	10430941 	jmpi	11043094 <udivmodsi4>

110431c4 <__clzsi2>:
110431c4:	00bfffd4 	movui	r2,65535
110431c8:	11000b36 	bltu	r2,r4,110431f8 <__clzsi2+0x34>
110431cc:	00803fc4 	movi	r2,255
110431d0:	11001e2e 	bgeu	r2,r4,1104324c <__clzsi2+0x88>
110431d4:	00c00204 	movi	r3,8
110431d8:	20c8d83a 	srl	r4,r4,r3
110431dc:	00c00034 	movhi	r3,0
110431e0:	18c2b304 	addi	r3,r3,2764
110431e4:	00800604 	movi	r2,24
110431e8:	1909883a 	add	r4,r3,r4
110431ec:	20c00003 	ldbu	r3,0(r4)
110431f0:	10c5c83a 	sub	r2,r2,r3
110431f4:	f800283a 	ret
110431f8:	00804034 	movhi	r2,256
110431fc:	10bfffc4 	addi	r2,r2,-1
11043200:	11000936 	bltu	r2,r4,11043228 <__clzsi2+0x64>
11043204:	00800404 	movi	r2,16
11043208:	1007883a 	mov	r3,r2
1104320c:	20c8d83a 	srl	r4,r4,r3
11043210:	00c00034 	movhi	r3,0
11043214:	18c2b304 	addi	r3,r3,2764
11043218:	1909883a 	add	r4,r3,r4
1104321c:	20c00003 	ldbu	r3,0(r4)
11043220:	10c5c83a 	sub	r2,r2,r3
11043224:	f800283a 	ret
11043228:	00c00604 	movi	r3,24
1104322c:	20c8d83a 	srl	r4,r4,r3
11043230:	00c00034 	movhi	r3,0
11043234:	18c2b304 	addi	r3,r3,2764
11043238:	00800204 	movi	r2,8
1104323c:	1909883a 	add	r4,r3,r4
11043240:	20c00003 	ldbu	r3,0(r4)
11043244:	10c5c83a 	sub	r2,r2,r3
11043248:	f800283a 	ret
1104324c:	0007883a 	mov	r3,zero
11043250:	20c8d83a 	srl	r4,r4,r3
11043254:	00c00034 	movhi	r3,0
11043258:	18c2b304 	addi	r3,r3,2764
1104325c:	00800804 	movi	r2,32
11043260:	1909883a 	add	r4,r3,r4
11043264:	20c00003 	ldbu	r3,0(r4)
11043268:	10c5c83a 	sub	r2,r2,r3
1104326c:	f800283a 	ret

11043270 <__pack_f>:
11043270:	21400017 	ldw	r5,0(r4)
11043274:	01800044 	movi	r6,1
11043278:	20c00317 	ldw	r3,12(r4)
1104327c:	21c00117 	ldw	r7,4(r4)
11043280:	3140282e 	bgeu	r6,r5,11043324 <__pack_f+0xb4>
11043284:	00800104 	movi	r2,4
11043288:	28802326 	beq	r5,r2,11043318 <__pack_f+0xa8>
1104328c:	00800084 	movi	r2,2
11043290:	28800f26 	beq	r5,r2,110432d0 <__pack_f+0x60>
11043294:	18000e26 	beq	r3,zero,110432d0 <__pack_f+0x60>
11043298:	21000217 	ldw	r4,8(r4)
1104329c:	00bfe084 	movi	r2,-126
110432a0:	20802616 	blt	r4,r2,1104333c <__pack_f+0xcc>
110432a4:	00801fc4 	movi	r2,127
110432a8:	11001b16 	blt	r2,r4,11043318 <__pack_f+0xa8>
110432ac:	188a703a 	and	r5,r3,r2
110432b0:	00801004 	movi	r2,64
110432b4:	28801126 	beq	r5,r2,110432fc <__pack_f+0x8c>
110432b8:	18c00fc4 	addi	r3,r3,63
110432bc:	18001316 	blt	r3,zero,1104330c <__pack_f+0x9c>
110432c0:	21001fc4 	addi	r4,r4,127
110432c4:	180690ba 	slli	r3,r3,2
110432c8:	1806d27a 	srli	r3,r3,9
110432cc:	00000206 	br	110432d8 <__pack_f+0x68>
110432d0:	0009883a 	mov	r4,zero
110432d4:	0007883a 	mov	r3,zero
110432d8:	21003fcc 	andi	r4,r4,255
110432dc:	200895fa 	slli	r4,r4,23
110432e0:	380a97fa 	slli	r5,r7,31
110432e4:	00802034 	movhi	r2,128
110432e8:	10bfffc4 	addi	r2,r2,-1
110432ec:	1886703a 	and	r3,r3,r2
110432f0:	1904b03a 	or	r2,r3,r4
110432f4:	1144b03a 	or	r2,r2,r5
110432f8:	f800283a 	ret
110432fc:	1880200c 	andi	r2,r3,128
11043300:	103fee26 	beq	r2,zero,110432bc <__pack_f+0x4c>
11043304:	18c01004 	addi	r3,r3,64
11043308:	183fed0e 	bge	r3,zero,110432c0 <__pack_f+0x50>
1104330c:	1806d07a 	srli	r3,r3,1
11043310:	21002004 	addi	r4,r4,128
11043314:	003feb06 	br	110432c4 <__pack_f+0x54>
11043318:	013fffc4 	movi	r4,-1
1104331c:	0007883a 	mov	r3,zero
11043320:	003fed06 	br	110432d8 <__pack_f+0x68>
11043324:	18c00434 	orhi	r3,r3,16
11043328:	00802034 	movhi	r2,128
1104332c:	10bfffc4 	addi	r2,r2,-1
11043330:	1886703a 	and	r3,r3,r2
11043334:	013fffc4 	movi	r4,-1
11043338:	003fe706 	br	110432d8 <__pack_f+0x68>
1104333c:	1105c83a 	sub	r2,r2,r4
11043340:	01000644 	movi	r4,25
11043344:	20801216 	blt	r4,r2,11043390 <__pack_f+0x120>
11043348:	3088983a 	sll	r4,r6,r2
1104334c:	1884d83a 	srl	r2,r3,r2
11043350:	213fffc4 	addi	r4,r4,-1
11043354:	20c6703a 	and	r3,r4,r3
11043358:	1806c03a 	cmpne	r3,r3,zero
1104335c:	1884b03a 	or	r2,r3,r2
11043360:	11001fcc 	andi	r4,r2,127
11043364:	00c01004 	movi	r3,64
11043368:	20c00a1e 	bne	r4,r3,11043394 <__pack_f+0x124>
1104336c:	10c0200c 	andi	r3,r2,128
11043370:	18000126 	beq	r3,zero,11043378 <__pack_f+0x108>
11043374:	10801004 	addi	r2,r2,64
11043378:	100690ba 	slli	r3,r2,2
1104337c:	01100034 	movhi	r4,16384
11043380:	1105403a 	cmpgeu	r2,r2,r4
11043384:	1806d27a 	srli	r3,r3,9
11043388:	1009883a 	mov	r4,r2
1104338c:	003fd206 	br	110432d8 <__pack_f+0x68>
11043390:	0005883a 	mov	r2,zero
11043394:	10800fc4 	addi	r2,r2,63
11043398:	003ff706 	br	11043378 <__pack_f+0x108>

1104339c <__unpack_f>:
1104339c:	20c00017 	ldw	r3,0(r4)
110433a0:	00802034 	movhi	r2,128
110433a4:	10bfffc4 	addi	r2,r2,-1
110433a8:	1808d5fa 	srli	r4,r3,23
110433ac:	180cd7fa 	srli	r6,r3,31
110433b0:	1884703a 	and	r2,r3,r2
110433b4:	21003fcc 	andi	r4,r4,255
110433b8:	29800115 	stw	r6,4(r5)
110433bc:	2000111e 	bne	r4,zero,11043404 <__unpack_f+0x68>
110433c0:	10001a26 	beq	r2,zero,1104342c <__unpack_f+0x90>
110433c4:	00ffe084 	movi	r3,-126
110433c8:	100491fa 	slli	r2,r2,7
110433cc:	28c00215 	stw	r3,8(r5)
110433d0:	00c000c4 	movi	r3,3
110433d4:	28c00015 	stw	r3,0(r5)
110433d8:	01900034 	movhi	r6,16384
110433dc:	31bfffc4 	addi	r6,r6,-1
110433e0:	30801036 	bltu	r6,r2,11043424 <__unpack_f+0x88>
110433e4:	00ffe044 	movi	r3,-127
110433e8:	1085883a 	add	r2,r2,r2
110433ec:	1809883a 	mov	r4,r3
110433f0:	18ffffc4 	addi	r3,r3,-1
110433f4:	30bffc2e 	bgeu	r6,r2,110433e8 <__unpack_f+0x4c>
110433f8:	29000215 	stw	r4,8(r5)
110433fc:	28800315 	stw	r2,12(r5)
11043400:	f800283a 	ret
11043404:	01803fc4 	movi	r6,255
11043408:	21800b26 	beq	r4,r6,11043438 <__unpack_f+0x9c>
1104340c:	100491fa 	slli	r2,r2,7
11043410:	213fe044 	addi	r4,r4,-127
11043414:	00c000c4 	movi	r3,3
11043418:	10900034 	orhi	r2,r2,16384
1104341c:	29000215 	stw	r4,8(r5)
11043420:	28c00015 	stw	r3,0(r5)
11043424:	28800315 	stw	r2,12(r5)
11043428:	f800283a 	ret
1104342c:	00800084 	movi	r2,2
11043430:	28800015 	stw	r2,0(r5)
11043434:	f800283a 	ret
11043438:	10000526 	beq	r2,zero,11043450 <__unpack_f+0xb4>
1104343c:	18c0042c 	andhi	r3,r3,16
11043440:	18000626 	beq	r3,zero,1104345c <__unpack_f+0xc0>
11043444:	00c00044 	movi	r3,1
11043448:	28c00015 	stw	r3,0(r5)
1104344c:	003ff506 	br	11043424 <__unpack_f+0x88>
11043450:	00800104 	movi	r2,4
11043454:	28800015 	stw	r2,0(r5)
11043458:	f800283a 	ret
1104345c:	28000015 	stw	zero,0(r5)
11043460:	003ff006 	br	11043424 <__unpack_f+0x88>

11043464 <__fpcmp_parts_f>:
11043464:	20c00017 	ldw	r3,0(r4)
11043468:	00800044 	movi	r2,1
1104346c:	10c0172e 	bgeu	r2,r3,110434cc <__fpcmp_parts_f+0x68>
11043470:	29800017 	ldw	r6,0(r5)
11043474:	1180152e 	bgeu	r2,r6,110434cc <__fpcmp_parts_f+0x68>
11043478:	01c00104 	movi	r7,4
1104347c:	19c02326 	beq	r3,r7,1104350c <__fpcmp_parts_f+0xa8>
11043480:	31c00926 	beq	r6,r7,110434a8 <__fpcmp_parts_f+0x44>
11043484:	01c00084 	movi	r7,2
11043488:	19c00626 	beq	r3,r7,110434a4 <__fpcmp_parts_f+0x40>
1104348c:	31c01126 	beq	r6,r7,110434d4 <__fpcmp_parts_f+0x70>
11043490:	20c00117 	ldw	r3,4(r4)
11043494:	29800117 	ldw	r6,4(r5)
11043498:	19801226 	beq	r3,r6,110434e4 <__fpcmp_parts_f+0x80>
1104349c:	1800041e 	bne	r3,zero,110434b0 <__fpcmp_parts_f+0x4c>
110434a0:	f800283a 	ret
110434a4:	30c01526 	beq	r6,r3,110434fc <__fpcmp_parts_f+0x98>
110434a8:	28800117 	ldw	r2,4(r5)
110434ac:	1000071e 	bne	r2,zero,110434cc <__fpcmp_parts_f+0x68>
110434b0:	00bfffc4 	movi	r2,-1
110434b4:	f800283a 	ret
110434b8:	39801216 	blt	r7,r6,11043504 <__fpcmp_parts_f+0xa0>
110434bc:	21000317 	ldw	r4,12(r4)
110434c0:	28800317 	ldw	r2,12(r5)
110434c4:	11000c2e 	bgeu	r2,r4,110434f8 <__fpcmp_parts_f+0x94>
110434c8:	183ff91e 	bne	r3,zero,110434b0 <__fpcmp_parts_f+0x4c>
110434cc:	00800044 	movi	r2,1
110434d0:	f800283a 	ret
110434d4:	20800117 	ldw	r2,4(r4)
110434d8:	103ff51e 	bne	r2,zero,110434b0 <__fpcmp_parts_f+0x4c>
110434dc:	00800044 	movi	r2,1
110434e0:	f800283a 	ret
110434e4:	21c00217 	ldw	r7,8(r4)
110434e8:	29800217 	ldw	r6,8(r5)
110434ec:	31fff20e 	bge	r6,r7,110434b8 <__fpcmp_parts_f+0x54>
110434f0:	183fef1e 	bne	r3,zero,110434b0 <__fpcmp_parts_f+0x4c>
110434f4:	f800283a 	ret
110434f8:	20800236 	bltu	r4,r2,11043504 <__fpcmp_parts_f+0xa0>
110434fc:	0005883a 	mov	r2,zero
11043500:	f800283a 	ret
11043504:	183fea26 	beq	r3,zero,110434b0 <__fpcmp_parts_f+0x4c>
11043508:	003ff006 	br	110434cc <__fpcmp_parts_f+0x68>
1104350c:	30fff11e 	bne	r6,r3,110434d4 <__fpcmp_parts_f+0x70>
11043510:	28c00117 	ldw	r3,4(r5)
11043514:	20800117 	ldw	r2,4(r4)
11043518:	1885c83a 	sub	r2,r3,r2
1104351c:	f800283a 	ret

11043520 <__make_fp>:
11043520:	defffb04 	addi	sp,sp,-20
11043524:	d9000015 	stw	r4,0(sp)
11043528:	d809883a 	mov	r4,sp
1104352c:	dfc00415 	stw	ra,16(sp)
11043530:	d9400115 	stw	r5,4(sp)
11043534:	d9800215 	stw	r6,8(sp)
11043538:	d9c00315 	stw	r7,12(sp)
1104353c:	10432700 	call	11043270 <__pack_f>
11043540:	dfc00417 	ldw	ra,16(sp)
11043544:	dec00504 	addi	sp,sp,20
11043548:	f800283a 	ret

1104354c <__pack_d>:
1104354c:	20800017 	ldw	r2,0(r4)
11043550:	defff804 	addi	sp,sp,-32
11043554:	dcc00315 	stw	r19,12(sp)
11043558:	dc800215 	stw	r18,8(sp)
1104355c:	dfc00715 	stw	ra,28(sp)
11043560:	dd800615 	stw	r22,24(sp)
11043564:	dd400515 	stw	r21,20(sp)
11043568:	dd000415 	stw	r20,16(sp)
1104356c:	dc400115 	stw	r17,4(sp)
11043570:	dc000015 	stw	r16,0(sp)
11043574:	04800044 	movi	r18,1
11043578:	24400317 	ldw	r17,12(r4)
1104357c:	24000417 	ldw	r16,16(r4)
11043580:	24c00117 	ldw	r19,4(r4)
11043584:	9080422e 	bgeu	r18,r2,11043690 <__pack_d+0x144>
11043588:	00c00104 	movi	r3,4
1104358c:	10c03c26 	beq	r2,r3,11043680 <__pack_d+0x134>
11043590:	00c00084 	movi	r3,2
11043594:	10c01926 	beq	r2,r3,110435fc <__pack_d+0xb0>
11043598:	8c04b03a 	or	r2,r17,r16
1104359c:	10001726 	beq	r2,zero,110435fc <__pack_d+0xb0>
110435a0:	21000217 	ldw	r4,8(r4)
110435a4:	00bf0084 	movi	r2,-1022
110435a8:	20804016 	blt	r4,r2,110436ac <__pack_d+0x160>
110435ac:	0080ffc4 	movi	r2,1023
110435b0:	11003316 	blt	r2,r4,11043680 <__pack_d+0x134>
110435b4:	88803fcc 	andi	r2,r17,255
110435b8:	00c02004 	movi	r3,128
110435bc:	10c02926 	beq	r2,r3,11043664 <__pack_d+0x118>
110435c0:	88801fc4 	addi	r2,r17,127
110435c4:	1463803a 	cmpltu	r17,r2,r17
110435c8:	8c21883a 	add	r16,r17,r16
110435cc:	1023883a 	mov	r17,r2
110435d0:	00880034 	movhi	r2,8192
110435d4:	10bfffc4 	addi	r2,r2,-1
110435d8:	14001c36 	bltu	r2,r16,1104364c <__pack_d+0x100>
110435dc:	2100ffc4 	addi	r4,r4,1023
110435e0:	8006963a 	slli	r3,r16,24
110435e4:	8804d23a 	srli	r2,r17,8
110435e8:	8020913a 	slli	r16,r16,4
110435ec:	2101ffcc 	andi	r4,r4,2047
110435f0:	1884b03a 	or	r2,r3,r2
110435f4:	8020d33a 	srli	r16,r16,12
110435f8:	00000306 	br	11043608 <__pack_d+0xbc>
110435fc:	0009883a 	mov	r4,zero
11043600:	0005883a 	mov	r2,zero
11043604:	0021883a 	mov	r16,zero
11043608:	2008953a 	slli	r4,r4,20
1104360c:	982697fa 	slli	r19,r19,31
11043610:	00c00434 	movhi	r3,16
11043614:	18ffffc4 	addi	r3,r3,-1
11043618:	80e0703a 	and	r16,r16,r3
1104361c:	8106b03a 	or	r3,r16,r4
11043620:	1cc6b03a 	or	r3,r3,r19
11043624:	dfc00717 	ldw	ra,28(sp)
11043628:	dd800617 	ldw	r22,24(sp)
1104362c:	dd400517 	ldw	r21,20(sp)
11043630:	dd000417 	ldw	r20,16(sp)
11043634:	dcc00317 	ldw	r19,12(sp)
11043638:	dc800217 	ldw	r18,8(sp)
1104363c:	dc400117 	ldw	r17,4(sp)
11043640:	dc000017 	ldw	r16,0(sp)
11043644:	dec00804 	addi	sp,sp,32
11043648:	f800283a 	ret
1104364c:	800697fa 	slli	r3,r16,31
11043650:	8804d07a 	srli	r2,r17,1
11043654:	21010004 	addi	r4,r4,1024
11043658:	8020d07a 	srli	r16,r16,1
1104365c:	18a2b03a 	or	r17,r3,r2
11043660:	003fdf06 	br	110435e0 <__pack_d+0x94>
11043664:	88c0400c 	andi	r3,r17,256
11043668:	183fd926 	beq	r3,zero,110435d0 <__pack_d+0x84>
1104366c:	8885883a 	add	r2,r17,r2
11043670:	1463803a 	cmpltu	r17,r2,r17
11043674:	8c21883a 	add	r16,r17,r16
11043678:	1023883a 	mov	r17,r2
1104367c:	003fd406 	br	110435d0 <__pack_d+0x84>
11043680:	0101ffc4 	movi	r4,2047
11043684:	0005883a 	mov	r2,zero
11043688:	0021883a 	mov	r16,zero
1104368c:	003fde06 	br	11043608 <__pack_d+0xbc>
11043690:	84000234 	orhi	r16,r16,8
11043694:	00c00434 	movhi	r3,16
11043698:	18ffffc4 	addi	r3,r3,-1
1104369c:	8805883a 	mov	r2,r17
110436a0:	80e0703a 	and	r16,r16,r3
110436a4:	0101ffc4 	movi	r4,2047
110436a8:	003fd706 	br	11043608 <__pack_d+0xbc>
110436ac:	1129c83a 	sub	r20,r2,r4
110436b0:	00800e04 	movi	r2,56
110436b4:	15002716 	blt	r2,r20,11043754 <__pack_d+0x208>
110436b8:	800b883a 	mov	r5,r16
110436bc:	a00d883a 	mov	r6,r20
110436c0:	8809883a 	mov	r4,r17
110436c4:	10438740 	call	11043874 <__lshrdi3>
110436c8:	9009883a 	mov	r4,r18
110436cc:	000b883a 	mov	r5,zero
110436d0:	a00d883a 	mov	r6,r20
110436d4:	102d883a 	mov	r22,r2
110436d8:	182b883a 	mov	r21,r3
110436dc:	10438b80 	call	110438b8 <__ashldi3>
110436e0:	1009003a 	cmpeq	r4,r2,zero
110436e4:	1907c83a 	sub	r3,r3,r4
110436e8:	10bfffc4 	addi	r2,r2,-1
110436ec:	1c20703a 	and	r16,r3,r16
110436f0:	1444703a 	and	r2,r2,r17
110436f4:	1404b03a 	or	r2,r2,r16
110436f8:	1004c03a 	cmpne	r2,r2,zero
110436fc:	1584b03a 	or	r2,r2,r22
11043700:	11003fcc 	andi	r4,r2,255
11043704:	01402004 	movi	r5,128
11043708:	a807883a 	mov	r3,r21
1104370c:	2140131e 	bne	r4,r5,1104375c <__pack_d+0x210>
11043710:	1140400c 	andi	r5,r2,256
11043714:	28000426 	beq	r5,zero,11043728 <__pack_d+0x1dc>
11043718:	1109883a 	add	r4,r2,r4
1104371c:	2085803a 	cmpltu	r2,r4,r2
11043720:	1547883a 	add	r3,r2,r21
11043724:	2005883a 	mov	r2,r4
11043728:	1808963a 	slli	r4,r3,24
1104372c:	1004d23a 	srli	r2,r2,8
11043730:	1820913a 	slli	r16,r3,4
11043734:	01440034 	movhi	r5,4096
11043738:	297fffc4 	addi	r5,r5,-1
1104373c:	2084b03a 	or	r2,r4,r2
11043740:	8020d33a 	srli	r16,r16,12
11043744:	01000044 	movi	r4,1
11043748:	28ffaf36 	bltu	r5,r3,11043608 <__pack_d+0xbc>
1104374c:	0009883a 	mov	r4,zero
11043750:	003fad06 	br	11043608 <__pack_d+0xbc>
11043754:	0005883a 	mov	r2,zero
11043758:	0007883a 	mov	r3,zero
1104375c:	11001fc4 	addi	r4,r2,127
11043760:	2085803a 	cmpltu	r2,r4,r2
11043764:	10c7883a 	add	r3,r2,r3
11043768:	2005883a 	mov	r2,r4
1104376c:	003fee06 	br	11043728 <__pack_d+0x1dc>

11043770 <__unpack_d>:
11043770:	21800117 	ldw	r6,4(r4)
11043774:	20c00017 	ldw	r3,0(r4)
11043778:	3004d7fa 	srli	r2,r6,31
1104377c:	3008d53a 	srli	r4,r6,20
11043780:	28800115 	stw	r2,4(r5)
11043784:	2101ffcc 	andi	r4,r4,2047
11043788:	00800434 	movhi	r2,16
1104378c:	10bfffc4 	addi	r2,r2,-1
11043790:	3084703a 	and	r2,r6,r2
11043794:	20001a1e 	bne	r4,zero,11043800 <__unpack_d+0x90>
11043798:	1888b03a 	or	r4,r3,r2
1104379c:	20002626 	beq	r4,zero,11043838 <__unpack_d+0xc8>
110437a0:	1808d63a 	srli	r4,r3,24
110437a4:	1004923a 	slli	r2,r2,8
110437a8:	01bf0084 	movi	r6,-1022
110437ac:	29800215 	stw	r6,8(r5)
110437b0:	2084b03a 	or	r2,r4,r2
110437b4:	010000c4 	movi	r4,3
110437b8:	29000015 	stw	r4,0(r5)
110437bc:	02040034 	movhi	r8,4096
110437c0:	423fffc4 	addi	r8,r8,-1
110437c4:	1806923a 	slli	r3,r3,8
110437c8:	40801836 	bltu	r8,r2,1104382c <__unpack_d+0xbc>
110437cc:	013f0044 	movi	r4,-1023
110437d0:	18cd883a 	add	r6,r3,r3
110437d4:	30c7803a 	cmpltu	r3,r6,r3
110437d8:	1085883a 	add	r2,r2,r2
110437dc:	1885883a 	add	r2,r3,r2
110437e0:	200f883a 	mov	r7,r4
110437e4:	3007883a 	mov	r3,r6
110437e8:	213fffc4 	addi	r4,r4,-1
110437ec:	40bff82e 	bgeu	r8,r2,110437d0 <__unpack_d+0x60>
110437f0:	29c00215 	stw	r7,8(r5)
110437f4:	28c00315 	stw	r3,12(r5)
110437f8:	28800415 	stw	r2,16(r5)
110437fc:	f800283a 	ret
11043800:	01c1ffc4 	movi	r7,2047
11043804:	21c00f26 	beq	r4,r7,11043844 <__unpack_d+0xd4>
11043808:	180cd63a 	srli	r6,r3,24
1104380c:	1004923a 	slli	r2,r2,8
11043810:	213f0044 	addi	r4,r4,-1023
11043814:	1806923a 	slli	r3,r3,8
11043818:	3084b03a 	or	r2,r6,r2
1104381c:	29000215 	stw	r4,8(r5)
11043820:	010000c4 	movi	r4,3
11043824:	10840034 	orhi	r2,r2,4096
11043828:	29000015 	stw	r4,0(r5)
1104382c:	28c00315 	stw	r3,12(r5)
11043830:	28800415 	stw	r2,16(r5)
11043834:	f800283a 	ret
11043838:	00800084 	movi	r2,2
1104383c:	28800015 	stw	r2,0(r5)
11043840:	f800283a 	ret
11043844:	1888b03a 	or	r4,r3,r2
11043848:	20000526 	beq	r4,zero,11043860 <__unpack_d+0xf0>
1104384c:	3180022c 	andhi	r6,r6,8
11043850:	30000626 	beq	r6,zero,1104386c <__unpack_d+0xfc>
11043854:	01000044 	movi	r4,1
11043858:	29000015 	stw	r4,0(r5)
1104385c:	003ff306 	br	1104382c <__unpack_d+0xbc>
11043860:	00800104 	movi	r2,4
11043864:	28800015 	stw	r2,0(r5)
11043868:	f800283a 	ret
1104386c:	28000015 	stw	zero,0(r5)
11043870:	003fee06 	br	1104382c <__unpack_d+0xbc>

11043874 <__lshrdi3>:
11043874:	2005883a 	mov	r2,r4
11043878:	2807883a 	mov	r3,r5
1104387c:	30000826 	beq	r6,zero,110438a0 <__lshrdi3+0x2c>
11043880:	01000804 	movi	r4,32
11043884:	2189c83a 	sub	r4,r4,r6
11043888:	0100060e 	bge	zero,r4,110438a4 <__lshrdi3+0x30>
1104388c:	1184d83a 	srl	r2,r2,r6
11043890:	2908983a 	sll	r4,r5,r4
11043894:	298cd83a 	srl	r6,r5,r6
11043898:	2084b03a 	or	r2,r4,r2
1104389c:	3007883a 	mov	r3,r6
110438a0:	f800283a 	ret
110438a4:	0105c83a 	sub	r2,zero,r4
110438a8:	000d883a 	mov	r6,zero
110438ac:	2884d83a 	srl	r2,r5,r2
110438b0:	3007883a 	mov	r3,r6
110438b4:	003ffa06 	br	110438a0 <__lshrdi3+0x2c>

110438b8 <__ashldi3>:
110438b8:	2005883a 	mov	r2,r4
110438bc:	2807883a 	mov	r3,r5
110438c0:	30000826 	beq	r6,zero,110438e4 <__ashldi3+0x2c>
110438c4:	01000804 	movi	r4,32
110438c8:	2189c83a 	sub	r4,r4,r6
110438cc:	0100060e 	bge	zero,r4,110438e8 <__ashldi3+0x30>
110438d0:	1108d83a 	srl	r4,r2,r4
110438d4:	2986983a 	sll	r3,r5,r6
110438d8:	118c983a 	sll	r6,r2,r6
110438dc:	20c6b03a 	or	r3,r4,r3
110438e0:	3005883a 	mov	r2,r6
110438e4:	f800283a 	ret
110438e8:	0107c83a 	sub	r3,zero,r4
110438ec:	000d883a 	mov	r6,zero
110438f0:	10c6983a 	sll	r3,r2,r3
110438f4:	3005883a 	mov	r2,r6
110438f8:	003ffa06 	br	110438e4 <__ashldi3+0x2c>

110438fc <_printf_r>:
110438fc:	defffd04 	addi	sp,sp,-12
11043900:	dfc00015 	stw	ra,0(sp)
11043904:	d9800115 	stw	r6,4(sp)
11043908:	d9c00215 	stw	r7,8(sp)
1104390c:	280d883a 	mov	r6,r5
11043910:	21400217 	ldw	r5,8(r4)
11043914:	d9c00104 	addi	r7,sp,4
11043918:	1043b800 	call	11043b80 <___vfprintf_internal_r>
1104391c:	dfc00017 	ldw	ra,0(sp)
11043920:	dec00304 	addi	sp,sp,12
11043924:	f800283a 	ret

11043928 <printf>:
11043928:	defffc04 	addi	sp,sp,-16
1104392c:	dfc00015 	stw	ra,0(sp)
11043930:	d9400115 	stw	r5,4(sp)
11043934:	d9800215 	stw	r6,8(sp)
11043938:	d9c00315 	stw	r7,12(sp)
1104393c:	00800034 	movhi	r2,0
11043940:	1089fe04 	addi	r2,r2,10232
11043944:	10800017 	ldw	r2,0(r2)
11043948:	200b883a 	mov	r5,r4
1104394c:	d9800104 	addi	r6,sp,4
11043950:	11000217 	ldw	r4,8(r2)
11043954:	10459780 	call	11045978 <__vfprintf_internal>
11043958:	dfc00017 	ldw	ra,0(sp)
1104395c:	dec00404 	addi	sp,sp,16
11043960:	f800283a 	ret

11043964 <_puts_r>:
11043964:	defff604 	addi	sp,sp,-40
11043968:	dc400815 	stw	r17,32(sp)
1104396c:	2023883a 	mov	r17,r4
11043970:	2809883a 	mov	r4,r5
11043974:	dc000715 	stw	r16,28(sp)
11043978:	dfc00915 	stw	ra,36(sp)
1104397c:	2821883a 	mov	r16,r5
11043980:	1043ac00 	call	11043ac0 <strlen>
11043984:	10c00044 	addi	r3,r2,1
11043988:	d8800115 	stw	r2,4(sp)
1104398c:	89400217 	ldw	r5,8(r17)
11043990:	00800034 	movhi	r2,0
11043994:	1082f304 	addi	r2,r2,3020
11043998:	d8800215 	stw	r2,8(sp)
1104399c:	00800044 	movi	r2,1
110439a0:	d8800315 	stw	r2,12(sp)
110439a4:	8809883a 	mov	r4,r17
110439a8:	00800084 	movi	r2,2
110439ac:	d9800404 	addi	r6,sp,16
110439b0:	dc000015 	stw	r16,0(sp)
110439b4:	d8c00615 	stw	r3,24(sp)
110439b8:	dec00415 	stw	sp,16(sp)
110439bc:	d8800515 	stw	r2,20(sp)
110439c0:	1047d1c0 	call	11047d1c <__sfvwrite_r>
110439c4:	1000061e 	bne	r2,zero,110439e0 <_puts_r+0x7c>
110439c8:	00800284 	movi	r2,10
110439cc:	dfc00917 	ldw	ra,36(sp)
110439d0:	dc400817 	ldw	r17,32(sp)
110439d4:	dc000717 	ldw	r16,28(sp)
110439d8:	dec00a04 	addi	sp,sp,40
110439dc:	f800283a 	ret
110439e0:	00bfffc4 	movi	r2,-1
110439e4:	003ff906 	br	110439cc <_puts_r+0x68>

110439e8 <puts>:
110439e8:	00800034 	movhi	r2,0
110439ec:	1089fe04 	addi	r2,r2,10232
110439f0:	200b883a 	mov	r5,r4
110439f4:	11000017 	ldw	r4,0(r2)
110439f8:	10439641 	jmpi	11043964 <_puts_r>

110439fc <_sprintf_r>:
110439fc:	deffe704 	addi	sp,sp,-100
11043a00:	2807883a 	mov	r3,r5
11043a04:	dfc01715 	stw	ra,92(sp)
11043a08:	d9c01815 	stw	r7,96(sp)
11043a0c:	00a00034 	movhi	r2,32768
11043a10:	10bfffc4 	addi	r2,r2,-1
11043a14:	02008204 	movi	r8,520
11043a18:	d8800215 	stw	r2,8(sp)
11043a1c:	d8800515 	stw	r2,20(sp)
11043a20:	d80b883a 	mov	r5,sp
11043a24:	d9c01804 	addi	r7,sp,96
11043a28:	00bfffc4 	movi	r2,-1
11043a2c:	d8c00015 	stw	r3,0(sp)
11043a30:	d8c00415 	stw	r3,16(sp)
11043a34:	da00030d 	sth	r8,12(sp)
11043a38:	d880038d 	sth	r2,14(sp)
11043a3c:	1043b800 	call	11043b80 <___vfprintf_internal_r>
11043a40:	d8c00017 	ldw	r3,0(sp)
11043a44:	18000005 	stb	zero,0(r3)
11043a48:	dfc01717 	ldw	ra,92(sp)
11043a4c:	dec01904 	addi	sp,sp,100
11043a50:	f800283a 	ret

11043a54 <sprintf>:
11043a54:	deffe604 	addi	sp,sp,-104
11043a58:	2007883a 	mov	r3,r4
11043a5c:	dfc01715 	stw	ra,92(sp)
11043a60:	d9801815 	stw	r6,96(sp)
11043a64:	d9c01915 	stw	r7,100(sp)
11043a68:	00800034 	movhi	r2,0
11043a6c:	1089fe04 	addi	r2,r2,10232
11043a70:	11000017 	ldw	r4,0(r2)
11043a74:	00a00034 	movhi	r2,32768
11043a78:	10bfffc4 	addi	r2,r2,-1
11043a7c:	280d883a 	mov	r6,r5
11043a80:	02008204 	movi	r8,520
11043a84:	d8800215 	stw	r2,8(sp)
11043a88:	d8800515 	stw	r2,20(sp)
11043a8c:	d80b883a 	mov	r5,sp
11043a90:	d9c01804 	addi	r7,sp,96
11043a94:	00bfffc4 	movi	r2,-1
11043a98:	d8c00015 	stw	r3,0(sp)
11043a9c:	d8c00415 	stw	r3,16(sp)
11043aa0:	da00030d 	sth	r8,12(sp)
11043aa4:	d880038d 	sth	r2,14(sp)
11043aa8:	1043b800 	call	11043b80 <___vfprintf_internal_r>
11043aac:	d8c00017 	ldw	r3,0(sp)
11043ab0:	18000005 	stb	zero,0(r3)
11043ab4:	dfc01717 	ldw	ra,92(sp)
11043ab8:	dec01a04 	addi	sp,sp,104
11043abc:	f800283a 	ret

11043ac0 <strlen>:
11043ac0:	208000cc 	andi	r2,r4,3
11043ac4:	10001f1e 	bne	r2,zero,11043b44 <strlen+0x84>
11043ac8:	20800017 	ldw	r2,0(r4)
11043acc:	01ffbff4 	movhi	r7,65279
11043ad0:	39ffbfc4 	addi	r7,r7,-257
11043ad4:	01a02074 	movhi	r6,32897
11043ad8:	31a02004 	addi	r6,r6,-32640
11043adc:	11c7883a 	add	r3,r2,r7
11043ae0:	0084303a 	nor	r2,zero,r2
11043ae4:	1886703a 	and	r3,r3,r2
11043ae8:	1986703a 	and	r3,r3,r6
11043aec:	2005883a 	mov	r2,r4
11043af0:	1800101e 	bne	r3,zero,11043b34 <strlen+0x74>
11043af4:	10800104 	addi	r2,r2,4
11043af8:	10c00017 	ldw	r3,0(r2)
11043afc:	19cb883a 	add	r5,r3,r7
11043b00:	00c6303a 	nor	r3,zero,r3
11043b04:	28c6703a 	and	r3,r5,r3
11043b08:	1986703a 	and	r3,r3,r6
11043b0c:	1800091e 	bne	r3,zero,11043b34 <strlen+0x74>
11043b10:	10800104 	addi	r2,r2,4
11043b14:	10c00017 	ldw	r3,0(r2)
11043b18:	19cb883a 	add	r5,r3,r7
11043b1c:	00c6303a 	nor	r3,zero,r3
11043b20:	28c6703a 	and	r3,r5,r3
11043b24:	1986703a 	and	r3,r3,r6
11043b28:	183ff226 	beq	r3,zero,11043af4 <strlen+0x34>
11043b2c:	00000106 	br	11043b34 <strlen+0x74>
11043b30:	10800044 	addi	r2,r2,1
11043b34:	10c00007 	ldb	r3,0(r2)
11043b38:	183ffd1e 	bne	r3,zero,11043b30 <strlen+0x70>
11043b3c:	1105c83a 	sub	r2,r2,r4
11043b40:	f800283a 	ret
11043b44:	2005883a 	mov	r2,r4
11043b48:	003ffa06 	br	11043b34 <strlen+0x74>

11043b4c <__sprint_r>:
11043b4c:	30800217 	ldw	r2,8(r6)
11043b50:	defffe04 	addi	sp,sp,-8
11043b54:	dc000015 	stw	r16,0(sp)
11043b58:	dfc00115 	stw	ra,4(sp)
11043b5c:	3021883a 	mov	r16,r6
11043b60:	10000226 	beq	r2,zero,11043b6c <__sprint_r+0x20>
11043b64:	1047d1c0 	call	11047d1c <__sfvwrite_r>
11043b68:	80000215 	stw	zero,8(r16)
11043b6c:	80000115 	stw	zero,4(r16)
11043b70:	dfc00117 	ldw	ra,4(sp)
11043b74:	dc000017 	ldw	r16,0(sp)
11043b78:	dec00204 	addi	sp,sp,8
11043b7c:	f800283a 	ret

11043b80 <___vfprintf_internal_r>:
11043b80:	defeb904 	addi	sp,sp,-1308
11043b84:	dc013d15 	stw	r16,1268(sp)
11043b88:	d9013015 	stw	r4,1216(sp)
11043b8c:	dfc14615 	stw	ra,1304(sp)
11043b90:	df014515 	stw	fp,1300(sp)
11043b94:	ddc14415 	stw	r23,1296(sp)
11043b98:	dd814315 	stw	r22,1292(sp)
11043b9c:	dd414215 	stw	r21,1288(sp)
11043ba0:	dd014115 	stw	r20,1284(sp)
11043ba4:	dcc14015 	stw	r19,1280(sp)
11043ba8:	dc813f15 	stw	r18,1276(sp)
11043bac:	dc413e15 	stw	r17,1272(sp)
11043bb0:	d9412915 	stw	r5,1188(sp)
11043bb4:	3021883a 	mov	r16,r6
11043bb8:	d9c12d15 	stw	r7,1204(sp)
11043bbc:	10484080 	call	11048408 <_localeconv_r>
11043bc0:	10800017 	ldw	r2,0(r2)
11043bc4:	d9013017 	ldw	r4,1216(sp)
11043bc8:	d8013315 	stw	zero,1228(sp)
11043bcc:	d8813715 	stw	r2,1244(sp)
11043bd0:	d8013415 	stw	zero,1232(sp)
11043bd4:	20000226 	beq	r4,zero,11043be0 <___vfprintf_internal_r+0x60>
11043bd8:	20800e17 	ldw	r2,56(r4)
11043bdc:	10019826 	beq	r2,zero,11044240 <___vfprintf_internal_r+0x6c0>
11043be0:	da012917 	ldw	r8,1188(sp)
11043be4:	4080030b 	ldhu	r2,12(r8)
11043be8:	10c0020c 	andi	r3,r2,8
11043bec:	18ffffcc 	andi	r3,r3,65535
11043bf0:	18e0001c 	xori	r3,r3,32768
11043bf4:	18e00004 	addi	r3,r3,-32768
11043bf8:	18013a26 	beq	r3,zero,110440e4 <___vfprintf_internal_r+0x564>
11043bfc:	40c00417 	ldw	r3,16(r8)
11043c00:	18013826 	beq	r3,zero,110440e4 <___vfprintf_internal_r+0x564>
11043c04:	1100068c 	andi	r4,r2,26
11043c08:	00c00284 	movi	r3,10
11043c0c:	20c13e26 	beq	r4,r3,11044108 <___vfprintf_internal_r+0x588>
11043c10:	da010dc4 	addi	r8,sp,1079
11043c14:	d8800404 	addi	r2,sp,16
11043c18:	da012615 	stw	r8,1176(sp)
11043c1c:	d8811b15 	stw	r2,1132(sp)
11043c20:	1013883a 	mov	r9,r2
11043c24:	d8812617 	ldw	r2,1176(sp)
11043c28:	da010e04 	addi	r8,sp,1080
11043c2c:	dc413017 	ldw	r17,1216(sp)
11043c30:	da012715 	stw	r8,1180(sp)
11043c34:	4091c83a 	sub	r8,r8,r2
11043c38:	d8011d15 	stw	zero,1140(sp)
11043c3c:	d8011c15 	stw	zero,1136(sp)
11043c40:	802b883a 	mov	r21,r16
11043c44:	d8013215 	stw	zero,1224(sp)
11043c48:	d8013615 	stw	zero,1240(sp)
11043c4c:	d8013515 	stw	zero,1236(sp)
11043c50:	d8012c15 	stw	zero,1200(sp)
11043c54:	da013915 	stw	r8,1252(sp)
11043c58:	a8800007 	ldb	r2,0(r21)
11043c5c:	1002ec26 	beq	r2,zero,11044810 <___vfprintf_internal_r+0xc90>
11043c60:	00c00944 	movi	r3,37
11043c64:	a825883a 	mov	r18,r21
11043c68:	10c0021e 	bne	r2,r3,11043c74 <___vfprintf_internal_r+0xf4>
11043c6c:	00001406 	br	11043cc0 <___vfprintf_internal_r+0x140>
11043c70:	10c00326 	beq	r2,r3,11043c80 <___vfprintf_internal_r+0x100>
11043c74:	94800044 	addi	r18,r18,1
11043c78:	90800007 	ldb	r2,0(r18)
11043c7c:	103ffc1e 	bne	r2,zero,11043c70 <___vfprintf_internal_r+0xf0>
11043c80:	9561c83a 	sub	r16,r18,r21
11043c84:	80000e26 	beq	r16,zero,11043cc0 <___vfprintf_internal_r+0x140>
11043c88:	da011d17 	ldw	r8,1140(sp)
11043c8c:	d8c11c17 	ldw	r3,1136(sp)
11043c90:	4d400015 	stw	r21,0(r9)
11043c94:	4c000115 	stw	r16,4(r9)
11043c98:	4411883a 	add	r8,r8,r16
11043c9c:	18c00044 	addi	r3,r3,1
11043ca0:	da011d15 	stw	r8,1140(sp)
11043ca4:	d8c11c15 	stw	r3,1136(sp)
11043ca8:	008001c4 	movi	r2,7
11043cac:	10c15d16 	blt	r2,r3,11044224 <___vfprintf_internal_r+0x6a4>
11043cb0:	4a400204 	addi	r9,r9,8
11043cb4:	d8812c17 	ldw	r2,1200(sp)
11043cb8:	1405883a 	add	r2,r2,r16
11043cbc:	d8812c15 	stw	r2,1200(sp)
11043cc0:	90800007 	ldb	r2,0(r18)
11043cc4:	10013b26 	beq	r2,zero,110441b4 <___vfprintf_internal_r+0x634>
11043cc8:	95400044 	addi	r21,r18,1
11043ccc:	94800047 	ldb	r18,1(r18)
11043cd0:	d8012585 	stb	zero,1174(sp)
11043cd4:	073fffc4 	movi	fp,-1
11043cd8:	d8012e15 	stw	zero,1208(sp)
11043cdc:	0021883a 	mov	r16,zero
11043ce0:	00c01604 	movi	r3,88
11043ce4:	01400244 	movi	r5,9
11043ce8:	02800a84 	movi	r10,42
11043cec:	01c01b04 	movi	r7,108
11043cf0:	01800ac4 	movi	r6,43
11043cf4:	02c00804 	movi	r11,32
11043cf8:	ad400044 	addi	r21,r21,1
11043cfc:	90bff804 	addi	r2,r18,-32
11043d00:	1880092e 	bgeu	r3,r2,11043d28 <___vfprintf_internal_r+0x1a8>
11043d04:	90012b26 	beq	r18,zero,110441b4 <___vfprintf_internal_r+0x634>
11043d08:	00c00044 	movi	r3,1
11043d0c:	d8c12815 	stw	r3,1184(sp)
11043d10:	dc810405 	stb	r18,1040(sp)
11043d14:	d8012585 	stb	zero,1174(sp)
11043d18:	d8c12b15 	stw	r3,1196(sp)
11043d1c:	dcc10404 	addi	r19,sp,1040
11043d20:	d8013115 	stw	zero,1220(sp)
11043d24:	00008806 	br	11043f48 <___vfprintf_internal_r+0x3c8>
11043d28:	1085883a 	add	r2,r2,r2
11043d2c:	1085883a 	add	r2,r2,r2
11043d30:	01044134 	movhi	r4,4356
11043d34:	210f5104 	addi	r4,r4,15684
11043d38:	1105883a 	add	r2,r2,r4
11043d3c:	10800017 	ldw	r2,0(r2)
11043d40:	1000683a 	jmp	r2
11043d44:	110442f8 	rdprs	r4,r2,4363
11043d48:	11043d04 	addi	r4,r2,4340
11043d4c:	11043d04 	addi	r4,r2,4340
11043d50:	1104430c 	andi	r4,r2,4364
11043d54:	11043d04 	addi	r4,r2,4340
11043d58:	11043d04 	addi	r4,r2,4340
11043d5c:	11043d04 	addi	r4,r2,4340
11043d60:	11043d04 	addi	r4,r2,4340
11043d64:	11043d04 	addi	r4,r2,4340
11043d68:	11043d04 	addi	r4,r2,4340
11043d6c:	110443f4 	orhi	r4,r2,4367
11043d70:	110442b0 	cmpltui	r4,r2,4362
11043d74:	11043d04 	addi	r4,r2,4340
11043d78:	110440d8 	cmpnei	r4,r2,4355
11043d7c:	110442bc 	xorhi	r4,r2,4362
11043d80:	11043d04 	addi	r4,r2,4340
11043d84:	11044318 	cmpnei	r4,r2,4364
11043d88:	11044418 	cmpnei	r4,r2,4368
11043d8c:	11044418 	cmpnei	r4,r2,4368
11043d90:	11044418 	cmpnei	r4,r2,4368
11043d94:	11044418 	cmpnei	r4,r2,4368
11043d98:	11044418 	cmpnei	r4,r2,4368
11043d9c:	11044418 	cmpnei	r4,r2,4368
11043da0:	11044418 	cmpnei	r4,r2,4368
11043da4:	11044418 	cmpnei	r4,r2,4368
11043da8:	11044418 	cmpnei	r4,r2,4368
11043dac:	11043d04 	addi	r4,r2,4340
11043db0:	11043d04 	addi	r4,r2,4340
11043db4:	11043d04 	addi	r4,r2,4340
11043db8:	11043d04 	addi	r4,r2,4340
11043dbc:	11043d04 	addi	r4,r2,4340
11043dc0:	11043d04 	addi	r4,r2,4340
11043dc4:	11043d04 	addi	r4,r2,4340
11043dc8:	11043d04 	addi	r4,r2,4340
11043dcc:	11043d04 	addi	r4,r2,4340
11043dd0:	11043d04 	addi	r4,r2,4340
11043dd4:	11044074 	orhi	r4,r2,4353
11043dd8:	11044440 	call	11104444 <__flash_rwdata_start+0xb470c>
11043ddc:	11043d04 	addi	r4,r2,4340
11043de0:	11044440 	call	11104444 <__flash_rwdata_start+0xb470c>
11043de4:	11043d04 	addi	r4,r2,4340
11043de8:	11043d04 	addi	r4,r2,4340
11043dec:	11043d04 	addi	r4,r2,4340
11043df0:	11043d04 	addi	r4,r2,4340
11043df4:	110445b0 	cmpltui	r4,r2,4374
11043df8:	11043d04 	addi	r4,r2,4340
11043dfc:	11043d04 	addi	r4,r2,4340
11043e00:	1104403c 	xorhi	r4,r2,4352
11043e04:	11043d04 	addi	r4,r2,4340
11043e08:	11043d04 	addi	r4,r2,4340
11043e0c:	11043d04 	addi	r4,r2,4340
11043e10:	11043d04 	addi	r4,r2,4340
11043e14:	11043d04 	addi	r4,r2,4340
11043e18:	11043ea8 	cmpgeui	r4,r2,4346
11043e1c:	11043d04 	addi	r4,r2,4340
11043e20:	11043d04 	addi	r4,r2,4340
11043e24:	11044324 	muli	r4,r2,4364
11043e28:	11043d04 	addi	r4,r2,4340
11043e2c:	11043d04 	addi	r4,r2,4340
11043e30:	11043d04 	addi	r4,r2,4340
11043e34:	11043d04 	addi	r4,r2,4340
11043e38:	11043d04 	addi	r4,r2,4340
11043e3c:	11043d04 	addi	r4,r2,4340
11043e40:	11043d04 	addi	r4,r2,4340
11043e44:	11043d04 	addi	r4,r2,4340
11043e48:	11043d04 	addi	r4,r2,4340
11043e4c:	11043d04 	addi	r4,r2,4340
11043e50:	11044398 	cmpnei	r4,r2,4366
11043e54:	11044078 	rdprs	r4,r2,4353
11043e58:	11044440 	call	11104444 <__flash_rwdata_start+0xb470c>
11043e5c:	11044440 	call	11104444 <__flash_rwdata_start+0xb470c>
11043e60:	11044440 	call	11104444 <__flash_rwdata_start+0xb470c>
11043e64:	11044378 	rdprs	r4,r2,4365
11043e68:	11044078 	rdprs	r4,r2,4353
11043e6c:	11043d04 	addi	r4,r2,4340
11043e70:	11043d04 	addi	r4,r2,4340
11043e74:	11044384 	addi	r4,r2,4366
11043e78:	11043d04 	addi	r4,r2,4340
11043e7c:	110443c8 	cmpgei	r4,r2,4367
11043e80:	11044040 	call	11104404 <__flash_rwdata_start+0xb46cc>
11043e84:	110444c8 	cmpgei	r4,r2,4371
11043e88:	11044514 	ori	r4,r2,4372
11043e8c:	11043d04 	addi	r4,r2,4340
11043e90:	11044520 	cmpeqi	r4,r2,4372
11043e94:	11043d04 	addi	r4,r2,4340
11043e98:	11043eac 	andhi	r4,r2,4346
11043e9c:	11043d04 	addi	r4,r2,4340
11043ea0:	11043d04 	addi	r4,r2,4340
11043ea4:	1104457c 	xorhi	r4,r2,4373
11043ea8:	84000414 	ori	r16,r16,16
11043eac:	8080080c 	andi	r2,r16,32
11043eb0:	1000f51e 	bne	r2,zero,11044288 <___vfprintf_internal_r+0x708>
11043eb4:	8080040c 	andi	r2,r16,16
11043eb8:	10042c26 	beq	r2,zero,11044f6c <___vfprintf_internal_r+0x13ec>
11043ebc:	da012d17 	ldw	r8,1204(sp)
11043ec0:	002d883a 	mov	r22,zero
11043ec4:	00c00044 	movi	r3,1
11043ec8:	45c00017 	ldw	r23,0(r8)
11043ecc:	42000104 	addi	r8,r8,4
11043ed0:	da012d15 	stw	r8,1204(sp)
11043ed4:	b805883a 	mov	r2,r23
11043ed8:	d8012585 	stb	zero,1174(sp)
11043edc:	e0000216 	blt	fp,zero,11043ee8 <___vfprintf_internal_r+0x368>
11043ee0:	013fdfc4 	movi	r4,-129
11043ee4:	8120703a 	and	r16,r16,r4
11043ee8:	1002671e 	bne	r2,zero,11044888 <___vfprintf_internal_r+0xd08>
11043eec:	e002661e 	bne	fp,zero,11044888 <___vfprintf_internal_r+0xd08>
11043ef0:	18c03fcc 	andi	r3,r3,255
11043ef4:	1803561e 	bne	r3,zero,11044c50 <___vfprintf_internal_r+0x10d0>
11043ef8:	8080004c 	andi	r2,r16,1
11043efc:	10035426 	beq	r2,zero,11044c50 <___vfprintf_internal_r+0x10d0>
11043f00:	da013917 	ldw	r8,1252(sp)
11043f04:	00800c04 	movi	r2,48
11043f08:	d8810dc5 	stb	r2,1079(sp)
11043f0c:	da012b15 	stw	r8,1196(sp)
11043f10:	dcc10dc4 	addi	r19,sp,1079
11043f14:	d8812b17 	ldw	r2,1196(sp)
11043f18:	d8812815 	stw	r2,1184(sp)
11043f1c:	1700010e 	bge	r2,fp,11043f24 <___vfprintf_internal_r+0x3a4>
11043f20:	df012815 	stw	fp,1184(sp)
11043f24:	d8812583 	ldbu	r2,1174(sp)
11043f28:	df013115 	stw	fp,1220(sp)
11043f2c:	10803fcc 	andi	r2,r2,255
11043f30:	1080201c 	xori	r2,r2,128
11043f34:	10bfe004 	addi	r2,r2,-128
11043f38:	10000326 	beq	r2,zero,11043f48 <___vfprintf_internal_r+0x3c8>
11043f3c:	da012817 	ldw	r8,1184(sp)
11043f40:	42000044 	addi	r8,r8,1
11043f44:	da012815 	stw	r8,1184(sp)
11043f48:	80c0008c 	andi	r3,r16,2
11043f4c:	d8c12a15 	stw	r3,1192(sp)
11043f50:	18000326 	beq	r3,zero,11043f60 <___vfprintf_internal_r+0x3e0>
11043f54:	da012817 	ldw	r8,1184(sp)
11043f58:	42000084 	addi	r8,r8,2
11043f5c:	da012815 	stw	r8,1184(sp)
11043f60:	80c0210c 	andi	r3,r16,132
11043f64:	d8c12f15 	stw	r3,1212(sp)
11043f68:	1801941e 	bne	r3,zero,110445bc <___vfprintf_internal_r+0xa3c>
11043f6c:	da012e17 	ldw	r8,1208(sp)
11043f70:	d8c12817 	ldw	r3,1184(sp)
11043f74:	40edc83a 	sub	r22,r8,r3
11043f78:	0581900e 	bge	zero,r22,110445bc <___vfprintf_internal_r+0xa3c>
11043f7c:	02800404 	movi	r10,16
11043f80:	da011d17 	ldw	r8,1140(sp)
11043f84:	d8c11c17 	ldw	r3,1136(sp)
11043f88:	05c00034 	movhi	r23,0
11043f8c:	bdc30484 	addi	r23,r23,3090
11043f90:	5580200e 	bge	r10,r22,11044014 <___vfprintf_internal_r+0x494>
11043f94:	dc813815 	stw	r18,1248(sp)
11043f98:	5039883a 	mov	fp,r10
11043f9c:	b825883a 	mov	r18,r23
11043fa0:	050001c4 	movi	r20,7
11043fa4:	b02f883a 	mov	r23,r22
11043fa8:	802d883a 	mov	r22,r16
11043fac:	dc012917 	ldw	r16,1188(sp)
11043fb0:	00000306 	br	11043fc0 <___vfprintf_internal_r+0x440>
11043fb4:	bdfffc04 	addi	r23,r23,-16
11043fb8:	4a400204 	addi	r9,r9,8
11043fbc:	e5c0110e 	bge	fp,r23,11044004 <___vfprintf_internal_r+0x484>
11043fc0:	4c800015 	stw	r18,0(r9)
11043fc4:	4f000115 	stw	fp,4(r9)
11043fc8:	42000404 	addi	r8,r8,16
11043fcc:	18c00044 	addi	r3,r3,1
11043fd0:	da011d15 	stw	r8,1140(sp)
11043fd4:	d8c11c15 	stw	r3,1136(sp)
11043fd8:	a0fff60e 	bge	r20,r3,11043fb4 <___vfprintf_internal_r+0x434>
11043fdc:	8809883a 	mov	r4,r17
11043fe0:	800b883a 	mov	r5,r16
11043fe4:	d9811b04 	addi	r6,sp,1132
11043fe8:	1043b4c0 	call	11043b4c <__sprint_r>
11043fec:	1000771e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11043ff0:	bdfffc04 	addi	r23,r23,-16
11043ff4:	da011d17 	ldw	r8,1140(sp)
11043ff8:	d8c11c17 	ldw	r3,1136(sp)
11043ffc:	da400404 	addi	r9,sp,16
11044000:	e5ffef16 	blt	fp,r23,11043fc0 <___vfprintf_internal_r+0x440>
11044004:	b021883a 	mov	r16,r22
11044008:	b82d883a 	mov	r22,r23
1104400c:	902f883a 	mov	r23,r18
11044010:	dc813817 	ldw	r18,1248(sp)
11044014:	4dc00015 	stw	r23,0(r9)
11044018:	4d800115 	stw	r22,4(r9)
1104401c:	4591883a 	add	r8,r8,r22
11044020:	18c00044 	addi	r3,r3,1
11044024:	da011d15 	stw	r8,1140(sp)
11044028:	d8c11c15 	stw	r3,1136(sp)
1104402c:	008001c4 	movi	r2,7
11044030:	10c36d16 	blt	r2,r3,11044de8 <___vfprintf_internal_r+0x1268>
11044034:	4a400204 	addi	r9,r9,8
11044038:	00016206 	br	110445c4 <___vfprintf_internal_r+0xa44>
1104403c:	84000414 	ori	r16,r16,16
11044040:	8080080c 	andi	r2,r16,32
11044044:	1000801e 	bne	r2,zero,11044248 <___vfprintf_internal_r+0x6c8>
11044048:	8080040c 	andi	r2,r16,16
1104404c:	1003da26 	beq	r2,zero,11044fb8 <___vfprintf_internal_r+0x1438>
11044050:	d8c12d17 	ldw	r3,1204(sp)
11044054:	002d883a 	mov	r22,zero
11044058:	1dc00017 	ldw	r23,0(r3)
1104405c:	18c00104 	addi	r3,r3,4
11044060:	d8c12d15 	stw	r3,1204(sp)
11044064:	b805883a 	mov	r2,r23
11044068:	0007883a 	mov	r3,zero
1104406c:	d8012585 	stb	zero,1174(sp)
11044070:	003f9a06 	br	11043edc <___vfprintf_internal_r+0x35c>
11044074:	84000414 	ori	r16,r16,16
11044078:	8080080c 	andi	r2,r16,32
1104407c:	10007b1e 	bne	r2,zero,1104426c <___vfprintf_internal_r+0x6ec>
11044080:	8080040c 	andi	r2,r16,16
11044084:	1003ed26 	beq	r2,zero,1104503c <___vfprintf_internal_r+0x14bc>
11044088:	d9012d17 	ldw	r4,1204(sp)
1104408c:	25c00017 	ldw	r23,0(r4)
11044090:	21000104 	addi	r4,r4,4
11044094:	d9012d15 	stw	r4,1204(sp)
11044098:	b82dd7fa 	srai	r22,r23,31
1104409c:	b005883a 	mov	r2,r22
110440a0:	1003230e 	bge	r2,zero,11044d30 <___vfprintf_internal_r+0x11b0>
110440a4:	05efc83a 	sub	r23,zero,r23
110440a8:	b804c03a 	cmpne	r2,r23,zero
110440ac:	05adc83a 	sub	r22,zero,r22
110440b0:	b0adc83a 	sub	r22,r22,r2
110440b4:	00800b44 	movi	r2,45
110440b8:	d8812585 	stb	r2,1174(sp)
110440bc:	00c00044 	movi	r3,1
110440c0:	bd84b03a 	or	r2,r23,r22
110440c4:	003f8506 	br	11043edc <___vfprintf_internal_r+0x35c>
110440c8:	da012e17 	ldw	r8,1208(sp)
110440cc:	d8812d15 	stw	r2,1204(sp)
110440d0:	0211c83a 	sub	r8,zero,r8
110440d4:	da012e15 	stw	r8,1208(sp)
110440d8:	84000114 	ori	r16,r16,4
110440dc:	ac800007 	ldb	r18,0(r21)
110440e0:	003f0506 	br	11043cf8 <___vfprintf_internal_r+0x178>
110440e4:	d9013017 	ldw	r4,1216(sp)
110440e8:	d9412917 	ldw	r5,1188(sp)
110440ec:	1045a880 	call	11045a88 <__swsetup_r>
110440f0:	10003d1e 	bne	r2,zero,110441e8 <___vfprintf_internal_r+0x668>
110440f4:	d8c12917 	ldw	r3,1188(sp)
110440f8:	1880030b 	ldhu	r2,12(r3)
110440fc:	00c00284 	movi	r3,10
11044100:	1100068c 	andi	r4,r2,26
11044104:	20fec21e 	bne	r4,r3,11043c10 <___vfprintf_internal_r+0x90>
11044108:	d9012917 	ldw	r4,1188(sp)
1104410c:	20c0038b 	ldhu	r3,14(r4)
11044110:	193fffcc 	andi	r4,r3,65535
11044114:	2120001c 	xori	r4,r4,32768
11044118:	21200004 	addi	r4,r4,-32768
1104411c:	203ebc16 	blt	r4,zero,11043c10 <___vfprintf_internal_r+0x90>
11044120:	da012917 	ldw	r8,1188(sp)
11044124:	d9013017 	ldw	r4,1216(sp)
11044128:	d9c12d17 	ldw	r7,1204(sp)
1104412c:	42800717 	ldw	r10,28(r8)
11044130:	42400917 	ldw	r9,36(r8)
11044134:	10bfff4c 	andi	r2,r2,65533
11044138:	02010004 	movi	r8,1024
1104413c:	d881070d 	sth	r2,1052(sp)
11044140:	d9410404 	addi	r5,sp,1040
11044144:	d8800404 	addi	r2,sp,16
11044148:	800d883a 	mov	r6,r16
1104414c:	d8c1078d 	sth	r3,1054(sp)
11044150:	da810b15 	stw	r10,1068(sp)
11044154:	da410d15 	stw	r9,1076(sp)
11044158:	d8810415 	stw	r2,1040(sp)
1104415c:	d8810815 	stw	r2,1056(sp)
11044160:	da010615 	stw	r8,1048(sp)
11044164:	da010915 	stw	r8,1060(sp)
11044168:	d8010a15 	stw	zero,1064(sp)
1104416c:	1043b800 	call	11043b80 <___vfprintf_internal_r>
11044170:	d8812c15 	stw	r2,1200(sp)
11044174:	10000416 	blt	r2,zero,11044188 <___vfprintf_internal_r+0x608>
11044178:	d9013017 	ldw	r4,1216(sp)
1104417c:	d9410404 	addi	r5,sp,1040
11044180:	10474200 	call	11047420 <_fflush_r>
11044184:	1005d81e 	bne	r2,zero,110458e8 <___vfprintf_internal_r+0x1d68>
11044188:	d881070b 	ldhu	r2,1052(sp)
1104418c:	1080100c 	andi	r2,r2,64
11044190:	10bfffcc 	andi	r2,r2,65535
11044194:	10a0001c 	xori	r2,r2,32768
11044198:	10a00004 	addi	r2,r2,-32768
1104419c:	10001426 	beq	r2,zero,110441f0 <___vfprintf_internal_r+0x670>
110441a0:	d8c12917 	ldw	r3,1188(sp)
110441a4:	1880030b 	ldhu	r2,12(r3)
110441a8:	10801014 	ori	r2,r2,64
110441ac:	1880030d 	sth	r2,12(r3)
110441b0:	00000f06 	br	110441f0 <___vfprintf_internal_r+0x670>
110441b4:	d8811d17 	ldw	r2,1140(sp)
110441b8:	10000426 	beq	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
110441bc:	d9013017 	ldw	r4,1216(sp)
110441c0:	d9412917 	ldw	r5,1188(sp)
110441c4:	d9811b04 	addi	r6,sp,1132
110441c8:	1043b4c0 	call	11043b4c <__sprint_r>
110441cc:	d8c12917 	ldw	r3,1188(sp)
110441d0:	1880030b 	ldhu	r2,12(r3)
110441d4:	1080100c 	andi	r2,r2,64
110441d8:	10bfffcc 	andi	r2,r2,65535
110441dc:	10a0001c 	xori	r2,r2,32768
110441e0:	10a00004 	addi	r2,r2,-32768
110441e4:	10000226 	beq	r2,zero,110441f0 <___vfprintf_internal_r+0x670>
110441e8:	00bfffc4 	movi	r2,-1
110441ec:	d8812c15 	stw	r2,1200(sp)
110441f0:	d8812c17 	ldw	r2,1200(sp)
110441f4:	dfc14617 	ldw	ra,1304(sp)
110441f8:	df014517 	ldw	fp,1300(sp)
110441fc:	ddc14417 	ldw	r23,1296(sp)
11044200:	dd814317 	ldw	r22,1292(sp)
11044204:	dd414217 	ldw	r21,1288(sp)
11044208:	dd014117 	ldw	r20,1284(sp)
1104420c:	dcc14017 	ldw	r19,1280(sp)
11044210:	dc813f17 	ldw	r18,1276(sp)
11044214:	dc413e17 	ldw	r17,1272(sp)
11044218:	dc013d17 	ldw	r16,1268(sp)
1104421c:	dec14704 	addi	sp,sp,1308
11044220:	f800283a 	ret
11044224:	d9412917 	ldw	r5,1188(sp)
11044228:	8809883a 	mov	r4,r17
1104422c:	d9811b04 	addi	r6,sp,1132
11044230:	1043b4c0 	call	11043b4c <__sprint_r>
11044234:	103fe51e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044238:	da400404 	addi	r9,sp,16
1104423c:	003e9d06 	br	11043cb4 <___vfprintf_internal_r+0x134>
11044240:	10476c80 	call	110476c8 <__sinit>
11044244:	003e6606 	br	11043be0 <___vfprintf_internal_r+0x60>
11044248:	d8812d17 	ldw	r2,1204(sp)
1104424c:	0007883a 	mov	r3,zero
11044250:	15c00017 	ldw	r23,0(r2)
11044254:	15800117 	ldw	r22,4(r2)
11044258:	10800204 	addi	r2,r2,8
1104425c:	d8812d15 	stw	r2,1204(sp)
11044260:	d8012585 	stb	zero,1174(sp)
11044264:	bd84b03a 	or	r2,r23,r22
11044268:	003f1c06 	br	11043edc <___vfprintf_internal_r+0x35c>
1104426c:	d8c12d17 	ldw	r3,1204(sp)
11044270:	18800117 	ldw	r2,4(r3)
11044274:	1dc00017 	ldw	r23,0(r3)
11044278:	18c00204 	addi	r3,r3,8
1104427c:	d8c12d15 	stw	r3,1204(sp)
11044280:	102d883a 	mov	r22,r2
11044284:	003f8606 	br	110440a0 <___vfprintf_internal_r+0x520>
11044288:	d8c12d17 	ldw	r3,1204(sp)
1104428c:	d9012d17 	ldw	r4,1204(sp)
11044290:	1dc00017 	ldw	r23,0(r3)
11044294:	1d800117 	ldw	r22,4(r3)
11044298:	21000204 	addi	r4,r4,8
1104429c:	00c00044 	movi	r3,1
110442a0:	d9012d15 	stw	r4,1204(sp)
110442a4:	bd84b03a 	or	r2,r23,r22
110442a8:	d8012585 	stb	zero,1174(sp)
110442ac:	003f0b06 	br	11043edc <___vfprintf_internal_r+0x35c>
110442b0:	d9812585 	stb	r6,1174(sp)
110442b4:	ac800007 	ldb	r18,0(r21)
110442b8:	003e8f06 	br	11043cf8 <___vfprintf_internal_r+0x178>
110442bc:	ac800007 	ldb	r18,0(r21)
110442c0:	a9000044 	addi	r4,r21,1
110442c4:	92857d26 	beq	r18,r10,110458bc <___vfprintf_internal_r+0x1d3c>
110442c8:	90bff404 	addi	r2,r18,-48
110442cc:	0039883a 	mov	fp,zero
110442d0:	28800736 	bltu	r5,r2,110442f0 <___vfprintf_internal_r+0x770>
110442d4:	24800007 	ldb	r18,0(r4)
110442d8:	e70002a4 	muli	fp,fp,10
110442dc:	21000044 	addi	r4,r4,1
110442e0:	1739883a 	add	fp,r2,fp
110442e4:	90bff404 	addi	r2,r18,-48
110442e8:	28bffa2e 	bgeu	r5,r2,110442d4 <___vfprintf_internal_r+0x754>
110442ec:	e0044216 	blt	fp,zero,110453f8 <___vfprintf_internal_r+0x1878>
110442f0:	202b883a 	mov	r21,r4
110442f4:	003e8106 	br	11043cfc <___vfprintf_internal_r+0x17c>
110442f8:	d8812587 	ldb	r2,1174(sp)
110442fc:	1003581e 	bne	r2,zero,11045060 <___vfprintf_internal_r+0x14e0>
11044300:	dac12585 	stb	r11,1174(sp)
11044304:	ac800007 	ldb	r18,0(r21)
11044308:	003e7b06 	br	11043cf8 <___vfprintf_internal_r+0x178>
1104430c:	84000054 	ori	r16,r16,1
11044310:	ac800007 	ldb	r18,0(r21)
11044314:	003e7806 	br	11043cf8 <___vfprintf_internal_r+0x178>
11044318:	84002014 	ori	r16,r16,128
1104431c:	ac800007 	ldb	r18,0(r21)
11044320:	003e7506 	br	11043cf8 <___vfprintf_internal_r+0x178>
11044324:	02000034 	movhi	r8,0
11044328:	4202f804 	addi	r8,r8,3040
1104432c:	da013615 	stw	r8,1240(sp)
11044330:	8080080c 	andi	r2,r16,32
11044334:	10009626 	beq	r2,zero,11044590 <___vfprintf_internal_r+0xa10>
11044338:	d8812d17 	ldw	r2,1204(sp)
1104433c:	15c00017 	ldw	r23,0(r2)
11044340:	15800117 	ldw	r22,4(r2)
11044344:	10800204 	addi	r2,r2,8
11044348:	d8812d15 	stw	r2,1204(sp)
1104434c:	8080004c 	andi	r2,r16,1
11044350:	1002ae26 	beq	r2,zero,11044e0c <___vfprintf_internal_r+0x128c>
11044354:	bd84b03a 	or	r2,r23,r22
11044358:	10032a26 	beq	r2,zero,11045004 <___vfprintf_internal_r+0x1484>
1104435c:	00c00c04 	movi	r3,48
11044360:	d8c12505 	stb	r3,1172(sp)
11044364:	dc812545 	stb	r18,1173(sp)
11044368:	84000094 	ori	r16,r16,2
1104436c:	00c00084 	movi	r3,2
11044370:	d8012585 	stb	zero,1174(sp)
11044374:	003ed906 	br	11043edc <___vfprintf_internal_r+0x35c>
11044378:	84001014 	ori	r16,r16,64
1104437c:	ac800007 	ldb	r18,0(r21)
11044380:	003e5d06 	br	11043cf8 <___vfprintf_internal_r+0x178>
11044384:	ac800007 	ldb	r18,0(r21)
11044388:	a805883a 	mov	r2,r21
1104438c:	91c43226 	beq	r18,r7,11045458 <___vfprintf_internal_r+0x18d8>
11044390:	84000414 	ori	r16,r16,16
11044394:	003e5806 	br	11043cf8 <___vfprintf_internal_r+0x178>
11044398:	d8c12d17 	ldw	r3,1204(sp)
1104439c:	02000044 	movi	r8,1
110443a0:	da012815 	stw	r8,1184(sp)
110443a4:	18800017 	ldw	r2,0(r3)
110443a8:	18c00104 	addi	r3,r3,4
110443ac:	d8012585 	stb	zero,1174(sp)
110443b0:	d8810405 	stb	r2,1040(sp)
110443b4:	d8c12d15 	stw	r3,1204(sp)
110443b8:	da012b15 	stw	r8,1196(sp)
110443bc:	dcc10404 	addi	r19,sp,1040
110443c0:	d8013115 	stw	zero,1220(sp)
110443c4:	003ee006 	br	11043f48 <___vfprintf_internal_r+0x3c8>
110443c8:	8080080c 	andi	r2,r16,32
110443cc:	10031026 	beq	r2,zero,11045010 <___vfprintf_internal_r+0x1490>
110443d0:	d9012d17 	ldw	r4,1204(sp)
110443d4:	da012c17 	ldw	r8,1200(sp)
110443d8:	20800017 	ldw	r2,0(r4)
110443dc:	4007d7fa 	srai	r3,r8,31
110443e0:	21000104 	addi	r4,r4,4
110443e4:	d9012d15 	stw	r4,1204(sp)
110443e8:	12000015 	stw	r8,0(r2)
110443ec:	10c00115 	stw	r3,4(r2)
110443f0:	003e1906 	br	11043c58 <___vfprintf_internal_r+0xd8>
110443f4:	da012d17 	ldw	r8,1204(sp)
110443f8:	d9012d17 	ldw	r4,1204(sp)
110443fc:	42000017 	ldw	r8,0(r8)
11044400:	20800104 	addi	r2,r4,4
11044404:	da012e15 	stw	r8,1208(sp)
11044408:	403f2f16 	blt	r8,zero,110440c8 <___vfprintf_internal_r+0x548>
1104440c:	d8812d15 	stw	r2,1204(sp)
11044410:	ac800007 	ldb	r18,0(r21)
11044414:	003e3806 	br	11043cf8 <___vfprintf_internal_r+0x178>
11044418:	0009883a 	mov	r4,zero
1104441c:	90bff404 	addi	r2,r18,-48
11044420:	ac800007 	ldb	r18,0(r21)
11044424:	210002a4 	muli	r4,r4,10
11044428:	ad400044 	addi	r21,r21,1
1104442c:	2089883a 	add	r4,r4,r2
11044430:	90bff404 	addi	r2,r18,-48
11044434:	28bffa2e 	bgeu	r5,r2,11044420 <___vfprintf_internal_r+0x8a0>
11044438:	d9012e15 	stw	r4,1208(sp)
1104443c:	003e2f06 	br	11043cfc <___vfprintf_internal_r+0x17c>
11044440:	8080020c 	andi	r2,r16,8
11044444:	1002d426 	beq	r2,zero,11044f98 <___vfprintf_internal_r+0x1418>
11044448:	d8c12d17 	ldw	r3,1204(sp)
1104444c:	1d800017 	ldw	r22,0(r3)
11044450:	1d000117 	ldw	r20,4(r3)
11044454:	18c00204 	addi	r3,r3,8
11044458:	d8c12d15 	stw	r3,1204(sp)
1104445c:	dd813315 	stw	r22,1228(sp)
11044460:	dd013415 	stw	r20,1232(sp)
11044464:	b009883a 	mov	r4,r22
11044468:	a00b883a 	mov	r5,r20
1104446c:	da413c15 	stw	r9,1264(sp)
11044470:	104a7000 	call	1104a700 <__isinfd>
11044474:	da413c17 	ldw	r9,1264(sp)
11044478:	b009883a 	mov	r4,r22
1104447c:	a00b883a 	mov	r5,r20
11044480:	10035726 	beq	r2,zero,110451e0 <___vfprintf_internal_r+0x1660>
11044484:	000d883a 	mov	r6,zero
11044488:	000f883a 	mov	r7,zero
1104448c:	104bde40 	call	1104bde4 <__ltdf2>
11044490:	da413c17 	ldw	r9,1264(sp)
11044494:	10041b16 	blt	r2,zero,11045504 <___vfprintf_internal_r+0x1984>
11044498:	d8812583 	ldbu	r2,1174(sp)
1104449c:	00c011c4 	movi	r3,71
110444a0:	1c830b16 	blt	r3,r18,110450d0 <___vfprintf_internal_r+0x1550>
110444a4:	04c00034 	movhi	r19,0
110444a8:	9cc2f404 	addi	r19,r19,3024
110444ac:	020000c4 	movi	r8,3
110444b0:	00ffdfc4 	movi	r3,-129
110444b4:	da012815 	stw	r8,1184(sp)
110444b8:	80e0703a 	and	r16,r16,r3
110444bc:	da012b15 	stw	r8,1196(sp)
110444c0:	d8013115 	stw	zero,1220(sp)
110444c4:	003e9906 	br	11043f2c <___vfprintf_internal_r+0x3ac>
110444c8:	d8812d17 	ldw	r2,1204(sp)
110444cc:	d8c12d17 	ldw	r3,1204(sp)
110444d0:	02000034 	movhi	r8,0
110444d4:	4202fd04 	addi	r8,r8,3060
110444d8:	15c00017 	ldw	r23,0(r2)
110444dc:	00800c04 	movi	r2,48
110444e0:	18c00104 	addi	r3,r3,4
110444e4:	d8812505 	stb	r2,1172(sp)
110444e8:	00801e04 	movi	r2,120
110444ec:	d8812545 	stb	r2,1173(sp)
110444f0:	d8c12d15 	stw	r3,1204(sp)
110444f4:	002d883a 	mov	r22,zero
110444f8:	84000094 	ori	r16,r16,2
110444fc:	da013615 	stw	r8,1240(sp)
11044500:	00c00084 	movi	r3,2
11044504:	04801e04 	movi	r18,120
11044508:	b805883a 	mov	r2,r23
1104450c:	d8012585 	stb	zero,1174(sp)
11044510:	003e7206 	br	11043edc <___vfprintf_internal_r+0x35c>
11044514:	84000814 	ori	r16,r16,32
11044518:	ac800007 	ldb	r18,0(r21)
1104451c:	003df606 	br	11043cf8 <___vfprintf_internal_r+0x178>
11044520:	d8812d17 	ldw	r2,1204(sp)
11044524:	d8012585 	stb	zero,1174(sp)
11044528:	14c00017 	ldw	r19,0(r2)
1104452c:	15c00104 	addi	r23,r2,4
11044530:	98040126 	beq	r19,zero,11045538 <___vfprintf_internal_r+0x19b8>
11044534:	9809883a 	mov	r4,r19
11044538:	e003dd16 	blt	fp,zero,110454b0 <___vfprintf_internal_r+0x1930>
1104453c:	000b883a 	mov	r5,zero
11044540:	e00d883a 	mov	r6,fp
11044544:	da413c15 	stw	r9,1264(sp)
11044548:	1048d680 	call	11048d68 <memchr>
1104454c:	da413c17 	ldw	r9,1264(sp)
11044550:	10042e26 	beq	r2,zero,1104560c <___vfprintf_internal_r+0x1a8c>
11044554:	14c5c83a 	sub	r2,r2,r19
11044558:	d8812b15 	stw	r2,1196(sp)
1104455c:	e083790e 	bge	fp,r2,11045344 <___vfprintf_internal_r+0x17c4>
11044560:	df012815 	stw	fp,1184(sp)
11044564:	e0049516 	blt	fp,zero,110457bc <___vfprintf_internal_r+0x1c3c>
11044568:	d8812583 	ldbu	r2,1174(sp)
1104456c:	df012b15 	stw	fp,1196(sp)
11044570:	ddc12d15 	stw	r23,1204(sp)
11044574:	d8013115 	stw	zero,1220(sp)
11044578:	003e6c06 	br	11043f2c <___vfprintf_internal_r+0x3ac>
1104457c:	02000034 	movhi	r8,0
11044580:	4202fd04 	addi	r8,r8,3060
11044584:	da013615 	stw	r8,1240(sp)
11044588:	8080080c 	andi	r2,r16,32
1104458c:	103f6a1e 	bne	r2,zero,11044338 <___vfprintf_internal_r+0x7b8>
11044590:	8080040c 	andi	r2,r16,16
11044594:	10029326 	beq	r2,zero,11044fe4 <___vfprintf_internal_r+0x1464>
11044598:	d8c12d17 	ldw	r3,1204(sp)
1104459c:	002d883a 	mov	r22,zero
110445a0:	1dc00017 	ldw	r23,0(r3)
110445a4:	18c00104 	addi	r3,r3,4
110445a8:	d8c12d15 	stw	r3,1204(sp)
110445ac:	003f6706 	br	1104434c <___vfprintf_internal_r+0x7cc>
110445b0:	84000214 	ori	r16,r16,8
110445b4:	ac800007 	ldb	r18,0(r21)
110445b8:	003dcf06 	br	11043cf8 <___vfprintf_internal_r+0x178>
110445bc:	da011d17 	ldw	r8,1140(sp)
110445c0:	d8c11c17 	ldw	r3,1136(sp)
110445c4:	d8812587 	ldb	r2,1174(sp)
110445c8:	10000b26 	beq	r2,zero,110445f8 <___vfprintf_internal_r+0xa78>
110445cc:	d8812584 	addi	r2,sp,1174
110445d0:	48800015 	stw	r2,0(r9)
110445d4:	00800044 	movi	r2,1
110445d8:	48800115 	stw	r2,4(r9)
110445dc:	4091883a 	add	r8,r8,r2
110445e0:	1887883a 	add	r3,r3,r2
110445e4:	da011d15 	stw	r8,1140(sp)
110445e8:	d8c11c15 	stw	r3,1136(sp)
110445ec:	008001c4 	movi	r2,7
110445f0:	10c18516 	blt	r2,r3,11044c08 <___vfprintf_internal_r+0x1088>
110445f4:	4a400204 	addi	r9,r9,8
110445f8:	d9012a17 	ldw	r4,1192(sp)
110445fc:	20000b26 	beq	r4,zero,1104462c <___vfprintf_internal_r+0xaac>
11044600:	d8812504 	addi	r2,sp,1172
11044604:	48800015 	stw	r2,0(r9)
11044608:	00800084 	movi	r2,2
1104460c:	48800115 	stw	r2,4(r9)
11044610:	4091883a 	add	r8,r8,r2
11044614:	18c00044 	addi	r3,r3,1
11044618:	da011d15 	stw	r8,1140(sp)
1104461c:	d8c11c15 	stw	r3,1136(sp)
11044620:	008001c4 	movi	r2,7
11044624:	10c18116 	blt	r2,r3,11044c2c <___vfprintf_internal_r+0x10ac>
11044628:	4a400204 	addi	r9,r9,8
1104462c:	d9012f17 	ldw	r4,1212(sp)
11044630:	00802004 	movi	r2,128
11044634:	2080fc26 	beq	r4,r2,11044a28 <___vfprintf_internal_r+0xea8>
11044638:	d8813117 	ldw	r2,1220(sp)
1104463c:	d9012b17 	ldw	r4,1196(sp)
11044640:	112fc83a 	sub	r23,r2,r4
11044644:	05c02a0e 	bge	zero,r23,110446f0 <___vfprintf_internal_r+0xb70>
11044648:	07000404 	movi	fp,16
1104464c:	05000034 	movhi	r20,0
11044650:	a5030884 	addi	r20,r20,3106
11044654:	e5c01d0e 	bge	fp,r23,110446cc <___vfprintf_internal_r+0xb4c>
11044658:	dc812a15 	stw	r18,1192(sp)
1104465c:	058001c4 	movi	r22,7
11044660:	a025883a 	mov	r18,r20
11044664:	8029883a 	mov	r20,r16
11044668:	dc012917 	ldw	r16,1188(sp)
1104466c:	00000306 	br	1104467c <___vfprintf_internal_r+0xafc>
11044670:	bdfffc04 	addi	r23,r23,-16
11044674:	4a400204 	addi	r9,r9,8
11044678:	e5c0110e 	bge	fp,r23,110446c0 <___vfprintf_internal_r+0xb40>
1104467c:	4c800015 	stw	r18,0(r9)
11044680:	4f000115 	stw	fp,4(r9)
11044684:	42000404 	addi	r8,r8,16
11044688:	18c00044 	addi	r3,r3,1
1104468c:	da011d15 	stw	r8,1140(sp)
11044690:	d8c11c15 	stw	r3,1136(sp)
11044694:	b0fff60e 	bge	r22,r3,11044670 <___vfprintf_internal_r+0xaf0>
11044698:	8809883a 	mov	r4,r17
1104469c:	800b883a 	mov	r5,r16
110446a0:	d9811b04 	addi	r6,sp,1132
110446a4:	1043b4c0 	call	11043b4c <__sprint_r>
110446a8:	103ec81e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
110446ac:	bdfffc04 	addi	r23,r23,-16
110446b0:	da011d17 	ldw	r8,1140(sp)
110446b4:	d8c11c17 	ldw	r3,1136(sp)
110446b8:	da400404 	addi	r9,sp,16
110446bc:	e5ffef16 	blt	fp,r23,1104467c <___vfprintf_internal_r+0xafc>
110446c0:	a021883a 	mov	r16,r20
110446c4:	9029883a 	mov	r20,r18
110446c8:	dc812a17 	ldw	r18,1192(sp)
110446cc:	4d000015 	stw	r20,0(r9)
110446d0:	4dc00115 	stw	r23,4(r9)
110446d4:	45d1883a 	add	r8,r8,r23
110446d8:	18c00044 	addi	r3,r3,1
110446dc:	da011d15 	stw	r8,1140(sp)
110446e0:	d8c11c15 	stw	r3,1136(sp)
110446e4:	008001c4 	movi	r2,7
110446e8:	10c13e16 	blt	r2,r3,11044be4 <___vfprintf_internal_r+0x1064>
110446ec:	4a400204 	addi	r9,r9,8
110446f0:	8080400c 	andi	r2,r16,256
110446f4:	1000831e 	bne	r2,zero,11044904 <___vfprintf_internal_r+0xd84>
110446f8:	d8812b17 	ldw	r2,1196(sp)
110446fc:	4cc00015 	stw	r19,0(r9)
11044700:	48800115 	stw	r2,4(r9)
11044704:	4091883a 	add	r8,r8,r2
11044708:	18c00044 	addi	r3,r3,1
1104470c:	da011d15 	stw	r8,1140(sp)
11044710:	d8c11c15 	stw	r3,1136(sp)
11044714:	008001c4 	movi	r2,7
11044718:	10c05316 	blt	r2,r3,11044868 <___vfprintf_internal_r+0xce8>
1104471c:	4a400204 	addi	r9,r9,8
11044720:	8400010c 	andi	r16,r16,4
11044724:	80002e26 	beq	r16,zero,110447e0 <___vfprintf_internal_r+0xc60>
11044728:	d8812e17 	ldw	r2,1208(sp)
1104472c:	d8c12817 	ldw	r3,1184(sp)
11044730:	10e1c83a 	sub	r16,r2,r3
11044734:	04002a0e 	bge	zero,r16,110447e0 <___vfprintf_internal_r+0xc60>
11044738:	04800404 	movi	r18,16
1104473c:	d8c11c17 	ldw	r3,1136(sp)
11044740:	05c00034 	movhi	r23,0
11044744:	bdc30484 	addi	r23,r23,3090
11044748:	9400170e 	bge	r18,r16,110447a8 <___vfprintf_internal_r+0xc28>
1104474c:	04c001c4 	movi	r19,7
11044750:	dd012917 	ldw	r20,1188(sp)
11044754:	00000306 	br	11044764 <___vfprintf_internal_r+0xbe4>
11044758:	843ffc04 	addi	r16,r16,-16
1104475c:	4a400204 	addi	r9,r9,8
11044760:	9400110e 	bge	r18,r16,110447a8 <___vfprintf_internal_r+0xc28>
11044764:	4dc00015 	stw	r23,0(r9)
11044768:	4c800115 	stw	r18,4(r9)
1104476c:	42000404 	addi	r8,r8,16
11044770:	18c00044 	addi	r3,r3,1
11044774:	da011d15 	stw	r8,1140(sp)
11044778:	d8c11c15 	stw	r3,1136(sp)
1104477c:	98fff60e 	bge	r19,r3,11044758 <___vfprintf_internal_r+0xbd8>
11044780:	8809883a 	mov	r4,r17
11044784:	a00b883a 	mov	r5,r20
11044788:	d9811b04 	addi	r6,sp,1132
1104478c:	1043b4c0 	call	11043b4c <__sprint_r>
11044790:	103e8e1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044794:	843ffc04 	addi	r16,r16,-16
11044798:	da011d17 	ldw	r8,1140(sp)
1104479c:	d8c11c17 	ldw	r3,1136(sp)
110447a0:	da400404 	addi	r9,sp,16
110447a4:	943fef16 	blt	r18,r16,11044764 <___vfprintf_internal_r+0xbe4>
110447a8:	4dc00015 	stw	r23,0(r9)
110447ac:	4c000115 	stw	r16,4(r9)
110447b0:	8211883a 	add	r8,r16,r8
110447b4:	18c00044 	addi	r3,r3,1
110447b8:	da011d15 	stw	r8,1140(sp)
110447bc:	d8c11c15 	stw	r3,1136(sp)
110447c0:	008001c4 	movi	r2,7
110447c4:	10c0060e 	bge	r2,r3,110447e0 <___vfprintf_internal_r+0xc60>
110447c8:	d9412917 	ldw	r5,1188(sp)
110447cc:	8809883a 	mov	r4,r17
110447d0:	d9811b04 	addi	r6,sp,1132
110447d4:	1043b4c0 	call	11043b4c <__sprint_r>
110447d8:	103e7c1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
110447dc:	da011d17 	ldw	r8,1140(sp)
110447e0:	dd012817 	ldw	r20,1184(sp)
110447e4:	d9012e17 	ldw	r4,1208(sp)
110447e8:	a100010e 	bge	r20,r4,110447f0 <___vfprintf_internal_r+0xc70>
110447ec:	2029883a 	mov	r20,r4
110447f0:	d8812c17 	ldw	r2,1200(sp)
110447f4:	1505883a 	add	r2,r2,r20
110447f8:	d8812c15 	stw	r2,1200(sp)
110447fc:	4000b91e 	bne	r8,zero,11044ae4 <___vfprintf_internal_r+0xf64>
11044800:	d8011c15 	stw	zero,1136(sp)
11044804:	a8800007 	ldb	r2,0(r21)
11044808:	da400404 	addi	r9,sp,16
1104480c:	103d141e 	bne	r2,zero,11043c60 <___vfprintf_internal_r+0xe0>
11044810:	a825883a 	mov	r18,r21
11044814:	003d2a06 	br	11043cc0 <___vfprintf_internal_r+0x140>
11044818:	d9412917 	ldw	r5,1188(sp)
1104481c:	8809883a 	mov	r4,r17
11044820:	d9811b04 	addi	r6,sp,1132
11044824:	1043b4c0 	call	11043b4c <__sprint_r>
11044828:	103e681e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
1104482c:	da011d17 	ldw	r8,1140(sp)
11044830:	da400404 	addi	r9,sp,16
11044834:	8080004c 	andi	r2,r16,1
11044838:	103fb926 	beq	r2,zero,11044720 <___vfprintf_internal_r+0xba0>
1104483c:	d8c11c17 	ldw	r3,1136(sp)
11044840:	d9013717 	ldw	r4,1244(sp)
11044844:	00800044 	movi	r2,1
11044848:	48800115 	stw	r2,4(r9)
1104484c:	49000015 	stw	r4,0(r9)
11044850:	4091883a 	add	r8,r8,r2
11044854:	1887883a 	add	r3,r3,r2
11044858:	da011d15 	stw	r8,1140(sp)
1104485c:	d8c11c15 	stw	r3,1136(sp)
11044860:	008001c4 	movi	r2,7
11044864:	10ffad0e 	bge	r2,r3,1104471c <___vfprintf_internal_r+0xb9c>
11044868:	d9412917 	ldw	r5,1188(sp)
1104486c:	8809883a 	mov	r4,r17
11044870:	d9811b04 	addi	r6,sp,1132
11044874:	1043b4c0 	call	11043b4c <__sprint_r>
11044878:	103e541e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
1104487c:	da400404 	addi	r9,sp,16
11044880:	da011d17 	ldw	r8,1140(sp)
11044884:	003fa606 	br	11044720 <___vfprintf_internal_r+0xba0>
11044888:	18803fcc 	andi	r2,r3,255
1104488c:	00c00044 	movi	r3,1
11044890:	10c10126 	beq	r2,r3,11044c98 <___vfprintf_internal_r+0x1118>
11044894:	00c00084 	movi	r3,2
11044898:	10c0f026 	beq	r2,r3,11044c5c <___vfprintf_internal_r+0x10dc>
1104489c:	d8c10dc4 	addi	r3,sp,1079
110448a0:	b808d0fa 	srli	r4,r23,3
110448a4:	b00a977a 	slli	r5,r22,29
110448a8:	b02cd0fa 	srli	r22,r22,3
110448ac:	bdc001cc 	andi	r23,r23,7
110448b0:	b8800c04 	addi	r2,r23,48
110448b4:	292eb03a 	or	r23,r5,r4
110448b8:	18800005 	stb	r2,0(r3)
110448bc:	bd88b03a 	or	r4,r23,r22
110448c0:	1827883a 	mov	r19,r3
110448c4:	18ffffc4 	addi	r3,r3,-1
110448c8:	203ff51e 	bne	r4,zero,110448a0 <___vfprintf_internal_r+0xd20>
110448cc:	8100004c 	andi	r4,r16,1
110448d0:	980b883a 	mov	r5,r19
110448d4:	20000726 	beq	r4,zero,110448f4 <___vfprintf_internal_r+0xd74>
110448d8:	10803fcc 	andi	r2,r2,255
110448dc:	1080201c 	xori	r2,r2,128
110448e0:	10bfe004 	addi	r2,r2,-128
110448e4:	01000c04 	movi	r4,48
110448e8:	11000226 	beq	r2,r4,110448f4 <___vfprintf_internal_r+0xd74>
110448ec:	1827883a 	mov	r19,r3
110448f0:	293fffc5 	stb	r4,-1(r5)
110448f4:	d8812717 	ldw	r2,1180(sp)
110448f8:	14c5c83a 	sub	r2,r2,r19
110448fc:	d8812b15 	stw	r2,1196(sp)
11044900:	003d8406 	br	11043f14 <___vfprintf_internal_r+0x394>
11044904:	00801944 	movi	r2,101
11044908:	14807c0e 	bge	r2,r18,11044afc <___vfprintf_internal_r+0xf7c>
1104490c:	d9013317 	ldw	r4,1228(sp)
11044910:	d9413417 	ldw	r5,1232(sp)
11044914:	000d883a 	mov	r6,zero
11044918:	000f883a 	mov	r7,zero
1104491c:	d8c13b15 	stw	r3,1260(sp)
11044920:	da013a15 	stw	r8,1256(sp)
11044924:	da413c15 	stw	r9,1264(sp)
11044928:	104bc640 	call	1104bc64 <__eqdf2>
1104492c:	d8c13b17 	ldw	r3,1260(sp)
11044930:	da013a17 	ldw	r8,1256(sp)
11044934:	da413c17 	ldw	r9,1264(sp)
11044938:	1001001e 	bne	r2,zero,11044d3c <___vfprintf_internal_r+0x11bc>
1104493c:	00800034 	movhi	r2,0
11044940:	10830404 	addi	r2,r2,3088
11044944:	48800015 	stw	r2,0(r9)
11044948:	00800044 	movi	r2,1
1104494c:	48800115 	stw	r2,4(r9)
11044950:	4091883a 	add	r8,r8,r2
11044954:	1887883a 	add	r3,r3,r2
11044958:	da011d15 	stw	r8,1140(sp)
1104495c:	d8c11c15 	stw	r3,1136(sp)
11044960:	008001c4 	movi	r2,7
11044964:	10c1dd16 	blt	r2,r3,110450dc <___vfprintf_internal_r+0x155c>
11044968:	4a400204 	addi	r9,r9,8
1104496c:	d8812417 	ldw	r2,1168(sp)
11044970:	d8c13217 	ldw	r3,1224(sp)
11044974:	10c00216 	blt	r2,r3,11044980 <___vfprintf_internal_r+0xe00>
11044978:	8080004c 	andi	r2,r16,1
1104497c:	103f6826 	beq	r2,zero,11044720 <___vfprintf_internal_r+0xba0>
11044980:	d8c11c17 	ldw	r3,1136(sp)
11044984:	d9013717 	ldw	r4,1244(sp)
11044988:	00800044 	movi	r2,1
1104498c:	48800115 	stw	r2,4(r9)
11044990:	49000015 	stw	r4,0(r9)
11044994:	4091883a 	add	r8,r8,r2
11044998:	1887883a 	add	r3,r3,r2
1104499c:	da011d15 	stw	r8,1140(sp)
110449a0:	d8c11c15 	stw	r3,1136(sp)
110449a4:	008001c4 	movi	r2,7
110449a8:	10c2af16 	blt	r2,r3,11045468 <___vfprintf_internal_r+0x18e8>
110449ac:	4a400204 	addi	r9,r9,8
110449b0:	d8813217 	ldw	r2,1224(sp)
110449b4:	14bfffc4 	addi	r18,r2,-1
110449b8:	04bf590e 	bge	zero,r18,11044720 <___vfprintf_internal_r+0xba0>
110449bc:	04c00404 	movi	r19,16
110449c0:	d8c11c17 	ldw	r3,1136(sp)
110449c4:	05000034 	movhi	r20,0
110449c8:	a5030884 	addi	r20,r20,3106
110449cc:	9c81630e 	bge	r19,r18,11044f5c <___vfprintf_internal_r+0x13dc>
110449d0:	058001c4 	movi	r22,7
110449d4:	ddc12917 	ldw	r23,1188(sp)
110449d8:	00000306 	br	110449e8 <___vfprintf_internal_r+0xe68>
110449dc:	4a400204 	addi	r9,r9,8
110449e0:	94bffc04 	addi	r18,r18,-16
110449e4:	9c815d0e 	bge	r19,r18,11044f5c <___vfprintf_internal_r+0x13dc>
110449e8:	4d000015 	stw	r20,0(r9)
110449ec:	4cc00115 	stw	r19,4(r9)
110449f0:	42000404 	addi	r8,r8,16
110449f4:	18c00044 	addi	r3,r3,1
110449f8:	da011d15 	stw	r8,1140(sp)
110449fc:	d8c11c15 	stw	r3,1136(sp)
11044a00:	b0fff60e 	bge	r22,r3,110449dc <___vfprintf_internal_r+0xe5c>
11044a04:	8809883a 	mov	r4,r17
11044a08:	b80b883a 	mov	r5,r23
11044a0c:	d9811b04 	addi	r6,sp,1132
11044a10:	1043b4c0 	call	11043b4c <__sprint_r>
11044a14:	103ded1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044a18:	da011d17 	ldw	r8,1140(sp)
11044a1c:	d8c11c17 	ldw	r3,1136(sp)
11044a20:	da400404 	addi	r9,sp,16
11044a24:	003fee06 	br	110449e0 <___vfprintf_internal_r+0xe60>
11044a28:	d8812e17 	ldw	r2,1208(sp)
11044a2c:	d9012817 	ldw	r4,1184(sp)
11044a30:	112fc83a 	sub	r23,r2,r4
11044a34:	05ff000e 	bge	zero,r23,11044638 <___vfprintf_internal_r+0xab8>
11044a38:	07000404 	movi	fp,16
11044a3c:	05000034 	movhi	r20,0
11044a40:	a5030884 	addi	r20,r20,3106
11044a44:	e5c01d0e 	bge	fp,r23,11044abc <___vfprintf_internal_r+0xf3c>
11044a48:	dc812a15 	stw	r18,1192(sp)
11044a4c:	058001c4 	movi	r22,7
11044a50:	a025883a 	mov	r18,r20
11044a54:	8029883a 	mov	r20,r16
11044a58:	dc012917 	ldw	r16,1188(sp)
11044a5c:	00000306 	br	11044a6c <___vfprintf_internal_r+0xeec>
11044a60:	bdfffc04 	addi	r23,r23,-16
11044a64:	4a400204 	addi	r9,r9,8
11044a68:	e5c0110e 	bge	fp,r23,11044ab0 <___vfprintf_internal_r+0xf30>
11044a6c:	4c800015 	stw	r18,0(r9)
11044a70:	4f000115 	stw	fp,4(r9)
11044a74:	42000404 	addi	r8,r8,16
11044a78:	18c00044 	addi	r3,r3,1
11044a7c:	da011d15 	stw	r8,1140(sp)
11044a80:	d8c11c15 	stw	r3,1136(sp)
11044a84:	b0fff60e 	bge	r22,r3,11044a60 <___vfprintf_internal_r+0xee0>
11044a88:	8809883a 	mov	r4,r17
11044a8c:	800b883a 	mov	r5,r16
11044a90:	d9811b04 	addi	r6,sp,1132
11044a94:	1043b4c0 	call	11043b4c <__sprint_r>
11044a98:	103dcc1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044a9c:	bdfffc04 	addi	r23,r23,-16
11044aa0:	da011d17 	ldw	r8,1140(sp)
11044aa4:	d8c11c17 	ldw	r3,1136(sp)
11044aa8:	da400404 	addi	r9,sp,16
11044aac:	e5ffef16 	blt	fp,r23,11044a6c <___vfprintf_internal_r+0xeec>
11044ab0:	a021883a 	mov	r16,r20
11044ab4:	9029883a 	mov	r20,r18
11044ab8:	dc812a17 	ldw	r18,1192(sp)
11044abc:	4d000015 	stw	r20,0(r9)
11044ac0:	4dc00115 	stw	r23,4(r9)
11044ac4:	45d1883a 	add	r8,r8,r23
11044ac8:	18c00044 	addi	r3,r3,1
11044acc:	da011d15 	stw	r8,1140(sp)
11044ad0:	d8c11c15 	stw	r3,1136(sp)
11044ad4:	008001c4 	movi	r2,7
11044ad8:	10c11716 	blt	r2,r3,11044f38 <___vfprintf_internal_r+0x13b8>
11044adc:	4a400204 	addi	r9,r9,8
11044ae0:	003ed506 	br	11044638 <___vfprintf_internal_r+0xab8>
11044ae4:	d9412917 	ldw	r5,1188(sp)
11044ae8:	8809883a 	mov	r4,r17
11044aec:	d9811b04 	addi	r6,sp,1132
11044af0:	1043b4c0 	call	11043b4c <__sprint_r>
11044af4:	103f4226 	beq	r2,zero,11044800 <___vfprintf_internal_r+0xc80>
11044af8:	003db406 	br	110441cc <___vfprintf_internal_r+0x64c>
11044afc:	d9013217 	ldw	r4,1224(sp)
11044b00:	00800044 	movi	r2,1
11044b04:	4cc00015 	stw	r19,0(r9)
11044b08:	1100e10e 	bge	r2,r4,11044e90 <___vfprintf_internal_r+0x1310>
11044b0c:	00800044 	movi	r2,1
11044b10:	48800115 	stw	r2,4(r9)
11044b14:	4091883a 	add	r8,r8,r2
11044b18:	1887883a 	add	r3,r3,r2
11044b1c:	da011d15 	stw	r8,1140(sp)
11044b20:	d8c11c15 	stw	r3,1136(sp)
11044b24:	008001c4 	movi	r2,7
11044b28:	10c0ed16 	blt	r2,r3,11044ee0 <___vfprintf_internal_r+0x1360>
11044b2c:	4a400204 	addi	r9,r9,8
11044b30:	d8813717 	ldw	r2,1244(sp)
11044b34:	48800015 	stw	r2,0(r9)
11044b38:	00800044 	movi	r2,1
11044b3c:	48800115 	stw	r2,4(r9)
11044b40:	4091883a 	add	r8,r8,r2
11044b44:	1887883a 	add	r3,r3,r2
11044b48:	da011d15 	stw	r8,1140(sp)
11044b4c:	d8c11c15 	stw	r3,1136(sp)
11044b50:	008001c4 	movi	r2,7
11044b54:	10c0eb16 	blt	r2,r3,11044f04 <___vfprintf_internal_r+0x1384>
11044b58:	4c800204 	addi	r18,r9,8
11044b5c:	d9013317 	ldw	r4,1228(sp)
11044b60:	d9413417 	ldw	r5,1232(sp)
11044b64:	000d883a 	mov	r6,zero
11044b68:	000f883a 	mov	r7,zero
11044b6c:	d8c13b15 	stw	r3,1260(sp)
11044b70:	da013a15 	stw	r8,1256(sp)
11044b74:	104bcc00 	call	1104bcc0 <__nedf2>
11044b78:	d8c13b17 	ldw	r3,1260(sp)
11044b7c:	da013a17 	ldw	r8,1256(sp)
11044b80:	1000a626 	beq	r2,zero,11044e1c <___vfprintf_internal_r+0x129c>
11044b84:	d9013217 	ldw	r4,1224(sp)
11044b88:	9cc00044 	addi	r19,r19,1
11044b8c:	94c00015 	stw	r19,0(r18)
11044b90:	20bfffc4 	addi	r2,r4,-1
11044b94:	90800115 	stw	r2,4(r18)
11044b98:	4091883a 	add	r8,r8,r2
11044b9c:	18c00044 	addi	r3,r3,1
11044ba0:	da011d15 	stw	r8,1140(sp)
11044ba4:	d8c11c15 	stw	r3,1136(sp)
11044ba8:	008001c4 	movi	r2,7
11044bac:	10c0c316 	blt	r2,r3,11044ebc <___vfprintf_internal_r+0x133c>
11044bb0:	94800204 	addi	r18,r18,8
11044bb4:	d9013517 	ldw	r4,1236(sp)
11044bb8:	d8811fc4 	addi	r2,sp,1151
11044bbc:	90800015 	stw	r2,0(r18)
11044bc0:	91000115 	stw	r4,4(r18)
11044bc4:	4111883a 	add	r8,r8,r4
11044bc8:	18c00044 	addi	r3,r3,1
11044bcc:	da011d15 	stw	r8,1140(sp)
11044bd0:	d8c11c15 	stw	r3,1136(sp)
11044bd4:	008001c4 	movi	r2,7
11044bd8:	10ff2316 	blt	r2,r3,11044868 <___vfprintf_internal_r+0xce8>
11044bdc:	92400204 	addi	r9,r18,8
11044be0:	003ecf06 	br	11044720 <___vfprintf_internal_r+0xba0>
11044be4:	d9412917 	ldw	r5,1188(sp)
11044be8:	8809883a 	mov	r4,r17
11044bec:	d9811b04 	addi	r6,sp,1132
11044bf0:	1043b4c0 	call	11043b4c <__sprint_r>
11044bf4:	103d751e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044bf8:	da011d17 	ldw	r8,1140(sp)
11044bfc:	d8c11c17 	ldw	r3,1136(sp)
11044c00:	da400404 	addi	r9,sp,16
11044c04:	003eba06 	br	110446f0 <___vfprintf_internal_r+0xb70>
11044c08:	d9412917 	ldw	r5,1188(sp)
11044c0c:	8809883a 	mov	r4,r17
11044c10:	d9811b04 	addi	r6,sp,1132
11044c14:	1043b4c0 	call	11043b4c <__sprint_r>
11044c18:	103d6c1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044c1c:	da011d17 	ldw	r8,1140(sp)
11044c20:	d8c11c17 	ldw	r3,1136(sp)
11044c24:	da400404 	addi	r9,sp,16
11044c28:	003e7306 	br	110445f8 <___vfprintf_internal_r+0xa78>
11044c2c:	d9412917 	ldw	r5,1188(sp)
11044c30:	8809883a 	mov	r4,r17
11044c34:	d9811b04 	addi	r6,sp,1132
11044c38:	1043b4c0 	call	11043b4c <__sprint_r>
11044c3c:	103d631e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044c40:	da011d17 	ldw	r8,1140(sp)
11044c44:	d8c11c17 	ldw	r3,1136(sp)
11044c48:	da400404 	addi	r9,sp,16
11044c4c:	003e7706 	br	1104462c <___vfprintf_internal_r+0xaac>
11044c50:	d8012b15 	stw	zero,1196(sp)
11044c54:	dcc10e04 	addi	r19,sp,1080
11044c58:	003cae06 	br	11043f14 <___vfprintf_internal_r+0x394>
11044c5c:	d9413617 	ldw	r5,1240(sp)
11044c60:	d8810dc4 	addi	r2,sp,1079
11044c64:	b8c003cc 	andi	r3,r23,15
11044c68:	b008973a 	slli	r4,r22,28
11044c6c:	28c7883a 	add	r3,r5,r3
11044c70:	b82ed13a 	srli	r23,r23,4
11044c74:	18c00003 	ldbu	r3,0(r3)
11044c78:	b02cd13a 	srli	r22,r22,4
11044c7c:	25eeb03a 	or	r23,r4,r23
11044c80:	10c00005 	stb	r3,0(r2)
11044c84:	bd86b03a 	or	r3,r23,r22
11044c88:	1027883a 	mov	r19,r2
11044c8c:	10bfffc4 	addi	r2,r2,-1
11044c90:	183ff41e 	bne	r3,zero,11044c64 <___vfprintf_internal_r+0x10e4>
11044c94:	003f1706 	br	110448f4 <___vfprintf_internal_r+0xd74>
11044c98:	b0025826 	beq	r22,zero,110455fc <___vfprintf_internal_r+0x1a7c>
11044c9c:	b807883a 	mov	r3,r23
11044ca0:	d8810dc4 	addi	r2,sp,1079
11044ca4:	882f883a 	mov	r23,r17
11044ca8:	04c00244 	movi	r19,9
11044cac:	8023883a 	mov	r17,r16
11044cb0:	da412815 	stw	r9,1184(sp)
11044cb4:	1821883a 	mov	r16,r3
11044cb8:	8009883a 	mov	r4,r16
11044cbc:	b00b883a 	mov	r5,r22
11044cc0:	01800284 	movi	r6,10
11044cc4:	000f883a 	mov	r7,zero
11044cc8:	1029883a 	mov	r20,r2
11044ccc:	104b3f40 	call	1104b3f4 <__umoddi3>
11044cd0:	10800c04 	addi	r2,r2,48
11044cd4:	8009883a 	mov	r4,r16
11044cd8:	b00b883a 	mov	r5,r22
11044cdc:	a0800005 	stb	r2,0(r20)
11044ce0:	01800284 	movi	r6,10
11044ce4:	000f883a 	mov	r7,zero
11044ce8:	104ae2c0 	call	1104ae2c <__udivdi3>
11044cec:	1021883a 	mov	r16,r2
11044cf0:	182d883a 	mov	r22,r3
11044cf4:	a0bfffc4 	addi	r2,r20,-1
11044cf8:	183fef1e 	bne	r3,zero,11044cb8 <___vfprintf_internal_r+0x1138>
11044cfc:	9c3fee36 	bltu	r19,r16,11044cb8 <___vfprintf_internal_r+0x1138>
11044d00:	da412817 	ldw	r9,1184(sp)
11044d04:	8005883a 	mov	r2,r16
11044d08:	8821883a 	mov	r16,r17
11044d0c:	b823883a 	mov	r17,r23
11044d10:	102f883a 	mov	r23,r2
11044d14:	d8812717 	ldw	r2,1180(sp)
11044d18:	a4ffffc4 	addi	r19,r20,-1
11044d1c:	bdc00c04 	addi	r23,r23,48
11044d20:	14c5c83a 	sub	r2,r2,r19
11044d24:	a5ffffc5 	stb	r23,-1(r20)
11044d28:	d8812b15 	stw	r2,1196(sp)
11044d2c:	003c7906 	br	11043f14 <___vfprintf_internal_r+0x394>
11044d30:	00c00044 	movi	r3,1
11044d34:	bd84b03a 	or	r2,r23,r22
11044d38:	003c6806 	br	11043edc <___vfprintf_internal_r+0x35c>
11044d3c:	dc812417 	ldw	r18,1168(sp)
11044d40:	0480ee0e 	bge	zero,r18,110450fc <___vfprintf_internal_r+0x157c>
11044d44:	d9013217 	ldw	r4,1224(sp)
11044d48:	4cc00015 	stw	r19,0(r9)
11044d4c:	9100c616 	blt	r18,r4,11045068 <___vfprintf_internal_r+0x14e8>
11044d50:	49000115 	stw	r4,4(r9)
11044d54:	4111883a 	add	r8,r8,r4
11044d58:	18c00044 	addi	r3,r3,1
11044d5c:	da011d15 	stw	r8,1140(sp)
11044d60:	d8c11c15 	stw	r3,1136(sp)
11044d64:	008001c4 	movi	r2,7
11044d68:	10c20916 	blt	r2,r3,11045590 <___vfprintf_internal_r+0x1a10>
11044d6c:	4a400204 	addi	r9,r9,8
11044d70:	d8813217 	ldw	r2,1224(sp)
11044d74:	90a5c83a 	sub	r18,r18,r2
11044d78:	04beae0e 	bge	zero,r18,11044834 <___vfprintf_internal_r+0xcb4>
11044d7c:	04c00404 	movi	r19,16
11044d80:	d8c11c17 	ldw	r3,1136(sp)
11044d84:	05000034 	movhi	r20,0
11044d88:	a5030884 	addi	r20,r20,3106
11044d8c:	9c81be0e 	bge	r19,r18,11045488 <___vfprintf_internal_r+0x1908>
11044d90:	058001c4 	movi	r22,7
11044d94:	ddc12917 	ldw	r23,1188(sp)
11044d98:	00000306 	br	11044da8 <___vfprintf_internal_r+0x1228>
11044d9c:	4a400204 	addi	r9,r9,8
11044da0:	94bffc04 	addi	r18,r18,-16
11044da4:	9c81b80e 	bge	r19,r18,11045488 <___vfprintf_internal_r+0x1908>
11044da8:	4d000015 	stw	r20,0(r9)
11044dac:	4cc00115 	stw	r19,4(r9)
11044db0:	42000404 	addi	r8,r8,16
11044db4:	18c00044 	addi	r3,r3,1
11044db8:	da011d15 	stw	r8,1140(sp)
11044dbc:	d8c11c15 	stw	r3,1136(sp)
11044dc0:	b0fff60e 	bge	r22,r3,11044d9c <___vfprintf_internal_r+0x121c>
11044dc4:	8809883a 	mov	r4,r17
11044dc8:	b80b883a 	mov	r5,r23
11044dcc:	d9811b04 	addi	r6,sp,1132
11044dd0:	1043b4c0 	call	11043b4c <__sprint_r>
11044dd4:	103cfd1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044dd8:	da011d17 	ldw	r8,1140(sp)
11044ddc:	d8c11c17 	ldw	r3,1136(sp)
11044de0:	da400404 	addi	r9,sp,16
11044de4:	003fee06 	br	11044da0 <___vfprintf_internal_r+0x1220>
11044de8:	d9412917 	ldw	r5,1188(sp)
11044dec:	8809883a 	mov	r4,r17
11044df0:	d9811b04 	addi	r6,sp,1132
11044df4:	1043b4c0 	call	11043b4c <__sprint_r>
11044df8:	103cf41e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044dfc:	da011d17 	ldw	r8,1140(sp)
11044e00:	d8c11c17 	ldw	r3,1136(sp)
11044e04:	da400404 	addi	r9,sp,16
11044e08:	003dee06 	br	110445c4 <___vfprintf_internal_r+0xa44>
11044e0c:	00c00084 	movi	r3,2
11044e10:	bd84b03a 	or	r2,r23,r22
11044e14:	d8012585 	stb	zero,1174(sp)
11044e18:	003c3006 	br	11043edc <___vfprintf_internal_r+0x35c>
11044e1c:	d8813217 	ldw	r2,1224(sp)
11044e20:	14ffffc4 	addi	r19,r2,-1
11044e24:	04ff630e 	bge	zero,r19,11044bb4 <___vfprintf_internal_r+0x1034>
11044e28:	05800404 	movi	r22,16
11044e2c:	05000034 	movhi	r20,0
11044e30:	a5030884 	addi	r20,r20,3106
11044e34:	b4c03c0e 	bge	r22,r19,11044f28 <___vfprintf_internal_r+0x13a8>
11044e38:	05c001c4 	movi	r23,7
11044e3c:	df012917 	ldw	fp,1188(sp)
11044e40:	00000306 	br	11044e50 <___vfprintf_internal_r+0x12d0>
11044e44:	94800204 	addi	r18,r18,8
11044e48:	9cfffc04 	addi	r19,r19,-16
11044e4c:	b4c0360e 	bge	r22,r19,11044f28 <___vfprintf_internal_r+0x13a8>
11044e50:	95000015 	stw	r20,0(r18)
11044e54:	95800115 	stw	r22,4(r18)
11044e58:	42000404 	addi	r8,r8,16
11044e5c:	18c00044 	addi	r3,r3,1
11044e60:	da011d15 	stw	r8,1140(sp)
11044e64:	d8c11c15 	stw	r3,1136(sp)
11044e68:	b8fff60e 	bge	r23,r3,11044e44 <___vfprintf_internal_r+0x12c4>
11044e6c:	8809883a 	mov	r4,r17
11044e70:	e00b883a 	mov	r5,fp
11044e74:	d9811b04 	addi	r6,sp,1132
11044e78:	1043b4c0 	call	11043b4c <__sprint_r>
11044e7c:	103cd31e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044e80:	da011d17 	ldw	r8,1140(sp)
11044e84:	d8c11c17 	ldw	r3,1136(sp)
11044e88:	dc800404 	addi	r18,sp,16
11044e8c:	003fee06 	br	11044e48 <___vfprintf_internal_r+0x12c8>
11044e90:	8088703a 	and	r4,r16,r2
11044e94:	203f1d1e 	bne	r4,zero,11044b0c <___vfprintf_internal_r+0xf8c>
11044e98:	48800115 	stw	r2,4(r9)
11044e9c:	42000044 	addi	r8,r8,1
11044ea0:	18c00044 	addi	r3,r3,1
11044ea4:	da011d15 	stw	r8,1140(sp)
11044ea8:	d8c11c15 	stw	r3,1136(sp)
11044eac:	008001c4 	movi	r2,7
11044eb0:	10c00216 	blt	r2,r3,11044ebc <___vfprintf_internal_r+0x133c>
11044eb4:	4c800204 	addi	r18,r9,8
11044eb8:	003f3e06 	br	11044bb4 <___vfprintf_internal_r+0x1034>
11044ebc:	d9412917 	ldw	r5,1188(sp)
11044ec0:	8809883a 	mov	r4,r17
11044ec4:	d9811b04 	addi	r6,sp,1132
11044ec8:	1043b4c0 	call	11043b4c <__sprint_r>
11044ecc:	103cbf1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044ed0:	dc800404 	addi	r18,sp,16
11044ed4:	da011d17 	ldw	r8,1140(sp)
11044ed8:	d8c11c17 	ldw	r3,1136(sp)
11044edc:	003f3506 	br	11044bb4 <___vfprintf_internal_r+0x1034>
11044ee0:	d9412917 	ldw	r5,1188(sp)
11044ee4:	8809883a 	mov	r4,r17
11044ee8:	d9811b04 	addi	r6,sp,1132
11044eec:	1043b4c0 	call	11043b4c <__sprint_r>
11044ef0:	103cb61e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044ef4:	da011d17 	ldw	r8,1140(sp)
11044ef8:	d8c11c17 	ldw	r3,1136(sp)
11044efc:	da400404 	addi	r9,sp,16
11044f00:	003f0b06 	br	11044b30 <___vfprintf_internal_r+0xfb0>
11044f04:	d9412917 	ldw	r5,1188(sp)
11044f08:	8809883a 	mov	r4,r17
11044f0c:	d9811b04 	addi	r6,sp,1132
11044f10:	1043b4c0 	call	11043b4c <__sprint_r>
11044f14:	103cad1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044f18:	da011d17 	ldw	r8,1140(sp)
11044f1c:	d8c11c17 	ldw	r3,1136(sp)
11044f20:	dc800404 	addi	r18,sp,16
11044f24:	003f0d06 	br	11044b5c <___vfprintf_internal_r+0xfdc>
11044f28:	95000015 	stw	r20,0(r18)
11044f2c:	94c00115 	stw	r19,4(r18)
11044f30:	44d1883a 	add	r8,r8,r19
11044f34:	003f1906 	br	11044b9c <___vfprintf_internal_r+0x101c>
11044f38:	d9412917 	ldw	r5,1188(sp)
11044f3c:	8809883a 	mov	r4,r17
11044f40:	d9811b04 	addi	r6,sp,1132
11044f44:	1043b4c0 	call	11043b4c <__sprint_r>
11044f48:	103ca01e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11044f4c:	da011d17 	ldw	r8,1140(sp)
11044f50:	d8c11c17 	ldw	r3,1136(sp)
11044f54:	da400404 	addi	r9,sp,16
11044f58:	003db706 	br	11044638 <___vfprintf_internal_r+0xab8>
11044f5c:	4d000015 	stw	r20,0(r9)
11044f60:	4c800115 	stw	r18,4(r9)
11044f64:	4491883a 	add	r8,r8,r18
11044f68:	003de706 	br	11044708 <___vfprintf_internal_r+0xb88>
11044f6c:	8080100c 	andi	r2,r16,64
11044f70:	10010226 	beq	r2,zero,1104537c <___vfprintf_internal_r+0x17fc>
11044f74:	d8812d17 	ldw	r2,1204(sp)
11044f78:	002d883a 	mov	r22,zero
11044f7c:	00c00044 	movi	r3,1
11044f80:	15c0000b 	ldhu	r23,0(r2)
11044f84:	10800104 	addi	r2,r2,4
11044f88:	d8812d15 	stw	r2,1204(sp)
11044f8c:	d8012585 	stb	zero,1174(sp)
11044f90:	b805883a 	mov	r2,r23
11044f94:	003bd106 	br	11043edc <___vfprintf_internal_r+0x35c>
11044f98:	d9012d17 	ldw	r4,1204(sp)
11044f9c:	25800017 	ldw	r22,0(r4)
11044fa0:	25000117 	ldw	r20,4(r4)
11044fa4:	21000204 	addi	r4,r4,8
11044fa8:	d9012d15 	stw	r4,1204(sp)
11044fac:	dd813315 	stw	r22,1228(sp)
11044fb0:	dd013415 	stw	r20,1232(sp)
11044fb4:	003d2b06 	br	11044464 <___vfprintf_internal_r+0x8e4>
11044fb8:	8080100c 	andi	r2,r16,64
11044fbc:	1000fe26 	beq	r2,zero,110453b8 <___vfprintf_internal_r+0x1838>
11044fc0:	d9012d17 	ldw	r4,1204(sp)
11044fc4:	002d883a 	mov	r22,zero
11044fc8:	0007883a 	mov	r3,zero
11044fcc:	25c0000b 	ldhu	r23,0(r4)
11044fd0:	21000104 	addi	r4,r4,4
11044fd4:	d9012d15 	stw	r4,1204(sp)
11044fd8:	b805883a 	mov	r2,r23
11044fdc:	d8012585 	stb	zero,1174(sp)
11044fe0:	003bbe06 	br	11043edc <___vfprintf_internal_r+0x35c>
11044fe4:	8080100c 	andi	r2,r16,64
11044fe8:	1000ed26 	beq	r2,zero,110453a0 <___vfprintf_internal_r+0x1820>
11044fec:	d9012d17 	ldw	r4,1204(sp)
11044ff0:	002d883a 	mov	r22,zero
11044ff4:	25c0000b 	ldhu	r23,0(r4)
11044ff8:	21000104 	addi	r4,r4,4
11044ffc:	d9012d15 	stw	r4,1204(sp)
11045000:	003cd206 	br	1104434c <___vfprintf_internal_r+0x7cc>
11045004:	00c00084 	movi	r3,2
11045008:	d8012585 	stb	zero,1174(sp)
1104500c:	003bb306 	br	11043edc <___vfprintf_internal_r+0x35c>
11045010:	8080040c 	andi	r2,r16,16
11045014:	1000f11e 	bne	r2,zero,110453dc <___vfprintf_internal_r+0x185c>
11045018:	8400100c 	andi	r16,r16,64
1104501c:	80015526 	beq	r16,zero,11045574 <___vfprintf_internal_r+0x19f4>
11045020:	da012d17 	ldw	r8,1204(sp)
11045024:	d8c12c17 	ldw	r3,1200(sp)
11045028:	40800017 	ldw	r2,0(r8)
1104502c:	42000104 	addi	r8,r8,4
11045030:	da012d15 	stw	r8,1204(sp)
11045034:	10c0000d 	sth	r3,0(r2)
11045038:	003b0706 	br	11043c58 <___vfprintf_internal_r+0xd8>
1104503c:	8080100c 	andi	r2,r16,64
11045040:	1000c726 	beq	r2,zero,11045360 <___vfprintf_internal_r+0x17e0>
11045044:	da012d17 	ldw	r8,1204(sp)
11045048:	45c0000f 	ldh	r23,0(r8)
1104504c:	42000104 	addi	r8,r8,4
11045050:	da012d15 	stw	r8,1204(sp)
11045054:	b82dd7fa 	srai	r22,r23,31
11045058:	b005883a 	mov	r2,r22
1104505c:	003c1006 	br	110440a0 <___vfprintf_internal_r+0x520>
11045060:	ac800007 	ldb	r18,0(r21)
11045064:	003b2406 	br	11043cf8 <___vfprintf_internal_r+0x178>
11045068:	4c800115 	stw	r18,4(r9)
1104506c:	9211883a 	add	r8,r18,r8
11045070:	18c00044 	addi	r3,r3,1
11045074:	da011d15 	stw	r8,1140(sp)
11045078:	d8c11c15 	stw	r3,1136(sp)
1104507c:	008001c4 	movi	r2,7
11045080:	10c15416 	blt	r2,r3,110455d4 <___vfprintf_internal_r+0x1a54>
11045084:	4a400204 	addi	r9,r9,8
11045088:	d8813717 	ldw	r2,1244(sp)
1104508c:	9ca7883a 	add	r19,r19,r18
11045090:	48800015 	stw	r2,0(r9)
11045094:	00800044 	movi	r2,1
11045098:	48800115 	stw	r2,4(r9)
1104509c:	4091883a 	add	r8,r8,r2
110450a0:	1887883a 	add	r3,r3,r2
110450a4:	da011d15 	stw	r8,1140(sp)
110450a8:	d8c11c15 	stw	r3,1136(sp)
110450ac:	008001c4 	movi	r2,7
110450b0:	10c14016 	blt	r2,r3,110455b4 <___vfprintf_internal_r+0x1a34>
110450b4:	4a400204 	addi	r9,r9,8
110450b8:	d9013217 	ldw	r4,1224(sp)
110450bc:	da011d17 	ldw	r8,1140(sp)
110450c0:	d8c11c17 	ldw	r3,1136(sp)
110450c4:	24a5c83a 	sub	r18,r4,r18
110450c8:	4cc00015 	stw	r19,0(r9)
110450cc:	003fa406 	br	11044f60 <___vfprintf_internal_r+0x13e0>
110450d0:	04c00034 	movhi	r19,0
110450d4:	9cc2f504 	addi	r19,r19,3028
110450d8:	003cf406 	br	110444ac <___vfprintf_internal_r+0x92c>
110450dc:	d9412917 	ldw	r5,1188(sp)
110450e0:	8809883a 	mov	r4,r17
110450e4:	d9811b04 	addi	r6,sp,1132
110450e8:	1043b4c0 	call	11043b4c <__sprint_r>
110450ec:	103c371e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
110450f0:	da011d17 	ldw	r8,1140(sp)
110450f4:	da400404 	addi	r9,sp,16
110450f8:	003e1c06 	br	1104496c <___vfprintf_internal_r+0xdec>
110450fc:	00800034 	movhi	r2,0
11045100:	10830404 	addi	r2,r2,3088
11045104:	48800015 	stw	r2,0(r9)
11045108:	00800044 	movi	r2,1
1104510c:	48800115 	stw	r2,4(r9)
11045110:	4091883a 	add	r8,r8,r2
11045114:	1887883a 	add	r3,r3,r2
11045118:	da011d15 	stw	r8,1140(sp)
1104511c:	d8c11c15 	stw	r3,1136(sp)
11045120:	008001c4 	movi	r2,7
11045124:	10c0c316 	blt	r2,r3,11045434 <___vfprintf_internal_r+0x18b4>
11045128:	4a400204 	addi	r9,r9,8
1104512c:	9000041e 	bne	r18,zero,11045140 <___vfprintf_internal_r+0x15c0>
11045130:	d8c13217 	ldw	r3,1224(sp)
11045134:	1800021e 	bne	r3,zero,11045140 <___vfprintf_internal_r+0x15c0>
11045138:	8080004c 	andi	r2,r16,1
1104513c:	103d7826 	beq	r2,zero,11044720 <___vfprintf_internal_r+0xba0>
11045140:	d8c11c17 	ldw	r3,1136(sp)
11045144:	d9013717 	ldw	r4,1244(sp)
11045148:	00800044 	movi	r2,1
1104514c:	48800115 	stw	r2,4(r9)
11045150:	49000015 	stw	r4,0(r9)
11045154:	4091883a 	add	r8,r8,r2
11045158:	1887883a 	add	r3,r3,r2
1104515c:	da011d15 	stw	r8,1140(sp)
11045160:	d8c11c15 	stw	r3,1136(sp)
11045164:	008001c4 	movi	r2,7
11045168:	10c12e16 	blt	r2,r3,11045624 <___vfprintf_internal_r+0x1aa4>
1104516c:	4a400204 	addi	r9,r9,8
11045170:	04a5c83a 	sub	r18,zero,r18
11045174:	0480de0e 	bge	zero,r18,110454f0 <___vfprintf_internal_r+0x1970>
11045178:	05800404 	movi	r22,16
1104517c:	05000034 	movhi	r20,0
11045180:	a5030884 	addi	r20,r20,3106
11045184:	b480e20e 	bge	r22,r18,11045510 <___vfprintf_internal_r+0x1990>
11045188:	05c001c4 	movi	r23,7
1104518c:	df012917 	ldw	fp,1188(sp)
11045190:	00000306 	br	110451a0 <___vfprintf_internal_r+0x1620>
11045194:	4a400204 	addi	r9,r9,8
11045198:	94bffc04 	addi	r18,r18,-16
1104519c:	b480dc0e 	bge	r22,r18,11045510 <___vfprintf_internal_r+0x1990>
110451a0:	4d000015 	stw	r20,0(r9)
110451a4:	4d800115 	stw	r22,4(r9)
110451a8:	42000404 	addi	r8,r8,16
110451ac:	18c00044 	addi	r3,r3,1
110451b0:	da011d15 	stw	r8,1140(sp)
110451b4:	d8c11c15 	stw	r3,1136(sp)
110451b8:	b8fff60e 	bge	r23,r3,11045194 <___vfprintf_internal_r+0x1614>
110451bc:	8809883a 	mov	r4,r17
110451c0:	e00b883a 	mov	r5,fp
110451c4:	d9811b04 	addi	r6,sp,1132
110451c8:	1043b4c0 	call	11043b4c <__sprint_r>
110451cc:	103bff1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
110451d0:	da011d17 	ldw	r8,1140(sp)
110451d4:	d8c11c17 	ldw	r3,1136(sp)
110451d8:	da400404 	addi	r9,sp,16
110451dc:	003fee06 	br	11045198 <___vfprintf_internal_r+0x1618>
110451e0:	da413c15 	stw	r9,1264(sp)
110451e4:	104a7380 	call	1104a738 <__isnand>
110451e8:	da413c17 	ldw	r9,1264(sp)
110451ec:	1000851e 	bne	r2,zero,11045404 <___vfprintf_internal_r+0x1884>
110451f0:	00bfffc4 	movi	r2,-1
110451f4:	e0817626 	beq	fp,r2,110457d0 <___vfprintf_internal_r+0x1c50>
110451f8:	008019c4 	movi	r2,103
110451fc:	90817126 	beq	r18,r2,110457c4 <___vfprintf_internal_r+0x1c44>
11045200:	008011c4 	movi	r2,71
11045204:	90816f26 	beq	r18,r2,110457c4 <___vfprintf_internal_r+0x1c44>
11045208:	82004014 	ori	r8,r16,256
1104520c:	da012a15 	stw	r8,1192(sp)
11045210:	a0017116 	blt	r20,zero,110457d8 <___vfprintf_internal_r+0x1c58>
11045214:	d8012f05 	stb	zero,1212(sp)
11045218:	00801984 	movi	r2,102
1104521c:	90811226 	beq	r18,r2,11045668 <___vfprintf_internal_r+0x1ae8>
11045220:	00801184 	movi	r2,70
11045224:	90811026 	beq	r18,r2,11045668 <___vfprintf_internal_r+0x1ae8>
11045228:	00801944 	movi	r2,101
1104522c:	90819b26 	beq	r18,r2,1104589c <___vfprintf_internal_r+0x1d1c>
11045230:	00801144 	movi	r2,69
11045234:	90819926 	beq	r18,r2,1104589c <___vfprintf_internal_r+0x1d1c>
11045238:	e02f883a 	mov	r23,fp
1104523c:	d8812404 	addi	r2,sp,1168
11045240:	d8800115 	stw	r2,4(sp)
11045244:	d8812304 	addi	r2,sp,1164
11045248:	d8800215 	stw	r2,8(sp)
1104524c:	d8812204 	addi	r2,sp,1160
11045250:	ddc00015 	stw	r23,0(sp)
11045254:	d8800315 	stw	r2,12(sp)
11045258:	8809883a 	mov	r4,r17
1104525c:	b00b883a 	mov	r5,r22
11045260:	a00d883a 	mov	r6,r20
11045264:	01c00084 	movi	r7,2
11045268:	da413c15 	stw	r9,1264(sp)
1104526c:	1045e040 	call	11045e04 <_dtoa_r>
11045270:	1027883a 	mov	r19,r2
11045274:	008019c4 	movi	r2,103
11045278:	da413c17 	ldw	r9,1264(sp)
1104527c:	90818c1e 	bne	r18,r2,110458b0 <___vfprintf_internal_r+0x1d30>
11045280:	8080004c 	andi	r2,r16,1
11045284:	10017926 	beq	r2,zero,1104586c <___vfprintf_internal_r+0x1cec>
11045288:	00801184 	movi	r2,70
1104528c:	9dc7883a 	add	r3,r19,r23
11045290:	90810626 	beq	r18,r2,110456ac <___vfprintf_internal_r+0x1b2c>
11045294:	b009883a 	mov	r4,r22
11045298:	a00b883a 	mov	r5,r20
1104529c:	000d883a 	mov	r6,zero
110452a0:	000f883a 	mov	r7,zero
110452a4:	d8c13b15 	stw	r3,1260(sp)
110452a8:	da413c15 	stw	r9,1264(sp)
110452ac:	104bc640 	call	1104bc64 <__eqdf2>
110452b0:	d8c13b17 	ldw	r3,1260(sp)
110452b4:	da413c17 	ldw	r9,1264(sp)
110452b8:	10000726 	beq	r2,zero,110452d8 <___vfprintf_internal_r+0x1758>
110452bc:	d8812217 	ldw	r2,1160(sp)
110452c0:	10c1962e 	bgeu	r2,r3,1104591c <___vfprintf_internal_r+0x1d9c>
110452c4:	01000c04 	movi	r4,48
110452c8:	11000005 	stb	r4,0(r2)
110452cc:	10800044 	addi	r2,r2,1
110452d0:	d8812215 	stw	r2,1160(sp)
110452d4:	10fffc1e 	bne	r2,r3,110452c8 <___vfprintf_internal_r+0x1748>
110452d8:	1cc7c83a 	sub	r3,r3,r19
110452dc:	d8c13215 	stw	r3,1224(sp)
110452e0:	008019c4 	movi	r2,103
110452e4:	90810626 	beq	r18,r2,11045700 <___vfprintf_internal_r+0x1b80>
110452e8:	008011c4 	movi	r2,71
110452ec:	90810426 	beq	r18,r2,11045700 <___vfprintf_internal_r+0x1b80>
110452f0:	00801984 	movi	r2,102
110452f4:	90819a1e 	bne	r18,r2,11045960 <___vfprintf_internal_r+0x1de0>
110452f8:	d8812417 	ldw	r2,1168(sp)
110452fc:	d8812b15 	stw	r2,1196(sp)
11045300:	0081880e 	bge	zero,r2,11045924 <___vfprintf_internal_r+0x1da4>
11045304:	e000021e 	bne	fp,zero,11045310 <___vfprintf_internal_r+0x1790>
11045308:	8400004c 	andi	r16,r16,1
1104530c:	80000426 	beq	r16,zero,11045320 <___vfprintf_internal_r+0x17a0>
11045310:	d8812b17 	ldw	r2,1196(sp)
11045314:	e2000044 	addi	r8,fp,1
11045318:	1205883a 	add	r2,r2,r8
1104531c:	d8812b15 	stw	r2,1196(sp)
11045320:	d8812815 	stw	r2,1184(sp)
11045324:	10011716 	blt	r2,zero,11045784 <___vfprintf_internal_r+0x1c04>
11045328:	ddc12f07 	ldb	r23,1212(sp)
1104532c:	b800ca26 	beq	r23,zero,11045658 <___vfprintf_internal_r+0x1ad8>
11045330:	00800b44 	movi	r2,45
11045334:	d8812585 	stb	r2,1174(sp)
11045338:	dc012a17 	ldw	r16,1192(sp)
1104533c:	d8013115 	stw	zero,1220(sp)
11045340:	003afe06 	br	11043f3c <___vfprintf_internal_r+0x3bc>
11045344:	d8812b17 	ldw	r2,1196(sp)
11045348:	d8812815 	stw	r2,1184(sp)
1104534c:	10005e16 	blt	r2,zero,110454c8 <___vfprintf_internal_r+0x1948>
11045350:	d8812583 	ldbu	r2,1174(sp)
11045354:	ddc12d15 	stw	r23,1204(sp)
11045358:	d8013115 	stw	zero,1220(sp)
1104535c:	003af306 	br	11043f2c <___vfprintf_internal_r+0x3ac>
11045360:	d8812d17 	ldw	r2,1204(sp)
11045364:	15c00017 	ldw	r23,0(r2)
11045368:	10800104 	addi	r2,r2,4
1104536c:	d8812d15 	stw	r2,1204(sp)
11045370:	b82dd7fa 	srai	r22,r23,31
11045374:	b005883a 	mov	r2,r22
11045378:	003b4906 	br	110440a0 <___vfprintf_internal_r+0x520>
1104537c:	d8c12d17 	ldw	r3,1204(sp)
11045380:	002d883a 	mov	r22,zero
11045384:	1dc00017 	ldw	r23,0(r3)
11045388:	18c00104 	addi	r3,r3,4
1104538c:	d8c12d15 	stw	r3,1204(sp)
11045390:	b805883a 	mov	r2,r23
11045394:	00c00044 	movi	r3,1
11045398:	d8012585 	stb	zero,1174(sp)
1104539c:	003acf06 	br	11043edc <___vfprintf_internal_r+0x35c>
110453a0:	da012d17 	ldw	r8,1204(sp)
110453a4:	002d883a 	mov	r22,zero
110453a8:	45c00017 	ldw	r23,0(r8)
110453ac:	42000104 	addi	r8,r8,4
110453b0:	da012d15 	stw	r8,1204(sp)
110453b4:	003be506 	br	1104434c <___vfprintf_internal_r+0x7cc>
110453b8:	da012d17 	ldw	r8,1204(sp)
110453bc:	002d883a 	mov	r22,zero
110453c0:	0007883a 	mov	r3,zero
110453c4:	45c00017 	ldw	r23,0(r8)
110453c8:	42000104 	addi	r8,r8,4
110453cc:	da012d15 	stw	r8,1204(sp)
110453d0:	b805883a 	mov	r2,r23
110453d4:	d8012585 	stb	zero,1174(sp)
110453d8:	003ac006 	br	11043edc <___vfprintf_internal_r+0x35c>
110453dc:	d8c12d17 	ldw	r3,1204(sp)
110453e0:	d9012c17 	ldw	r4,1200(sp)
110453e4:	18800017 	ldw	r2,0(r3)
110453e8:	18c00104 	addi	r3,r3,4
110453ec:	d8c12d15 	stw	r3,1204(sp)
110453f0:	11000015 	stw	r4,0(r2)
110453f4:	003a1806 	br	11043c58 <___vfprintf_internal_r+0xd8>
110453f8:	073fffc4 	movi	fp,-1
110453fc:	202b883a 	mov	r21,r4
11045400:	003a3e06 	br	11043cfc <___vfprintf_internal_r+0x17c>
11045404:	008011c4 	movi	r2,71
11045408:	14809016 	blt	r2,r18,1104564c <___vfprintf_internal_r+0x1acc>
1104540c:	04c00034 	movhi	r19,0
11045410:	9cc2f604 	addi	r19,r19,3032
11045414:	00c000c4 	movi	r3,3
11045418:	00bfdfc4 	movi	r2,-129
1104541c:	80a0703a 	and	r16,r16,r2
11045420:	d8c12815 	stw	r3,1184(sp)
11045424:	d8812583 	ldbu	r2,1174(sp)
11045428:	d8c12b15 	stw	r3,1196(sp)
1104542c:	d8013115 	stw	zero,1220(sp)
11045430:	003abe06 	br	11043f2c <___vfprintf_internal_r+0x3ac>
11045434:	d9412917 	ldw	r5,1188(sp)
11045438:	8809883a 	mov	r4,r17
1104543c:	d9811b04 	addi	r6,sp,1132
11045440:	1043b4c0 	call	11043b4c <__sprint_r>
11045444:	103b611e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11045448:	dc812417 	ldw	r18,1168(sp)
1104544c:	da011d17 	ldw	r8,1140(sp)
11045450:	da400404 	addi	r9,sp,16
11045454:	003f3506 	br	1104512c <___vfprintf_internal_r+0x15ac>
11045458:	ad400044 	addi	r21,r21,1
1104545c:	84000814 	ori	r16,r16,32
11045460:	14800047 	ldb	r18,1(r2)
11045464:	003a2406 	br	11043cf8 <___vfprintf_internal_r+0x178>
11045468:	d9412917 	ldw	r5,1188(sp)
1104546c:	8809883a 	mov	r4,r17
11045470:	d9811b04 	addi	r6,sp,1132
11045474:	1043b4c0 	call	11043b4c <__sprint_r>
11045478:	103b541e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
1104547c:	da011d17 	ldw	r8,1140(sp)
11045480:	da400404 	addi	r9,sp,16
11045484:	003d4a06 	br	110449b0 <___vfprintf_internal_r+0xe30>
11045488:	4d000015 	stw	r20,0(r9)
1104548c:	4c800115 	stw	r18,4(r9)
11045490:	4491883a 	add	r8,r8,r18
11045494:	18c00044 	addi	r3,r3,1
11045498:	da011d15 	stw	r8,1140(sp)
1104549c:	d8c11c15 	stw	r3,1136(sp)
110454a0:	008001c4 	movi	r2,7
110454a4:	10fcdc16 	blt	r2,r3,11044818 <___vfprintf_internal_r+0xc98>
110454a8:	4a400204 	addi	r9,r9,8
110454ac:	003ce106 	br	11044834 <___vfprintf_internal_r+0xcb4>
110454b0:	da413c15 	stw	r9,1264(sp)
110454b4:	1043ac00 	call	11043ac0 <strlen>
110454b8:	d8812b15 	stw	r2,1196(sp)
110454bc:	d8812815 	stw	r2,1184(sp)
110454c0:	da413c17 	ldw	r9,1264(sp)
110454c4:	103fa20e 	bge	r2,zero,11045350 <___vfprintf_internal_r+0x17d0>
110454c8:	d8012815 	stw	zero,1184(sp)
110454cc:	003fa006 	br	11045350 <___vfprintf_internal_r+0x17d0>
110454d0:	d9412917 	ldw	r5,1188(sp)
110454d4:	8809883a 	mov	r4,r17
110454d8:	d9811b04 	addi	r6,sp,1132
110454dc:	1043b4c0 	call	11043b4c <__sprint_r>
110454e0:	103b3a1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
110454e4:	da011d17 	ldw	r8,1140(sp)
110454e8:	d8c11c17 	ldw	r3,1136(sp)
110454ec:	da400404 	addi	r9,sp,16
110454f0:	d8813217 	ldw	r2,1224(sp)
110454f4:	4cc00015 	stw	r19,0(r9)
110454f8:	48800115 	stw	r2,4(r9)
110454fc:	4091883a 	add	r8,r8,r2
11045500:	003c8106 	br	11044708 <___vfprintf_internal_r+0xb88>
11045504:	00800b44 	movi	r2,45
11045508:	d8812585 	stb	r2,1174(sp)
1104550c:	003be306 	br	1104449c <___vfprintf_internal_r+0x91c>
11045510:	4d000015 	stw	r20,0(r9)
11045514:	4c800115 	stw	r18,4(r9)
11045518:	4491883a 	add	r8,r8,r18
1104551c:	18c00044 	addi	r3,r3,1
11045520:	da011d15 	stw	r8,1140(sp)
11045524:	d8c11c15 	stw	r3,1136(sp)
11045528:	008001c4 	movi	r2,7
1104552c:	10ffe816 	blt	r2,r3,110454d0 <___vfprintf_internal_r+0x1950>
11045530:	4a400204 	addi	r9,r9,8
11045534:	003fee06 	br	110454f0 <___vfprintf_internal_r+0x1970>
11045538:	df012b15 	stw	fp,1196(sp)
1104553c:	00800184 	movi	r2,6
11045540:	1700072e 	bgeu	r2,fp,11045560 <___vfprintf_internal_r+0x19e0>
11045544:	d8812b15 	stw	r2,1196(sp)
11045548:	d8812815 	stw	r2,1184(sp)
1104554c:	ddc12d15 	stw	r23,1204(sp)
11045550:	04c00034 	movhi	r19,0
11045554:	9cc30204 	addi	r19,r19,3080
11045558:	d8013115 	stw	zero,1220(sp)
1104555c:	003a7a06 	br	11043f48 <___vfprintf_internal_r+0x3c8>
11045560:	d8812b17 	ldw	r2,1196(sp)
11045564:	d8812815 	stw	r2,1184(sp)
11045568:	103ff80e 	bge	r2,zero,1104554c <___vfprintf_internal_r+0x19cc>
1104556c:	d8012815 	stw	zero,1184(sp)
11045570:	003ff606 	br	1104554c <___vfprintf_internal_r+0x19cc>
11045574:	d9012d17 	ldw	r4,1204(sp)
11045578:	da012c17 	ldw	r8,1200(sp)
1104557c:	20800017 	ldw	r2,0(r4)
11045580:	21000104 	addi	r4,r4,4
11045584:	d9012d15 	stw	r4,1204(sp)
11045588:	12000015 	stw	r8,0(r2)
1104558c:	0039b206 	br	11043c58 <___vfprintf_internal_r+0xd8>
11045590:	d9412917 	ldw	r5,1188(sp)
11045594:	8809883a 	mov	r4,r17
11045598:	d9811b04 	addi	r6,sp,1132
1104559c:	1043b4c0 	call	11043b4c <__sprint_r>
110455a0:	103b0a1e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
110455a4:	dc812417 	ldw	r18,1168(sp)
110455a8:	da011d17 	ldw	r8,1140(sp)
110455ac:	da400404 	addi	r9,sp,16
110455b0:	003def06 	br	11044d70 <___vfprintf_internal_r+0x11f0>
110455b4:	d9412917 	ldw	r5,1188(sp)
110455b8:	8809883a 	mov	r4,r17
110455bc:	d9811b04 	addi	r6,sp,1132
110455c0:	1043b4c0 	call	11043b4c <__sprint_r>
110455c4:	103b011e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
110455c8:	dc812417 	ldw	r18,1168(sp)
110455cc:	da400404 	addi	r9,sp,16
110455d0:	003eb906 	br	110450b8 <___vfprintf_internal_r+0x1538>
110455d4:	d9412917 	ldw	r5,1188(sp)
110455d8:	8809883a 	mov	r4,r17
110455dc:	d9811b04 	addi	r6,sp,1132
110455e0:	1043b4c0 	call	11043b4c <__sprint_r>
110455e4:	103af91e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
110455e8:	dc812417 	ldw	r18,1168(sp)
110455ec:	da011d17 	ldw	r8,1140(sp)
110455f0:	d8c11c17 	ldw	r3,1136(sp)
110455f4:	da400404 	addi	r9,sp,16
110455f8:	003ea306 	br	11045088 <___vfprintf_internal_r+0x1508>
110455fc:	00800244 	movi	r2,9
11045600:	15fda636 	bltu	r2,r23,11044c9c <___vfprintf_internal_r+0x111c>
11045604:	dd010e04 	addi	r20,sp,1080
11045608:	003dc206 	br	11044d14 <___vfprintf_internal_r+0x1194>
1104560c:	df012815 	stw	fp,1184(sp)
11045610:	d8812583 	ldbu	r2,1174(sp)
11045614:	df012b15 	stw	fp,1196(sp)
11045618:	ddc12d15 	stw	r23,1204(sp)
1104561c:	d8013115 	stw	zero,1220(sp)
11045620:	003a4206 	br	11043f2c <___vfprintf_internal_r+0x3ac>
11045624:	d9412917 	ldw	r5,1188(sp)
11045628:	8809883a 	mov	r4,r17
1104562c:	d9811b04 	addi	r6,sp,1132
11045630:	1043b4c0 	call	11043b4c <__sprint_r>
11045634:	103ae51e 	bne	r2,zero,110441cc <___vfprintf_internal_r+0x64c>
11045638:	dc812417 	ldw	r18,1168(sp)
1104563c:	da011d17 	ldw	r8,1140(sp)
11045640:	d8c11c17 	ldw	r3,1136(sp)
11045644:	da400404 	addi	r9,sp,16
11045648:	003ec906 	br	11045170 <___vfprintf_internal_r+0x15f0>
1104564c:	04c00034 	movhi	r19,0
11045650:	9cc2f704 	addi	r19,r19,3036
11045654:	003f6f06 	br	11045414 <___vfprintf_internal_r+0x1894>
11045658:	d8812583 	ldbu	r2,1174(sp)
1104565c:	dc012a17 	ldw	r16,1192(sp)
11045660:	d8013115 	stw	zero,1220(sp)
11045664:	003a3106 	br	11043f2c <___vfprintf_internal_r+0x3ac>
11045668:	d8812404 	addi	r2,sp,1168
1104566c:	d8800115 	stw	r2,4(sp)
11045670:	d8812304 	addi	r2,sp,1164
11045674:	d8800215 	stw	r2,8(sp)
11045678:	d8812204 	addi	r2,sp,1160
1104567c:	df000015 	stw	fp,0(sp)
11045680:	d8800315 	stw	r2,12(sp)
11045684:	8809883a 	mov	r4,r17
11045688:	b00b883a 	mov	r5,r22
1104568c:	a00d883a 	mov	r6,r20
11045690:	01c000c4 	movi	r7,3
11045694:	da413c15 	stw	r9,1264(sp)
11045698:	1045e040 	call	11045e04 <_dtoa_r>
1104569c:	da413c17 	ldw	r9,1264(sp)
110456a0:	1027883a 	mov	r19,r2
110456a4:	1707883a 	add	r3,r2,fp
110456a8:	e02f883a 	mov	r23,fp
110456ac:	99000007 	ldb	r4,0(r19)
110456b0:	00800c04 	movi	r2,48
110456b4:	20800326 	beq	r4,r2,110456c4 <___vfprintf_internal_r+0x1b44>
110456b8:	da812417 	ldw	r10,1168(sp)
110456bc:	1a87883a 	add	r3,r3,r10
110456c0:	003ef406 	br	11045294 <___vfprintf_internal_r+0x1714>
110456c4:	b009883a 	mov	r4,r22
110456c8:	a00b883a 	mov	r5,r20
110456cc:	000d883a 	mov	r6,zero
110456d0:	000f883a 	mov	r7,zero
110456d4:	d8c13b15 	stw	r3,1260(sp)
110456d8:	da413c15 	stw	r9,1264(sp)
110456dc:	104bcc00 	call	1104bcc0 <__nedf2>
110456e0:	d8c13b17 	ldw	r3,1260(sp)
110456e4:	da413c17 	ldw	r9,1264(sp)
110456e8:	103ff326 	beq	r2,zero,110456b8 <___vfprintf_internal_r+0x1b38>
110456ec:	00800044 	movi	r2,1
110456f0:	15d5c83a 	sub	r10,r2,r23
110456f4:	da812415 	stw	r10,1168(sp)
110456f8:	1a87883a 	add	r3,r3,r10
110456fc:	003ee506 	br	11045294 <___vfprintf_internal_r+0x1714>
11045700:	d8812417 	ldw	r2,1168(sp)
11045704:	d8812b15 	stw	r2,1196(sp)
11045708:	1029883a 	mov	r20,r2
1104570c:	00bfff44 	movi	r2,-3
11045710:	a0800116 	blt	r20,r2,11045718 <___vfprintf_internal_r+0x1b98>
11045714:	e5001d0e 	bge	fp,r20,1104578c <___vfprintf_internal_r+0x1c0c>
11045718:	94bfff84 	addi	r18,r18,-2
1104571c:	a53fffc4 	addi	r20,r20,-1
11045720:	dd012415 	stw	r20,1168(sp)
11045724:	dc811fc5 	stb	r18,1151(sp)
11045728:	a0007816 	blt	r20,zero,1104590c <___vfprintf_internal_r+0x1d8c>
1104572c:	00800ac4 	movi	r2,43
11045730:	d8812005 	stb	r2,1152(sp)
11045734:	00800244 	movi	r2,9
11045738:	15002b16 	blt	r2,r20,110457e8 <___vfprintf_internal_r+0x1c68>
1104573c:	00800c04 	movi	r2,48
11045740:	a5000c04 	addi	r20,r20,48
11045744:	d8812045 	stb	r2,1153(sp)
11045748:	dd012085 	stb	r20,1154(sp)
1104574c:	d8c120c4 	addi	r3,sp,1155
11045750:	d8811fc4 	addi	r2,sp,1151
11045754:	da013217 	ldw	r8,1224(sp)
11045758:	1885c83a 	sub	r2,r3,r2
1104575c:	d8813515 	stw	r2,1236(sp)
11045760:	4085883a 	add	r2,r8,r2
11045764:	d8812b15 	stw	r2,1196(sp)
11045768:	00800044 	movi	r2,1
1104576c:	1200610e 	bge	r2,r8,110458f4 <___vfprintf_internal_r+0x1d74>
11045770:	d8812b17 	ldw	r2,1196(sp)
11045774:	10800044 	addi	r2,r2,1
11045778:	d8812b15 	stw	r2,1196(sp)
1104577c:	d8812815 	stw	r2,1184(sp)
11045780:	103ee90e 	bge	r2,zero,11045328 <___vfprintf_internal_r+0x17a8>
11045784:	d8012815 	stw	zero,1184(sp)
11045788:	003ee706 	br	11045328 <___vfprintf_internal_r+0x17a8>
1104578c:	d8812b17 	ldw	r2,1196(sp)
11045790:	da013217 	ldw	r8,1224(sp)
11045794:	12003716 	blt	r2,r8,11045874 <___vfprintf_internal_r+0x1cf4>
11045798:	8400004c 	andi	r16,r16,1
1104579c:	80000326 	beq	r16,zero,110457ac <___vfprintf_internal_r+0x1c2c>
110457a0:	d8812b17 	ldw	r2,1196(sp)
110457a4:	10800044 	addi	r2,r2,1
110457a8:	d8812b15 	stw	r2,1196(sp)
110457ac:	d8812815 	stw	r2,1184(sp)
110457b0:	10003716 	blt	r2,zero,11045890 <___vfprintf_internal_r+0x1d10>
110457b4:	048019c4 	movi	r18,103
110457b8:	003edb06 	br	11045328 <___vfprintf_internal_r+0x17a8>
110457bc:	d8012815 	stw	zero,1184(sp)
110457c0:	003b6906 	br	11044568 <___vfprintf_internal_r+0x9e8>
110457c4:	e03e901e 	bne	fp,zero,11045208 <___vfprintf_internal_r+0x1688>
110457c8:	07000044 	movi	fp,1
110457cc:	003e8e06 	br	11045208 <___vfprintf_internal_r+0x1688>
110457d0:	07000184 	movi	fp,6
110457d4:	003e8c06 	br	11045208 <___vfprintf_internal_r+0x1688>
110457d8:	00c00b44 	movi	r3,45
110457dc:	a520003c 	xorhi	r20,r20,32768
110457e0:	d8c12f05 	stb	r3,1212(sp)
110457e4:	003e8c06 	br	11045218 <___vfprintf_internal_r+0x1698>
110457e8:	d8c11f84 	addi	r3,sp,1150
110457ec:	102f883a 	mov	r23,r2
110457f0:	4839883a 	mov	fp,r9
110457f4:	a009883a 	mov	r4,r20
110457f8:	01400284 	movi	r5,10
110457fc:	182d883a 	mov	r22,r3
11045800:	10431580 	call	11043158 <__modsi3>
11045804:	10800c04 	addi	r2,r2,48
11045808:	a009883a 	mov	r4,r20
1104580c:	b0800005 	stb	r2,0(r22)
11045810:	01400284 	movi	r5,10
11045814:	10431080 	call	11043108 <__divsi3>
11045818:	1029883a 	mov	r20,r2
1104581c:	b0ffffc4 	addi	r3,r22,-1
11045820:	b8bff416 	blt	r23,r2,110457f4 <___vfprintf_internal_r+0x1c74>
11045824:	11400c04 	addi	r5,r2,48
11045828:	b17fffc5 	stb	r5,-1(r22)
1104582c:	d8811fc4 	addi	r2,sp,1151
11045830:	e013883a 	mov	r9,fp
11045834:	1880482e 	bgeu	r3,r2,11045958 <___vfprintf_internal_r+0x1dd8>
11045838:	b007883a 	mov	r3,r22
1104583c:	d9012044 	addi	r4,sp,1153
11045840:	00000206 	br	1104584c <___vfprintf_internal_r+0x1ccc>
11045844:	19400003 	ldbu	r5,0(r3)
11045848:	18c00044 	addi	r3,r3,1
1104584c:	21400005 	stb	r5,0(r4)
11045850:	21000044 	addi	r4,r4,1
11045854:	10fffb1e 	bne	r2,r3,11045844 <___vfprintf_internal_r+0x1cc4>
11045858:	d8c12004 	addi	r3,sp,1152
1104585c:	1d87c83a 	sub	r3,r3,r22
11045860:	d9012044 	addi	r4,sp,1153
11045864:	20c7883a 	add	r3,r4,r3
11045868:	003fba06 	br	11045754 <___vfprintf_internal_r+0x1bd4>
1104586c:	d8c12217 	ldw	r3,1160(sp)
11045870:	003e9906 	br	110452d8 <___vfprintf_internal_r+0x1758>
11045874:	05000b0e 	bge	zero,r20,110458a4 <___vfprintf_internal_r+0x1d24>
11045878:	05000044 	movi	r20,1
1104587c:	da013217 	ldw	r8,1224(sp)
11045880:	a229883a 	add	r20,r20,r8
11045884:	dd012b15 	stw	r20,1196(sp)
11045888:	dd012815 	stw	r20,1184(sp)
1104588c:	a03fc90e 	bge	r20,zero,110457b4 <___vfprintf_internal_r+0x1c34>
11045890:	d8012815 	stw	zero,1184(sp)
11045894:	048019c4 	movi	r18,103
11045898:	003ea306 	br	11045328 <___vfprintf_internal_r+0x17a8>
1104589c:	e5c00044 	addi	r23,fp,1
110458a0:	003e6606 	br	1104523c <___vfprintf_internal_r+0x16bc>
110458a4:	00800084 	movi	r2,2
110458a8:	1529c83a 	sub	r20,r2,r20
110458ac:	003ff306 	br	1104587c <___vfprintf_internal_r+0x1cfc>
110458b0:	008011c4 	movi	r2,71
110458b4:	90be7226 	beq	r18,r2,11045280 <___vfprintf_internal_r+0x1700>
110458b8:	003e7306 	br	11045288 <___vfprintf_internal_r+0x1708>
110458bc:	d8812d17 	ldw	r2,1204(sp)
110458c0:	ac800043 	ldbu	r18,1(r21)
110458c4:	202b883a 	mov	r21,r4
110458c8:	17000017 	ldw	fp,0(r2)
110458cc:	10800104 	addi	r2,r2,4
110458d0:	d8812d15 	stw	r2,1204(sp)
110458d4:	e0001b16 	blt	fp,zero,11045944 <___vfprintf_internal_r+0x1dc4>
110458d8:	94803fcc 	andi	r18,r18,255
110458dc:	9480201c 	xori	r18,r18,128
110458e0:	94bfe004 	addi	r18,r18,-128
110458e4:	00390406 	br	11043cf8 <___vfprintf_internal_r+0x178>
110458e8:	00bfffc4 	movi	r2,-1
110458ec:	d8812c15 	stw	r2,1200(sp)
110458f0:	003a2506 	br	11044188 <___vfprintf_internal_r+0x608>
110458f4:	80a0703a 	and	r16,r16,r2
110458f8:	803f9d1e 	bne	r16,zero,11045770 <___vfprintf_internal_r+0x1bf0>
110458fc:	d8812b17 	ldw	r2,1196(sp)
11045900:	d8812815 	stw	r2,1184(sp)
11045904:	103e880e 	bge	r2,zero,11045328 <___vfprintf_internal_r+0x17a8>
11045908:	003f9e06 	br	11045784 <___vfprintf_internal_r+0x1c04>
1104590c:	00800b44 	movi	r2,45
11045910:	0529c83a 	sub	r20,zero,r20
11045914:	d8812005 	stb	r2,1152(sp)
11045918:	003f8606 	br	11045734 <___vfprintf_internal_r+0x1bb4>
1104591c:	1007883a 	mov	r3,r2
11045920:	003e6d06 	br	110452d8 <___vfprintf_internal_r+0x1758>
11045924:	e000021e 	bne	fp,zero,11045930 <___vfprintf_internal_r+0x1db0>
11045928:	8400004c 	andi	r16,r16,1
1104592c:	80000e26 	beq	r16,zero,11045968 <___vfprintf_internal_r+0x1de8>
11045930:	e7000084 	addi	fp,fp,2
11045934:	df012b15 	stw	fp,1196(sp)
11045938:	df012815 	stw	fp,1184(sp)
1104593c:	e03e7a0e 	bge	fp,zero,11045328 <___vfprintf_internal_r+0x17a8>
11045940:	003f9006 	br	11045784 <___vfprintf_internal_r+0x1c04>
11045944:	94803fcc 	andi	r18,r18,255
11045948:	9480201c 	xori	r18,r18,128
1104594c:	073fffc4 	movi	fp,-1
11045950:	94bfe004 	addi	r18,r18,-128
11045954:	0038e806 	br	11043cf8 <___vfprintf_internal_r+0x178>
11045958:	d8c12044 	addi	r3,sp,1153
1104595c:	003f7d06 	br	11045754 <___vfprintf_internal_r+0x1bd4>
11045960:	dd012417 	ldw	r20,1168(sp)
11045964:	003f6d06 	br	1104571c <___vfprintf_internal_r+0x1b9c>
11045968:	00c00044 	movi	r3,1
1104596c:	d8c12815 	stw	r3,1184(sp)
11045970:	d8c12b15 	stw	r3,1196(sp)
11045974:	003e6c06 	br	11045328 <___vfprintf_internal_r+0x17a8>

11045978 <__vfprintf_internal>:
11045978:	00800034 	movhi	r2,0
1104597c:	1089fe04 	addi	r2,r2,10232
11045980:	2007883a 	mov	r3,r4
11045984:	11000017 	ldw	r4,0(r2)
11045988:	2805883a 	mov	r2,r5
1104598c:	300f883a 	mov	r7,r6
11045990:	180b883a 	mov	r5,r3
11045994:	100d883a 	mov	r6,r2
11045998:	1043b801 	jmpi	11043b80 <___vfprintf_internal_r>

1104599c <_vsnprintf_r>:
1104599c:	deffe604 	addi	sp,sp,-104
110459a0:	dc401815 	stw	r17,96(sp)
110459a4:	dc001715 	stw	r16,92(sp)
110459a8:	dfc01915 	stw	ra,100(sp)
110459ac:	3021883a 	mov	r16,r6
110459b0:	2023883a 	mov	r17,r4
110459b4:	30002016 	blt	r6,zero,11045a38 <_vsnprintf_r+0x9c>
110459b8:	00808204 	movi	r2,520
110459bc:	d880030d 	sth	r2,12(sp)
110459c0:	d9400015 	stw	r5,0(sp)
110459c4:	d9400415 	stw	r5,16(sp)
110459c8:	3000161e 	bne	r6,zero,11045a24 <_vsnprintf_r+0x88>
110459cc:	0005883a 	mov	r2,zero
110459d0:	00c00034 	movhi	r3,0
110459d4:	18c9fe04 	addi	r3,r3,10232
110459d8:	19000017 	ldw	r4,0(r3)
110459dc:	380d883a 	mov	r6,r7
110459e0:	d9c01a17 	ldw	r7,104(sp)
110459e4:	d8800215 	stw	r2,8(sp)
110459e8:	d8800515 	stw	r2,20(sp)
110459ec:	d80b883a 	mov	r5,sp
110459f0:	00bfffc4 	movi	r2,-1
110459f4:	d880038d 	sth	r2,14(sp)
110459f8:	1043b800 	call	11043b80 <___vfprintf_internal_r>
110459fc:	00ffffc4 	movi	r3,-1
11045a00:	10c00a16 	blt	r2,r3,11045a2c <_vsnprintf_r+0x90>
11045a04:	80000226 	beq	r16,zero,11045a10 <_vsnprintf_r+0x74>
11045a08:	d8c00017 	ldw	r3,0(sp)
11045a0c:	18000005 	stb	zero,0(r3)
11045a10:	dfc01917 	ldw	ra,100(sp)
11045a14:	dc401817 	ldw	r17,96(sp)
11045a18:	dc001717 	ldw	r16,92(sp)
11045a1c:	dec01a04 	addi	sp,sp,104
11045a20:	f800283a 	ret
11045a24:	30bfffc4 	addi	r2,r6,-1
11045a28:	003fe906 	br	110459d0 <_vsnprintf_r+0x34>
11045a2c:	00c022c4 	movi	r3,139
11045a30:	88c00015 	stw	r3,0(r17)
11045a34:	003ff306 	br	11045a04 <_vsnprintf_r+0x68>
11045a38:	008022c4 	movi	r2,139
11045a3c:	20800015 	stw	r2,0(r4)
11045a40:	00bfffc4 	movi	r2,-1
11045a44:	003ff206 	br	11045a10 <_vsnprintf_r+0x74>

11045a48 <vsnprintf>:
11045a48:	00800034 	movhi	r2,0
11045a4c:	1089fe04 	addi	r2,r2,10232
11045a50:	2011883a 	mov	r8,r4
11045a54:	11000017 	ldw	r4,0(r2)
11045a58:	defffe04 	addi	sp,sp,-8
11045a5c:	2807883a 	mov	r3,r5
11045a60:	3005883a 	mov	r2,r6
11045a64:	d9c00015 	stw	r7,0(sp)
11045a68:	400b883a 	mov	r5,r8
11045a6c:	180d883a 	mov	r6,r3
11045a70:	100f883a 	mov	r7,r2
11045a74:	dfc00115 	stw	ra,4(sp)
11045a78:	104599c0 	call	1104599c <_vsnprintf_r>
11045a7c:	dfc00117 	ldw	ra,4(sp)
11045a80:	dec00204 	addi	sp,sp,8
11045a84:	f800283a 	ret

11045a88 <__swsetup_r>:
11045a88:	00800034 	movhi	r2,0
11045a8c:	1089fe04 	addi	r2,r2,10232
11045a90:	10800017 	ldw	r2,0(r2)
11045a94:	defffd04 	addi	sp,sp,-12
11045a98:	dc400115 	stw	r17,4(sp)
11045a9c:	dc000015 	stw	r16,0(sp)
11045aa0:	dfc00215 	stw	ra,8(sp)
11045aa4:	2023883a 	mov	r17,r4
11045aa8:	2821883a 	mov	r16,r5
11045aac:	10000226 	beq	r2,zero,11045ab8 <__swsetup_r+0x30>
11045ab0:	10c00e17 	ldw	r3,56(r2)
11045ab4:	18003d26 	beq	r3,zero,11045bac <__swsetup_r+0x124>
11045ab8:	8080030b 	ldhu	r2,12(r16)
11045abc:	10c0020c 	andi	r3,r2,8
11045ac0:	18ffffcc 	andi	r3,r3,65535
11045ac4:	18e0001c 	xori	r3,r3,32768
11045ac8:	18e00004 	addi	r3,r3,-32768
11045acc:	18001226 	beq	r3,zero,11045b18 <__swsetup_r+0x90>
11045ad0:	80c00417 	ldw	r3,16(r16)
11045ad4:	18001f26 	beq	r3,zero,11045b54 <__swsetup_r+0xcc>
11045ad8:	1100004c 	andi	r4,r2,1
11045adc:	2000261e 	bne	r4,zero,11045b78 <__swsetup_r+0xf0>
11045ae0:	1080008c 	andi	r2,r2,2
11045ae4:	10bfffcc 	andi	r2,r2,65535
11045ae8:	10a0001c 	xori	r2,r2,32768
11045aec:	10a00004 	addi	r2,r2,-32768
11045af0:	1000311e 	bne	r2,zero,11045bb8 <__swsetup_r+0x130>
11045af4:	80800517 	ldw	r2,20(r16)
11045af8:	80800215 	stw	r2,8(r16)
11045afc:	18002326 	beq	r3,zero,11045b8c <__swsetup_r+0x104>
11045b00:	0005883a 	mov	r2,zero
11045b04:	dfc00217 	ldw	ra,8(sp)
11045b08:	dc400117 	ldw	r17,4(sp)
11045b0c:	dc000017 	ldw	r16,0(sp)
11045b10:	dec00304 	addi	sp,sp,12
11045b14:	f800283a 	ret
11045b18:	10c0040c 	andi	r3,r2,16
11045b1c:	18ffffcc 	andi	r3,r3,65535
11045b20:	18e0001c 	xori	r3,r3,32768
11045b24:	18e00004 	addi	r3,r3,-32768
11045b28:	18001e26 	beq	r3,zero,11045ba4 <__swsetup_r+0x11c>
11045b2c:	10c0010c 	andi	r3,r2,4
11045b30:	18ffffcc 	andi	r3,r3,65535
11045b34:	18e0001c 	xori	r3,r3,32768
11045b38:	18e00004 	addi	r3,r3,-32768
11045b3c:	1800211e 	bne	r3,zero,11045bc4 <__swsetup_r+0x13c>
11045b40:	80c00417 	ldw	r3,16(r16)
11045b44:	11400214 	ori	r5,r2,8
11045b48:	8140030d 	sth	r5,12(r16)
11045b4c:	2805883a 	mov	r2,r5
11045b50:	183fe11e 	bne	r3,zero,11045ad8 <__swsetup_r+0x50>
11045b54:	1140a00c 	andi	r5,r2,640
11045b58:	01008004 	movi	r4,512
11045b5c:	293fde26 	beq	r5,r4,11045ad8 <__swsetup_r+0x50>
11045b60:	8809883a 	mov	r4,r17
11045b64:	800b883a 	mov	r5,r16
11045b68:	104843c0 	call	1104843c <__smakebuf_r>
11045b6c:	8080030b 	ldhu	r2,12(r16)
11045b70:	80c00417 	ldw	r3,16(r16)
11045b74:	003fd806 	br	11045ad8 <__swsetup_r+0x50>
11045b78:	80800517 	ldw	r2,20(r16)
11045b7c:	80000215 	stw	zero,8(r16)
11045b80:	0085c83a 	sub	r2,zero,r2
11045b84:	80800615 	stw	r2,24(r16)
11045b88:	183fdd1e 	bne	r3,zero,11045b00 <__swsetup_r+0x78>
11045b8c:	8080030b 	ldhu	r2,12(r16)
11045b90:	1080200c 	andi	r2,r2,128
11045b94:	10bfffcc 	andi	r2,r2,65535
11045b98:	10a0001c 	xori	r2,r2,32768
11045b9c:	10a00004 	addi	r2,r2,-32768
11045ba0:	103fd826 	beq	r2,zero,11045b04 <__swsetup_r+0x7c>
11045ba4:	00bfffc4 	movi	r2,-1
11045ba8:	003fd606 	br	11045b04 <__swsetup_r+0x7c>
11045bac:	1009883a 	mov	r4,r2
11045bb0:	10476c80 	call	110476c8 <__sinit>
11045bb4:	003fc006 	br	11045ab8 <__swsetup_r+0x30>
11045bb8:	0005883a 	mov	r2,zero
11045bbc:	80800215 	stw	r2,8(r16)
11045bc0:	003fce06 	br	11045afc <__swsetup_r+0x74>
11045bc4:	81400c17 	ldw	r5,48(r16)
11045bc8:	28000626 	beq	r5,zero,11045be4 <__swsetup_r+0x15c>
11045bcc:	80c01004 	addi	r3,r16,64
11045bd0:	28c00326 	beq	r5,r3,11045be0 <__swsetup_r+0x158>
11045bd4:	8809883a 	mov	r4,r17
11045bd8:	1047a4c0 	call	11047a4c <_free_r>
11045bdc:	8080030b 	ldhu	r2,12(r16)
11045be0:	80000c15 	stw	zero,48(r16)
11045be4:	80c00417 	ldw	r3,16(r16)
11045be8:	013ff6c4 	movi	r4,-37
11045bec:	2084703a 	and	r2,r4,r2
11045bf0:	80000115 	stw	zero,4(r16)
11045bf4:	80c00015 	stw	r3,0(r16)
11045bf8:	003fd206 	br	11045b44 <__swsetup_r+0xbc>

11045bfc <quorem>:
11045bfc:	defff704 	addi	sp,sp,-36
11045c00:	dc400115 	stw	r17,4(sp)
11045c04:	20800417 	ldw	r2,16(r4)
11045c08:	2c400417 	ldw	r17,16(r5)
11045c0c:	dd800615 	stw	r22,24(sp)
11045c10:	dd400515 	stw	r21,20(sp)
11045c14:	dfc00815 	stw	ra,32(sp)
11045c18:	ddc00715 	stw	r23,28(sp)
11045c1c:	dd000415 	stw	r20,16(sp)
11045c20:	dcc00315 	stw	r19,12(sp)
11045c24:	dc800215 	stw	r18,8(sp)
11045c28:	dc000015 	stw	r16,0(sp)
11045c2c:	202b883a 	mov	r21,r4
11045c30:	282d883a 	mov	r22,r5
11045c34:	14407116 	blt	r2,r17,11045dfc <quorem+0x200>
11045c38:	88800104 	addi	r2,r17,4
11045c3c:	1085883a 	add	r2,r2,r2
11045c40:	1085883a 	add	r2,r2,r2
11045c44:	28a7883a 	add	r19,r5,r2
11045c48:	2085883a 	add	r2,r4,r2
11045c4c:	15c00017 	ldw	r23,0(r2)
11045c50:	99400017 	ldw	r5,0(r19)
11045c54:	8c7fffc4 	addi	r17,r17,-1
11045c58:	b809883a 	mov	r4,r23
11045c5c:	29400044 	addi	r5,r5,1
11045c60:	10431b40 	call	110431b4 <__udivsi3>
11045c64:	1025883a 	mov	r18,r2
11045c68:	b4000504 	addi	r16,r22,20
11045c6c:	ad000504 	addi	r20,r21,20
11045c70:	10002d26 	beq	r2,zero,11045d28 <quorem+0x12c>
11045c74:	800d883a 	mov	r6,r16
11045c78:	a007883a 	mov	r3,r20
11045c7c:	000f883a 	mov	r7,zero
11045c80:	0005883a 	mov	r2,zero
11045c84:	32c00017 	ldw	r11,0(r6)
11045c88:	1a400017 	ldw	r9,0(r3)
11045c8c:	31800104 	addi	r6,r6,4
11045c90:	5abfffcc 	andi	r10,r11,65535
11045c94:	5495383a 	mul	r10,r10,r18
11045c98:	5816d43a 	srli	r11,r11,16
11045c9c:	4a3fffcc 	andi	r8,r9,65535
11045ca0:	3a95883a 	add	r10,r7,r10
11045ca4:	500ed43a 	srli	r7,r10,16
11045ca8:	5c97383a 	mul	r11,r11,r18
11045cac:	4085883a 	add	r2,r8,r2
11045cb0:	52bfffcc 	andi	r10,r10,65535
11045cb4:	1291c83a 	sub	r8,r2,r10
11045cb8:	4804d43a 	srli	r2,r9,16
11045cbc:	3acf883a 	add	r7,r7,r11
11045cc0:	4015d43a 	srai	r10,r8,16
11045cc4:	393fffcc 	andi	r4,r7,65535
11045cc8:	1105c83a 	sub	r2,r2,r4
11045ccc:	1285883a 	add	r2,r2,r10
11045cd0:	1880008d 	sth	r2,2(r3)
11045cd4:	1a00000d 	sth	r8,0(r3)
11045cd8:	380ed43a 	srli	r7,r7,16
11045cdc:	1005d43a 	srai	r2,r2,16
11045ce0:	18c00104 	addi	r3,r3,4
11045ce4:	99bfe72e 	bgeu	r19,r6,11045c84 <quorem+0x88>
11045ce8:	b8000f1e 	bne	r23,zero,11045d28 <quorem+0x12c>
11045cec:	88800144 	addi	r2,r17,5
11045cf0:	1085883a 	add	r2,r2,r2
11045cf4:	1085883a 	add	r2,r2,r2
11045cf8:	a887883a 	add	r3,r21,r2
11045cfc:	18bfff04 	addi	r2,r3,-4
11045d00:	a080082e 	bgeu	r20,r2,11045d24 <quorem+0x128>
11045d04:	18ffff17 	ldw	r3,-4(r3)
11045d08:	18000326 	beq	r3,zero,11045d18 <quorem+0x11c>
11045d0c:	00000506 	br	11045d24 <quorem+0x128>
11045d10:	10c00017 	ldw	r3,0(r2)
11045d14:	1800031e 	bne	r3,zero,11045d24 <quorem+0x128>
11045d18:	10bfff04 	addi	r2,r2,-4
11045d1c:	8c7fffc4 	addi	r17,r17,-1
11045d20:	a0bffb36 	bltu	r20,r2,11045d10 <quorem+0x114>
11045d24:	ac400415 	stw	r17,16(r21)
11045d28:	a809883a 	mov	r4,r21
11045d2c:	b00b883a 	mov	r5,r22
11045d30:	1049a000 	call	11049a00 <__mcmp>
11045d34:	10002516 	blt	r2,zero,11045dcc <quorem+0x1d0>
11045d38:	94800044 	addi	r18,r18,1
11045d3c:	a007883a 	mov	r3,r20
11045d40:	000b883a 	mov	r5,zero
11045d44:	1a000017 	ldw	r8,0(r3)
11045d48:	81c00017 	ldw	r7,0(r16)
11045d4c:	84000104 	addi	r16,r16,4
11045d50:	41bfffcc 	andi	r6,r8,65535
11045d54:	38bfffcc 	andi	r2,r7,65535
11045d58:	314b883a 	add	r5,r6,r5
11045d5c:	288dc83a 	sub	r6,r5,r2
11045d60:	380ed43a 	srli	r7,r7,16
11045d64:	400ad43a 	srli	r5,r8,16
11045d68:	3005d43a 	srai	r2,r6,16
11045d6c:	1980000d 	sth	r6,0(r3)
11045d70:	29cbc83a 	sub	r5,r5,r7
11045d74:	288b883a 	add	r5,r5,r2
11045d78:	1940008d 	sth	r5,2(r3)
11045d7c:	280bd43a 	srai	r5,r5,16
11045d80:	18c00104 	addi	r3,r3,4
11045d84:	9c3fef2e 	bgeu	r19,r16,11045d44 <quorem+0x148>
11045d88:	88800144 	addi	r2,r17,5
11045d8c:	1085883a 	add	r2,r2,r2
11045d90:	1085883a 	add	r2,r2,r2
11045d94:	a885883a 	add	r2,r21,r2
11045d98:	10c00017 	ldw	r3,0(r2)
11045d9c:	18000b1e 	bne	r3,zero,11045dcc <quorem+0x1d0>
11045da0:	10ffff04 	addi	r3,r2,-4
11045da4:	a0c0082e 	bgeu	r20,r3,11045dc8 <quorem+0x1cc>
11045da8:	10bfff17 	ldw	r2,-4(r2)
11045dac:	10000326 	beq	r2,zero,11045dbc <quorem+0x1c0>
11045db0:	00000506 	br	11045dc8 <quorem+0x1cc>
11045db4:	18800017 	ldw	r2,0(r3)
11045db8:	1000031e 	bne	r2,zero,11045dc8 <quorem+0x1cc>
11045dbc:	18ffff04 	addi	r3,r3,-4
11045dc0:	8c7fffc4 	addi	r17,r17,-1
11045dc4:	a0fffb36 	bltu	r20,r3,11045db4 <quorem+0x1b8>
11045dc8:	ac400415 	stw	r17,16(r21)
11045dcc:	9005883a 	mov	r2,r18
11045dd0:	dfc00817 	ldw	ra,32(sp)
11045dd4:	ddc00717 	ldw	r23,28(sp)
11045dd8:	dd800617 	ldw	r22,24(sp)
11045ddc:	dd400517 	ldw	r21,20(sp)
11045de0:	dd000417 	ldw	r20,16(sp)
11045de4:	dcc00317 	ldw	r19,12(sp)
11045de8:	dc800217 	ldw	r18,8(sp)
11045dec:	dc400117 	ldw	r17,4(sp)
11045df0:	dc000017 	ldw	r16,0(sp)
11045df4:	dec00904 	addi	sp,sp,36
11045df8:	f800283a 	ret
11045dfc:	0005883a 	mov	r2,zero
11045e00:	003ff306 	br	11045dd0 <quorem+0x1d4>

11045e04 <_dtoa_r>:
11045e04:	20801017 	ldw	r2,64(r4)
11045e08:	deffdf04 	addi	sp,sp,-132
11045e0c:	dcc01a15 	stw	r19,104(sp)
11045e10:	dc801915 	stw	r18,100(sp)
11045e14:	dc401815 	stw	r17,96(sp)
11045e18:	dc001715 	stw	r16,92(sp)
11045e1c:	dfc02015 	stw	ra,128(sp)
11045e20:	df001f15 	stw	fp,124(sp)
11045e24:	ddc01e15 	stw	r23,120(sp)
11045e28:	dd801d15 	stw	r22,116(sp)
11045e2c:	dd401c15 	stw	r21,112(sp)
11045e30:	dd001b15 	stw	r20,108(sp)
11045e34:	d9400315 	stw	r5,12(sp)
11045e38:	d9c00415 	stw	r7,16(sp)
11045e3c:	2021883a 	mov	r16,r4
11045e40:	3025883a 	mov	r18,r6
11045e44:	dcc02317 	ldw	r19,140(sp)
11045e48:	3023883a 	mov	r17,r6
11045e4c:	10000826 	beq	r2,zero,11045e70 <_dtoa_r+0x6c>
11045e50:	20c01117 	ldw	r3,68(r4)
11045e54:	01800044 	movi	r6,1
11045e58:	100b883a 	mov	r5,r2
11045e5c:	30cc983a 	sll	r6,r6,r3
11045e60:	10c00115 	stw	r3,4(r2)
11045e64:	11800215 	stw	r6,8(r2)
11045e68:	10492040 	call	11049204 <_Bfree>
11045e6c:	80001015 	stw	zero,64(r16)
11045e70:	90002f16 	blt	r18,zero,11045f30 <_dtoa_r+0x12c>
11045e74:	98000015 	stw	zero,0(r19)
11045e78:	90dffc2c 	andhi	r3,r18,32752
11045e7c:	009ffc34 	movhi	r2,32752
11045e80:	18801c26 	beq	r3,r2,11045ef4 <_dtoa_r+0xf0>
11045e84:	d9000317 	ldw	r4,12(sp)
11045e88:	880b883a 	mov	r5,r17
11045e8c:	000d883a 	mov	r6,zero
11045e90:	000f883a 	mov	r7,zero
11045e94:	104bc640 	call	1104bc64 <__eqdf2>
11045e98:	10002c1e 	bne	r2,zero,11045f4c <_dtoa_r+0x148>
11045e9c:	d9002217 	ldw	r4,136(sp)
11045ea0:	d9c02417 	ldw	r7,144(sp)
11045ea4:	00800044 	movi	r2,1
11045ea8:	20800015 	stw	r2,0(r4)
11045eac:	38019426 	beq	r7,zero,11046500 <_dtoa_r+0x6fc>
11045eb0:	00800034 	movhi	r2,0
11045eb4:	10830444 	addi	r2,r2,3089
11045eb8:	38800015 	stw	r2,0(r7)
11045ebc:	15ffffc4 	addi	r23,r2,-1
11045ec0:	b805883a 	mov	r2,r23
11045ec4:	dfc02017 	ldw	ra,128(sp)
11045ec8:	df001f17 	ldw	fp,124(sp)
11045ecc:	ddc01e17 	ldw	r23,120(sp)
11045ed0:	dd801d17 	ldw	r22,116(sp)
11045ed4:	dd401c17 	ldw	r21,112(sp)
11045ed8:	dd001b17 	ldw	r20,108(sp)
11045edc:	dcc01a17 	ldw	r19,104(sp)
11045ee0:	dc801917 	ldw	r18,100(sp)
11045ee4:	dc401817 	ldw	r17,96(sp)
11045ee8:	dc001717 	ldw	r16,92(sp)
11045eec:	dec02104 	addi	sp,sp,132
11045ef0:	f800283a 	ret
11045ef4:	d8c02217 	ldw	r3,136(sp)
11045ef8:	d9000317 	ldw	r4,12(sp)
11045efc:	0089c3c4 	movi	r2,9999
11045f00:	18800015 	stw	r2,0(r3)
11045f04:	20016c26 	beq	r4,zero,110464b8 <_dtoa_r+0x6b4>
11045f08:	05c00034 	movhi	r23,0
11045f0c:	bdc31004 	addi	r23,r23,3136
11045f10:	d9c02417 	ldw	r7,144(sp)
11045f14:	383fea26 	beq	r7,zero,11045ec0 <_dtoa_r+0xbc>
11045f18:	b88000c7 	ldb	r2,3(r23)
11045f1c:	10016d1e 	bne	r2,zero,110464d4 <_dtoa_r+0x6d0>
11045f20:	b88000c4 	addi	r2,r23,3
11045f24:	d8c02417 	ldw	r3,144(sp)
11045f28:	18800015 	stw	r2,0(r3)
11045f2c:	003fe406 	br	11045ec0 <_dtoa_r+0xbc>
11045f30:	04600034 	movhi	r17,32768
11045f34:	8c7fffc4 	addi	r17,r17,-1
11045f38:	9462703a 	and	r17,r18,r17
11045f3c:	00800044 	movi	r2,1
11045f40:	98800015 	stw	r2,0(r19)
11045f44:	8825883a 	mov	r18,r17
11045f48:	003fcb06 	br	11045e78 <_dtoa_r+0x74>
11045f4c:	d9400317 	ldw	r5,12(sp)
11045f50:	9028d53a 	srli	r20,r18,20
11045f54:	d8800204 	addi	r2,sp,8
11045f58:	d8800015 	stw	r2,0(sp)
11045f5c:	8009883a 	mov	r4,r16
11045f60:	880d883a 	mov	r6,r17
11045f64:	d9c00104 	addi	r7,sp,4
11045f68:	1049da80 	call	11049da8 <__d2b>
11045f6c:	a501ffcc 	andi	r20,r20,2047
11045f70:	1039883a 	mov	fp,r2
11045f74:	a001591e 	bne	r20,zero,110464dc <_dtoa_r+0x6d8>
11045f78:	dd400217 	ldw	r21,8(sp)
11045f7c:	dd000117 	ldw	r20,4(sp)
11045f80:	00befbc4 	movi	r2,-1041
11045f84:	ad29883a 	add	r20,r21,r20
11045f88:	a082d216 	blt	r20,r2,11046ad4 <_dtoa_r+0xcd0>
11045f8c:	d8c00317 	ldw	r3,12(sp)
11045f90:	013f0384 	movi	r4,-1010
11045f94:	2509c83a 	sub	r4,r4,r20
11045f98:	a0810484 	addi	r2,r20,1042
11045f9c:	9124983a 	sll	r18,r18,r4
11045fa0:	1884d83a 	srl	r2,r3,r2
11045fa4:	9088b03a 	or	r4,r18,r2
11045fa8:	104bfe80 	call	1104bfe8 <__floatunsidf>
11045fac:	1009883a 	mov	r4,r2
11045fb0:	017f8434 	movhi	r5,65040
11045fb4:	00800044 	movi	r2,1
11045fb8:	194b883a 	add	r5,r3,r5
11045fbc:	a53fffc4 	addi	r20,r20,-1
11045fc0:	d8800f15 	stw	r2,60(sp)
11045fc4:	000d883a 	mov	r6,zero
11045fc8:	01cffe34 	movhi	r7,16376
11045fcc:	1042de80 	call	11042de8 <__subdf3>
11045fd0:	1009883a 	mov	r4,r2
11045fd4:	180b883a 	mov	r5,r3
11045fd8:	0198dbf4 	movhi	r6,25455
11045fdc:	3190d844 	addi	r6,r6,17249
11045fe0:	01cff4f4 	movhi	r7,16339
11045fe4:	39e1e9c4 	addi	r7,r7,-30809
11045fe8:	104b9800 	call	1104b980 <__muldf3>
11045fec:	180b883a 	mov	r5,r3
11045ff0:	01a2d874 	movhi	r6,35681
11045ff4:	31b22cc4 	addi	r6,r6,-14157
11045ff8:	01cff1f4 	movhi	r7,16327
11045ffc:	39e28a04 	addi	r7,r7,-30168
11046000:	1009883a 	mov	r4,r2
11046004:	1042d940 	call	11042d94 <__adddf3>
11046008:	a009883a 	mov	r4,r20
1104600c:	1027883a 	mov	r19,r2
11046010:	1825883a 	mov	r18,r3
11046014:	104be400 	call	1104be40 <__floatsidf>
11046018:	1009883a 	mov	r4,r2
1104601c:	180b883a 	mov	r5,r3
11046020:	019427f4 	movhi	r6,20639
11046024:	319e7ec4 	addi	r6,r6,31227
11046028:	01cff4f4 	movhi	r7,16339
1104602c:	39d104c4 	addi	r7,r7,17427
11046030:	104b9800 	call	1104b980 <__muldf3>
11046034:	9809883a 	mov	r4,r19
11046038:	900b883a 	mov	r5,r18
1104603c:	100d883a 	mov	r6,r2
11046040:	180f883a 	mov	r7,r3
11046044:	1042d940 	call	11042d94 <__adddf3>
11046048:	1009883a 	mov	r4,r2
1104604c:	180b883a 	mov	r5,r3
11046050:	1027883a 	mov	r19,r2
11046054:	1825883a 	mov	r18,r3
11046058:	104bf140 	call	1104bf14 <__fixdfsi>
1104605c:	9809883a 	mov	r4,r19
11046060:	900b883a 	mov	r5,r18
11046064:	000d883a 	mov	r6,zero
11046068:	000f883a 	mov	r7,zero
1104606c:	d8800615 	stw	r2,24(sp)
11046070:	104bde40 	call	1104bde4 <__ltdf2>
11046074:	10027e16 	blt	r2,zero,11046a70 <_dtoa_r+0xc6c>
11046078:	d8c00617 	ldw	r3,24(sp)
1104607c:	00800584 	movi	r2,22
11046080:	10c26c36 	bltu	r2,r3,11046a34 <_dtoa_r+0xc30>
11046084:	180490fa 	slli	r2,r3,3
11046088:	00c00034 	movhi	r3,0
1104608c:	18c33604 	addi	r3,r3,3288
11046090:	d9800317 	ldw	r6,12(sp)
11046094:	1885883a 	add	r2,r3,r2
11046098:	11000017 	ldw	r4,0(r2)
1104609c:	11400117 	ldw	r5,4(r2)
110460a0:	880f883a 	mov	r7,r17
110460a4:	104bd1c0 	call	1104bd1c <__gtdf2>
110460a8:	00828f0e 	bge	zero,r2,11046ae8 <_dtoa_r+0xce4>
110460ac:	d8800617 	ldw	r2,24(sp)
110460b0:	d8000d15 	stw	zero,52(sp)
110460b4:	10bfffc4 	addi	r2,r2,-1
110460b8:	d8800615 	stw	r2,24(sp)
110460bc:	ad29c83a 	sub	r20,r21,r20
110460c0:	a53fffc4 	addi	r20,r20,-1
110460c4:	a0026616 	blt	r20,zero,11046a60 <_dtoa_r+0xc5c>
110460c8:	dd000715 	stw	r20,28(sp)
110460cc:	d8000815 	stw	zero,32(sp)
110460d0:	d8800617 	ldw	r2,24(sp)
110460d4:	10025a16 	blt	r2,zero,11046a40 <_dtoa_r+0xc3c>
110460d8:	d8c00717 	ldw	r3,28(sp)
110460dc:	d8800b15 	stw	r2,44(sp)
110460e0:	d8000a15 	stw	zero,40(sp)
110460e4:	1887883a 	add	r3,r3,r2
110460e8:	d8c00715 	stw	r3,28(sp)
110460ec:	d9c00417 	ldw	r7,16(sp)
110460f0:	00800244 	movi	r2,9
110460f4:	11c10536 	bltu	r2,r7,1104650c <_dtoa_r+0x708>
110460f8:	00800144 	movi	r2,5
110460fc:	11c4c60e 	bge	r2,r7,11047418 <_dtoa_r+0x1614>
11046100:	39ffff04 	addi	r7,r7,-4
11046104:	d9c00415 	stw	r7,16(sp)
11046108:	0027883a 	mov	r19,zero
1104610c:	d9c00417 	ldw	r7,16(sp)
11046110:	008000c4 	movi	r2,3
11046114:	3883a226 	beq	r7,r2,11046fa0 <_dtoa_r+0x119c>
11046118:	11c2bc16 	blt	r2,r7,11046c0c <_dtoa_r+0xe08>
1104611c:	00800084 	movi	r2,2
11046120:	3880fb1e 	bne	r7,r2,11046510 <_dtoa_r+0x70c>
11046124:	d8000c15 	stw	zero,48(sp)
11046128:	d9002117 	ldw	r4,132(sp)
1104612c:	0103ae0e 	bge	zero,r4,11046fe8 <_dtoa_r+0x11e4>
11046130:	2025883a 	mov	r18,r4
11046134:	d9000e15 	stw	r4,56(sp)
11046138:	d9000915 	stw	r4,36(sp)
1104613c:	80001115 	stw	zero,68(r16)
11046140:	008005c4 	movi	r2,23
11046144:	1484b22e 	bgeu	r2,r18,11047410 <_dtoa_r+0x160c>
11046148:	00c00044 	movi	r3,1
1104614c:	00800104 	movi	r2,4
11046150:	1085883a 	add	r2,r2,r2
11046154:	11000504 	addi	r4,r2,20
11046158:	180b883a 	mov	r5,r3
1104615c:	18c00044 	addi	r3,r3,1
11046160:	913ffb2e 	bgeu	r18,r4,11046150 <_dtoa_r+0x34c>
11046164:	81401115 	stw	r5,68(r16)
11046168:	8009883a 	mov	r4,r16
1104616c:	104915c0 	call	1104915c <_Balloc>
11046170:	102f883a 	mov	r23,r2
11046174:	80801015 	stw	r2,64(r16)
11046178:	00800384 	movi	r2,14
1104617c:	1480f036 	bltu	r2,r18,11046540 <_dtoa_r+0x73c>
11046180:	9800ef26 	beq	r19,zero,11046540 <_dtoa_r+0x73c>
11046184:	d8800617 	ldw	r2,24(sp)
11046188:	00839c0e 	bge	zero,r2,11046ffc <_dtoa_r+0x11f8>
1104618c:	d8c00617 	ldw	r3,24(sp)
11046190:	108003cc 	andi	r2,r2,15
11046194:	100490fa 	slli	r2,r2,3
11046198:	182bd13a 	srai	r21,r3,4
1104619c:	00c00034 	movhi	r3,0
110461a0:	18c33604 	addi	r3,r3,3288
110461a4:	1885883a 	add	r2,r3,r2
110461a8:	a8c0040c 	andi	r3,r21,16
110461ac:	12800017 	ldw	r10,0(r2)
110461b0:	15800117 	ldw	r22,4(r2)
110461b4:	18038726 	beq	r3,zero,11046fd4 <_dtoa_r+0x11d0>
110461b8:	00800034 	movhi	r2,0
110461bc:	10832c04 	addi	r2,r2,3248
110461c0:	11800817 	ldw	r6,32(r2)
110461c4:	11c00917 	ldw	r7,36(r2)
110461c8:	d9000317 	ldw	r4,12(sp)
110461cc:	880b883a 	mov	r5,r17
110461d0:	da801515 	stw	r10,84(sp)
110461d4:	1042e480 	call	11042e48 <__divdf3>
110461d8:	da801517 	ldw	r10,84(sp)
110461dc:	d8801015 	stw	r2,64(sp)
110461e0:	1829883a 	mov	r20,r3
110461e4:	ad4003cc 	andi	r21,r21,15
110461e8:	048000c4 	movi	r18,3
110461ec:	a8001126 	beq	r21,zero,11046234 <_dtoa_r+0x430>
110461f0:	04c00034 	movhi	r19,0
110461f4:	9cc32c04 	addi	r19,r19,3248
110461f8:	5005883a 	mov	r2,r10
110461fc:	b007883a 	mov	r3,r22
11046200:	a980004c 	andi	r6,r21,1
11046204:	1009883a 	mov	r4,r2
11046208:	a82bd07a 	srai	r21,r21,1
1104620c:	180b883a 	mov	r5,r3
11046210:	30000426 	beq	r6,zero,11046224 <_dtoa_r+0x420>
11046214:	99800017 	ldw	r6,0(r19)
11046218:	99c00117 	ldw	r7,4(r19)
1104621c:	94800044 	addi	r18,r18,1
11046220:	104b9800 	call	1104b980 <__muldf3>
11046224:	9cc00204 	addi	r19,r19,8
11046228:	a83ff51e 	bne	r21,zero,11046200 <_dtoa_r+0x3fc>
1104622c:	1015883a 	mov	r10,r2
11046230:	182d883a 	mov	r22,r3
11046234:	d9001017 	ldw	r4,64(sp)
11046238:	a00b883a 	mov	r5,r20
1104623c:	500d883a 	mov	r6,r10
11046240:	b00f883a 	mov	r7,r22
11046244:	1042e480 	call	11042e48 <__divdf3>
11046248:	1027883a 	mov	r19,r2
1104624c:	1829883a 	mov	r20,r3
11046250:	d8c00d17 	ldw	r3,52(sp)
11046254:	18000626 	beq	r3,zero,11046270 <_dtoa_r+0x46c>
11046258:	9809883a 	mov	r4,r19
1104625c:	a00b883a 	mov	r5,r20
11046260:	000d883a 	mov	r6,zero
11046264:	01cffc34 	movhi	r7,16368
11046268:	104bde40 	call	1104bde4 <__ltdf2>
1104626c:	10040e16 	blt	r2,zero,110472a8 <_dtoa_r+0x14a4>
11046270:	9009883a 	mov	r4,r18
11046274:	104be400 	call	1104be40 <__floatsidf>
11046278:	1009883a 	mov	r4,r2
1104627c:	180b883a 	mov	r5,r3
11046280:	980d883a 	mov	r6,r19
11046284:	a00f883a 	mov	r7,r20
11046288:	104b9800 	call	1104b980 <__muldf3>
1104628c:	1009883a 	mov	r4,r2
11046290:	180b883a 	mov	r5,r3
11046294:	000d883a 	mov	r6,zero
11046298:	01d00734 	movhi	r7,16412
1104629c:	1042d940 	call	11042d94 <__adddf3>
110462a0:	057f3034 	movhi	r21,64704
110462a4:	1d6b883a 	add	r21,r3,r21
110462a8:	d8c00917 	ldw	r3,36(sp)
110462ac:	1025883a 	mov	r18,r2
110462b0:	18031f26 	beq	r3,zero,11046f30 <_dtoa_r+0x112c>
110462b4:	d8800617 	ldw	r2,24(sp)
110462b8:	dac00917 	ldw	r11,36(sp)
110462bc:	d8801315 	stw	r2,76(sp)
110462c0:	d8c00c17 	ldw	r3,48(sp)
110462c4:	18039026 	beq	r3,zero,11047108 <_dtoa_r+0x1304>
110462c8:	58bfffc4 	addi	r2,r11,-1
110462cc:	100490fa 	slli	r2,r2,3
110462d0:	00c00034 	movhi	r3,0
110462d4:	18c33604 	addi	r3,r3,3288
110462d8:	0009883a 	mov	r4,zero
110462dc:	1885883a 	add	r2,r3,r2
110462e0:	11800017 	ldw	r6,0(r2)
110462e4:	11c00117 	ldw	r7,4(r2)
110462e8:	014ff834 	movhi	r5,16352
110462ec:	dac01615 	stw	r11,88(sp)
110462f0:	1042e480 	call	11042e48 <__divdf3>
110462f4:	900d883a 	mov	r6,r18
110462f8:	a80f883a 	mov	r7,r21
110462fc:	1009883a 	mov	r4,r2
11046300:	180b883a 	mov	r5,r3
11046304:	1042de80 	call	11042de8 <__subdf3>
11046308:	a00b883a 	mov	r5,r20
1104630c:	9809883a 	mov	r4,r19
11046310:	182b883a 	mov	r21,r3
11046314:	d8801015 	stw	r2,64(sp)
11046318:	104bf140 	call	1104bf14 <__fixdfsi>
1104631c:	1009883a 	mov	r4,r2
11046320:	d8801515 	stw	r2,84(sp)
11046324:	104be400 	call	1104be40 <__floatsidf>
11046328:	9809883a 	mov	r4,r19
1104632c:	a00b883a 	mov	r5,r20
11046330:	100d883a 	mov	r6,r2
11046334:	180f883a 	mov	r7,r3
11046338:	1042de80 	call	11042de8 <__subdf3>
1104633c:	da401517 	ldw	r9,84(sp)
11046340:	d9001017 	ldw	r4,64(sp)
11046344:	a80b883a 	mov	r5,r21
11046348:	4d000c04 	addi	r20,r9,48
1104634c:	bd000005 	stb	r20,0(r23)
11046350:	100d883a 	mov	r6,r2
11046354:	180f883a 	mov	r7,r3
11046358:	bd800044 	addi	r22,r23,1
1104635c:	1025883a 	mov	r18,r2
11046360:	1827883a 	mov	r19,r3
11046364:	104bd1c0 	call	1104bd1c <__gtdf2>
11046368:	00842216 	blt	zero,r2,110473f4 <_dtoa_r+0x15f0>
1104636c:	0009883a 	mov	r4,zero
11046370:	014ffc34 	movhi	r5,16368
11046374:	900d883a 	mov	r6,r18
11046378:	980f883a 	mov	r7,r19
1104637c:	1042de80 	call	11042de8 <__subdf3>
11046380:	d9001017 	ldw	r4,64(sp)
11046384:	a80b883a 	mov	r5,r21
11046388:	100d883a 	mov	r6,r2
1104638c:	180f883a 	mov	r7,r3
11046390:	104bd1c0 	call	1104bd1c <__gtdf2>
11046394:	dac01617 	ldw	r11,88(sp)
11046398:	00841316 	blt	zero,r2,110473e8 <_dtoa_r+0x15e4>
1104639c:	00800044 	movi	r2,1
110463a0:	12c0670e 	bge	r2,r11,11046540 <_dtoa_r+0x73c>
110463a4:	bad7883a 	add	r11,r23,r11
110463a8:	df001115 	stw	fp,68(sp)
110463ac:	dc401215 	stw	r17,72(sp)
110463b0:	5839883a 	mov	fp,r11
110463b4:	dc401017 	ldw	r17,64(sp)
110463b8:	00000806 	br	110463dc <_dtoa_r+0x5d8>
110463bc:	1042de80 	call	11042de8 <__subdf3>
110463c0:	1009883a 	mov	r4,r2
110463c4:	180b883a 	mov	r5,r3
110463c8:	880d883a 	mov	r6,r17
110463cc:	a80f883a 	mov	r7,r21
110463d0:	104bde40 	call	1104bde4 <__ltdf2>
110463d4:	1003ee16 	blt	r2,zero,11047390 <_dtoa_r+0x158c>
110463d8:	b703f126 	beq	r22,fp,110473a0 <_dtoa_r+0x159c>
110463dc:	8809883a 	mov	r4,r17
110463e0:	a80b883a 	mov	r5,r21
110463e4:	000d883a 	mov	r6,zero
110463e8:	01d00934 	movhi	r7,16420
110463ec:	104b9800 	call	1104b980 <__muldf3>
110463f0:	000d883a 	mov	r6,zero
110463f4:	01d00934 	movhi	r7,16420
110463f8:	9009883a 	mov	r4,r18
110463fc:	980b883a 	mov	r5,r19
11046400:	1023883a 	mov	r17,r2
11046404:	182b883a 	mov	r21,r3
11046408:	104b9800 	call	1104b980 <__muldf3>
1104640c:	180b883a 	mov	r5,r3
11046410:	1009883a 	mov	r4,r2
11046414:	1825883a 	mov	r18,r3
11046418:	1027883a 	mov	r19,r2
1104641c:	104bf140 	call	1104bf14 <__fixdfsi>
11046420:	1009883a 	mov	r4,r2
11046424:	1029883a 	mov	r20,r2
11046428:	104be400 	call	1104be40 <__floatsidf>
1104642c:	9809883a 	mov	r4,r19
11046430:	900b883a 	mov	r5,r18
11046434:	100d883a 	mov	r6,r2
11046438:	180f883a 	mov	r7,r3
1104643c:	1042de80 	call	11042de8 <__subdf3>
11046440:	a5000c04 	addi	r20,r20,48
11046444:	b5000005 	stb	r20,0(r22)
11046448:	1009883a 	mov	r4,r2
1104644c:	180b883a 	mov	r5,r3
11046450:	880d883a 	mov	r6,r17
11046454:	a80f883a 	mov	r7,r21
11046458:	1025883a 	mov	r18,r2
1104645c:	1827883a 	mov	r19,r3
11046460:	104bde40 	call	1104bde4 <__ltdf2>
11046464:	b5800044 	addi	r22,r22,1
11046468:	0009883a 	mov	r4,zero
1104646c:	014ffc34 	movhi	r5,16368
11046470:	900d883a 	mov	r6,r18
11046474:	980f883a 	mov	r7,r19
11046478:	103fd00e 	bge	r2,zero,110463bc <_dtoa_r+0x5b8>
1104647c:	d9001317 	ldw	r4,76(sp)
11046480:	df001117 	ldw	fp,68(sp)
11046484:	d9000615 	stw	r4,24(sp)
11046488:	8009883a 	mov	r4,r16
1104648c:	e00b883a 	mov	r5,fp
11046490:	10492040 	call	11049204 <_Bfree>
11046494:	d9c00617 	ldw	r7,24(sp)
11046498:	d8c02217 	ldw	r3,136(sp)
1104649c:	d9002417 	ldw	r4,144(sp)
110464a0:	b0000005 	stb	zero,0(r22)
110464a4:	38800044 	addi	r2,r7,1
110464a8:	18800015 	stw	r2,0(r3)
110464ac:	203e8426 	beq	r4,zero,11045ec0 <_dtoa_r+0xbc>
110464b0:	25800015 	stw	r22,0(r4)
110464b4:	003e8206 	br	11045ec0 <_dtoa_r+0xbc>
110464b8:	00800434 	movhi	r2,16
110464bc:	10bfffc4 	addi	r2,r2,-1
110464c0:	90a4703a 	and	r18,r18,r2
110464c4:	903e901e 	bne	r18,zero,11045f08 <_dtoa_r+0x104>
110464c8:	05c00034 	movhi	r23,0
110464cc:	bdc30d04 	addi	r23,r23,3124
110464d0:	003e8f06 	br	11045f10 <_dtoa_r+0x10c>
110464d4:	b8800204 	addi	r2,r23,8
110464d8:	003e9206 	br	11045f24 <_dtoa_r+0x120>
110464dc:	01400434 	movhi	r5,16
110464e0:	297fffc4 	addi	r5,r5,-1
110464e4:	894a703a 	and	r5,r17,r5
110464e8:	d9000317 	ldw	r4,12(sp)
110464ec:	294ffc34 	orhi	r5,r5,16368
110464f0:	a53f0044 	addi	r20,r20,-1023
110464f4:	dd400217 	ldw	r21,8(sp)
110464f8:	d8000f15 	stw	zero,60(sp)
110464fc:	003eb106 	br	11045fc4 <_dtoa_r+0x1c0>
11046500:	05c00034 	movhi	r23,0
11046504:	bdc30404 	addi	r23,r23,3088
11046508:	003e6d06 	br	11045ec0 <_dtoa_r+0xbc>
1104650c:	d8000415 	stw	zero,16(sp)
11046510:	80001115 	stw	zero,68(r16)
11046514:	8009883a 	mov	r4,r16
11046518:	000b883a 	mov	r5,zero
1104651c:	104915c0 	call	1104915c <_Balloc>
11046520:	01ffffc4 	movi	r7,-1
11046524:	102f883a 	mov	r23,r2
11046528:	80801015 	stw	r2,64(r16)
1104652c:	00800044 	movi	r2,1
11046530:	d9c00915 	stw	r7,36(sp)
11046534:	d8002115 	stw	zero,132(sp)
11046538:	d9c00e15 	stw	r7,56(sp)
1104653c:	d8800c15 	stw	r2,48(sp)
11046540:	d8800117 	ldw	r2,4(sp)
11046544:	10008b16 	blt	r2,zero,11046774 <_dtoa_r+0x970>
11046548:	d9000617 	ldw	r4,24(sp)
1104654c:	00c00384 	movi	r3,14
11046550:	19008816 	blt	r3,r4,11046774 <_dtoa_r+0x970>
11046554:	200490fa 	slli	r2,r4,3
11046558:	d9c02117 	ldw	r7,132(sp)
1104655c:	00c00034 	movhi	r3,0
11046560:	18c33604 	addi	r3,r3,3288
11046564:	1885883a 	add	r2,r3,r2
11046568:	14800017 	ldw	r18,0(r2)
1104656c:	14c00117 	ldw	r19,4(r2)
11046570:	3801c916 	blt	r7,zero,11046c98 <_dtoa_r+0xe94>
11046574:	d9000317 	ldw	r4,12(sp)
11046578:	900d883a 	mov	r6,r18
1104657c:	980f883a 	mov	r7,r19
11046580:	880b883a 	mov	r5,r17
11046584:	1042e480 	call	11042e48 <__divdf3>
11046588:	180b883a 	mov	r5,r3
1104658c:	1009883a 	mov	r4,r2
11046590:	104bf140 	call	1104bf14 <__fixdfsi>
11046594:	1009883a 	mov	r4,r2
11046598:	102b883a 	mov	r21,r2
1104659c:	104be400 	call	1104be40 <__floatsidf>
110465a0:	1009883a 	mov	r4,r2
110465a4:	180b883a 	mov	r5,r3
110465a8:	900d883a 	mov	r6,r18
110465ac:	980f883a 	mov	r7,r19
110465b0:	104b9800 	call	1104b980 <__muldf3>
110465b4:	d9000317 	ldw	r4,12(sp)
110465b8:	880b883a 	mov	r5,r17
110465bc:	100d883a 	mov	r6,r2
110465c0:	180f883a 	mov	r7,r3
110465c4:	1042de80 	call	11042de8 <__subdf3>
110465c8:	d9c00917 	ldw	r7,36(sp)
110465cc:	1009883a 	mov	r4,r2
110465d0:	a8800c04 	addi	r2,r21,48
110465d4:	b8800005 	stb	r2,0(r23)
110465d8:	01800044 	movi	r6,1
110465dc:	180b883a 	mov	r5,r3
110465e0:	2005883a 	mov	r2,r4
110465e4:	bd800044 	addi	r22,r23,1
110465e8:	39803726 	beq	r7,r6,110466c8 <_dtoa_r+0x8c4>
110465ec:	000d883a 	mov	r6,zero
110465f0:	01d00934 	movhi	r7,16420
110465f4:	104b9800 	call	1104b980 <__muldf3>
110465f8:	1009883a 	mov	r4,r2
110465fc:	180b883a 	mov	r5,r3
11046600:	000d883a 	mov	r6,zero
11046604:	000f883a 	mov	r7,zero
11046608:	1029883a 	mov	r20,r2
1104660c:	1823883a 	mov	r17,r3
11046610:	104bc640 	call	1104bc64 <__eqdf2>
11046614:	103f9c26 	beq	r2,zero,11046488 <_dtoa_r+0x684>
11046618:	dd400917 	ldw	r21,36(sp)
1104661c:	dc000415 	stw	r16,16(sp)
11046620:	00000906 	br	11046648 <_dtoa_r+0x844>
11046624:	104b9800 	call	1104b980 <__muldf3>
11046628:	1009883a 	mov	r4,r2
1104662c:	180b883a 	mov	r5,r3
11046630:	000d883a 	mov	r6,zero
11046634:	000f883a 	mov	r7,zero
11046638:	1029883a 	mov	r20,r2
1104663c:	1823883a 	mov	r17,r3
11046640:	104bc640 	call	1104bc64 <__eqdf2>
11046644:	10022926 	beq	r2,zero,11046eec <_dtoa_r+0x10e8>
11046648:	900d883a 	mov	r6,r18
1104664c:	980f883a 	mov	r7,r19
11046650:	a009883a 	mov	r4,r20
11046654:	880b883a 	mov	r5,r17
11046658:	1042e480 	call	11042e48 <__divdf3>
1104665c:	180b883a 	mov	r5,r3
11046660:	1009883a 	mov	r4,r2
11046664:	104bf140 	call	1104bf14 <__fixdfsi>
11046668:	1009883a 	mov	r4,r2
1104666c:	1021883a 	mov	r16,r2
11046670:	104be400 	call	1104be40 <__floatsidf>
11046674:	1009883a 	mov	r4,r2
11046678:	180b883a 	mov	r5,r3
1104667c:	900d883a 	mov	r6,r18
11046680:	980f883a 	mov	r7,r19
11046684:	104b9800 	call	1104b980 <__muldf3>
11046688:	a009883a 	mov	r4,r20
1104668c:	880b883a 	mov	r5,r17
11046690:	100d883a 	mov	r6,r2
11046694:	180f883a 	mov	r7,r3
11046698:	1042de80 	call	11042de8 <__subdf3>
1104669c:	82400c04 	addi	r9,r16,48
110466a0:	b2400005 	stb	r9,0(r22)
110466a4:	b5800044 	addi	r22,r22,1
110466a8:	b5d3c83a 	sub	r9,r22,r23
110466ac:	000d883a 	mov	r6,zero
110466b0:	01d00934 	movhi	r7,16420
110466b4:	1009883a 	mov	r4,r2
110466b8:	180b883a 	mov	r5,r3
110466bc:	aa7fd91e 	bne	r21,r9,11046624 <_dtoa_r+0x820>
110466c0:	802b883a 	mov	r21,r16
110466c4:	dc000417 	ldw	r16,16(sp)
110466c8:	1009883a 	mov	r4,r2
110466cc:	180b883a 	mov	r5,r3
110466d0:	100d883a 	mov	r6,r2
110466d4:	180f883a 	mov	r7,r3
110466d8:	1042d940 	call	11042d94 <__adddf3>
110466dc:	9009883a 	mov	r4,r18
110466e0:	980b883a 	mov	r5,r19
110466e4:	100d883a 	mov	r6,r2
110466e8:	180f883a 	mov	r7,r3
110466ec:	1023883a 	mov	r17,r2
110466f0:	1829883a 	mov	r20,r3
110466f4:	104bde40 	call	1104bde4 <__ltdf2>
110466f8:	10000816 	blt	r2,zero,1104671c <_dtoa_r+0x918>
110466fc:	9009883a 	mov	r4,r18
11046700:	980b883a 	mov	r5,r19
11046704:	880d883a 	mov	r6,r17
11046708:	a00f883a 	mov	r7,r20
1104670c:	104bc640 	call	1104bc64 <__eqdf2>
11046710:	103f5d1e 	bne	r2,zero,11046488 <_dtoa_r+0x684>
11046714:	ad40004c 	andi	r21,r21,1
11046718:	a83f5b26 	beq	r21,zero,11046488 <_dtoa_r+0x684>
1104671c:	b53fffc3 	ldbu	r20,-1(r22)
11046720:	b0ffff84 	addi	r3,r22,-2
11046724:	01400e44 	movi	r5,57
11046728:	00000306 	br	11046738 <_dtoa_r+0x934>
1104672c:	1d000003 	ldbu	r20,0(r3)
11046730:	102d883a 	mov	r22,r2
11046734:	18ffffc4 	addi	r3,r3,-1
11046738:	a1003fcc 	andi	r4,r20,255
1104673c:	2100201c 	xori	r4,r4,128
11046740:	213fe004 	addi	r4,r4,-128
11046744:	b0bfffc4 	addi	r2,r22,-1
11046748:	2142ca1e 	bne	r4,r5,11047274 <_dtoa_r+0x1470>
1104674c:	b8bff71e 	bne	r23,r2,1104672c <_dtoa_r+0x928>
11046750:	d8800617 	ldw	r2,24(sp)
11046754:	05000c44 	movi	r20,49
11046758:	10800044 	addi	r2,r2,1
1104675c:	d8800615 	stw	r2,24(sp)
11046760:	00800c04 	movi	r2,48
11046764:	b8800005 	stb	r2,0(r23)
11046768:	b805883a 	mov	r2,r23
1104676c:	15000005 	stb	r20,0(r2)
11046770:	003f4506 	br	11046488 <_dtoa_r+0x684>
11046774:	d9c00c17 	ldw	r7,48(sp)
11046778:	3800c926 	beq	r7,zero,11046aa0 <_dtoa_r+0xc9c>
1104677c:	d9c00417 	ldw	r7,16(sp)
11046780:	00c00044 	movi	r3,1
11046784:	19c16c0e 	bge	r3,r7,11046d38 <_dtoa_r+0xf34>
11046788:	d9000917 	ldw	r4,36(sp)
1104678c:	d9c00a17 	ldw	r7,40(sp)
11046790:	24ffffc4 	addi	r19,r4,-1
11046794:	3cc20716 	blt	r7,r19,11046fb4 <_dtoa_r+0x11b0>
11046798:	3ce7c83a 	sub	r19,r7,r19
1104679c:	d9c00917 	ldw	r7,36(sp)
110467a0:	3802ae16 	blt	r7,zero,1104725c <_dtoa_r+0x1458>
110467a4:	dc800817 	ldw	r18,32(sp)
110467a8:	d8800917 	ldw	r2,36(sp)
110467ac:	d8c00817 	ldw	r3,32(sp)
110467b0:	d9c00717 	ldw	r7,28(sp)
110467b4:	8009883a 	mov	r4,r16
110467b8:	1887883a 	add	r3,r3,r2
110467bc:	388f883a 	add	r7,r7,r2
110467c0:	01400044 	movi	r5,1
110467c4:	d8c00815 	stw	r3,32(sp)
110467c8:	d9c00715 	stw	r7,28(sp)
110467cc:	104955c0 	call	1104955c <__i2b>
110467d0:	102b883a 	mov	r21,r2
110467d4:	90000a26 	beq	r18,zero,11046800 <_dtoa_r+0x9fc>
110467d8:	d8800717 	ldw	r2,28(sp)
110467dc:	0080080e 	bge	zero,r2,11046800 <_dtoa_r+0x9fc>
110467e0:	90812b16 	blt	r18,r2,11046c90 <_dtoa_r+0xe8c>
110467e4:	d8c00817 	ldw	r3,32(sp)
110467e8:	d9000717 	ldw	r4,28(sp)
110467ec:	90a5c83a 	sub	r18,r18,r2
110467f0:	1887c83a 	sub	r3,r3,r2
110467f4:	2089c83a 	sub	r4,r4,r2
110467f8:	d8c00815 	stw	r3,32(sp)
110467fc:	d9000715 	stw	r4,28(sp)
11046800:	d9c00a17 	ldw	r7,40(sp)
11046804:	01c0140e 	bge	zero,r7,11046858 <_dtoa_r+0xa54>
11046808:	d8800c17 	ldw	r2,48(sp)
1104680c:	1001de26 	beq	r2,zero,11046f88 <_dtoa_r+0x1184>
11046810:	04c00e0e 	bge	zero,r19,1104684c <_dtoa_r+0xa48>
11046814:	a80b883a 	mov	r5,r21
11046818:	8009883a 	mov	r4,r16
1104681c:	980d883a 	mov	r6,r19
11046820:	10497780 	call	11049778 <__pow5mult>
11046824:	e00d883a 	mov	r6,fp
11046828:	8009883a 	mov	r4,r16
1104682c:	100b883a 	mov	r5,r2
11046830:	102b883a 	mov	r21,r2
11046834:	10495980 	call	11049598 <__multiply>
11046838:	1029883a 	mov	r20,r2
1104683c:	e00b883a 	mov	r5,fp
11046840:	8009883a 	mov	r4,r16
11046844:	10492040 	call	11049204 <_Bfree>
11046848:	a039883a 	mov	fp,r20
1104684c:	d8c00a17 	ldw	r3,40(sp)
11046850:	1ccdc83a 	sub	r6,r3,r19
11046854:	3001291e 	bne	r6,zero,11046cfc <_dtoa_r+0xef8>
11046858:	8009883a 	mov	r4,r16
1104685c:	01400044 	movi	r5,1
11046860:	104955c0 	call	1104955c <__i2b>
11046864:	d9000b17 	ldw	r4,44(sp)
11046868:	1029883a 	mov	r20,r2
1104686c:	0100050e 	bge	zero,r4,11046884 <_dtoa_r+0xa80>
11046870:	d9800b17 	ldw	r6,44(sp)
11046874:	8009883a 	mov	r4,r16
11046878:	100b883a 	mov	r5,r2
1104687c:	10497780 	call	11049778 <__pow5mult>
11046880:	1029883a 	mov	r20,r2
11046884:	d9c00417 	ldw	r7,16(sp)
11046888:	00800044 	movi	r2,1
1104688c:	11c0f00e 	bge	r2,r7,11046c50 <_dtoa_r+0xe4c>
11046890:	0023883a 	mov	r17,zero
11046894:	d8800b17 	ldw	r2,44(sp)
11046898:	1001741e 	bne	r2,zero,11046e6c <_dtoa_r+0x1068>
1104689c:	00800044 	movi	r2,1
110468a0:	d8c00717 	ldw	r3,28(sp)
110468a4:	10c5883a 	add	r2,r2,r3
110468a8:	108007cc 	andi	r2,r2,31
110468ac:	10008026 	beq	r2,zero,11046ab0 <_dtoa_r+0xcac>
110468b0:	01000804 	movi	r4,32
110468b4:	2089c83a 	sub	r4,r4,r2
110468b8:	00c00104 	movi	r3,4
110468bc:	1902d00e 	bge	r3,r4,11047400 <_dtoa_r+0x15fc>
110468c0:	d9000817 	ldw	r4,32(sp)
110468c4:	d9c00717 	ldw	r7,28(sp)
110468c8:	00c00704 	movi	r3,28
110468cc:	1885c83a 	sub	r2,r3,r2
110468d0:	2089883a 	add	r4,r4,r2
110468d4:	388f883a 	add	r7,r7,r2
110468d8:	d9000815 	stw	r4,32(sp)
110468dc:	90a5883a 	add	r18,r18,r2
110468e0:	d9c00715 	stw	r7,28(sp)
110468e4:	d9c00817 	ldw	r7,32(sp)
110468e8:	01c0050e 	bge	zero,r7,11046900 <_dtoa_r+0xafc>
110468ec:	e00b883a 	mov	r5,fp
110468f0:	8009883a 	mov	r4,r16
110468f4:	380d883a 	mov	r6,r7
110468f8:	10498a40 	call	110498a4 <__lshift>
110468fc:	1039883a 	mov	fp,r2
11046900:	d8800717 	ldw	r2,28(sp)
11046904:	0080050e 	bge	zero,r2,1104691c <_dtoa_r+0xb18>
11046908:	a00b883a 	mov	r5,r20
1104690c:	8009883a 	mov	r4,r16
11046910:	100d883a 	mov	r6,r2
11046914:	10498a40 	call	110498a4 <__lshift>
11046918:	1029883a 	mov	r20,r2
1104691c:	d8c00d17 	ldw	r3,52(sp)
11046920:	1801401e 	bne	r3,zero,11046e24 <_dtoa_r+0x1020>
11046924:	d8800917 	ldw	r2,36(sp)
11046928:	00815a0e 	bge	zero,r2,11046e94 <_dtoa_r+0x1090>
1104692c:	d8c00c17 	ldw	r3,48(sp)
11046930:	18006f1e 	bne	r3,zero,11046af0 <_dtoa_r+0xcec>
11046934:	b823883a 	mov	r17,r23
11046938:	dc800917 	ldw	r18,36(sp)
1104693c:	00000206 	br	11046948 <_dtoa_r+0xb44>
11046940:	104922c0 	call	1104922c <__multadd>
11046944:	1039883a 	mov	fp,r2
11046948:	e009883a 	mov	r4,fp
1104694c:	a00b883a 	mov	r5,r20
11046950:	1045bfc0 	call	11045bfc <quorem>
11046954:	10800c04 	addi	r2,r2,48
11046958:	88800005 	stb	r2,0(r17)
1104695c:	8c400044 	addi	r17,r17,1
11046960:	8dc7c83a 	sub	r3,r17,r23
11046964:	8009883a 	mov	r4,r16
11046968:	e00b883a 	mov	r5,fp
1104696c:	01800284 	movi	r6,10
11046970:	000f883a 	mov	r7,zero
11046974:	1cbff216 	blt	r3,r18,11046940 <_dtoa_r+0xb3c>
11046978:	dd800917 	ldw	r22,36(sp)
1104697c:	1007883a 	mov	r3,r2
11046980:	05823a0e 	bge	zero,r22,1104726c <_dtoa_r+0x1468>
11046984:	bdad883a 	add	r22,r23,r22
11046988:	0023883a 	mov	r17,zero
1104698c:	e00b883a 	mov	r5,fp
11046990:	01800044 	movi	r6,1
11046994:	8009883a 	mov	r4,r16
11046998:	d8c01515 	stw	r3,84(sp)
1104699c:	10498a40 	call	110498a4 <__lshift>
110469a0:	1009883a 	mov	r4,r2
110469a4:	a00b883a 	mov	r5,r20
110469a8:	1039883a 	mov	fp,r2
110469ac:	1049a000 	call	11049a00 <__mcmp>
110469b0:	d8c01517 	ldw	r3,84(sp)
110469b4:	0080d60e 	bge	zero,r2,11046d10 <_dtoa_r+0xf0c>
110469b8:	b13fffc3 	ldbu	r4,-1(r22)
110469bc:	b0ffff84 	addi	r3,r22,-2
110469c0:	01800e44 	movi	r6,57
110469c4:	00000306 	br	110469d4 <_dtoa_r+0xbd0>
110469c8:	19000003 	ldbu	r4,0(r3)
110469cc:	102d883a 	mov	r22,r2
110469d0:	18ffffc4 	addi	r3,r3,-1
110469d4:	21403fcc 	andi	r5,r4,255
110469d8:	2940201c 	xori	r5,r5,128
110469dc:	297fe004 	addi	r5,r5,-128
110469e0:	b0bfffc4 	addi	r2,r22,-1
110469e4:	2981a71e 	bne	r5,r6,11047084 <_dtoa_r+0x1280>
110469e8:	b8bff71e 	bne	r23,r2,110469c8 <_dtoa_r+0xbc4>
110469ec:	d8800617 	ldw	r2,24(sp)
110469f0:	10800044 	addi	r2,r2,1
110469f4:	d8800615 	stw	r2,24(sp)
110469f8:	00800c44 	movi	r2,49
110469fc:	b8800005 	stb	r2,0(r23)
11046a00:	8009883a 	mov	r4,r16
11046a04:	a00b883a 	mov	r5,r20
11046a08:	10492040 	call	11049204 <_Bfree>
11046a0c:	a83e9e26 	beq	r21,zero,11046488 <_dtoa_r+0x684>
11046a10:	88000426 	beq	r17,zero,11046a24 <_dtoa_r+0xc20>
11046a14:	8d400326 	beq	r17,r21,11046a24 <_dtoa_r+0xc20>
11046a18:	8009883a 	mov	r4,r16
11046a1c:	880b883a 	mov	r5,r17
11046a20:	10492040 	call	11049204 <_Bfree>
11046a24:	8009883a 	mov	r4,r16
11046a28:	a80b883a 	mov	r5,r21
11046a2c:	10492040 	call	11049204 <_Bfree>
11046a30:	003e9506 	br	11046488 <_dtoa_r+0x684>
11046a34:	00c00044 	movi	r3,1
11046a38:	d8c00d15 	stw	r3,52(sp)
11046a3c:	003d9f06 	br	110460bc <_dtoa_r+0x2b8>
11046a40:	d9000817 	ldw	r4,32(sp)
11046a44:	d8800617 	ldw	r2,24(sp)
11046a48:	d8000b15 	stw	zero,44(sp)
11046a4c:	2089c83a 	sub	r4,r4,r2
11046a50:	0087c83a 	sub	r3,zero,r2
11046a54:	d9000815 	stw	r4,32(sp)
11046a58:	d8c00a15 	stw	r3,40(sp)
11046a5c:	003da306 	br	110460ec <_dtoa_r+0x2e8>
11046a60:	0529c83a 	sub	r20,zero,r20
11046a64:	dd000815 	stw	r20,32(sp)
11046a68:	d8000715 	stw	zero,28(sp)
11046a6c:	003d9806 	br	110460d0 <_dtoa_r+0x2cc>
11046a70:	d9000617 	ldw	r4,24(sp)
11046a74:	104be400 	call	1104be40 <__floatsidf>
11046a78:	1009883a 	mov	r4,r2
11046a7c:	180b883a 	mov	r5,r3
11046a80:	980d883a 	mov	r6,r19
11046a84:	900f883a 	mov	r7,r18
11046a88:	104bcc00 	call	1104bcc0 <__nedf2>
11046a8c:	103d7a26 	beq	r2,zero,11046078 <_dtoa_r+0x274>
11046a90:	d8800617 	ldw	r2,24(sp)
11046a94:	10bfffc4 	addi	r2,r2,-1
11046a98:	d8800615 	stw	r2,24(sp)
11046a9c:	003d7606 	br	11046078 <_dtoa_r+0x274>
11046aa0:	dcc00a17 	ldw	r19,40(sp)
11046aa4:	dc800817 	ldw	r18,32(sp)
11046aa8:	002b883a 	mov	r21,zero
11046aac:	003f4906 	br	110467d4 <_dtoa_r+0x9d0>
11046ab0:	00800704 	movi	r2,28
11046ab4:	d8c00817 	ldw	r3,32(sp)
11046ab8:	d9000717 	ldw	r4,28(sp)
11046abc:	90a5883a 	add	r18,r18,r2
11046ac0:	1887883a 	add	r3,r3,r2
11046ac4:	2089883a 	add	r4,r4,r2
11046ac8:	d8c00815 	stw	r3,32(sp)
11046acc:	d9000715 	stw	r4,28(sp)
11046ad0:	003f8406 	br	110468e4 <_dtoa_r+0xae0>
11046ad4:	d9c00317 	ldw	r7,12(sp)
11046ad8:	013efb84 	movi	r4,-1042
11046adc:	2509c83a 	sub	r4,r4,r20
11046ae0:	3908983a 	sll	r4,r7,r4
11046ae4:	003d3006 	br	11045fa8 <_dtoa_r+0x1a4>
11046ae8:	d8000d15 	stw	zero,52(sp)
11046aec:	003d7306 	br	110460bc <_dtoa_r+0x2b8>
11046af0:	0480050e 	bge	zero,r18,11046b08 <_dtoa_r+0xd04>
11046af4:	a80b883a 	mov	r5,r21
11046af8:	8009883a 	mov	r4,r16
11046afc:	900d883a 	mov	r6,r18
11046b00:	10498a40 	call	110498a4 <__lshift>
11046b04:	102b883a 	mov	r21,r2
11046b08:	8801611e 	bne	r17,zero,11047090 <_dtoa_r+0x128c>
11046b0c:	a827883a 	mov	r19,r21
11046b10:	d8c00317 	ldw	r3,12(sp)
11046b14:	d9000917 	ldw	r4,36(sp)
11046b18:	b8bfffc4 	addi	r2,r23,-1
11046b1c:	18c0004c 	andi	r3,r3,1
11046b20:	1105883a 	add	r2,r2,r4
11046b24:	b825883a 	mov	r18,r23
11046b28:	d8800515 	stw	r2,20(sp)
11046b2c:	a823883a 	mov	r17,r21
11046b30:	d8c00315 	stw	r3,12(sp)
11046b34:	ddc00715 	stw	r23,28(sp)
11046b38:	e009883a 	mov	r4,fp
11046b3c:	a00b883a 	mov	r5,r20
11046b40:	1045bfc0 	call	11045bfc <quorem>
11046b44:	e009883a 	mov	r4,fp
11046b48:	880b883a 	mov	r5,r17
11046b4c:	102d883a 	mov	r22,r2
11046b50:	1049a000 	call	11049a00 <__mcmp>
11046b54:	980d883a 	mov	r6,r19
11046b58:	8009883a 	mov	r4,r16
11046b5c:	a00b883a 	mov	r5,r20
11046b60:	102b883a 	mov	r21,r2
11046b64:	1049a580 	call	11049a58 <__mdiff>
11046b68:	100d883a 	mov	r6,r2
11046b6c:	10800317 	ldw	r2,12(r2)
11046b70:	b5c00c04 	addi	r23,r22,48
11046b74:	10008c26 	beq	r2,zero,11046da8 <_dtoa_r+0xfa4>
11046b78:	8009883a 	mov	r4,r16
11046b7c:	300b883a 	mov	r5,r6
11046b80:	10492040 	call	11049204 <_Bfree>
11046b84:	00800044 	movi	r2,1
11046b88:	a8007116 	blt	r21,zero,11046d50 <_dtoa_r+0xf4c>
11046b8c:	a800041e 	bne	r21,zero,11046ba0 <_dtoa_r+0xd9c>
11046b90:	d9c00417 	ldw	r7,16(sp)
11046b94:	3800021e 	bne	r7,zero,11046ba0 <_dtoa_r+0xd9c>
11046b98:	d8c00317 	ldw	r3,12(sp)
11046b9c:	18006c26 	beq	r3,zero,11046d50 <_dtoa_r+0xf4c>
11046ba0:	00814c16 	blt	zero,r2,110470d4 <_dtoa_r+0x12d0>
11046ba4:	d8c00517 	ldw	r3,20(sp)
11046ba8:	95400044 	addi	r21,r18,1
11046bac:	95c00005 	stb	r23,0(r18)
11046bb0:	a82d883a 	mov	r22,r21
11046bb4:	90c14d26 	beq	r18,r3,110470ec <_dtoa_r+0x12e8>
11046bb8:	e00b883a 	mov	r5,fp
11046bbc:	8009883a 	mov	r4,r16
11046bc0:	01800284 	movi	r6,10
11046bc4:	000f883a 	mov	r7,zero
11046bc8:	104922c0 	call	1104922c <__multadd>
11046bcc:	1039883a 	mov	fp,r2
11046bd0:	8cc08b26 	beq	r17,r19,11046e00 <_dtoa_r+0xffc>
11046bd4:	880b883a 	mov	r5,r17
11046bd8:	01800284 	movi	r6,10
11046bdc:	000f883a 	mov	r7,zero
11046be0:	8009883a 	mov	r4,r16
11046be4:	104922c0 	call	1104922c <__multadd>
11046be8:	980b883a 	mov	r5,r19
11046bec:	8009883a 	mov	r4,r16
11046bf0:	01800284 	movi	r6,10
11046bf4:	000f883a 	mov	r7,zero
11046bf8:	1023883a 	mov	r17,r2
11046bfc:	104922c0 	call	1104922c <__multadd>
11046c00:	1027883a 	mov	r19,r2
11046c04:	a825883a 	mov	r18,r21
11046c08:	003fcb06 	br	11046b38 <_dtoa_r+0xd34>
11046c0c:	d9c00417 	ldw	r7,16(sp)
11046c10:	00800104 	movi	r2,4
11046c14:	3880e426 	beq	r7,r2,11046fa8 <_dtoa_r+0x11a4>
11046c18:	00800144 	movi	r2,5
11046c1c:	38be3c1e 	bne	r7,r2,11046510 <_dtoa_r+0x70c>
11046c20:	00c00044 	movi	r3,1
11046c24:	d8c00c15 	stw	r3,48(sp)
11046c28:	d9c02117 	ldw	r7,132(sp)
11046c2c:	d8800617 	ldw	r2,24(sp)
11046c30:	388f883a 	add	r7,r7,r2
11046c34:	3c800044 	addi	r18,r7,1
11046c38:	d9c00e15 	stw	r7,56(sp)
11046c3c:	dc800915 	stw	r18,36(sp)
11046c40:	04bd3e16 	blt	zero,r18,1104613c <_dtoa_r+0x338>
11046c44:	80001115 	stw	zero,68(r16)
11046c48:	000b883a 	mov	r5,zero
11046c4c:	003d4606 	br	11046168 <_dtoa_r+0x364>
11046c50:	d8c00317 	ldw	r3,12(sp)
11046c54:	183f0e1e 	bne	r3,zero,11046890 <_dtoa_r+0xa8c>
11046c58:	00c00434 	movhi	r3,16
11046c5c:	18ffffc4 	addi	r3,r3,-1
11046c60:	88c6703a 	and	r3,r17,r3
11046c64:	183f0a1e 	bne	r3,zero,11046890 <_dtoa_r+0xa8c>
11046c68:	8c5ffc2c 	andhi	r17,r17,32752
11046c6c:	883f0826 	beq	r17,zero,11046890 <_dtoa_r+0xa8c>
11046c70:	d9000817 	ldw	r4,32(sp)
11046c74:	d9c00717 	ldw	r7,28(sp)
11046c78:	1023883a 	mov	r17,r2
11046c7c:	2089883a 	add	r4,r4,r2
11046c80:	388f883a 	add	r7,r7,r2
11046c84:	d9000815 	stw	r4,32(sp)
11046c88:	d9c00715 	stw	r7,28(sp)
11046c8c:	003f0106 	br	11046894 <_dtoa_r+0xa90>
11046c90:	9005883a 	mov	r2,r18
11046c94:	003ed306 	br	110467e4 <_dtoa_r+0x9e0>
11046c98:	d8800917 	ldw	r2,36(sp)
11046c9c:	00be3516 	blt	zero,r2,11046574 <_dtoa_r+0x770>
11046ca0:	1000b61e 	bne	r2,zero,11046f7c <_dtoa_r+0x1178>
11046ca4:	9009883a 	mov	r4,r18
11046ca8:	980b883a 	mov	r5,r19
11046cac:	000d883a 	mov	r6,zero
11046cb0:	01d00534 	movhi	r7,16404
11046cb4:	104b9800 	call	1104b980 <__muldf3>
11046cb8:	d9800317 	ldw	r6,12(sp)
11046cbc:	1009883a 	mov	r4,r2
11046cc0:	180b883a 	mov	r5,r3
11046cc4:	880f883a 	mov	r7,r17
11046cc8:	104bd800 	call	1104bd80 <__gedf2>
11046ccc:	0029883a 	mov	r20,zero
11046cd0:	002b883a 	mov	r21,zero
11046cd4:	10007e16 	blt	r2,zero,11046ed0 <_dtoa_r+0x10cc>
11046cd8:	d8802117 	ldw	r2,132(sp)
11046cdc:	b82d883a 	mov	r22,r23
11046ce0:	0084303a 	nor	r2,zero,r2
11046ce4:	d8800615 	stw	r2,24(sp)
11046ce8:	8009883a 	mov	r4,r16
11046cec:	a00b883a 	mov	r5,r20
11046cf0:	10492040 	call	11049204 <_Bfree>
11046cf4:	a83f4b1e 	bne	r21,zero,11046a24 <_dtoa_r+0xc20>
11046cf8:	003de306 	br	11046488 <_dtoa_r+0x684>
11046cfc:	e00b883a 	mov	r5,fp
11046d00:	8009883a 	mov	r4,r16
11046d04:	10497780 	call	11049778 <__pow5mult>
11046d08:	1039883a 	mov	fp,r2
11046d0c:	003ed206 	br	11046858 <_dtoa_r+0xa54>
11046d10:	1000021e 	bne	r2,zero,11046d1c <_dtoa_r+0xf18>
11046d14:	18c0004c 	andi	r3,r3,1
11046d18:	183f271e 	bne	r3,zero,110469b8 <_dtoa_r+0xbb4>
11046d1c:	01000c04 	movi	r4,48
11046d20:	00000106 	br	11046d28 <_dtoa_r+0xf24>
11046d24:	102d883a 	mov	r22,r2
11046d28:	b0bfffc4 	addi	r2,r22,-1
11046d2c:	10c00007 	ldb	r3,0(r2)
11046d30:	193ffc26 	beq	r3,r4,11046d24 <_dtoa_r+0xf20>
11046d34:	003f3206 	br	11046a00 <_dtoa_r+0xbfc>
11046d38:	d8c00f17 	ldw	r3,60(sp)
11046d3c:	18015026 	beq	r3,zero,11047280 <_dtoa_r+0x147c>
11046d40:	10810cc4 	addi	r2,r2,1075
11046d44:	dcc00a17 	ldw	r19,40(sp)
11046d48:	dc800817 	ldw	r18,32(sp)
11046d4c:	003e9706 	br	110467ac <_dtoa_r+0x9a8>
11046d50:	b807883a 	mov	r3,r23
11046d54:	182b883a 	mov	r21,r3
11046d58:	ddc00717 	ldw	r23,28(sp)
11046d5c:	00800e0e 	bge	zero,r2,11046d98 <_dtoa_r+0xf94>
11046d60:	e00b883a 	mov	r5,fp
11046d64:	01800044 	movi	r6,1
11046d68:	8009883a 	mov	r4,r16
11046d6c:	d8c01515 	stw	r3,84(sp)
11046d70:	10498a40 	call	110498a4 <__lshift>
11046d74:	1009883a 	mov	r4,r2
11046d78:	a00b883a 	mov	r5,r20
11046d7c:	1039883a 	mov	fp,r2
11046d80:	1049a000 	call	11049a00 <__mcmp>
11046d84:	d8c01517 	ldw	r3,84(sp)
11046d88:	0081880e 	bge	zero,r2,110473ac <_dtoa_r+0x15a8>
11046d8c:	00800e44 	movi	r2,57
11046d90:	b0c00c44 	addi	r3,r22,49
11046d94:	a8816326 	beq	r21,r2,11047324 <_dtoa_r+0x1520>
11046d98:	90c00005 	stb	r3,0(r18)
11046d9c:	95800044 	addi	r22,r18,1
11046da0:	982b883a 	mov	r21,r19
11046da4:	003f1606 	br	11046a00 <_dtoa_r+0xbfc>
11046da8:	300b883a 	mov	r5,r6
11046dac:	e009883a 	mov	r4,fp
11046db0:	d9801515 	stw	r6,84(sp)
11046db4:	1049a000 	call	11049a00 <__mcmp>
11046db8:	d9801517 	ldw	r6,84(sp)
11046dbc:	8009883a 	mov	r4,r16
11046dc0:	d8801515 	stw	r2,84(sp)
11046dc4:	300b883a 	mov	r5,r6
11046dc8:	10492040 	call	11049204 <_Bfree>
11046dcc:	d8801517 	ldw	r2,84(sp)
11046dd0:	103f6d1e 	bne	r2,zero,11046b88 <_dtoa_r+0xd84>
11046dd4:	d9c00417 	ldw	r7,16(sp)
11046dd8:	383f6b1e 	bne	r7,zero,11046b88 <_dtoa_r+0xd84>
11046ddc:	d8c00317 	ldw	r3,12(sp)
11046de0:	183f691e 	bne	r3,zero,11046b88 <_dtoa_r+0xd84>
11046de4:	b807883a 	mov	r3,r23
11046de8:	00800e44 	movi	r2,57
11046dec:	ddc00717 	ldw	r23,28(sp)
11046df0:	18814c26 	beq	r3,r2,11047324 <_dtoa_r+0x1520>
11046df4:	057fe80e 	bge	zero,r21,11046d98 <_dtoa_r+0xf94>
11046df8:	b0c00c44 	addi	r3,r22,49
11046dfc:	003fe606 	br	11046d98 <_dtoa_r+0xf94>
11046e00:	880b883a 	mov	r5,r17
11046e04:	8009883a 	mov	r4,r16
11046e08:	01800284 	movi	r6,10
11046e0c:	000f883a 	mov	r7,zero
11046e10:	104922c0 	call	1104922c <__multadd>
11046e14:	1023883a 	mov	r17,r2
11046e18:	1027883a 	mov	r19,r2
11046e1c:	a825883a 	mov	r18,r21
11046e20:	003f4506 	br	11046b38 <_dtoa_r+0xd34>
11046e24:	e009883a 	mov	r4,fp
11046e28:	a00b883a 	mov	r5,r20
11046e2c:	1049a000 	call	11049a00 <__mcmp>
11046e30:	103ebc0e 	bge	r2,zero,11046924 <_dtoa_r+0xb20>
11046e34:	e00b883a 	mov	r5,fp
11046e38:	8009883a 	mov	r4,r16
11046e3c:	01800284 	movi	r6,10
11046e40:	000f883a 	mov	r7,zero
11046e44:	104922c0 	call	1104922c <__multadd>
11046e48:	1039883a 	mov	fp,r2
11046e4c:	d8800617 	ldw	r2,24(sp)
11046e50:	d8c00c17 	ldw	r3,48(sp)
11046e54:	10bfffc4 	addi	r2,r2,-1
11046e58:	d8800615 	stw	r2,24(sp)
11046e5c:	1801571e 	bne	r3,zero,110473bc <_dtoa_r+0x15b8>
11046e60:	d9c00e17 	ldw	r7,56(sp)
11046e64:	d9c00915 	stw	r7,36(sp)
11046e68:	003eae06 	br	11046924 <_dtoa_r+0xb20>
11046e6c:	a0800417 	ldw	r2,16(r20)
11046e70:	10800104 	addi	r2,r2,4
11046e74:	1085883a 	add	r2,r2,r2
11046e78:	1085883a 	add	r2,r2,r2
11046e7c:	a085883a 	add	r2,r20,r2
11046e80:	11000017 	ldw	r4,0(r2)
11046e84:	10494440 	call	11049444 <__hi0bits>
11046e88:	00c00804 	movi	r3,32
11046e8c:	1885c83a 	sub	r2,r3,r2
11046e90:	003e8306 	br	110468a0 <_dtoa_r+0xa9c>
11046e94:	d9c00417 	ldw	r7,16(sp)
11046e98:	00800084 	movi	r2,2
11046e9c:	11fea30e 	bge	r2,r7,1104692c <_dtoa_r+0xb28>
11046ea0:	d8800917 	ldw	r2,36(sp)
11046ea4:	103f8c1e 	bne	r2,zero,11046cd8 <_dtoa_r+0xed4>
11046ea8:	a00b883a 	mov	r5,r20
11046eac:	8009883a 	mov	r4,r16
11046eb0:	01800144 	movi	r6,5
11046eb4:	000f883a 	mov	r7,zero
11046eb8:	104922c0 	call	1104922c <__multadd>
11046ebc:	e009883a 	mov	r4,fp
11046ec0:	100b883a 	mov	r5,r2
11046ec4:	1029883a 	mov	r20,r2
11046ec8:	1049a000 	call	11049a00 <__mcmp>
11046ecc:	00bf820e 	bge	zero,r2,11046cd8 <_dtoa_r+0xed4>
11046ed0:	00800c44 	movi	r2,49
11046ed4:	b8800005 	stb	r2,0(r23)
11046ed8:	d8800617 	ldw	r2,24(sp)
11046edc:	bd800044 	addi	r22,r23,1
11046ee0:	10800044 	addi	r2,r2,1
11046ee4:	d8800615 	stw	r2,24(sp)
11046ee8:	003f7f06 	br	11046ce8 <_dtoa_r+0xee4>
11046eec:	dc000417 	ldw	r16,16(sp)
11046ef0:	003d6506 	br	11046488 <_dtoa_r+0x684>
11046ef4:	9009883a 	mov	r4,r18
11046ef8:	104be400 	call	1104be40 <__floatsidf>
11046efc:	1009883a 	mov	r4,r2
11046f00:	180b883a 	mov	r5,r3
11046f04:	980d883a 	mov	r6,r19
11046f08:	a00f883a 	mov	r7,r20
11046f0c:	104b9800 	call	1104b980 <__muldf3>
11046f10:	1009883a 	mov	r4,r2
11046f14:	180b883a 	mov	r5,r3
11046f18:	000d883a 	mov	r6,zero
11046f1c:	01d00734 	movhi	r7,16412
11046f20:	1042d940 	call	11042d94 <__adddf3>
11046f24:	057f3034 	movhi	r21,64704
11046f28:	1025883a 	mov	r18,r2
11046f2c:	1d6b883a 	add	r21,r3,r21
11046f30:	9809883a 	mov	r4,r19
11046f34:	a00b883a 	mov	r5,r20
11046f38:	000d883a 	mov	r6,zero
11046f3c:	01d00534 	movhi	r7,16404
11046f40:	1042de80 	call	11042de8 <__subdf3>
11046f44:	1009883a 	mov	r4,r2
11046f48:	180b883a 	mov	r5,r3
11046f4c:	900d883a 	mov	r6,r18
11046f50:	a80f883a 	mov	r7,r21
11046f54:	1027883a 	mov	r19,r2
11046f58:	1829883a 	mov	r20,r3
11046f5c:	104bd1c0 	call	1104bd1c <__gtdf2>
11046f60:	00806616 	blt	zero,r2,110470fc <_dtoa_r+0x12f8>
11046f64:	a9e0003c 	xorhi	r7,r21,32768
11046f68:	9809883a 	mov	r4,r19
11046f6c:	a00b883a 	mov	r5,r20
11046f70:	900d883a 	mov	r6,r18
11046f74:	104bde40 	call	1104bde4 <__ltdf2>
11046f78:	103d710e 	bge	r2,zero,11046540 <_dtoa_r+0x73c>
11046f7c:	0029883a 	mov	r20,zero
11046f80:	002b883a 	mov	r21,zero
11046f84:	003f5406 	br	11046cd8 <_dtoa_r+0xed4>
11046f88:	d9800a17 	ldw	r6,40(sp)
11046f8c:	e00b883a 	mov	r5,fp
11046f90:	8009883a 	mov	r4,r16
11046f94:	10497780 	call	11049778 <__pow5mult>
11046f98:	1039883a 	mov	fp,r2
11046f9c:	003e2e06 	br	11046858 <_dtoa_r+0xa54>
11046fa0:	d8000c15 	stw	zero,48(sp)
11046fa4:	003f2006 	br	11046c28 <_dtoa_r+0xe24>
11046fa8:	00800044 	movi	r2,1
11046fac:	d8800c15 	stw	r2,48(sp)
11046fb0:	003c5d06 	br	11046128 <_dtoa_r+0x324>
11046fb4:	d8c00a17 	ldw	r3,40(sp)
11046fb8:	d9000b17 	ldw	r4,44(sp)
11046fbc:	dcc00a15 	stw	r19,40(sp)
11046fc0:	98c5c83a 	sub	r2,r19,r3
11046fc4:	2089883a 	add	r4,r4,r2
11046fc8:	d9000b15 	stw	r4,44(sp)
11046fcc:	0027883a 	mov	r19,zero
11046fd0:	003df206 	br	1104679c <_dtoa_r+0x998>
11046fd4:	d9000317 	ldw	r4,12(sp)
11046fd8:	8829883a 	mov	r20,r17
11046fdc:	04800084 	movi	r18,2
11046fe0:	d9001015 	stw	r4,64(sp)
11046fe4:	003c8106 	br	110461ec <_dtoa_r+0x3e8>
11046fe8:	04800044 	movi	r18,1
11046fec:	dc800e15 	stw	r18,56(sp)
11046ff0:	dc800915 	stw	r18,36(sp)
11046ff4:	dc802115 	stw	r18,132(sp)
11046ff8:	003f1206 	br	11046c44 <_dtoa_r+0xe40>
11046ffc:	d8800617 	ldw	r2,24(sp)
11047000:	00abc83a 	sub	r21,zero,r2
11047004:	a800a426 	beq	r21,zero,11047298 <_dtoa_r+0x1494>
11047008:	a88003cc 	andi	r2,r21,15
1104700c:	100490fa 	slli	r2,r2,3
11047010:	00c00034 	movhi	r3,0
11047014:	18c33604 	addi	r3,r3,3288
11047018:	d9000317 	ldw	r4,12(sp)
1104701c:	1885883a 	add	r2,r3,r2
11047020:	11800017 	ldw	r6,0(r2)
11047024:	11c00117 	ldw	r7,4(r2)
11047028:	a82bd13a 	srai	r21,r21,4
1104702c:	880b883a 	mov	r5,r17
11047030:	104b9800 	call	1104b980 <__muldf3>
11047034:	1027883a 	mov	r19,r2
11047038:	1829883a 	mov	r20,r3
1104703c:	a800e826 	beq	r21,zero,110473e0 <_dtoa_r+0x15dc>
11047040:	05800034 	movhi	r22,0
11047044:	b5832c04 	addi	r22,r22,3248
11047048:	04800084 	movi	r18,2
1104704c:	a980004c 	andi	r6,r21,1
11047050:	1009883a 	mov	r4,r2
11047054:	a82bd07a 	srai	r21,r21,1
11047058:	180b883a 	mov	r5,r3
1104705c:	30000426 	beq	r6,zero,11047070 <_dtoa_r+0x126c>
11047060:	b1800017 	ldw	r6,0(r22)
11047064:	b1c00117 	ldw	r7,4(r22)
11047068:	94800044 	addi	r18,r18,1
1104706c:	104b9800 	call	1104b980 <__muldf3>
11047070:	b5800204 	addi	r22,r22,8
11047074:	a83ff51e 	bne	r21,zero,1104704c <_dtoa_r+0x1248>
11047078:	1027883a 	mov	r19,r2
1104707c:	1829883a 	mov	r20,r3
11047080:	003c7306 	br	11046250 <_dtoa_r+0x44c>
11047084:	21000044 	addi	r4,r4,1
11047088:	11000005 	stb	r4,0(r2)
1104708c:	003e5c06 	br	11046a00 <_dtoa_r+0xbfc>
11047090:	a9400117 	ldw	r5,4(r21)
11047094:	8009883a 	mov	r4,r16
11047098:	104915c0 	call	1104915c <_Balloc>
1104709c:	a9800417 	ldw	r6,16(r21)
110470a0:	11000304 	addi	r4,r2,12
110470a4:	a9400304 	addi	r5,r21,12
110470a8:	31800084 	addi	r6,r6,2
110470ac:	318d883a 	add	r6,r6,r6
110470b0:	318d883a 	add	r6,r6,r6
110470b4:	1023883a 	mov	r17,r2
110470b8:	1048e600 	call	11048e60 <memcpy>
110470bc:	8009883a 	mov	r4,r16
110470c0:	880b883a 	mov	r5,r17
110470c4:	01800044 	movi	r6,1
110470c8:	10498a40 	call	110498a4 <__lshift>
110470cc:	1027883a 	mov	r19,r2
110470d0:	003e8f06 	br	11046b10 <_dtoa_r+0xd0c>
110470d4:	b807883a 	mov	r3,r23
110470d8:	00800e44 	movi	r2,57
110470dc:	ddc00717 	ldw	r23,28(sp)
110470e0:	18809026 	beq	r3,r2,11047324 <_dtoa_r+0x1520>
110470e4:	18c00044 	addi	r3,r3,1
110470e8:	003f2b06 	br	11046d98 <_dtoa_r+0xf94>
110470ec:	b807883a 	mov	r3,r23
110470f0:	982b883a 	mov	r21,r19
110470f4:	ddc00717 	ldw	r23,28(sp)
110470f8:	003e2406 	br	1104698c <_dtoa_r+0xb88>
110470fc:	0029883a 	mov	r20,zero
11047100:	002b883a 	mov	r21,zero
11047104:	003f7206 	br	11046ed0 <_dtoa_r+0x10cc>
11047108:	593fffc4 	addi	r4,r11,-1
1104710c:	200490fa 	slli	r2,r4,3
11047110:	00c00034 	movhi	r3,0
11047114:	18c33604 	addi	r3,r3,3288
11047118:	d9001015 	stw	r4,64(sp)
1104711c:	1885883a 	add	r2,r3,r2
11047120:	11000017 	ldw	r4,0(r2)
11047124:	11400117 	ldw	r5,4(r2)
11047128:	900d883a 	mov	r6,r18
1104712c:	a80f883a 	mov	r7,r21
11047130:	dac01615 	stw	r11,88(sp)
11047134:	104b9800 	call	1104b980 <__muldf3>
11047138:	a00b883a 	mov	r5,r20
1104713c:	9809883a 	mov	r4,r19
11047140:	d8c01215 	stw	r3,72(sp)
11047144:	d8801115 	stw	r2,68(sp)
11047148:	104bf140 	call	1104bf14 <__fixdfsi>
1104714c:	1009883a 	mov	r4,r2
11047150:	1025883a 	mov	r18,r2
11047154:	104be400 	call	1104be40 <__floatsidf>
11047158:	9809883a 	mov	r4,r19
1104715c:	a00b883a 	mov	r5,r20
11047160:	100d883a 	mov	r6,r2
11047164:	180f883a 	mov	r7,r3
11047168:	94800c04 	addi	r18,r18,48
1104716c:	1042de80 	call	11042de8 <__subdf3>
11047170:	bc800005 	stb	r18,0(r23)
11047174:	dac01617 	ldw	r11,88(sp)
11047178:	102b883a 	mov	r21,r2
1104717c:	00800044 	movi	r2,1
11047180:	bd800044 	addi	r22,r23,1
11047184:	1815883a 	mov	r10,r3
11047188:	58802226 	beq	r11,r2,11047214 <_dtoa_r+0x1410>
1104718c:	bad7883a 	add	r11,r23,r11
11047190:	dc001415 	stw	r16,80(sp)
11047194:	a805883a 	mov	r2,r21
11047198:	b027883a 	mov	r19,r22
1104719c:	5821883a 	mov	r16,r11
110471a0:	882b883a 	mov	r21,r17
110471a4:	000d883a 	mov	r6,zero
110471a8:	01d00934 	movhi	r7,16420
110471ac:	1009883a 	mov	r4,r2
110471b0:	180b883a 	mov	r5,r3
110471b4:	104b9800 	call	1104b980 <__muldf3>
110471b8:	180b883a 	mov	r5,r3
110471bc:	1009883a 	mov	r4,r2
110471c0:	1829883a 	mov	r20,r3
110471c4:	1023883a 	mov	r17,r2
110471c8:	104bf140 	call	1104bf14 <__fixdfsi>
110471cc:	1009883a 	mov	r4,r2
110471d0:	1025883a 	mov	r18,r2
110471d4:	104be400 	call	1104be40 <__floatsidf>
110471d8:	8809883a 	mov	r4,r17
110471dc:	a00b883a 	mov	r5,r20
110471e0:	100d883a 	mov	r6,r2
110471e4:	180f883a 	mov	r7,r3
110471e8:	94800c04 	addi	r18,r18,48
110471ec:	1042de80 	call	11042de8 <__subdf3>
110471f0:	9cc00044 	addi	r19,r19,1
110471f4:	9cbfffc5 	stb	r18,-1(r19)
110471f8:	9c3fea1e 	bne	r19,r16,110471a4 <_dtoa_r+0x13a0>
110471fc:	1815883a 	mov	r10,r3
11047200:	d8c01017 	ldw	r3,64(sp)
11047204:	dc001417 	ldw	r16,80(sp)
11047208:	a823883a 	mov	r17,r21
1104720c:	b0ed883a 	add	r22,r22,r3
11047210:	102b883a 	mov	r21,r2
11047214:	d9001117 	ldw	r4,68(sp)
11047218:	d9401217 	ldw	r5,72(sp)
1104721c:	000d883a 	mov	r6,zero
11047220:	01cff834 	movhi	r7,16352
11047224:	da801515 	stw	r10,84(sp)
11047228:	1042d940 	call	11042d94 <__adddf3>
1104722c:	da801517 	ldw	r10,84(sp)
11047230:	1009883a 	mov	r4,r2
11047234:	180b883a 	mov	r5,r3
11047238:	500f883a 	mov	r7,r10
1104723c:	a80d883a 	mov	r6,r21
11047240:	104bde40 	call	1104bde4 <__ltdf2>
11047244:	da801517 	ldw	r10,84(sp)
11047248:	10003b0e 	bge	r2,zero,11047338 <_dtoa_r+0x1534>
1104724c:	d9c01317 	ldw	r7,76(sp)
11047250:	b53fffc3 	ldbu	r20,-1(r22)
11047254:	d9c00615 	stw	r7,24(sp)
11047258:	003d3106 	br	11046720 <_dtoa_r+0x91c>
1104725c:	d8800817 	ldw	r2,32(sp)
11047260:	11e5c83a 	sub	r18,r2,r7
11047264:	0005883a 	mov	r2,zero
11047268:	003d5006 	br	110467ac <_dtoa_r+0x9a8>
1104726c:	05800044 	movi	r22,1
11047270:	003dc406 	br	11046984 <_dtoa_r+0xb80>
11047274:	a5000044 	addi	r20,r20,1
11047278:	15000005 	stb	r20,0(r2)
1104727c:	003c8206 	br	11046488 <_dtoa_r+0x684>
11047280:	d8800217 	ldw	r2,8(sp)
11047284:	00c00d84 	movi	r3,54
11047288:	dcc00a17 	ldw	r19,40(sp)
1104728c:	1885c83a 	sub	r2,r3,r2
11047290:	dc800817 	ldw	r18,32(sp)
11047294:	003d4506 	br	110467ac <_dtoa_r+0x9a8>
11047298:	dcc00317 	ldw	r19,12(sp)
1104729c:	8829883a 	mov	r20,r17
110472a0:	04800084 	movi	r18,2
110472a4:	003bea06 	br	11046250 <_dtoa_r+0x44c>
110472a8:	d9000917 	ldw	r4,36(sp)
110472ac:	203f1126 	beq	r4,zero,11046ef4 <_dtoa_r+0x10f0>
110472b0:	d9c00e17 	ldw	r7,56(sp)
110472b4:	01fca20e 	bge	zero,r7,11046540 <_dtoa_r+0x73c>
110472b8:	a00b883a 	mov	r5,r20
110472bc:	9809883a 	mov	r4,r19
110472c0:	000d883a 	mov	r6,zero
110472c4:	01d00934 	movhi	r7,16420
110472c8:	104b9800 	call	1104b980 <__muldf3>
110472cc:	91000044 	addi	r4,r18,1
110472d0:	1027883a 	mov	r19,r2
110472d4:	1829883a 	mov	r20,r3
110472d8:	104be400 	call	1104be40 <__floatsidf>
110472dc:	9809883a 	mov	r4,r19
110472e0:	a00b883a 	mov	r5,r20
110472e4:	100d883a 	mov	r6,r2
110472e8:	180f883a 	mov	r7,r3
110472ec:	104b9800 	call	1104b980 <__muldf3>
110472f0:	1009883a 	mov	r4,r2
110472f4:	180b883a 	mov	r5,r3
110472f8:	000d883a 	mov	r6,zero
110472fc:	01d00734 	movhi	r7,16412
11047300:	1042d940 	call	11042d94 <__adddf3>
11047304:	1025883a 	mov	r18,r2
11047308:	d8800617 	ldw	r2,24(sp)
1104730c:	057f3034 	movhi	r21,64704
11047310:	1d6b883a 	add	r21,r3,r21
11047314:	10bfffc4 	addi	r2,r2,-1
11047318:	d8801315 	stw	r2,76(sp)
1104731c:	dac00e17 	ldw	r11,56(sp)
11047320:	003be706 	br	110462c0 <_dtoa_r+0x4bc>
11047324:	01000e44 	movi	r4,57
11047328:	91000005 	stb	r4,0(r18)
1104732c:	95800044 	addi	r22,r18,1
11047330:	982b883a 	mov	r21,r19
11047334:	003da106 	br	110469bc <_dtoa_r+0xbb8>
11047338:	d9801117 	ldw	r6,68(sp)
1104733c:	d9c01217 	ldw	r7,72(sp)
11047340:	0009883a 	mov	r4,zero
11047344:	014ff834 	movhi	r5,16352
11047348:	da801515 	stw	r10,84(sp)
1104734c:	1042de80 	call	11042de8 <__subdf3>
11047350:	da801517 	ldw	r10,84(sp)
11047354:	1009883a 	mov	r4,r2
11047358:	180b883a 	mov	r5,r3
1104735c:	a80d883a 	mov	r6,r21
11047360:	500f883a 	mov	r7,r10
11047364:	104bd1c0 	call	1104bd1c <__gtdf2>
11047368:	00bc750e 	bge	zero,r2,11046540 <_dtoa_r+0x73c>
1104736c:	01000c04 	movi	r4,48
11047370:	00000106 	br	11047378 <_dtoa_r+0x1574>
11047374:	102d883a 	mov	r22,r2
11047378:	b0bfffc4 	addi	r2,r22,-1
1104737c:	10c00007 	ldb	r3,0(r2)
11047380:	193ffc26 	beq	r3,r4,11047374 <_dtoa_r+0x1570>
11047384:	d8801317 	ldw	r2,76(sp)
11047388:	d8800615 	stw	r2,24(sp)
1104738c:	003c3e06 	br	11046488 <_dtoa_r+0x684>
11047390:	d9001317 	ldw	r4,76(sp)
11047394:	df001117 	ldw	fp,68(sp)
11047398:	d9000615 	stw	r4,24(sp)
1104739c:	003ce006 	br	11046720 <_dtoa_r+0x91c>
110473a0:	df001117 	ldw	fp,68(sp)
110473a4:	dc401217 	ldw	r17,72(sp)
110473a8:	003c6506 	br	11046540 <_dtoa_r+0x73c>
110473ac:	103e7a1e 	bne	r2,zero,11046d98 <_dtoa_r+0xf94>
110473b0:	1880004c 	andi	r2,r3,1
110473b4:	103e7826 	beq	r2,zero,11046d98 <_dtoa_r+0xf94>
110473b8:	003e7406 	br	11046d8c <_dtoa_r+0xf88>
110473bc:	8009883a 	mov	r4,r16
110473c0:	a80b883a 	mov	r5,r21
110473c4:	01800284 	movi	r6,10
110473c8:	000f883a 	mov	r7,zero
110473cc:	104922c0 	call	1104922c <__multadd>
110473d0:	d9000e17 	ldw	r4,56(sp)
110473d4:	102b883a 	mov	r21,r2
110473d8:	d9000915 	stw	r4,36(sp)
110473dc:	003d5106 	br	11046924 <_dtoa_r+0xb20>
110473e0:	04800084 	movi	r18,2
110473e4:	003b9a06 	br	11046250 <_dtoa_r+0x44c>
110473e8:	d8c01317 	ldw	r3,76(sp)
110473ec:	d8c00615 	stw	r3,24(sp)
110473f0:	003ccb06 	br	11046720 <_dtoa_r+0x91c>
110473f4:	d8c01317 	ldw	r3,76(sp)
110473f8:	d8c00615 	stw	r3,24(sp)
110473fc:	003c2206 	br	11046488 <_dtoa_r+0x684>
11047400:	20fd3826 	beq	r4,r3,110468e4 <_dtoa_r+0xae0>
11047404:	00c00f04 	movi	r3,60
11047408:	1885c83a 	sub	r2,r3,r2
1104740c:	003da906 	br	11046ab4 <_dtoa_r+0xcb0>
11047410:	000b883a 	mov	r5,zero
11047414:	003b5406 	br	11046168 <_dtoa_r+0x364>
11047418:	04c00044 	movi	r19,1
1104741c:	003b3b06 	br	1104610c <_dtoa_r+0x308>

11047420 <_fflush_r>:
11047420:	defffb04 	addi	sp,sp,-20
11047424:	dcc00315 	stw	r19,12(sp)
11047428:	dc400115 	stw	r17,4(sp)
1104742c:	dfc00415 	stw	ra,16(sp)
11047430:	dc800215 	stw	r18,8(sp)
11047434:	dc000015 	stw	r16,0(sp)
11047438:	2027883a 	mov	r19,r4
1104743c:	2823883a 	mov	r17,r5
11047440:	20000226 	beq	r4,zero,1104744c <_fflush_r+0x2c>
11047444:	20800e17 	ldw	r2,56(r4)
11047448:	10005726 	beq	r2,zero,110475a8 <_fflush_r+0x188>
1104744c:	8880030b 	ldhu	r2,12(r17)
11047450:	10c0020c 	andi	r3,r2,8
11047454:	18ffffcc 	andi	r3,r3,65535
11047458:	18e0001c 	xori	r3,r3,32768
1104745c:	18e00004 	addi	r3,r3,-32768
11047460:	1800311e 	bne	r3,zero,11047528 <_fflush_r+0x108>
11047464:	89000117 	ldw	r4,4(r17)
11047468:	10c20014 	ori	r3,r2,2048
1104746c:	88c0030d 	sth	r3,12(r17)
11047470:	180b883a 	mov	r5,r3
11047474:	0100520e 	bge	zero,r4,110475c0 <_fflush_r+0x1a0>
11047478:	88c00a17 	ldw	r3,40(r17)
1104747c:	18002226 	beq	r3,zero,11047508 <_fflush_r+0xe8>
11047480:	1084000c 	andi	r2,r2,4096
11047484:	10bfffcc 	andi	r2,r2,65535
11047488:	10a0001c 	xori	r2,r2,32768
1104748c:	10a00004 	addi	r2,r2,-32768
11047490:	10004e26 	beq	r2,zero,110475cc <_fflush_r+0x1ac>
11047494:	8c001417 	ldw	r16,80(r17)
11047498:	2940010c 	andi	r5,r5,4
1104749c:	297fffcc 	andi	r5,r5,65535
110474a0:	2960001c 	xori	r5,r5,32768
110474a4:	29600004 	addi	r5,r5,-32768
110474a8:	28000626 	beq	r5,zero,110474c4 <_fflush_r+0xa4>
110474ac:	89000117 	ldw	r4,4(r17)
110474b0:	88800c17 	ldw	r2,48(r17)
110474b4:	8121c83a 	sub	r16,r16,r4
110474b8:	10000226 	beq	r2,zero,110474c4 <_fflush_r+0xa4>
110474bc:	88800f17 	ldw	r2,60(r17)
110474c0:	80a1c83a 	sub	r16,r16,r2
110474c4:	89400717 	ldw	r5,28(r17)
110474c8:	9809883a 	mov	r4,r19
110474cc:	800d883a 	mov	r6,r16
110474d0:	000f883a 	mov	r7,zero
110474d4:	183ee83a 	callr	r3
110474d8:	8080281e 	bne	r16,r2,1104757c <_fflush_r+0x15c>
110474dc:	8880030b 	ldhu	r2,12(r17)
110474e0:	88c00417 	ldw	r3,16(r17)
110474e4:	88000115 	stw	zero,4(r17)
110474e8:	113dffcc 	andi	r4,r2,63487
110474ec:	1084000c 	andi	r2,r2,4096
110474f0:	10bfffcc 	andi	r2,r2,65535
110474f4:	10a0001c 	xori	r2,r2,32768
110474f8:	8900030d 	sth	r4,12(r17)
110474fc:	88c00015 	stw	r3,0(r17)
11047500:	10a00004 	addi	r2,r2,-32768
11047504:	10002c1e 	bne	r2,zero,110475b8 <_fflush_r+0x198>
11047508:	0005883a 	mov	r2,zero
1104750c:	dfc00417 	ldw	ra,16(sp)
11047510:	dcc00317 	ldw	r19,12(sp)
11047514:	dc800217 	ldw	r18,8(sp)
11047518:	dc400117 	ldw	r17,4(sp)
1104751c:	dc000017 	ldw	r16,0(sp)
11047520:	dec00504 	addi	sp,sp,20
11047524:	f800283a 	ret
11047528:	8c800417 	ldw	r18,16(r17)
1104752c:	903ff626 	beq	r18,zero,11047508 <_fflush_r+0xe8>
11047530:	8c000017 	ldw	r16,0(r17)
11047534:	108000cc 	andi	r2,r2,3
11047538:	8c800015 	stw	r18,0(r17)
1104753c:	84a1c83a 	sub	r16,r16,r18
11047540:	10001b1e 	bne	r2,zero,110475b0 <_fflush_r+0x190>
11047544:	88800517 	ldw	r2,20(r17)
11047548:	88800215 	stw	r2,8(r17)
1104754c:	04000316 	blt	zero,r16,1104755c <_fflush_r+0x13c>
11047550:	003fed06 	br	11047508 <_fflush_r+0xe8>
11047554:	90a5883a 	add	r18,r18,r2
11047558:	043feb0e 	bge	zero,r16,11047508 <_fflush_r+0xe8>
1104755c:	88800917 	ldw	r2,36(r17)
11047560:	89400717 	ldw	r5,28(r17)
11047564:	800f883a 	mov	r7,r16
11047568:	900d883a 	mov	r6,r18
1104756c:	9809883a 	mov	r4,r19
11047570:	103ee83a 	callr	r2
11047574:	80a1c83a 	sub	r16,r16,r2
11047578:	00bff616 	blt	zero,r2,11047554 <_fflush_r+0x134>
1104757c:	88c0030b 	ldhu	r3,12(r17)
11047580:	00bfffc4 	movi	r2,-1
11047584:	18c01014 	ori	r3,r3,64
11047588:	88c0030d 	sth	r3,12(r17)
1104758c:	dfc00417 	ldw	ra,16(sp)
11047590:	dcc00317 	ldw	r19,12(sp)
11047594:	dc800217 	ldw	r18,8(sp)
11047598:	dc400117 	ldw	r17,4(sp)
1104759c:	dc000017 	ldw	r16,0(sp)
110475a0:	dec00504 	addi	sp,sp,20
110475a4:	f800283a 	ret
110475a8:	10476c80 	call	110476c8 <__sinit>
110475ac:	003fa706 	br	1104744c <_fflush_r+0x2c>
110475b0:	0005883a 	mov	r2,zero
110475b4:	003fe406 	br	11047548 <_fflush_r+0x128>
110475b8:	8c001415 	stw	r16,80(r17)
110475bc:	003fd206 	br	11047508 <_fflush_r+0xe8>
110475c0:	88c00f17 	ldw	r3,60(r17)
110475c4:	00ffac16 	blt	zero,r3,11047478 <_fflush_r+0x58>
110475c8:	003fcf06 	br	11047508 <_fflush_r+0xe8>
110475cc:	89400717 	ldw	r5,28(r17)
110475d0:	9809883a 	mov	r4,r19
110475d4:	000d883a 	mov	r6,zero
110475d8:	01c00044 	movi	r7,1
110475dc:	183ee83a 	callr	r3
110475e0:	1021883a 	mov	r16,r2
110475e4:	00bfffc4 	movi	r2,-1
110475e8:	80800326 	beq	r16,r2,110475f8 <_fflush_r+0x1d8>
110475ec:	8940030b 	ldhu	r5,12(r17)
110475f0:	88c00a17 	ldw	r3,40(r17)
110475f4:	003fa806 	br	11047498 <_fflush_r+0x78>
110475f8:	98c00017 	ldw	r3,0(r19)
110475fc:	00800744 	movi	r2,29
11047600:	18bfde1e 	bne	r3,r2,1104757c <_fflush_r+0x15c>
11047604:	003fc006 	br	11047508 <_fflush_r+0xe8>

11047608 <fflush>:
11047608:	200b883a 	mov	r5,r4
1104760c:	20000426 	beq	r4,zero,11047620 <fflush+0x18>
11047610:	00800034 	movhi	r2,0
11047614:	1089fe04 	addi	r2,r2,10232
11047618:	11000017 	ldw	r4,0(r2)
1104761c:	10474201 	jmpi	11047420 <_fflush_r>
11047620:	00800034 	movhi	r2,0
11047624:	1089fd04 	addi	r2,r2,10228
11047628:	11000017 	ldw	r4,0(r2)
1104762c:	01444134 	movhi	r5,4356
11047630:	295d0804 	addi	r5,r5,29728
11047634:	10482a81 	jmpi	110482a8 <_fwalk_reent>

11047638 <__fp_lock>:
11047638:	0005883a 	mov	r2,zero
1104763c:	f800283a 	ret

11047640 <__fp_unlock>:
11047640:	0005883a 	mov	r2,zero
11047644:	f800283a 	ret

11047648 <_cleanup_r>:
11047648:	01444174 	movhi	r5,4357
1104764c:	296b1d04 	addi	r5,r5,-21388
11047650:	10482001 	jmpi	11048200 <_fwalk>

11047654 <__sfmoreglue>:
11047654:	defffc04 	addi	sp,sp,-16
11047658:	dc400115 	stw	r17,4(sp)
1104765c:	2c401724 	muli	r17,r5,92
11047660:	dc800215 	stw	r18,8(sp)
11047664:	2825883a 	mov	r18,r5
11047668:	89400304 	addi	r5,r17,12
1104766c:	dc000015 	stw	r16,0(sp)
11047670:	dfc00315 	stw	ra,12(sp)
11047674:	10485e40 	call	110485e4 <_malloc_r>
11047678:	1021883a 	mov	r16,r2
1104767c:	10000726 	beq	r2,zero,1104769c <__sfmoreglue+0x48>
11047680:	11000304 	addi	r4,r2,12
11047684:	10000015 	stw	zero,0(r2)
11047688:	14800115 	stw	r18,4(r2)
1104768c:	11000215 	stw	r4,8(r2)
11047690:	000b883a 	mov	r5,zero
11047694:	880d883a 	mov	r6,r17
11047698:	10490800 	call	11049080 <memset>
1104769c:	8005883a 	mov	r2,r16
110476a0:	dfc00317 	ldw	ra,12(sp)
110476a4:	dc800217 	ldw	r18,8(sp)
110476a8:	dc400117 	ldw	r17,4(sp)
110476ac:	dc000017 	ldw	r16,0(sp)
110476b0:	dec00404 	addi	sp,sp,16
110476b4:	f800283a 	ret

110476b8 <_cleanup>:
110476b8:	00800034 	movhi	r2,0
110476bc:	1089fd04 	addi	r2,r2,10228
110476c0:	11000017 	ldw	r4,0(r2)
110476c4:	10476481 	jmpi	11047648 <_cleanup_r>

110476c8 <__sinit>:
110476c8:	20800e17 	ldw	r2,56(r4)
110476cc:	1000401e 	bne	r2,zero,110477d0 <__sinit+0x108>
110476d0:	21400117 	ldw	r5,4(r4)
110476d4:	01844134 	movhi	r6,4356
110476d8:	319d9204 	addi	r6,r6,30280
110476dc:	20c00217 	ldw	r3,8(r4)
110476e0:	21800f15 	stw	r6,60(r4)
110476e4:	2080bb04 	addi	r2,r4,748
110476e8:	02400044 	movi	r9,1
110476ec:	018000c4 	movi	r6,3
110476f0:	2180b915 	stw	r6,740(r4)
110476f4:	2080ba15 	stw	r2,744(r4)
110476f8:	22400e15 	stw	r9,56(r4)
110476fc:	20800317 	ldw	r2,12(r4)
11047700:	2000b815 	stw	zero,736(r4)
11047704:	02044174 	movhi	r8,4357
11047708:	4229f204 	addi	r8,r8,-22584
1104770c:	01c44174 	movhi	r7,4357
11047710:	39ea0704 	addi	r7,r7,-22500
11047714:	01844174 	movhi	r6,4357
11047718:	31aa2904 	addi	r6,r6,-22364
1104771c:	01044174 	movhi	r4,4357
11047720:	212a4004 	addi	r4,r4,-22272
11047724:	02800104 	movi	r10,4
11047728:	28000015 	stw	zero,0(r5)
1104772c:	28000115 	stw	zero,4(r5)
11047730:	28000215 	stw	zero,8(r5)
11047734:	2a80030d 	sth	r10,12(r5)
11047738:	2800038d 	sth	zero,14(r5)
1104773c:	28000415 	stw	zero,16(r5)
11047740:	28000515 	stw	zero,20(r5)
11047744:	28000615 	stw	zero,24(r5)
11047748:	29400715 	stw	r5,28(r5)
1104774c:	2a000815 	stw	r8,32(r5)
11047750:	29c00915 	stw	r7,36(r5)
11047754:	29800a15 	stw	r6,40(r5)
11047758:	29000b15 	stw	r4,44(r5)
1104775c:	01400284 	movi	r5,10
11047760:	18000015 	stw	zero,0(r3)
11047764:	18000115 	stw	zero,4(r3)
11047768:	18000215 	stw	zero,8(r3)
1104776c:	1940030d 	sth	r5,12(r3)
11047770:	1a40038d 	sth	r9,14(r3)
11047774:	18000415 	stw	zero,16(r3)
11047778:	18000515 	stw	zero,20(r3)
1104777c:	18000615 	stw	zero,24(r3)
11047780:	18c00715 	stw	r3,28(r3)
11047784:	1a000815 	stw	r8,32(r3)
11047788:	19c00915 	stw	r7,36(r3)
1104778c:	19800a15 	stw	r6,40(r3)
11047790:	19000b15 	stw	r4,44(r3)
11047794:	00c00484 	movi	r3,18
11047798:	10c0030d 	sth	r3,12(r2)
1104779c:	00c00084 	movi	r3,2
110477a0:	10000015 	stw	zero,0(r2)
110477a4:	10000115 	stw	zero,4(r2)
110477a8:	10000215 	stw	zero,8(r2)
110477ac:	10c0038d 	sth	r3,14(r2)
110477b0:	10000415 	stw	zero,16(r2)
110477b4:	10000515 	stw	zero,20(r2)
110477b8:	10000615 	stw	zero,24(r2)
110477bc:	10800715 	stw	r2,28(r2)
110477c0:	12000815 	stw	r8,32(r2)
110477c4:	11c00915 	stw	r7,36(r2)
110477c8:	11800a15 	stw	r6,40(r2)
110477cc:	11000b15 	stw	r4,44(r2)
110477d0:	f800283a 	ret

110477d4 <__sfp>:
110477d4:	defffc04 	addi	sp,sp,-16
110477d8:	00800034 	movhi	r2,0
110477dc:	1089fd04 	addi	r2,r2,10228
110477e0:	dc400115 	stw	r17,4(sp)
110477e4:	14400017 	ldw	r17,0(r2)
110477e8:	dc800215 	stw	r18,8(sp)
110477ec:	dfc00315 	stw	ra,12(sp)
110477f0:	88800e17 	ldw	r2,56(r17)
110477f4:	dc000015 	stw	r16,0(sp)
110477f8:	2025883a 	mov	r18,r4
110477fc:	10002826 	beq	r2,zero,110478a0 <__sfp+0xcc>
11047800:	8c40b804 	addi	r17,r17,736
11047804:	043fffc4 	movi	r16,-1
11047808:	89400117 	ldw	r5,4(r17)
1104780c:	88800217 	ldw	r2,8(r17)
11047810:	297fffc4 	addi	r5,r5,-1
11047814:	28000a16 	blt	r5,zero,11047840 <__sfp+0x6c>
11047818:	10c0030f 	ldh	r3,12(r2)
1104781c:	18000c26 	beq	r3,zero,11047850 <__sfp+0x7c>
11047820:	10c01a04 	addi	r3,r2,104
11047824:	00000206 	br	11047830 <__sfp+0x5c>
11047828:	19bfe90f 	ldh	r6,-92(r3)
1104782c:	30000826 	beq	r6,zero,11047850 <__sfp+0x7c>
11047830:	297fffc4 	addi	r5,r5,-1
11047834:	18bffd04 	addi	r2,r3,-12
11047838:	18c01704 	addi	r3,r3,92
1104783c:	2c3ffa1e 	bne	r5,r16,11047828 <__sfp+0x54>
11047840:	88800017 	ldw	r2,0(r17)
11047844:	10001926 	beq	r2,zero,110478ac <__sfp+0xd8>
11047848:	1023883a 	mov	r17,r2
1104784c:	003fee06 	br	11047808 <__sfp+0x34>
11047850:	00ffffc4 	movi	r3,-1
11047854:	10c0038d 	sth	r3,14(r2)
11047858:	00c00044 	movi	r3,1
1104785c:	10c0030d 	sth	r3,12(r2)
11047860:	10000015 	stw	zero,0(r2)
11047864:	10000215 	stw	zero,8(r2)
11047868:	10000115 	stw	zero,4(r2)
1104786c:	10000415 	stw	zero,16(r2)
11047870:	10000515 	stw	zero,20(r2)
11047874:	10000615 	stw	zero,24(r2)
11047878:	10000c15 	stw	zero,48(r2)
1104787c:	10000d15 	stw	zero,52(r2)
11047880:	10001115 	stw	zero,68(r2)
11047884:	10001215 	stw	zero,72(r2)
11047888:	dfc00317 	ldw	ra,12(sp)
1104788c:	dc800217 	ldw	r18,8(sp)
11047890:	dc400117 	ldw	r17,4(sp)
11047894:	dc000017 	ldw	r16,0(sp)
11047898:	dec00404 	addi	sp,sp,16
1104789c:	f800283a 	ret
110478a0:	8809883a 	mov	r4,r17
110478a4:	10476c80 	call	110476c8 <__sinit>
110478a8:	003fd506 	br	11047800 <__sfp+0x2c>
110478ac:	9009883a 	mov	r4,r18
110478b0:	01400104 	movi	r5,4
110478b4:	10476540 	call	11047654 <__sfmoreglue>
110478b8:	88800015 	stw	r2,0(r17)
110478bc:	103fe21e 	bne	r2,zero,11047848 <__sfp+0x74>
110478c0:	00800304 	movi	r2,12
110478c4:	90800015 	stw	r2,0(r18)
110478c8:	0005883a 	mov	r2,zero
110478cc:	003fee06 	br	11047888 <__sfp+0xb4>

110478d0 <__sfp_lock_acquire>:
110478d0:	f800283a 	ret

110478d4 <__sfp_lock_release>:
110478d4:	f800283a 	ret

110478d8 <__sinit_lock_acquire>:
110478d8:	f800283a 	ret

110478dc <__sinit_lock_release>:
110478dc:	f800283a 	ret

110478e0 <__fp_lock_all>:
110478e0:	00800034 	movhi	r2,0
110478e4:	1089fe04 	addi	r2,r2,10232
110478e8:	11000017 	ldw	r4,0(r2)
110478ec:	01444134 	movhi	r5,4356
110478f0:	295d8e04 	addi	r5,r5,30264
110478f4:	10482001 	jmpi	11048200 <_fwalk>

110478f8 <__fp_unlock_all>:
110478f8:	00800034 	movhi	r2,0
110478fc:	1089fe04 	addi	r2,r2,10232
11047900:	11000017 	ldw	r4,0(r2)
11047904:	01444134 	movhi	r5,4356
11047908:	295d9004 	addi	r5,r5,30272
1104790c:	10482001 	jmpi	11048200 <_fwalk>

11047910 <_malloc_trim_r>:
11047910:	defffb04 	addi	sp,sp,-20
11047914:	dcc00315 	stw	r19,12(sp)
11047918:	dc800215 	stw	r18,8(sp)
1104791c:	dc400115 	stw	r17,4(sp)
11047920:	dc000015 	stw	r16,0(sp)
11047924:	2827883a 	mov	r19,r5
11047928:	dfc00415 	stw	ra,16(sp)
1104792c:	04400034 	movhi	r17,0
11047930:	8c447904 	addi	r17,r17,4580
11047934:	2021883a 	mov	r16,r4
11047938:	104cc600 	call	1104cc60 <__malloc_lock>
1104793c:	88800217 	ldw	r2,8(r17)
11047940:	14800117 	ldw	r18,4(r2)
11047944:	00bfff04 	movi	r2,-4
11047948:	90a4703a 	and	r18,r18,r2
1104794c:	9083fbc4 	addi	r2,r18,4079
11047950:	14e7c83a 	sub	r19,r2,r19
11047954:	9826d33a 	srli	r19,r19,12
11047958:	0083ffc4 	movi	r2,4095
1104795c:	9cffffc4 	addi	r19,r19,-1
11047960:	9826933a 	slli	r19,r19,12
11047964:	14c0060e 	bge	r2,r19,11047980 <_malloc_trim_r+0x70>
11047968:	8009883a 	mov	r4,r16
1104796c:	000b883a 	mov	r5,zero
11047970:	104a7640 	call	1104a764 <_sbrk_r>
11047974:	88c00217 	ldw	r3,8(r17)
11047978:	1c87883a 	add	r3,r3,r18
1104797c:	10c00a26 	beq	r2,r3,110479a8 <_malloc_trim_r+0x98>
11047980:	8009883a 	mov	r4,r16
11047984:	104cc800 	call	1104cc80 <__malloc_unlock>
11047988:	0005883a 	mov	r2,zero
1104798c:	dfc00417 	ldw	ra,16(sp)
11047990:	dcc00317 	ldw	r19,12(sp)
11047994:	dc800217 	ldw	r18,8(sp)
11047998:	dc400117 	ldw	r17,4(sp)
1104799c:	dc000017 	ldw	r16,0(sp)
110479a0:	dec00504 	addi	sp,sp,20
110479a4:	f800283a 	ret
110479a8:	8009883a 	mov	r4,r16
110479ac:	04cbc83a 	sub	r5,zero,r19
110479b0:	104a7640 	call	1104a764 <_sbrk_r>
110479b4:	00ffffc4 	movi	r3,-1
110479b8:	10c01326 	beq	r2,r3,11047a08 <_malloc_trim_r+0xf8>
110479bc:	00800034 	movhi	r2,0
110479c0:	108a2604 	addi	r2,r2,10392
110479c4:	11000017 	ldw	r4,0(r2)
110479c8:	88c00217 	ldw	r3,8(r17)
110479cc:	94e5c83a 	sub	r18,r18,r19
110479d0:	94800054 	ori	r18,r18,1
110479d4:	24e7c83a 	sub	r19,r4,r19
110479d8:	1c800115 	stw	r18,4(r3)
110479dc:	8009883a 	mov	r4,r16
110479e0:	14c00015 	stw	r19,0(r2)
110479e4:	104cc800 	call	1104cc80 <__malloc_unlock>
110479e8:	00800044 	movi	r2,1
110479ec:	dfc00417 	ldw	ra,16(sp)
110479f0:	dcc00317 	ldw	r19,12(sp)
110479f4:	dc800217 	ldw	r18,8(sp)
110479f8:	dc400117 	ldw	r17,4(sp)
110479fc:	dc000017 	ldw	r16,0(sp)
11047a00:	dec00504 	addi	sp,sp,20
11047a04:	f800283a 	ret
11047a08:	8009883a 	mov	r4,r16
11047a0c:	000b883a 	mov	r5,zero
11047a10:	104a7640 	call	1104a764 <_sbrk_r>
11047a14:	88c00217 	ldw	r3,8(r17)
11047a18:	014003c4 	movi	r5,15
11047a1c:	10c9c83a 	sub	r4,r2,r3
11047a20:	293fd70e 	bge	r5,r4,11047980 <_malloc_trim_r+0x70>
11047a24:	01400034 	movhi	r5,0
11047a28:	294a0004 	addi	r5,r5,10240
11047a2c:	29400017 	ldw	r5,0(r5)
11047a30:	21000054 	ori	r4,r4,1
11047a34:	19000115 	stw	r4,4(r3)
11047a38:	1145c83a 	sub	r2,r2,r5
11047a3c:	01400034 	movhi	r5,0
11047a40:	294a2604 	addi	r5,r5,10392
11047a44:	28800015 	stw	r2,0(r5)
11047a48:	003fcd06 	br	11047980 <_malloc_trim_r+0x70>

11047a4c <_free_r>:
11047a4c:	defffd04 	addi	sp,sp,-12
11047a50:	dc400115 	stw	r17,4(sp)
11047a54:	dc000015 	stw	r16,0(sp)
11047a58:	dfc00215 	stw	ra,8(sp)
11047a5c:	2821883a 	mov	r16,r5
11047a60:	2023883a 	mov	r17,r4
11047a64:	28004b26 	beq	r5,zero,11047b94 <_free_r+0x148>
11047a68:	104cc600 	call	1104cc60 <__malloc_lock>
11047a6c:	823fff17 	ldw	r8,-4(r16)
11047a70:	00bfff84 	movi	r2,-2
11047a74:	81bffe04 	addi	r6,r16,-8
11047a78:	4084703a 	and	r2,r8,r2
11047a7c:	3087883a 	add	r3,r6,r2
11047a80:	01400034 	movhi	r5,0
11047a84:	29447904 	addi	r5,r5,4580
11047a88:	1a400117 	ldw	r9,4(r3)
11047a8c:	29000217 	ldw	r4,8(r5)
11047a90:	01ffff04 	movi	r7,-4
11047a94:	49ce703a 	and	r7,r9,r7
11047a98:	20c06526 	beq	r4,r3,11047c30 <_free_r+0x1e4>
11047a9c:	19c00115 	stw	r7,4(r3)
11047aa0:	4200004c 	andi	r8,r8,1
11047aa4:	40003026 	beq	r8,zero,11047b68 <_free_r+0x11c>
11047aa8:	0009883a 	mov	r4,zero
11047aac:	19d1883a 	add	r8,r3,r7
11047ab0:	42000117 	ldw	r8,4(r8)
11047ab4:	4200004c 	andi	r8,r8,1
11047ab8:	4000061e 	bne	r8,zero,11047ad4 <_free_r+0x88>
11047abc:	11c5883a 	add	r2,r2,r7
11047ac0:	19c00217 	ldw	r7,8(r3)
11047ac4:	20004e26 	beq	r4,zero,11047c00 <_free_r+0x1b4>
11047ac8:	18c00317 	ldw	r3,12(r3)
11047acc:	38c00315 	stw	r3,12(r7)
11047ad0:	19c00215 	stw	r7,8(r3)
11047ad4:	11c00054 	ori	r7,r2,1
11047ad8:	3087883a 	add	r3,r6,r2
11047adc:	31c00115 	stw	r7,4(r6)
11047ae0:	18800015 	stw	r2,0(r3)
11047ae4:	20001a1e 	bne	r4,zero,11047b50 <_free_r+0x104>
11047ae8:	00c07fc4 	movi	r3,511
11047aec:	18802e2e 	bgeu	r3,r2,11047ba8 <_free_r+0x15c>
11047af0:	1006d27a 	srli	r3,r2,9
11047af4:	01000104 	movi	r4,4
11047af8:	20c06636 	bltu	r4,r3,11047c94 <_free_r+0x248>
11047afc:	1008d1ba 	srli	r4,r2,6
11047b00:	21000e04 	addi	r4,r4,56
11047b04:	210f883a 	add	r7,r4,r4
11047b08:	39cf883a 	add	r7,r7,r7
11047b0c:	39cf883a 	add	r7,r7,r7
11047b10:	29cf883a 	add	r7,r5,r7
11047b14:	38c00217 	ldw	r3,8(r7)
11047b18:	01400034 	movhi	r5,0
11047b1c:	29447904 	addi	r5,r5,4580
11047b20:	19c06126 	beq	r3,r7,11047ca8 <_free_r+0x25c>
11047b24:	013fff04 	movi	r4,-4
11047b28:	19400117 	ldw	r5,4(r3)
11047b2c:	290a703a 	and	r5,r5,r4
11047b30:	1140022e 	bgeu	r2,r5,11047b3c <_free_r+0xf0>
11047b34:	18c00217 	ldw	r3,8(r3)
11047b38:	38fffb1e 	bne	r7,r3,11047b28 <_free_r+0xdc>
11047b3c:	18800317 	ldw	r2,12(r3)
11047b40:	30800315 	stw	r2,12(r6)
11047b44:	30c00215 	stw	r3,8(r6)
11047b48:	11800215 	stw	r6,8(r2)
11047b4c:	19800315 	stw	r6,12(r3)
11047b50:	8809883a 	mov	r4,r17
11047b54:	dfc00217 	ldw	ra,8(sp)
11047b58:	dc400117 	ldw	r17,4(sp)
11047b5c:	dc000017 	ldw	r16,0(sp)
11047b60:	dec00304 	addi	sp,sp,12
11047b64:	104cc801 	jmpi	1104cc80 <__malloc_unlock>
11047b68:	813ffe17 	ldw	r4,-8(r16)
11047b6c:	2a400204 	addi	r9,r5,8
11047b70:	310dc83a 	sub	r6,r6,r4
11047b74:	32000217 	ldw	r8,8(r6)
11047b78:	1105883a 	add	r2,r2,r4
11047b7c:	42404326 	beq	r8,r9,11047c8c <_free_r+0x240>
11047b80:	32400317 	ldw	r9,12(r6)
11047b84:	0009883a 	mov	r4,zero
11047b88:	42400315 	stw	r9,12(r8)
11047b8c:	4a000215 	stw	r8,8(r9)
11047b90:	003fc606 	br	11047aac <_free_r+0x60>
11047b94:	dfc00217 	ldw	ra,8(sp)
11047b98:	dc400117 	ldw	r17,4(sp)
11047b9c:	dc000017 	ldw	r16,0(sp)
11047ba0:	dec00304 	addi	sp,sp,12
11047ba4:	f800283a 	ret
11047ba8:	1004d0fa 	srli	r2,r2,3
11047bac:	02000044 	movi	r8,1
11047bb0:	29c00117 	ldw	r7,4(r5)
11047bb4:	1087883a 	add	r3,r2,r2
11047bb8:	18c7883a 	add	r3,r3,r3
11047bbc:	1005d0ba 	srai	r2,r2,2
11047bc0:	18c7883a 	add	r3,r3,r3
11047bc4:	28c7883a 	add	r3,r5,r3
11047bc8:	19000217 	ldw	r4,8(r3)
11047bcc:	4084983a 	sll	r2,r8,r2
11047bd0:	30c00315 	stw	r3,12(r6)
11047bd4:	31000215 	stw	r4,8(r6)
11047bd8:	11c4b03a 	or	r2,r2,r7
11047bdc:	21800315 	stw	r6,12(r4)
11047be0:	8809883a 	mov	r4,r17
11047be4:	28800115 	stw	r2,4(r5)
11047be8:	19800215 	stw	r6,8(r3)
11047bec:	dfc00217 	ldw	ra,8(sp)
11047bf0:	dc400117 	ldw	r17,4(sp)
11047bf4:	dc000017 	ldw	r16,0(sp)
11047bf8:	dec00304 	addi	sp,sp,12
11047bfc:	104cc801 	jmpi	1104cc80 <__malloc_unlock>
11047c00:	02000034 	movhi	r8,0
11047c04:	42047b04 	addi	r8,r8,4588
11047c08:	3a3faf1e 	bne	r7,r8,11047ac8 <_free_r+0x7c>
11047c0c:	29800515 	stw	r6,20(r5)
11047c10:	29800415 	stw	r6,16(r5)
11047c14:	11000054 	ori	r4,r2,1
11047c18:	3087883a 	add	r3,r6,r2
11047c1c:	31c00315 	stw	r7,12(r6)
11047c20:	31c00215 	stw	r7,8(r6)
11047c24:	31000115 	stw	r4,4(r6)
11047c28:	18800015 	stw	r2,0(r3)
11047c2c:	003fc806 	br	11047b50 <_free_r+0x104>
11047c30:	4200004c 	andi	r8,r8,1
11047c34:	3885883a 	add	r2,r7,r2
11047c38:	4000071e 	bne	r8,zero,11047c58 <_free_r+0x20c>
11047c3c:	81fffe17 	ldw	r7,-8(r16)
11047c40:	31cdc83a 	sub	r6,r6,r7
11047c44:	30c00317 	ldw	r3,12(r6)
11047c48:	31000217 	ldw	r4,8(r6)
11047c4c:	11c5883a 	add	r2,r2,r7
11047c50:	20c00315 	stw	r3,12(r4)
11047c54:	19000215 	stw	r4,8(r3)
11047c58:	00c00034 	movhi	r3,0
11047c5c:	18ca0104 	addi	r3,r3,10244
11047c60:	18c00017 	ldw	r3,0(r3)
11047c64:	11000054 	ori	r4,r2,1
11047c68:	31000115 	stw	r4,4(r6)
11047c6c:	29800215 	stw	r6,8(r5)
11047c70:	10ffb736 	bltu	r2,r3,11047b50 <_free_r+0x104>
11047c74:	00800034 	movhi	r2,0
11047c78:	108a1404 	addi	r2,r2,10320
11047c7c:	11400017 	ldw	r5,0(r2)
11047c80:	8809883a 	mov	r4,r17
11047c84:	10479100 	call	11047910 <_malloc_trim_r>
11047c88:	003fb106 	br	11047b50 <_free_r+0x104>
11047c8c:	01000044 	movi	r4,1
11047c90:	003f8606 	br	11047aac <_free_r+0x60>
11047c94:	01000504 	movi	r4,20
11047c98:	20c00b36 	bltu	r4,r3,11047cc8 <_free_r+0x27c>
11047c9c:	190016c4 	addi	r4,r3,91
11047ca0:	210f883a 	add	r7,r4,r4
11047ca4:	003f9806 	br	11047b08 <_free_r+0xbc>
11047ca8:	2009d0ba 	srai	r4,r4,2
11047cac:	00800044 	movi	r2,1
11047cb0:	29c00117 	ldw	r7,4(r5)
11047cb4:	1108983a 	sll	r4,r2,r4
11047cb8:	1805883a 	mov	r2,r3
11047cbc:	21c8b03a 	or	r4,r4,r7
11047cc0:	29000115 	stw	r4,4(r5)
11047cc4:	003f9e06 	br	11047b40 <_free_r+0xf4>
11047cc8:	01001504 	movi	r4,84
11047ccc:	20c00436 	bltu	r4,r3,11047ce0 <_free_r+0x294>
11047cd0:	1008d33a 	srli	r4,r2,12
11047cd4:	21001b84 	addi	r4,r4,110
11047cd8:	210f883a 	add	r7,r4,r4
11047cdc:	003f8a06 	br	11047b08 <_free_r+0xbc>
11047ce0:	01005504 	movi	r4,340
11047ce4:	20c00436 	bltu	r4,r3,11047cf8 <_free_r+0x2ac>
11047ce8:	1008d3fa 	srli	r4,r2,15
11047cec:	21001dc4 	addi	r4,r4,119
11047cf0:	210f883a 	add	r7,r4,r4
11047cf4:	003f8406 	br	11047b08 <_free_r+0xbc>
11047cf8:	01015504 	movi	r4,1364
11047cfc:	20c00436 	bltu	r4,r3,11047d10 <_free_r+0x2c4>
11047d00:	1008d4ba 	srli	r4,r2,18
11047d04:	21001f04 	addi	r4,r4,124
11047d08:	210f883a 	add	r7,r4,r4
11047d0c:	003f7e06 	br	11047b08 <_free_r+0xbc>
11047d10:	01c03f04 	movi	r7,252
11047d14:	01001f84 	movi	r4,126
11047d18:	003f7b06 	br	11047b08 <_free_r+0xbc>

11047d1c <__sfvwrite_r>:
11047d1c:	30800217 	ldw	r2,8(r6)
11047d20:	defff504 	addi	sp,sp,-44
11047d24:	dd400615 	stw	r21,24(sp)
11047d28:	dd000515 	stw	r20,20(sp)
11047d2c:	dc000115 	stw	r16,4(sp)
11047d30:	dfc00a15 	stw	ra,40(sp)
11047d34:	df000915 	stw	fp,36(sp)
11047d38:	ddc00815 	stw	r23,32(sp)
11047d3c:	dd800715 	stw	r22,28(sp)
11047d40:	dcc00415 	stw	r19,16(sp)
11047d44:	dc800315 	stw	r18,12(sp)
11047d48:	dc400215 	stw	r17,8(sp)
11047d4c:	3029883a 	mov	r20,r6
11047d50:	202b883a 	mov	r21,r4
11047d54:	2821883a 	mov	r16,r5
11047d58:	10002126 	beq	r2,zero,11047de0 <__sfvwrite_r+0xc4>
11047d5c:	2880030b 	ldhu	r2,12(r5)
11047d60:	10c0020c 	andi	r3,r2,8
11047d64:	18ffffcc 	andi	r3,r3,65535
11047d68:	18e0001c 	xori	r3,r3,32768
11047d6c:	18e00004 	addi	r3,r3,-32768
11047d70:	18002826 	beq	r3,zero,11047e14 <__sfvwrite_r+0xf8>
11047d74:	28c00417 	ldw	r3,16(r5)
11047d78:	18002626 	beq	r3,zero,11047e14 <__sfvwrite_r+0xf8>
11047d7c:	10c0008c 	andi	r3,r2,2
11047d80:	18ffffcc 	andi	r3,r3,65535
11047d84:	18e0001c 	xori	r3,r3,32768
11047d88:	18e00004 	addi	r3,r3,-32768
11047d8c:	a4400017 	ldw	r17,0(r20)
11047d90:	18002b26 	beq	r3,zero,11047e40 <__sfvwrite_r+0x124>
11047d94:	0027883a 	mov	r19,zero
11047d98:	0025883a 	mov	r18,zero
11047d9c:	05810004 	movi	r22,1024
11047da0:	980d883a 	mov	r6,r19
11047da4:	a809883a 	mov	r4,r21
11047da8:	90004f26 	beq	r18,zero,11047ee8 <__sfvwrite_r+0x1cc>
11047dac:	900f883a 	mov	r7,r18
11047db0:	81400717 	ldw	r5,28(r16)
11047db4:	b480012e 	bgeu	r22,r18,11047dbc <__sfvwrite_r+0xa0>
11047db8:	01c10004 	movi	r7,1024
11047dbc:	80800917 	ldw	r2,36(r16)
11047dc0:	103ee83a 	callr	r2
11047dc4:	0080540e 	bge	zero,r2,11047f18 <__sfvwrite_r+0x1fc>
11047dc8:	a0c00217 	ldw	r3,8(r20)
11047dcc:	98a7883a 	add	r19,r19,r2
11047dd0:	90a5c83a 	sub	r18,r18,r2
11047dd4:	1885c83a 	sub	r2,r3,r2
11047dd8:	a0800215 	stw	r2,8(r20)
11047ddc:	103ff01e 	bne	r2,zero,11047da0 <__sfvwrite_r+0x84>
11047de0:	0005883a 	mov	r2,zero
11047de4:	dfc00a17 	ldw	ra,40(sp)
11047de8:	df000917 	ldw	fp,36(sp)
11047dec:	ddc00817 	ldw	r23,32(sp)
11047df0:	dd800717 	ldw	r22,28(sp)
11047df4:	dd400617 	ldw	r21,24(sp)
11047df8:	dd000517 	ldw	r20,20(sp)
11047dfc:	dcc00417 	ldw	r19,16(sp)
11047e00:	dc800317 	ldw	r18,12(sp)
11047e04:	dc400217 	ldw	r17,8(sp)
11047e08:	dc000117 	ldw	r16,4(sp)
11047e0c:	dec00b04 	addi	sp,sp,44
11047e10:	f800283a 	ret
11047e14:	a809883a 	mov	r4,r21
11047e18:	800b883a 	mov	r5,r16
11047e1c:	1045a880 	call	11045a88 <__swsetup_r>
11047e20:	1000f01e 	bne	r2,zero,110481e4 <__sfvwrite_r+0x4c8>
11047e24:	8080030b 	ldhu	r2,12(r16)
11047e28:	a4400017 	ldw	r17,0(r20)
11047e2c:	10c0008c 	andi	r3,r2,2
11047e30:	18ffffcc 	andi	r3,r3,65535
11047e34:	18e0001c 	xori	r3,r3,32768
11047e38:	18e00004 	addi	r3,r3,-32768
11047e3c:	183fd51e 	bne	r3,zero,11047d94 <__sfvwrite_r+0x78>
11047e40:	10c0004c 	andi	r3,r2,1
11047e44:	002d883a 	mov	r22,zero
11047e48:	1800381e 	bne	r3,zero,11047f2c <__sfvwrite_r+0x210>
11047e4c:	0025883a 	mov	r18,zero
11047e50:	90002126 	beq	r18,zero,11047ed8 <__sfvwrite_r+0x1bc>
11047e54:	10c0800c 	andi	r3,r2,512
11047e58:	18ffffcc 	andi	r3,r3,65535
11047e5c:	18e0001c 	xori	r3,r3,32768
11047e60:	18e00004 	addi	r3,r3,-32768
11047e64:	84c00217 	ldw	r19,8(r16)
11047e68:	18006b26 	beq	r3,zero,11048018 <__sfvwrite_r+0x2fc>
11047e6c:	980f883a 	mov	r7,r19
11047e70:	94c08636 	bltu	r18,r19,1104808c <__sfvwrite_r+0x370>
11047e74:	10c1200c 	andi	r3,r2,1152
11047e78:	18009f1e 	bne	r3,zero,110480f8 <__sfvwrite_r+0x3dc>
11047e7c:	81000017 	ldw	r4,0(r16)
11047e80:	982f883a 	mov	r23,r19
11047e84:	9039883a 	mov	fp,r18
11047e88:	9027883a 	mov	r19,r18
11047e8c:	380d883a 	mov	r6,r7
11047e90:	b00b883a 	mov	r5,r22
11047e94:	d9c00015 	stw	r7,0(sp)
11047e98:	1048f580 	call	11048f58 <memmove>
11047e9c:	d9c00017 	ldw	r7,0(sp)
11047ea0:	81000217 	ldw	r4,8(r16)
11047ea4:	80800017 	ldw	r2,0(r16)
11047ea8:	25efc83a 	sub	r23,r4,r23
11047eac:	11cf883a 	add	r7,r2,r7
11047eb0:	85c00215 	stw	r23,8(r16)
11047eb4:	81c00015 	stw	r7,0(r16)
11047eb8:	a0800217 	ldw	r2,8(r20)
11047ebc:	b72d883a 	add	r22,r22,fp
11047ec0:	9725c83a 	sub	r18,r18,fp
11047ec4:	14e7c83a 	sub	r19,r2,r19
11047ec8:	a4c00215 	stw	r19,8(r20)
11047ecc:	983fc426 	beq	r19,zero,11047de0 <__sfvwrite_r+0xc4>
11047ed0:	8080030b 	ldhu	r2,12(r16)
11047ed4:	903fdf1e 	bne	r18,zero,11047e54 <__sfvwrite_r+0x138>
11047ed8:	8d800017 	ldw	r22,0(r17)
11047edc:	8c800117 	ldw	r18,4(r17)
11047ee0:	8c400204 	addi	r17,r17,8
11047ee4:	003fda06 	br	11047e50 <__sfvwrite_r+0x134>
11047ee8:	8cc00017 	ldw	r19,0(r17)
11047eec:	8c800117 	ldw	r18,4(r17)
11047ef0:	8c400204 	addi	r17,r17,8
11047ef4:	003faa06 	br	11047da0 <__sfvwrite_r+0x84>
11047ef8:	104a1040 	call	1104a104 <_realloc_r>
11047efc:	102f883a 	mov	r23,r2
11047f00:	10009f1e 	bne	r2,zero,11048180 <__sfvwrite_r+0x464>
11047f04:	81400417 	ldw	r5,16(r16)
11047f08:	a809883a 	mov	r4,r21
11047f0c:	1047a4c0 	call	11047a4c <_free_r>
11047f10:	00800304 	movi	r2,12
11047f14:	a8800015 	stw	r2,0(r21)
11047f18:	80c0030b 	ldhu	r3,12(r16)
11047f1c:	00bfffc4 	movi	r2,-1
11047f20:	18c01014 	ori	r3,r3,64
11047f24:	80c0030d 	sth	r3,12(r16)
11047f28:	003fae06 	br	11047de4 <__sfvwrite_r+0xc8>
11047f2c:	0007883a 	mov	r3,zero
11047f30:	0039883a 	mov	fp,zero
11047f34:	0025883a 	mov	r18,zero
11047f38:	90001e26 	beq	r18,zero,11047fb4 <__sfvwrite_r+0x298>
11047f3c:	18006526 	beq	r3,zero,110480d4 <__sfvwrite_r+0x3b8>
11047f40:	b02f883a 	mov	r23,r22
11047f44:	9580012e 	bgeu	r18,r22,11047f4c <__sfvwrite_r+0x230>
11047f48:	902f883a 	mov	r23,r18
11047f4c:	81000017 	ldw	r4,0(r16)
11047f50:	80800417 	ldw	r2,16(r16)
11047f54:	84c00217 	ldw	r19,8(r16)
11047f58:	81c00517 	ldw	r7,20(r16)
11047f5c:	1100022e 	bgeu	r2,r4,11047f68 <__sfvwrite_r+0x24c>
11047f60:	99e7883a 	add	r19,r19,r7
11047f64:	9dc01816 	blt	r19,r23,11047fc8 <__sfvwrite_r+0x2ac>
11047f68:	b9c03b16 	blt	r23,r7,11048058 <__sfvwrite_r+0x33c>
11047f6c:	80800917 	ldw	r2,36(r16)
11047f70:	81400717 	ldw	r5,28(r16)
11047f74:	a809883a 	mov	r4,r21
11047f78:	d8c00015 	stw	r3,0(sp)
11047f7c:	e00d883a 	mov	r6,fp
11047f80:	103ee83a 	callr	r2
11047f84:	1027883a 	mov	r19,r2
11047f88:	d8c00017 	ldw	r3,0(sp)
11047f8c:	00bfe20e 	bge	zero,r2,11047f18 <__sfvwrite_r+0x1fc>
11047f90:	b4edc83a 	sub	r22,r22,r19
11047f94:	b0001a26 	beq	r22,zero,11048000 <__sfvwrite_r+0x2e4>
11047f98:	a0800217 	ldw	r2,8(r20)
11047f9c:	e4f9883a 	add	fp,fp,r19
11047fa0:	94e5c83a 	sub	r18,r18,r19
11047fa4:	14e7c83a 	sub	r19,r2,r19
11047fa8:	a4c00215 	stw	r19,8(r20)
11047fac:	983f8c26 	beq	r19,zero,11047de0 <__sfvwrite_r+0xc4>
11047fb0:	903fe21e 	bne	r18,zero,11047f3c <__sfvwrite_r+0x220>
11047fb4:	8f000017 	ldw	fp,0(r17)
11047fb8:	8c800117 	ldw	r18,4(r17)
11047fbc:	0007883a 	mov	r3,zero
11047fc0:	8c400204 	addi	r17,r17,8
11047fc4:	003fdc06 	br	11047f38 <__sfvwrite_r+0x21c>
11047fc8:	e00b883a 	mov	r5,fp
11047fcc:	980d883a 	mov	r6,r19
11047fd0:	d8c00015 	stw	r3,0(sp)
11047fd4:	1048f580 	call	11048f58 <memmove>
11047fd8:	80800017 	ldw	r2,0(r16)
11047fdc:	a809883a 	mov	r4,r21
11047fe0:	800b883a 	mov	r5,r16
11047fe4:	14c5883a 	add	r2,r2,r19
11047fe8:	80800015 	stw	r2,0(r16)
11047fec:	10474200 	call	11047420 <_fflush_r>
11047ff0:	d8c00017 	ldw	r3,0(sp)
11047ff4:	103fc81e 	bne	r2,zero,11047f18 <__sfvwrite_r+0x1fc>
11047ff8:	b4edc83a 	sub	r22,r22,r19
11047ffc:	b03fe61e 	bne	r22,zero,11047f98 <__sfvwrite_r+0x27c>
11048000:	a809883a 	mov	r4,r21
11048004:	800b883a 	mov	r5,r16
11048008:	10474200 	call	11047420 <_fflush_r>
1104800c:	103fc21e 	bne	r2,zero,11047f18 <__sfvwrite_r+0x1fc>
11048010:	0007883a 	mov	r3,zero
11048014:	003fe006 	br	11047f98 <__sfvwrite_r+0x27c>
11048018:	81000017 	ldw	r4,0(r16)
1104801c:	80800417 	ldw	r2,16(r16)
11048020:	1100022e 	bgeu	r2,r4,1104802c <__sfvwrite_r+0x310>
11048024:	9839883a 	mov	fp,r19
11048028:	9c806036 	bltu	r19,r18,110481ac <__sfvwrite_r+0x490>
1104802c:	81c00517 	ldw	r7,20(r16)
11048030:	91c01c36 	bltu	r18,r7,110480a4 <__sfvwrite_r+0x388>
11048034:	80800917 	ldw	r2,36(r16)
11048038:	81400717 	ldw	r5,28(r16)
1104803c:	a809883a 	mov	r4,r21
11048040:	b00d883a 	mov	r6,r22
11048044:	103ee83a 	callr	r2
11048048:	1027883a 	mov	r19,r2
1104804c:	00bfb20e 	bge	zero,r2,11047f18 <__sfvwrite_r+0x1fc>
11048050:	1039883a 	mov	fp,r2
11048054:	003f9806 	br	11047eb8 <__sfvwrite_r+0x19c>
11048058:	b80d883a 	mov	r6,r23
1104805c:	e00b883a 	mov	r5,fp
11048060:	d8c00015 	stw	r3,0(sp)
11048064:	1048f580 	call	11048f58 <memmove>
11048068:	80800217 	ldw	r2,8(r16)
1104806c:	81000017 	ldw	r4,0(r16)
11048070:	b827883a 	mov	r19,r23
11048074:	15c5c83a 	sub	r2,r2,r23
11048078:	25ef883a 	add	r23,r4,r23
1104807c:	80800215 	stw	r2,8(r16)
11048080:	85c00015 	stw	r23,0(r16)
11048084:	d8c00017 	ldw	r3,0(sp)
11048088:	003fc106 	br	11047f90 <__sfvwrite_r+0x274>
1104808c:	81000017 	ldw	r4,0(r16)
11048090:	902f883a 	mov	r23,r18
11048094:	9039883a 	mov	fp,r18
11048098:	9027883a 	mov	r19,r18
1104809c:	900f883a 	mov	r7,r18
110480a0:	003f7a06 	br	11047e8c <__sfvwrite_r+0x170>
110480a4:	b00b883a 	mov	r5,r22
110480a8:	900d883a 	mov	r6,r18
110480ac:	1048f580 	call	11048f58 <memmove>
110480b0:	80c00217 	ldw	r3,8(r16)
110480b4:	80800017 	ldw	r2,0(r16)
110480b8:	9027883a 	mov	r19,r18
110480bc:	1c87c83a 	sub	r3,r3,r18
110480c0:	1485883a 	add	r2,r2,r18
110480c4:	80c00215 	stw	r3,8(r16)
110480c8:	80800015 	stw	r2,0(r16)
110480cc:	9039883a 	mov	fp,r18
110480d0:	003f7906 	br	11047eb8 <__sfvwrite_r+0x19c>
110480d4:	e009883a 	mov	r4,fp
110480d8:	01400284 	movi	r5,10
110480dc:	900d883a 	mov	r6,r18
110480e0:	1048d680 	call	11048d68 <memchr>
110480e4:	10003c26 	beq	r2,zero,110481d8 <__sfvwrite_r+0x4bc>
110480e8:	15800044 	addi	r22,r2,1
110480ec:	b72dc83a 	sub	r22,r22,fp
110480f0:	00c00044 	movi	r3,1
110480f4:	003f9206 	br	11047f40 <__sfvwrite_r+0x224>
110480f8:	81000517 	ldw	r4,20(r16)
110480fc:	81400417 	ldw	r5,16(r16)
11048100:	80c00017 	ldw	r3,0(r16)
11048104:	210d883a 	add	r6,r4,r4
11048108:	3109883a 	add	r4,r6,r4
1104810c:	2026d7fa 	srli	r19,r4,31
11048110:	1979c83a 	sub	fp,r3,r5
11048114:	e1800044 	addi	r6,fp,1
11048118:	9909883a 	add	r4,r19,r4
1104811c:	2027d07a 	srai	r19,r4,1
11048120:	3489883a 	add	r4,r6,r18
11048124:	980d883a 	mov	r6,r19
11048128:	9900022e 	bgeu	r19,r4,11048134 <__sfvwrite_r+0x418>
1104812c:	2027883a 	mov	r19,r4
11048130:	200d883a 	mov	r6,r4
11048134:	1081000c 	andi	r2,r2,1024
11048138:	10bfffcc 	andi	r2,r2,65535
1104813c:	10a0001c 	xori	r2,r2,32768
11048140:	10a00004 	addi	r2,r2,-32768
11048144:	a809883a 	mov	r4,r21
11048148:	103f6b26 	beq	r2,zero,11047ef8 <__sfvwrite_r+0x1dc>
1104814c:	300b883a 	mov	r5,r6
11048150:	10485e40 	call	110485e4 <_malloc_r>
11048154:	102f883a 	mov	r23,r2
11048158:	103f6d26 	beq	r2,zero,11047f10 <__sfvwrite_r+0x1f4>
1104815c:	81400417 	ldw	r5,16(r16)
11048160:	1009883a 	mov	r4,r2
11048164:	e00d883a 	mov	r6,fp
11048168:	1048e600 	call	11048e60 <memcpy>
1104816c:	8080030b 	ldhu	r2,12(r16)
11048170:	00fedfc4 	movi	r3,-1153
11048174:	10c4703a 	and	r2,r2,r3
11048178:	10802014 	ori	r2,r2,128
1104817c:	8080030d 	sth	r2,12(r16)
11048180:	bf09883a 	add	r4,r23,fp
11048184:	9f07c83a 	sub	r3,r19,fp
11048188:	85c00415 	stw	r23,16(r16)
1104818c:	84c00515 	stw	r19,20(r16)
11048190:	81000015 	stw	r4,0(r16)
11048194:	902f883a 	mov	r23,r18
11048198:	80c00215 	stw	r3,8(r16)
1104819c:	9039883a 	mov	fp,r18
110481a0:	9027883a 	mov	r19,r18
110481a4:	900f883a 	mov	r7,r18
110481a8:	003f3806 	br	11047e8c <__sfvwrite_r+0x170>
110481ac:	b00b883a 	mov	r5,r22
110481b0:	980d883a 	mov	r6,r19
110481b4:	1048f580 	call	11048f58 <memmove>
110481b8:	80800017 	ldw	r2,0(r16)
110481bc:	a809883a 	mov	r4,r21
110481c0:	800b883a 	mov	r5,r16
110481c4:	14c5883a 	add	r2,r2,r19
110481c8:	80800015 	stw	r2,0(r16)
110481cc:	10474200 	call	11047420 <_fflush_r>
110481d0:	103f3926 	beq	r2,zero,11047eb8 <__sfvwrite_r+0x19c>
110481d4:	003f5006 	br	11047f18 <__sfvwrite_r+0x1fc>
110481d8:	95800044 	addi	r22,r18,1
110481dc:	00c00044 	movi	r3,1
110481e0:	003f5706 	br	11047f40 <__sfvwrite_r+0x224>
110481e4:	80c0030b 	ldhu	r3,12(r16)
110481e8:	00bfffc4 	movi	r2,-1
110481ec:	18c01014 	ori	r3,r3,64
110481f0:	80c0030d 	sth	r3,12(r16)
110481f4:	00c00244 	movi	r3,9
110481f8:	a8c00015 	stw	r3,0(r21)
110481fc:	003ef906 	br	11047de4 <__sfvwrite_r+0xc8>

11048200 <_fwalk>:
11048200:	defff904 	addi	sp,sp,-28
11048204:	dcc00315 	stw	r19,12(sp)
11048208:	24c0b804 	addi	r19,r4,736
1104820c:	dd400515 	stw	r21,20(sp)
11048210:	dd000415 	stw	r20,16(sp)
11048214:	dfc00615 	stw	ra,24(sp)
11048218:	dc800215 	stw	r18,8(sp)
1104821c:	dc400115 	stw	r17,4(sp)
11048220:	dc000015 	stw	r16,0(sp)
11048224:	282b883a 	mov	r21,r5
11048228:	0029883a 	mov	r20,zero
1104822c:	10478d00 	call	110478d0 <__sfp_lock_acquire>
11048230:	98001226 	beq	r19,zero,1104827c <_fwalk+0x7c>
11048234:	04bfffc4 	movi	r18,-1
11048238:	9c400117 	ldw	r17,4(r19)
1104823c:	9c000217 	ldw	r16,8(r19)
11048240:	8c7fffc4 	addi	r17,r17,-1
11048244:	88000b16 	blt	r17,zero,11048274 <_fwalk+0x74>
11048248:	84000304 	addi	r16,r16,12
1104824c:	80c0000f 	ldh	r3,0(r16)
11048250:	8c7fffc4 	addi	r17,r17,-1
11048254:	813ffd04 	addi	r4,r16,-12
11048258:	18000426 	beq	r3,zero,1104826c <_fwalk+0x6c>
1104825c:	80c0008f 	ldh	r3,2(r16)
11048260:	1c800226 	beq	r3,r18,1104826c <_fwalk+0x6c>
11048264:	a83ee83a 	callr	r21
11048268:	a0a8b03a 	or	r20,r20,r2
1104826c:	84001704 	addi	r16,r16,92
11048270:	8cbff61e 	bne	r17,r18,1104824c <_fwalk+0x4c>
11048274:	9cc00017 	ldw	r19,0(r19)
11048278:	983fef1e 	bne	r19,zero,11048238 <_fwalk+0x38>
1104827c:	10478d40 	call	110478d4 <__sfp_lock_release>
11048280:	a005883a 	mov	r2,r20
11048284:	dfc00617 	ldw	ra,24(sp)
11048288:	dd400517 	ldw	r21,20(sp)
1104828c:	dd000417 	ldw	r20,16(sp)
11048290:	dcc00317 	ldw	r19,12(sp)
11048294:	dc800217 	ldw	r18,8(sp)
11048298:	dc400117 	ldw	r17,4(sp)
1104829c:	dc000017 	ldw	r16,0(sp)
110482a0:	dec00704 	addi	sp,sp,28
110482a4:	f800283a 	ret

110482a8 <_fwalk_reent>:
110482a8:	defff804 	addi	sp,sp,-32
110482ac:	dcc00315 	stw	r19,12(sp)
110482b0:	24c0b804 	addi	r19,r4,736
110482b4:	dd800615 	stw	r22,24(sp)
110482b8:	dd400515 	stw	r21,20(sp)
110482bc:	dd000415 	stw	r20,16(sp)
110482c0:	dfc00715 	stw	ra,28(sp)
110482c4:	dc800215 	stw	r18,8(sp)
110482c8:	dc400115 	stw	r17,4(sp)
110482cc:	dc000015 	stw	r16,0(sp)
110482d0:	2029883a 	mov	r20,r4
110482d4:	282b883a 	mov	r21,r5
110482d8:	002d883a 	mov	r22,zero
110482dc:	10478d00 	call	110478d0 <__sfp_lock_acquire>
110482e0:	98001326 	beq	r19,zero,11048330 <_fwalk_reent+0x88>
110482e4:	04bfffc4 	movi	r18,-1
110482e8:	9c400117 	ldw	r17,4(r19)
110482ec:	9c000217 	ldw	r16,8(r19)
110482f0:	8c7fffc4 	addi	r17,r17,-1
110482f4:	88000c16 	blt	r17,zero,11048328 <_fwalk_reent+0x80>
110482f8:	84000304 	addi	r16,r16,12
110482fc:	80c0000f 	ldh	r3,0(r16)
11048300:	8c7fffc4 	addi	r17,r17,-1
11048304:	817ffd04 	addi	r5,r16,-12
11048308:	18000526 	beq	r3,zero,11048320 <_fwalk_reent+0x78>
1104830c:	80c0008f 	ldh	r3,2(r16)
11048310:	a009883a 	mov	r4,r20
11048314:	1c800226 	beq	r3,r18,11048320 <_fwalk_reent+0x78>
11048318:	a83ee83a 	callr	r21
1104831c:	b0acb03a 	or	r22,r22,r2
11048320:	84001704 	addi	r16,r16,92
11048324:	8cbff51e 	bne	r17,r18,110482fc <_fwalk_reent+0x54>
11048328:	9cc00017 	ldw	r19,0(r19)
1104832c:	983fee1e 	bne	r19,zero,110482e8 <_fwalk_reent+0x40>
11048330:	10478d40 	call	110478d4 <__sfp_lock_release>
11048334:	b005883a 	mov	r2,r22
11048338:	dfc00717 	ldw	ra,28(sp)
1104833c:	dd800617 	ldw	r22,24(sp)
11048340:	dd400517 	ldw	r21,20(sp)
11048344:	dd000417 	ldw	r20,16(sp)
11048348:	dcc00317 	ldw	r19,12(sp)
1104834c:	dc800217 	ldw	r18,8(sp)
11048350:	dc400117 	ldw	r17,4(sp)
11048354:	dc000017 	ldw	r16,0(sp)
11048358:	dec00804 	addi	sp,sp,32
1104835c:	f800283a 	ret

11048360 <_setlocale_r>:
11048360:	defffc04 	addi	sp,sp,-16
11048364:	dc800215 	stw	r18,8(sp)
11048368:	dc400115 	stw	r17,4(sp)
1104836c:	dc000015 	stw	r16,0(sp)
11048370:	dfc00315 	stw	ra,12(sp)
11048374:	3021883a 	mov	r16,r6
11048378:	2023883a 	mov	r17,r4
1104837c:	2825883a 	mov	r18,r5
11048380:	30001626 	beq	r6,zero,110483dc <_setlocale_r+0x7c>
11048384:	3009883a 	mov	r4,r6
11048388:	01400034 	movhi	r5,0
1104838c:	29431104 	addi	r5,r5,3140
11048390:	104a9080 	call	1104a908 <strcmp>
11048394:	10000a1e 	bne	r2,zero,110483c0 <_setlocale_r+0x60>
11048398:	8c800c15 	stw	r18,48(r17)
1104839c:	8c000d15 	stw	r16,52(r17)
110483a0:	00800034 	movhi	r2,0
110483a4:	10831104 	addi	r2,r2,3140
110483a8:	dfc00317 	ldw	ra,12(sp)
110483ac:	dc800217 	ldw	r18,8(sp)
110483b0:	dc400117 	ldw	r17,4(sp)
110483b4:	dc000017 	ldw	r16,0(sp)
110483b8:	dec00404 	addi	sp,sp,16
110483bc:	f800283a 	ret
110483c0:	8009883a 	mov	r4,r16
110483c4:	01400034 	movhi	r5,0
110483c8:	2942fc04 	addi	r5,r5,3056
110483cc:	104a9080 	call	1104a908 <strcmp>
110483d0:	103ff126 	beq	r2,zero,11048398 <_setlocale_r+0x38>
110483d4:	0005883a 	mov	r2,zero
110483d8:	003ff306 	br	110483a8 <_setlocale_r+0x48>
110483dc:	00800034 	movhi	r2,0
110483e0:	10831104 	addi	r2,r2,3140
110483e4:	dfc00317 	ldw	ra,12(sp)
110483e8:	dc800217 	ldw	r18,8(sp)
110483ec:	dc400117 	ldw	r17,4(sp)
110483f0:	dc000017 	ldw	r16,0(sp)
110483f4:	dec00404 	addi	sp,sp,16
110483f8:	f800283a 	ret

110483fc <__locale_charset>:
110483fc:	00800034 	movhi	r2,0
11048400:	10831204 	addi	r2,r2,3144
11048404:	f800283a 	ret

11048408 <_localeconv_r>:
11048408:	00800034 	movhi	r2,0
1104840c:	10831604 	addi	r2,r2,3160
11048410:	f800283a 	ret

11048414 <setlocale>:
11048414:	00c00034 	movhi	r3,0
11048418:	18c9fe04 	addi	r3,r3,10232
1104841c:	2005883a 	mov	r2,r4
11048420:	19000017 	ldw	r4,0(r3)
11048424:	280d883a 	mov	r6,r5
11048428:	100b883a 	mov	r5,r2
1104842c:	10483601 	jmpi	11048360 <_setlocale_r>

11048430 <localeconv>:
11048430:	00800034 	movhi	r2,0
11048434:	10831604 	addi	r2,r2,3160
11048438:	f800283a 	ret

1104843c <__smakebuf_r>:
1104843c:	2880030b 	ldhu	r2,12(r5)
11048440:	deffed04 	addi	sp,sp,-76
11048444:	dc401015 	stw	r17,64(sp)
11048448:	10c0008c 	andi	r3,r2,2
1104844c:	18ffffcc 	andi	r3,r3,65535
11048450:	18e0001c 	xori	r3,r3,32768
11048454:	dc000f15 	stw	r16,60(sp)
11048458:	dfc01215 	stw	ra,72(sp)
1104845c:	dc801115 	stw	r18,68(sp)
11048460:	18e00004 	addi	r3,r3,-32768
11048464:	2821883a 	mov	r16,r5
11048468:	2023883a 	mov	r17,r4
1104846c:	1800381e 	bne	r3,zero,11048550 <__smakebuf_r+0x114>
11048470:	2940038f 	ldh	r5,14(r5)
11048474:	28002d16 	blt	r5,zero,1104852c <__smakebuf_r+0xf0>
11048478:	d80d883a 	mov	r6,sp
1104847c:	104ac880 	call	1104ac88 <_fstat_r>
11048480:	10002916 	blt	r2,zero,11048528 <__smakebuf_r+0xec>
11048484:	d8800117 	ldw	r2,4(sp)
11048488:	00e00014 	movui	r3,32768
1104848c:	10bc000c 	andi	r2,r2,61440
11048490:	10c03c26 	beq	r2,r3,11048584 <__smakebuf_r+0x148>
11048494:	80c0030b 	ldhu	r3,12(r16)
11048498:	18c20014 	ori	r3,r3,2048
1104849c:	80c0030d 	sth	r3,12(r16)
110484a0:	00c80004 	movi	r3,8192
110484a4:	10c00c1e 	bne	r2,r3,110484d8 <__smakebuf_r+0x9c>
110484a8:	8140038f 	ldh	r5,14(r16)
110484ac:	8809883a 	mov	r4,r17
110484b0:	104acf00 	call	1104acf0 <_isatty_r>
110484b4:	10000826 	beq	r2,zero,110484d8 <__smakebuf_r+0x9c>
110484b8:	80c0030b 	ldhu	r3,12(r16)
110484bc:	808010c4 	addi	r2,r16,67
110484c0:	80800015 	stw	r2,0(r16)
110484c4:	18c00054 	ori	r3,r3,1
110484c8:	80800415 	stw	r2,16(r16)
110484cc:	00800044 	movi	r2,1
110484d0:	80c0030d 	sth	r3,12(r16)
110484d4:	80800515 	stw	r2,20(r16)
110484d8:	04810004 	movi	r18,1024
110484dc:	8809883a 	mov	r4,r17
110484e0:	900b883a 	mov	r5,r18
110484e4:	10485e40 	call	110485e4 <_malloc_r>
110484e8:	10003026 	beq	r2,zero,110485ac <__smakebuf_r+0x170>
110484ec:	80c0030b 	ldhu	r3,12(r16)
110484f0:	01044134 	movhi	r4,4356
110484f4:	211d9204 	addi	r4,r4,30280
110484f8:	89000f15 	stw	r4,60(r17)
110484fc:	18c02014 	ori	r3,r3,128
11048500:	80c0030d 	sth	r3,12(r16)
11048504:	80800015 	stw	r2,0(r16)
11048508:	80800415 	stw	r2,16(r16)
1104850c:	84800515 	stw	r18,20(r16)
11048510:	dfc01217 	ldw	ra,72(sp)
11048514:	dc801117 	ldw	r18,68(sp)
11048518:	dc401017 	ldw	r17,64(sp)
1104851c:	dc000f17 	ldw	r16,60(sp)
11048520:	dec01304 	addi	sp,sp,76
11048524:	f800283a 	ret
11048528:	8080030b 	ldhu	r2,12(r16)
1104852c:	10c0200c 	andi	r3,r2,128
11048530:	18ffffcc 	andi	r3,r3,65535
11048534:	18e0001c 	xori	r3,r3,32768
11048538:	18e00004 	addi	r3,r3,-32768
1104853c:	18000f1e 	bne	r3,zero,1104857c <__smakebuf_r+0x140>
11048540:	04810004 	movi	r18,1024
11048544:	10820014 	ori	r2,r2,2048
11048548:	8080030d 	sth	r2,12(r16)
1104854c:	003fe306 	br	110484dc <__smakebuf_r+0xa0>
11048550:	288010c4 	addi	r2,r5,67
11048554:	28800015 	stw	r2,0(r5)
11048558:	28800415 	stw	r2,16(r5)
1104855c:	00800044 	movi	r2,1
11048560:	28800515 	stw	r2,20(r5)
11048564:	dfc01217 	ldw	ra,72(sp)
11048568:	dc801117 	ldw	r18,68(sp)
1104856c:	dc401017 	ldw	r17,64(sp)
11048570:	dc000f17 	ldw	r16,60(sp)
11048574:	dec01304 	addi	sp,sp,76
11048578:	f800283a 	ret
1104857c:	04801004 	movi	r18,64
11048580:	003ff006 	br	11048544 <__smakebuf_r+0x108>
11048584:	81000a17 	ldw	r4,40(r16)
11048588:	00c44174 	movhi	r3,4357
1104858c:	18ea2904 	addi	r3,r3,-22364
11048590:	20ffc01e 	bne	r4,r3,11048494 <__smakebuf_r+0x58>
11048594:	8080030b 	ldhu	r2,12(r16)
11048598:	00c10004 	movi	r3,1024
1104859c:	80c01315 	stw	r3,76(r16)
110485a0:	10c4b03a 	or	r2,r2,r3
110485a4:	8080030d 	sth	r2,12(r16)
110485a8:	003fcb06 	br	110484d8 <__smakebuf_r+0x9c>
110485ac:	8080030b 	ldhu	r2,12(r16)
110485b0:	10c0800c 	andi	r3,r2,512
110485b4:	18ffffcc 	andi	r3,r3,65535
110485b8:	18e0001c 	xori	r3,r3,32768
110485bc:	18e00004 	addi	r3,r3,-32768
110485c0:	183fd31e 	bne	r3,zero,11048510 <__smakebuf_r+0xd4>
110485c4:	10800094 	ori	r2,r2,2
110485c8:	80c010c4 	addi	r3,r16,67
110485cc:	8080030d 	sth	r2,12(r16)
110485d0:	00800044 	movi	r2,1
110485d4:	80c00015 	stw	r3,0(r16)
110485d8:	80c00415 	stw	r3,16(r16)
110485dc:	80800515 	stw	r2,20(r16)
110485e0:	003fcb06 	br	11048510 <__smakebuf_r+0xd4>

110485e4 <_malloc_r>:
110485e4:	defff604 	addi	sp,sp,-40
110485e8:	dc800215 	stw	r18,8(sp)
110485ec:	dfc00915 	stw	ra,36(sp)
110485f0:	df000815 	stw	fp,32(sp)
110485f4:	ddc00715 	stw	r23,28(sp)
110485f8:	dd800615 	stw	r22,24(sp)
110485fc:	dd400515 	stw	r21,20(sp)
11048600:	dd000415 	stw	r20,16(sp)
11048604:	dcc00315 	stw	r19,12(sp)
11048608:	dc400115 	stw	r17,4(sp)
1104860c:	dc000015 	stw	r16,0(sp)
11048610:	288002c4 	addi	r2,r5,11
11048614:	00c00584 	movi	r3,22
11048618:	2025883a 	mov	r18,r4
1104861c:	18802b2e 	bgeu	r3,r2,110486cc <_malloc_r+0xe8>
11048620:	047ffe04 	movi	r17,-8
11048624:	1462703a 	and	r17,r2,r17
11048628:	88002a16 	blt	r17,zero,110486d4 <_malloc_r+0xf0>
1104862c:	89402936 	bltu	r17,r5,110486d4 <_malloc_r+0xf0>
11048630:	9009883a 	mov	r4,r18
11048634:	104cc600 	call	1104cc60 <__malloc_lock>
11048638:	00807dc4 	movi	r2,503
1104863c:	14402936 	bltu	r2,r17,110486e4 <_malloc_r+0x100>
11048640:	8808d0fa 	srli	r4,r17,3
11048644:	04c00034 	movhi	r19,0
11048648:	9cc47904 	addi	r19,r19,4580
1104864c:	2105883a 	add	r2,r4,r4
11048650:	1085883a 	add	r2,r2,r2
11048654:	1085883a 	add	r2,r2,r2
11048658:	9885883a 	add	r2,r19,r2
1104865c:	14000317 	ldw	r16,12(r2)
11048660:	80815526 	beq	r16,r2,11048bb8 <_malloc_r+0x5d4>
11048664:	81000117 	ldw	r4,4(r16)
11048668:	00bfff04 	movi	r2,-4
1104866c:	80c00317 	ldw	r3,12(r16)
11048670:	2084703a 	and	r2,r4,r2
11048674:	8085883a 	add	r2,r16,r2
11048678:	11800117 	ldw	r6,4(r2)
1104867c:	81400217 	ldw	r5,8(r16)
11048680:	9009883a 	mov	r4,r18
11048684:	31800054 	ori	r6,r6,1
11048688:	11800115 	stw	r6,4(r2)
1104868c:	28c00315 	stw	r3,12(r5)
11048690:	19400215 	stw	r5,8(r3)
11048694:	104cc800 	call	1104cc80 <__malloc_unlock>
11048698:	80800204 	addi	r2,r16,8
1104869c:	dfc00917 	ldw	ra,36(sp)
110486a0:	df000817 	ldw	fp,32(sp)
110486a4:	ddc00717 	ldw	r23,28(sp)
110486a8:	dd800617 	ldw	r22,24(sp)
110486ac:	dd400517 	ldw	r21,20(sp)
110486b0:	dd000417 	ldw	r20,16(sp)
110486b4:	dcc00317 	ldw	r19,12(sp)
110486b8:	dc800217 	ldw	r18,8(sp)
110486bc:	dc400117 	ldw	r17,4(sp)
110486c0:	dc000017 	ldw	r16,0(sp)
110486c4:	dec00a04 	addi	sp,sp,40
110486c8:	f800283a 	ret
110486cc:	04400404 	movi	r17,16
110486d0:	897fd72e 	bgeu	r17,r5,11048630 <_malloc_r+0x4c>
110486d4:	00800304 	movi	r2,12
110486d8:	90800015 	stw	r2,0(r18)
110486dc:	0005883a 	mov	r2,zero
110486e0:	003fee06 	br	1104869c <_malloc_r+0xb8>
110486e4:	8808d27a 	srli	r4,r17,9
110486e8:	20007126 	beq	r4,zero,110488b0 <_malloc_r+0x2cc>
110486ec:	00800104 	movi	r2,4
110486f0:	1100eb36 	bltu	r2,r4,11048aa0 <_malloc_r+0x4bc>
110486f4:	8808d1ba 	srli	r4,r17,6
110486f8:	21000e04 	addi	r4,r4,56
110486fc:	210b883a 	add	r5,r4,r4
11048700:	294b883a 	add	r5,r5,r5
11048704:	294b883a 	add	r5,r5,r5
11048708:	04c00034 	movhi	r19,0
1104870c:	9cc47904 	addi	r19,r19,4580
11048710:	994b883a 	add	r5,r19,r5
11048714:	2c000317 	ldw	r16,12(r5)
11048718:	2c000e26 	beq	r5,r16,11048754 <_malloc_r+0x170>
1104871c:	80c00117 	ldw	r3,4(r16)
11048720:	01ffff04 	movi	r7,-4
11048724:	018003c4 	movi	r6,15
11048728:	19c6703a 	and	r3,r3,r7
1104872c:	1c45c83a 	sub	r2,r3,r17
11048730:	30800716 	blt	r6,r2,11048750 <_malloc_r+0x16c>
11048734:	1000610e 	bge	r2,zero,110488bc <_malloc_r+0x2d8>
11048738:	84000317 	ldw	r16,12(r16)
1104873c:	2c000526 	beq	r5,r16,11048754 <_malloc_r+0x170>
11048740:	80c00117 	ldw	r3,4(r16)
11048744:	19c6703a 	and	r3,r3,r7
11048748:	1c45c83a 	sub	r2,r3,r17
1104874c:	30bff90e 	bge	r6,r2,11048734 <_malloc_r+0x150>
11048750:	213fffc4 	addi	r4,r4,-1
11048754:	21000044 	addi	r4,r4,1
11048758:	9c000417 	ldw	r16,16(r19)
1104875c:	00c00034 	movhi	r3,0
11048760:	18c47904 	addi	r3,r3,4580
11048764:	1a400204 	addi	r9,r3,8
11048768:	8240ff26 	beq	r16,r9,11048b68 <_malloc_r+0x584>
1104876c:	81400117 	ldw	r5,4(r16)
11048770:	00bfff04 	movi	r2,-4
11048774:	018003c4 	movi	r6,15
11048778:	2884703a 	and	r2,r5,r2
1104877c:	144bc83a 	sub	r5,r2,r17
11048780:	3140ea16 	blt	r6,r5,11048b2c <_malloc_r+0x548>
11048784:	1a400515 	stw	r9,20(r3)
11048788:	1a400415 	stw	r9,16(r3)
1104878c:	2800570e 	bge	r5,zero,110488ec <_malloc_r+0x308>
11048790:	01407fc4 	movi	r5,511
11048794:	2880ca36 	bltu	r5,r2,11048ac0 <_malloc_r+0x4dc>
11048798:	1004d0fa 	srli	r2,r2,3
1104879c:	02000044 	movi	r8,1
110487a0:	19c00117 	ldw	r7,4(r3)
110487a4:	108b883a 	add	r5,r2,r2
110487a8:	294b883a 	add	r5,r5,r5
110487ac:	1005d0ba 	srai	r2,r2,2
110487b0:	294b883a 	add	r5,r5,r5
110487b4:	28cb883a 	add	r5,r5,r3
110487b8:	29800217 	ldw	r6,8(r5)
110487bc:	4084983a 	sll	r2,r8,r2
110487c0:	81400315 	stw	r5,12(r16)
110487c4:	81800215 	stw	r6,8(r16)
110487c8:	11c4b03a 	or	r2,r2,r7
110487cc:	18800115 	stw	r2,4(r3)
110487d0:	2c000215 	stw	r16,8(r5)
110487d4:	34000315 	stw	r16,12(r6)
110487d8:	200bd0ba 	srai	r5,r4,2
110487dc:	00c00044 	movi	r3,1
110487e0:	194a983a 	sll	r5,r3,r5
110487e4:	11404936 	bltu	r2,r5,1104890c <_malloc_r+0x328>
110487e8:	1146703a 	and	r3,r2,r5
110487ec:	18000a1e 	bne	r3,zero,11048818 <_malloc_r+0x234>
110487f0:	00ffff04 	movi	r3,-4
110487f4:	294b883a 	add	r5,r5,r5
110487f8:	20c8703a 	and	r4,r4,r3
110487fc:	1146703a 	and	r3,r2,r5
11048800:	21000104 	addi	r4,r4,4
11048804:	1800041e 	bne	r3,zero,11048818 <_malloc_r+0x234>
11048808:	294b883a 	add	r5,r5,r5
1104880c:	1146703a 	and	r3,r2,r5
11048810:	21000104 	addi	r4,r4,4
11048814:	183ffc26 	beq	r3,zero,11048808 <_malloc_r+0x224>
11048818:	023fff04 	movi	r8,-4
1104881c:	01c003c4 	movi	r7,15
11048820:	2105883a 	add	r2,r4,r4
11048824:	1085883a 	add	r2,r2,r2
11048828:	1085883a 	add	r2,r2,r2
1104882c:	9899883a 	add	r12,r19,r2
11048830:	62800304 	addi	r10,r12,12
11048834:	2017883a 	mov	r11,r4
11048838:	54000017 	ldw	r16,0(r10)
1104883c:	51bffd04 	addi	r6,r10,-12
11048840:	8180041e 	bne	r16,r6,11048854 <_malloc_r+0x270>
11048844:	0000ca06 	br	11048b70 <_malloc_r+0x58c>
11048848:	10001c0e 	bge	r2,zero,110488bc <_malloc_r+0x2d8>
1104884c:	84000317 	ldw	r16,12(r16)
11048850:	8180c726 	beq	r16,r6,11048b70 <_malloc_r+0x58c>
11048854:	80c00117 	ldw	r3,4(r16)
11048858:	1a06703a 	and	r3,r3,r8
1104885c:	1c45c83a 	sub	r2,r3,r17
11048860:	38bff90e 	bge	r7,r2,11048848 <_malloc_r+0x264>
11048864:	81000317 	ldw	r4,12(r16)
11048868:	81400217 	ldw	r5,8(r16)
1104886c:	8447883a 	add	r3,r16,r17
11048870:	8c400054 	ori	r17,r17,1
11048874:	29000315 	stw	r4,12(r5)
11048878:	21400215 	stw	r5,8(r4)
1104887c:	84400115 	stw	r17,4(r16)
11048880:	1889883a 	add	r4,r3,r2
11048884:	11400054 	ori	r5,r2,1
11048888:	98c00515 	stw	r3,20(r19)
1104888c:	98c00415 	stw	r3,16(r19)
11048890:	20800015 	stw	r2,0(r4)
11048894:	1a400315 	stw	r9,12(r3)
11048898:	1a400215 	stw	r9,8(r3)
1104889c:	19400115 	stw	r5,4(r3)
110488a0:	9009883a 	mov	r4,r18
110488a4:	104cc800 	call	1104cc80 <__malloc_unlock>
110488a8:	80800204 	addi	r2,r16,8
110488ac:	003f7b06 	br	1104869c <_malloc_r+0xb8>
110488b0:	8808d0fa 	srli	r4,r17,3
110488b4:	210b883a 	add	r5,r4,r4
110488b8:	003f9106 	br	11048700 <_malloc_r+0x11c>
110488bc:	80c7883a 	add	r3,r16,r3
110488c0:	19400117 	ldw	r5,4(r3)
110488c4:	80800317 	ldw	r2,12(r16)
110488c8:	81000217 	ldw	r4,8(r16)
110488cc:	29400054 	ori	r5,r5,1
110488d0:	19400115 	stw	r5,4(r3)
110488d4:	20800315 	stw	r2,12(r4)
110488d8:	11000215 	stw	r4,8(r2)
110488dc:	9009883a 	mov	r4,r18
110488e0:	104cc800 	call	1104cc80 <__malloc_unlock>
110488e4:	80800204 	addi	r2,r16,8
110488e8:	003f6c06 	br	1104869c <_malloc_r+0xb8>
110488ec:	8085883a 	add	r2,r16,r2
110488f0:	10c00117 	ldw	r3,4(r2)
110488f4:	9009883a 	mov	r4,r18
110488f8:	18c00054 	ori	r3,r3,1
110488fc:	10c00115 	stw	r3,4(r2)
11048900:	104cc800 	call	1104cc80 <__malloc_unlock>
11048904:	80800204 	addi	r2,r16,8
11048908:	003f6406 	br	1104869c <_malloc_r+0xb8>
1104890c:	9c000217 	ldw	r16,8(r19)
11048910:	00bfff04 	movi	r2,-4
11048914:	85400117 	ldw	r21,4(r16)
11048918:	a8aa703a 	and	r21,r21,r2
1104891c:	ac400336 	bltu	r21,r17,1104892c <_malloc_r+0x348>
11048920:	ac45c83a 	sub	r2,r21,r17
11048924:	00c003c4 	movi	r3,15
11048928:	18805316 	blt	r3,r2,11048a78 <_malloc_r+0x494>
1104892c:	d5e01717 	ldw	r23,-32676(gp)
11048930:	d0e00317 	ldw	r3,-32756(gp)
11048934:	00bfffc4 	movi	r2,-1
11048938:	8579883a 	add	fp,r16,r21
1104893c:	8def883a 	add	r23,r17,r23
11048940:	1880d226 	beq	r3,r2,11048c8c <_malloc_r+0x6a8>
11048944:	bdc403c4 	addi	r23,r23,4111
11048948:	00bc0004 	movi	r2,-4096
1104894c:	b8ae703a 	and	r23,r23,r2
11048950:	9009883a 	mov	r4,r18
11048954:	b80b883a 	mov	r5,r23
11048958:	104a7640 	call	1104a764 <_sbrk_r>
1104895c:	1029883a 	mov	r20,r2
11048960:	00bfffc4 	movi	r2,-1
11048964:	a080d126 	beq	r20,r2,11048cac <_malloc_r+0x6c8>
11048968:	a7009f36 	bltu	r20,fp,11048be8 <_malloc_r+0x604>
1104896c:	05800034 	movhi	r22,0
11048970:	b58a2604 	addi	r22,r22,10392
11048974:	b0800017 	ldw	r2,0(r22)
11048978:	b885883a 	add	r2,r23,r2
1104897c:	b0800015 	stw	r2,0(r22)
11048980:	e500cf26 	beq	fp,r20,11048cc0 <_malloc_r+0x6dc>
11048984:	d1200317 	ldw	r4,-32756(gp)
11048988:	00ffffc4 	movi	r3,-1
1104898c:	20c0e026 	beq	r4,r3,11048d10 <_malloc_r+0x72c>
11048990:	a739c83a 	sub	fp,r20,fp
11048994:	1705883a 	add	r2,r2,fp
11048998:	b0800015 	stw	r2,0(r22)
1104899c:	a08001cc 	andi	r2,r20,7
110489a0:	1000a526 	beq	r2,zero,11048c38 <_malloc_r+0x654>
110489a4:	a0a9c83a 	sub	r20,r20,r2
110489a8:	00c40204 	movi	r3,4104
110489ac:	a5000204 	addi	r20,r20,8
110489b0:	1885c83a 	sub	r2,r3,r2
110489b4:	a5c7883a 	add	r3,r20,r23
110489b8:	18c3ffcc 	andi	r3,r3,4095
110489bc:	10efc83a 	sub	r23,r2,r3
110489c0:	9009883a 	mov	r4,r18
110489c4:	b80b883a 	mov	r5,r23
110489c8:	104a7640 	call	1104a764 <_sbrk_r>
110489cc:	00ffffc4 	movi	r3,-1
110489d0:	10c0cc26 	beq	r2,r3,11048d04 <_malloc_r+0x720>
110489d4:	1505c83a 	sub	r2,r2,r20
110489d8:	b887883a 	add	r3,r23,r2
110489dc:	18c00054 	ori	r3,r3,1
110489e0:	b0800017 	ldw	r2,0(r22)
110489e4:	9d000215 	stw	r20,8(r19)
110489e8:	a0c00115 	stw	r3,4(r20)
110489ec:	b885883a 	add	r2,r23,r2
110489f0:	b0800015 	stw	r2,0(r22)
110489f4:	84c00e26 	beq	r16,r19,11048a30 <_malloc_r+0x44c>
110489f8:	00c003c4 	movi	r3,15
110489fc:	1d40902e 	bgeu	r3,r21,11048c40 <_malloc_r+0x65c>
11048a00:	ad7ffd04 	addi	r21,r21,-12
11048a04:	013ffe04 	movi	r4,-8
11048a08:	a908703a 	and	r4,r21,r4
11048a0c:	810b883a 	add	r5,r16,r4
11048a10:	01800144 	movi	r6,5
11048a14:	29800115 	stw	r6,4(r5)
11048a18:	29800215 	stw	r6,8(r5)
11048a1c:	81400117 	ldw	r5,4(r16)
11048a20:	2940004c 	andi	r5,r5,1
11048a24:	214ab03a 	or	r5,r4,r5
11048a28:	81400115 	stw	r5,4(r16)
11048a2c:	1900ae36 	bltu	r3,r4,11048ce8 <_malloc_r+0x704>
11048a30:	d0e01617 	ldw	r3,-32680(gp)
11048a34:	1880012e 	bgeu	r3,r2,11048a3c <_malloc_r+0x458>
11048a38:	d0a01615 	stw	r2,-32680(gp)
11048a3c:	d0e01517 	ldw	r3,-32684(gp)
11048a40:	9c000217 	ldw	r16,8(r19)
11048a44:	1880012e 	bgeu	r3,r2,11048a4c <_malloc_r+0x468>
11048a48:	d0a01515 	stw	r2,-32684(gp)
11048a4c:	80c00117 	ldw	r3,4(r16)
11048a50:	00bfff04 	movi	r2,-4
11048a54:	1886703a 	and	r3,r3,r2
11048a58:	1c45c83a 	sub	r2,r3,r17
11048a5c:	1c400236 	bltu	r3,r17,11048a68 <_malloc_r+0x484>
11048a60:	00c003c4 	movi	r3,15
11048a64:	18800416 	blt	r3,r2,11048a78 <_malloc_r+0x494>
11048a68:	9009883a 	mov	r4,r18
11048a6c:	104cc800 	call	1104cc80 <__malloc_unlock>
11048a70:	0005883a 	mov	r2,zero
11048a74:	003f0906 	br	1104869c <_malloc_r+0xb8>
11048a78:	88c00054 	ori	r3,r17,1
11048a7c:	10800054 	ori	r2,r2,1
11048a80:	80c00115 	stw	r3,4(r16)
11048a84:	8463883a 	add	r17,r16,r17
11048a88:	88800115 	stw	r2,4(r17)
11048a8c:	9009883a 	mov	r4,r18
11048a90:	9c400215 	stw	r17,8(r19)
11048a94:	104cc800 	call	1104cc80 <__malloc_unlock>
11048a98:	80800204 	addi	r2,r16,8
11048a9c:	003eff06 	br	1104869c <_malloc_r+0xb8>
11048aa0:	00800504 	movi	r2,20
11048aa4:	1100492e 	bgeu	r2,r4,11048bcc <_malloc_r+0x5e8>
11048aa8:	00801504 	movi	r2,84
11048aac:	11005c36 	bltu	r2,r4,11048c20 <_malloc_r+0x63c>
11048ab0:	8808d33a 	srli	r4,r17,12
11048ab4:	21001b84 	addi	r4,r4,110
11048ab8:	210b883a 	add	r5,r4,r4
11048abc:	003f1006 	br	11048700 <_malloc_r+0x11c>
11048ac0:	1006d27a 	srli	r3,r2,9
11048ac4:	01400104 	movi	r5,4
11048ac8:	28c0432e 	bgeu	r5,r3,11048bd8 <_malloc_r+0x5f4>
11048acc:	01400504 	movi	r5,20
11048ad0:	28c07036 	bltu	r5,r3,11048c94 <_malloc_r+0x6b0>
11048ad4:	194016c4 	addi	r5,r3,91
11048ad8:	294d883a 	add	r6,r5,r5
11048adc:	318d883a 	add	r6,r6,r6
11048ae0:	318d883a 	add	r6,r6,r6
11048ae4:	998d883a 	add	r6,r19,r6
11048ae8:	30c00217 	ldw	r3,8(r6)
11048aec:	01c00034 	movhi	r7,0
11048af0:	39c47904 	addi	r7,r7,4580
11048af4:	19805726 	beq	r3,r6,11048c54 <_malloc_r+0x670>
11048af8:	01ffff04 	movi	r7,-4
11048afc:	19400117 	ldw	r5,4(r3)
11048b00:	29ca703a 	and	r5,r5,r7
11048b04:	1140022e 	bgeu	r2,r5,11048b10 <_malloc_r+0x52c>
11048b08:	18c00217 	ldw	r3,8(r3)
11048b0c:	30fffb1e 	bne	r6,r3,11048afc <_malloc_r+0x518>
11048b10:	19400317 	ldw	r5,12(r3)
11048b14:	98800117 	ldw	r2,4(r19)
11048b18:	81400315 	stw	r5,12(r16)
11048b1c:	80c00215 	stw	r3,8(r16)
11048b20:	2c000215 	stw	r16,8(r5)
11048b24:	1c000315 	stw	r16,12(r3)
11048b28:	003f2b06 	br	110487d8 <_malloc_r+0x1f4>
11048b2c:	8445883a 	add	r2,r16,r17
11048b30:	8c400054 	ori	r17,r17,1
11048b34:	18800515 	stw	r2,20(r3)
11048b38:	18800415 	stw	r2,16(r3)
11048b3c:	29000054 	ori	r4,r5,1
11048b40:	1147883a 	add	r3,r2,r5
11048b44:	84400115 	stw	r17,4(r16)
11048b48:	11000115 	stw	r4,4(r2)
11048b4c:	12400315 	stw	r9,12(r2)
11048b50:	12400215 	stw	r9,8(r2)
11048b54:	19400015 	stw	r5,0(r3)
11048b58:	9009883a 	mov	r4,r18
11048b5c:	104cc800 	call	1104cc80 <__malloc_unlock>
11048b60:	80800204 	addi	r2,r16,8
11048b64:	003ecd06 	br	1104869c <_malloc_r+0xb8>
11048b68:	18800117 	ldw	r2,4(r3)
11048b6c:	003f1a06 	br	110487d8 <_malloc_r+0x1f4>
11048b70:	5ac00044 	addi	r11,r11,1
11048b74:	588000cc 	andi	r2,r11,3
11048b78:	52800204 	addi	r10,r10,8
11048b7c:	103f2e1e 	bne	r2,zero,11048838 <_malloc_r+0x254>
11048b80:	20c000cc 	andi	r3,r4,3
11048b84:	60bffe04 	addi	r2,r12,-8
11048b88:	18006f26 	beq	r3,zero,11048d48 <_malloc_r+0x764>
11048b8c:	63000017 	ldw	r12,0(r12)
11048b90:	213fffc4 	addi	r4,r4,-1
11048b94:	60bffa26 	beq	r12,r2,11048b80 <_malloc_r+0x59c>
11048b98:	98800117 	ldw	r2,4(r19)
11048b9c:	294b883a 	add	r5,r5,r5
11048ba0:	117f5a36 	bltu	r2,r5,1104890c <_malloc_r+0x328>
11048ba4:	283f5926 	beq	r5,zero,1104890c <_malloc_r+0x328>
11048ba8:	1146703a 	and	r3,r2,r5
11048bac:	18001626 	beq	r3,zero,11048c08 <_malloc_r+0x624>
11048bb0:	5809883a 	mov	r4,r11
11048bb4:	003f1a06 	br	11048820 <_malloc_r+0x23c>
11048bb8:	80800204 	addi	r2,r16,8
11048bbc:	84000517 	ldw	r16,20(r16)
11048bc0:	143ea81e 	bne	r2,r16,11048664 <_malloc_r+0x80>
11048bc4:	21000084 	addi	r4,r4,2
11048bc8:	003ee306 	br	11048758 <_malloc_r+0x174>
11048bcc:	210016c4 	addi	r4,r4,91
11048bd0:	210b883a 	add	r5,r4,r4
11048bd4:	003eca06 	br	11048700 <_malloc_r+0x11c>
11048bd8:	100ad1ba 	srli	r5,r2,6
11048bdc:	29400e04 	addi	r5,r5,56
11048be0:	294d883a 	add	r6,r5,r5
11048be4:	003fbd06 	br	11048adc <_malloc_r+0x4f8>
11048be8:	84ff6026 	beq	r16,r19,1104896c <_malloc_r+0x388>
11048bec:	00800034 	movhi	r2,0
11048bf0:	10847904 	addi	r2,r2,4580
11048bf4:	14000217 	ldw	r16,8(r2)
11048bf8:	00bfff04 	movi	r2,-4
11048bfc:	80c00117 	ldw	r3,4(r16)
11048c00:	1886703a 	and	r3,r3,r2
11048c04:	003f9406 	br	11048a58 <_malloc_r+0x474>
11048c08:	294b883a 	add	r5,r5,r5
11048c0c:	1146703a 	and	r3,r2,r5
11048c10:	5ac00104 	addi	r11,r11,4
11048c14:	183ffc26 	beq	r3,zero,11048c08 <_malloc_r+0x624>
11048c18:	5809883a 	mov	r4,r11
11048c1c:	003f0006 	br	11048820 <_malloc_r+0x23c>
11048c20:	00805504 	movi	r2,340
11048c24:	11001336 	bltu	r2,r4,11048c74 <_malloc_r+0x690>
11048c28:	8808d3fa 	srli	r4,r17,15
11048c2c:	21001dc4 	addi	r4,r4,119
11048c30:	210b883a 	add	r5,r4,r4
11048c34:	003eb206 	br	11048700 <_malloc_r+0x11c>
11048c38:	00840004 	movi	r2,4096
11048c3c:	003f5d06 	br	110489b4 <_malloc_r+0x3d0>
11048c40:	00800044 	movi	r2,1
11048c44:	a0800115 	stw	r2,4(r20)
11048c48:	a021883a 	mov	r16,r20
11048c4c:	0007883a 	mov	r3,zero
11048c50:	003f8106 	br	11048a58 <_malloc_r+0x474>
11048c54:	280bd0ba 	srai	r5,r5,2
11048c58:	01800044 	movi	r6,1
11048c5c:	38800117 	ldw	r2,4(r7)
11048c60:	314c983a 	sll	r6,r6,r5
11048c64:	180b883a 	mov	r5,r3
11048c68:	3084b03a 	or	r2,r6,r2
11048c6c:	38800115 	stw	r2,4(r7)
11048c70:	003fa906 	br	11048b18 <_malloc_r+0x534>
11048c74:	00815504 	movi	r2,1364
11048c78:	11001836 	bltu	r2,r4,11048cdc <_malloc_r+0x6f8>
11048c7c:	8808d4ba 	srli	r4,r17,18
11048c80:	21001f04 	addi	r4,r4,124
11048c84:	210b883a 	add	r5,r4,r4
11048c88:	003e9d06 	br	11048700 <_malloc_r+0x11c>
11048c8c:	bdc00404 	addi	r23,r23,16
11048c90:	003f2f06 	br	11048950 <_malloc_r+0x36c>
11048c94:	01401504 	movi	r5,84
11048c98:	28c01f36 	bltu	r5,r3,11048d18 <_malloc_r+0x734>
11048c9c:	100ad33a 	srli	r5,r2,12
11048ca0:	29401b84 	addi	r5,r5,110
11048ca4:	294d883a 	add	r6,r5,r5
11048ca8:	003f8c06 	br	11048adc <_malloc_r+0x4f8>
11048cac:	9c000217 	ldw	r16,8(r19)
11048cb0:	00bfff04 	movi	r2,-4
11048cb4:	80c00117 	ldw	r3,4(r16)
11048cb8:	1886703a 	and	r3,r3,r2
11048cbc:	003f6606 	br	11048a58 <_malloc_r+0x474>
11048cc0:	e0c3ffcc 	andi	r3,fp,4095
11048cc4:	183f2f1e 	bne	r3,zero,11048984 <_malloc_r+0x3a0>
11048cc8:	98c00217 	ldw	r3,8(r19)
11048ccc:	bd49883a 	add	r4,r23,r21
11048cd0:	21000054 	ori	r4,r4,1
11048cd4:	19000115 	stw	r4,4(r3)
11048cd8:	003f5506 	br	11048a30 <_malloc_r+0x44c>
11048cdc:	01403f04 	movi	r5,252
11048ce0:	01001f84 	movi	r4,126
11048ce4:	003e8606 	br	11048700 <_malloc_r+0x11c>
11048ce8:	9009883a 	mov	r4,r18
11048cec:	81400204 	addi	r5,r16,8
11048cf0:	1047a4c0 	call	11047a4c <_free_r>
11048cf4:	00800034 	movhi	r2,0
11048cf8:	108a2604 	addi	r2,r2,10392
11048cfc:	10800017 	ldw	r2,0(r2)
11048d00:	003f4b06 	br	11048a30 <_malloc_r+0x44c>
11048d04:	00c00044 	movi	r3,1
11048d08:	002f883a 	mov	r23,zero
11048d0c:	003f3406 	br	110489e0 <_malloc_r+0x3fc>
11048d10:	d5200315 	stw	r20,-32756(gp)
11048d14:	003f2106 	br	1104899c <_malloc_r+0x3b8>
11048d18:	01405504 	movi	r5,340
11048d1c:	28c00436 	bltu	r5,r3,11048d30 <_malloc_r+0x74c>
11048d20:	100ad3fa 	srli	r5,r2,15
11048d24:	29401dc4 	addi	r5,r5,119
11048d28:	294d883a 	add	r6,r5,r5
11048d2c:	003f6b06 	br	11048adc <_malloc_r+0x4f8>
11048d30:	01415504 	movi	r5,1364
11048d34:	28c00936 	bltu	r5,r3,11048d5c <_malloc_r+0x778>
11048d38:	100ad4ba 	srli	r5,r2,18
11048d3c:	29401f04 	addi	r5,r5,124
11048d40:	294d883a 	add	r6,r5,r5
11048d44:	003f6506 	br	11048adc <_malloc_r+0x4f8>
11048d48:	98800117 	ldw	r2,4(r19)
11048d4c:	0146303a 	nor	r3,zero,r5
11048d50:	1884703a 	and	r2,r3,r2
11048d54:	98800115 	stw	r2,4(r19)
11048d58:	003f9006 	br	11048b9c <_malloc_r+0x5b8>
11048d5c:	01803f04 	movi	r6,252
11048d60:	01401f84 	movi	r5,126
11048d64:	003f5d06 	br	11048adc <_malloc_r+0x4f8>

11048d68 <memchr>:
11048d68:	008000c4 	movi	r2,3
11048d6c:	29403fcc 	andi	r5,r5,255
11048d70:	1180282e 	bgeu	r2,r6,11048e14 <memchr+0xac>
11048d74:	2086703a 	and	r3,r4,r2
11048d78:	1800351e 	bne	r3,zero,11048e50 <memchr+0xe8>
11048d7c:	2816923a 	slli	r11,r5,8
11048d80:	2093883a 	add	r9,r4,r2
11048d84:	22000084 	addi	r8,r4,2
11048d88:	5957883a 	add	r11,r11,r5
11048d8c:	5816923a 	slli	r11,r11,8
11048d90:	20c00044 	addi	r3,r4,1
11048d94:	037fbff4 	movhi	r13,65279
11048d98:	6b7fbfc4 	addi	r13,r13,-257
11048d9c:	5957883a 	add	r11,r11,r5
11048da0:	5816923a 	slli	r11,r11,8
11048da4:	03202074 	movhi	r12,32897
11048da8:	63202004 	addi	r12,r12,-32640
11048dac:	101d883a 	mov	r14,r2
11048db0:	5957883a 	add	r11,r11,r5
11048db4:	21c00017 	ldw	r7,0(r4)
11048db8:	31bfff04 	addi	r6,r6,-4
11048dbc:	1805883a 	mov	r2,r3
11048dc0:	3acef03a 	xor	r7,r7,r11
11048dc4:	3b55883a 	add	r10,r7,r13
11048dc8:	01ce303a 	nor	r7,zero,r7
11048dcc:	51ce703a 	and	r7,r10,r7
11048dd0:	3b0e703a 	and	r7,r7,r12
11048dd4:	38000a26 	beq	r7,zero,11048e00 <memchr+0x98>
11048dd8:	21c00003 	ldbu	r7,0(r4)
11048ddc:	39401e26 	beq	r7,r5,11048e58 <memchr+0xf0>
11048de0:	19c00003 	ldbu	r7,0(r3)
11048de4:	39401926 	beq	r7,r5,11048e4c <memchr+0xe4>
11048de8:	41c00003 	ldbu	r7,0(r8)
11048dec:	4005883a 	mov	r2,r8
11048df0:	39401626 	beq	r7,r5,11048e4c <memchr+0xe4>
11048df4:	49c00003 	ldbu	r7,0(r9)
11048df8:	4805883a 	mov	r2,r9
11048dfc:	39401326 	beq	r7,r5,11048e4c <memchr+0xe4>
11048e00:	21000104 	addi	r4,r4,4
11048e04:	4a400104 	addi	r9,r9,4
11048e08:	42000104 	addi	r8,r8,4
11048e0c:	18c00104 	addi	r3,r3,4
11048e10:	71bfe836 	bltu	r14,r6,11048db4 <memchr+0x4c>
11048e14:	2005883a 	mov	r2,r4
11048e18:	30000a26 	beq	r6,zero,11048e44 <memchr+0xdc>
11048e1c:	10c00003 	ldbu	r3,0(r2)
11048e20:	19400a26 	beq	r3,r5,11048e4c <memchr+0xe4>
11048e24:	10c00044 	addi	r3,r2,1
11048e28:	118d883a 	add	r6,r2,r6
11048e2c:	00000306 	br	11048e3c <memchr+0xd4>
11048e30:	11000003 	ldbu	r4,0(r2)
11048e34:	18c00044 	addi	r3,r3,1
11048e38:	21400426 	beq	r4,r5,11048e4c <memchr+0xe4>
11048e3c:	1805883a 	mov	r2,r3
11048e40:	19bffb1e 	bne	r3,r6,11048e30 <memchr+0xc8>
11048e44:	0005883a 	mov	r2,zero
11048e48:	f800283a 	ret
11048e4c:	f800283a 	ret
11048e50:	2005883a 	mov	r2,r4
11048e54:	003ff106 	br	11048e1c <memchr+0xb4>
11048e58:	2005883a 	mov	r2,r4
11048e5c:	f800283a 	ret

11048e60 <memcpy>:
11048e60:	00c003c4 	movi	r3,15
11048e64:	2005883a 	mov	r2,r4
11048e68:	3009883a 	mov	r4,r6
11048e6c:	1980032e 	bgeu	r3,r6,11048e7c <memcpy+0x1c>
11048e70:	2886b03a 	or	r3,r5,r2
11048e74:	18c000cc 	andi	r3,r3,3
11048e78:	18000926 	beq	r3,zero,11048ea0 <memcpy+0x40>
11048e7c:	1007883a 	mov	r3,r2
11048e80:	290f883a 	add	r7,r5,r4
11048e84:	20000526 	beq	r4,zero,11048e9c <memcpy+0x3c>
11048e88:	29800003 	ldbu	r6,0(r5)
11048e8c:	18c00044 	addi	r3,r3,1
11048e90:	29400044 	addi	r5,r5,1
11048e94:	19bfffc5 	stb	r6,-1(r3)
11048e98:	29fffb1e 	bne	r5,r7,11048e88 <memcpy+0x28>
11048e9c:	f800283a 	ret
11048ea0:	327ffc04 	addi	r9,r6,-16
11048ea4:	4812d13a 	srli	r9,r9,4
11048ea8:	11000404 	addi	r4,r2,16
11048eac:	1007883a 	mov	r3,r2
11048eb0:	4810913a 	slli	r8,r9,4
11048eb4:	280f883a 	mov	r7,r5
11048eb8:	2209883a 	add	r4,r4,r8
11048ebc:	3a000017 	ldw	r8,0(r7)
11048ec0:	18c00404 	addi	r3,r3,16
11048ec4:	39c00404 	addi	r7,r7,16
11048ec8:	1a3ffc15 	stw	r8,-16(r3)
11048ecc:	3a3ffd17 	ldw	r8,-12(r7)
11048ed0:	1a3ffd15 	stw	r8,-12(r3)
11048ed4:	3a3ffe17 	ldw	r8,-8(r7)
11048ed8:	1a3ffe15 	stw	r8,-8(r3)
11048edc:	3a3fff17 	ldw	r8,-4(r7)
11048ee0:	1a3fff15 	stw	r8,-4(r3)
11048ee4:	193ff51e 	bne	r3,r4,11048ebc <memcpy+0x5c>
11048ee8:	49c00044 	addi	r7,r9,1
11048eec:	380e913a 	slli	r7,r7,4
11048ef0:	310003cc 	andi	r4,r6,15
11048ef4:	018000c4 	movi	r6,3
11048ef8:	11c7883a 	add	r3,r2,r7
11048efc:	29cb883a 	add	r5,r5,r7
11048f00:	313fdf2e 	bgeu	r6,r4,11048e80 <memcpy+0x20>
11048f04:	213fff04 	addi	r4,r4,-4
11048f08:	2014d0ba 	srli	r10,r4,2
11048f0c:	1a400104 	addi	r9,r3,4
11048f10:	180d883a 	mov	r6,r3
11048f14:	528f883a 	add	r7,r10,r10
11048f18:	39cf883a 	add	r7,r7,r7
11048f1c:	49d3883a 	add	r9,r9,r7
11048f20:	280f883a 	mov	r7,r5
11048f24:	3a000017 	ldw	r8,0(r7)
11048f28:	31800104 	addi	r6,r6,4
11048f2c:	39c00104 	addi	r7,r7,4
11048f30:	323fff15 	stw	r8,-4(r6)
11048f34:	327ffb1e 	bne	r6,r9,11048f24 <memcpy+0xc4>
11048f38:	51800044 	addi	r6,r10,1
11048f3c:	52bfff24 	muli	r10,r10,-4
11048f40:	318d883a 	add	r6,r6,r6
11048f44:	318d883a 	add	r6,r6,r6
11048f48:	5109883a 	add	r4,r10,r4
11048f4c:	298b883a 	add	r5,r5,r6
11048f50:	1987883a 	add	r3,r3,r6
11048f54:	003fca06 	br	11048e80 <memcpy+0x20>

11048f58 <memmove>:
11048f58:	2005883a 	mov	r2,r4
11048f5c:	300f883a 	mov	r7,r6
11048f60:	29000b2e 	bgeu	r5,r4,11048f90 <memmove+0x38>
11048f64:	2987883a 	add	r3,r5,r6
11048f68:	20c0092e 	bgeu	r4,r3,11048f90 <memmove+0x38>
11048f6c:	218b883a 	add	r5,r4,r6
11048f70:	198fc83a 	sub	r7,r3,r6
11048f74:	30003f26 	beq	r6,zero,11049074 <memmove+0x11c>
11048f78:	18ffffc4 	addi	r3,r3,-1
11048f7c:	19000003 	ldbu	r4,0(r3)
11048f80:	297fffc4 	addi	r5,r5,-1
11048f84:	29000005 	stb	r4,0(r5)
11048f88:	19fffb1e 	bne	r3,r7,11048f78 <memmove+0x20>
11048f8c:	f800283a 	ret
11048f90:	00c003c4 	movi	r3,15
11048f94:	1980382e 	bgeu	r3,r6,11049078 <memmove+0x120>
11048f98:	2886b03a 	or	r3,r5,r2
11048f9c:	18c000cc 	andi	r3,r3,3
11048fa0:	1800351e 	bne	r3,zero,11049078 <memmove+0x120>
11048fa4:	327ffc04 	addi	r9,r6,-16
11048fa8:	4812d13a 	srli	r9,r9,4
11048fac:	12000404 	addi	r8,r2,16
11048fb0:	1007883a 	mov	r3,r2
11048fb4:	4808913a 	slli	r4,r9,4
11048fb8:	280f883a 	mov	r7,r5
11048fbc:	4111883a 	add	r8,r8,r4
11048fc0:	39000017 	ldw	r4,0(r7)
11048fc4:	18c00404 	addi	r3,r3,16
11048fc8:	39c00404 	addi	r7,r7,16
11048fcc:	193ffc15 	stw	r4,-16(r3)
11048fd0:	393ffd17 	ldw	r4,-12(r7)
11048fd4:	193ffd15 	stw	r4,-12(r3)
11048fd8:	393ffe17 	ldw	r4,-8(r7)
11048fdc:	193ffe15 	stw	r4,-8(r3)
11048fe0:	393fff17 	ldw	r4,-4(r7)
11048fe4:	193fff15 	stw	r4,-4(r3)
11048fe8:	1a3ff51e 	bne	r3,r8,11048fc0 <memmove+0x68>
11048fec:	49000044 	addi	r4,r9,1
11048ff0:	2008913a 	slli	r4,r4,4
11048ff4:	31c003cc 	andi	r7,r6,15
11048ff8:	1107883a 	add	r3,r2,r4
11048ffc:	290b883a 	add	r5,r5,r4
11049000:	010000c4 	movi	r4,3
11049004:	21c0142e 	bgeu	r4,r7,11049058 <memmove+0x100>
11049008:	39ffff04 	addi	r7,r7,-4
1104900c:	3814d0ba 	srli	r10,r7,2
11049010:	1a400104 	addi	r9,r3,4
11049014:	180d883a 	mov	r6,r3
11049018:	5289883a 	add	r4,r10,r10
1104901c:	2109883a 	add	r4,r4,r4
11049020:	4913883a 	add	r9,r9,r4
11049024:	2809883a 	mov	r4,r5
11049028:	22000017 	ldw	r8,0(r4)
1104902c:	31800104 	addi	r6,r6,4
11049030:	21000104 	addi	r4,r4,4
11049034:	323fff15 	stw	r8,-4(r6)
11049038:	327ffb1e 	bne	r6,r9,11049028 <memmove+0xd0>
1104903c:	51000044 	addi	r4,r10,1
11049040:	52bfff24 	muli	r10,r10,-4
11049044:	2109883a 	add	r4,r4,r4
11049048:	2109883a 	add	r4,r4,r4
1104904c:	51cf883a 	add	r7,r10,r7
11049050:	290b883a 	add	r5,r5,r4
11049054:	1907883a 	add	r3,r3,r4
11049058:	38000626 	beq	r7,zero,11049074 <memmove+0x11c>
1104905c:	19cf883a 	add	r7,r3,r7
11049060:	29800003 	ldbu	r6,0(r5)
11049064:	18c00044 	addi	r3,r3,1
11049068:	29400044 	addi	r5,r5,1
1104906c:	19bfffc5 	stb	r6,-1(r3)
11049070:	19fffb1e 	bne	r3,r7,11049060 <memmove+0x108>
11049074:	f800283a 	ret
11049078:	1007883a 	mov	r3,r2
1104907c:	003ff606 	br	11049058 <memmove+0x100>

11049080 <memset>:
11049080:	00c000c4 	movi	r3,3
11049084:	2005883a 	mov	r2,r4
11049088:	29403fcc 	andi	r5,r5,255
1104908c:	19802d2e 	bgeu	r3,r6,11049144 <memset+0xc4>
11049090:	20c6703a 	and	r3,r4,r3
11049094:	18002e1e 	bne	r3,zero,11049150 <memset+0xd0>
11049098:	2806923a 	slli	r3,r5,8
1104909c:	010003c4 	movi	r4,15
110490a0:	3011883a 	mov	r8,r6
110490a4:	1946b03a 	or	r3,r3,r5
110490a8:	180e943a 	slli	r7,r3,16
110490ac:	38ceb03a 	or	r7,r7,r3
110490b0:	1007883a 	mov	r3,r2
110490b4:	21800f2e 	bgeu	r4,r6,110490f4 <memset+0x74>
110490b8:	19c00015 	stw	r7,0(r3)
110490bc:	19c00115 	stw	r7,4(r3)
110490c0:	19c00215 	stw	r7,8(r3)
110490c4:	19c00315 	stw	r7,12(r3)
110490c8:	423ffc04 	addi	r8,r8,-16
110490cc:	18c00404 	addi	r3,r3,16
110490d0:	223ff936 	bltu	r4,r8,110490b8 <memset+0x38>
110490d4:	30fffc04 	addi	r3,r6,-16
110490d8:	1806d13a 	srli	r3,r3,4
110490dc:	318003cc 	andi	r6,r6,15
110490e0:	010000c4 	movi	r4,3
110490e4:	18c00044 	addi	r3,r3,1
110490e8:	1806913a 	slli	r3,r3,4
110490ec:	10c7883a 	add	r3,r2,r3
110490f0:	21800e2e 	bgeu	r4,r6,1104912c <memset+0xac>
110490f4:	1813883a 	mov	r9,r3
110490f8:	3011883a 	mov	r8,r6
110490fc:	010000c4 	movi	r4,3
11049100:	49c00015 	stw	r7,0(r9)
11049104:	423fff04 	addi	r8,r8,-4
11049108:	4a400104 	addi	r9,r9,4
1104910c:	223ffc36 	bltu	r4,r8,11049100 <memset+0x80>
11049110:	313fff04 	addi	r4,r6,-4
11049114:	2008d0ba 	srli	r4,r4,2
11049118:	318000cc 	andi	r6,r6,3
1104911c:	21000044 	addi	r4,r4,1
11049120:	2109883a 	add	r4,r4,r4
11049124:	2109883a 	add	r4,r4,r4
11049128:	1907883a 	add	r3,r3,r4
1104912c:	30000a26 	beq	r6,zero,11049158 <memset+0xd8>
11049130:	198d883a 	add	r6,r3,r6
11049134:	19400005 	stb	r5,0(r3)
11049138:	18c00044 	addi	r3,r3,1
1104913c:	19bffd1e 	bne	r3,r6,11049134 <memset+0xb4>
11049140:	f800283a 	ret
11049144:	2007883a 	mov	r3,r4
11049148:	303ff91e 	bne	r6,zero,11049130 <memset+0xb0>
1104914c:	00000206 	br	11049158 <memset+0xd8>
11049150:	2007883a 	mov	r3,r4
11049154:	003ff606 	br	11049130 <memset+0xb0>
11049158:	f800283a 	ret

1104915c <_Balloc>:
1104915c:	20801317 	ldw	r2,76(r4)
11049160:	defffc04 	addi	sp,sp,-16
11049164:	dc400115 	stw	r17,4(sp)
11049168:	dc000015 	stw	r16,0(sp)
1104916c:	dfc00315 	stw	ra,12(sp)
11049170:	dc800215 	stw	r18,8(sp)
11049174:	2023883a 	mov	r17,r4
11049178:	2821883a 	mov	r16,r5
1104917c:	10000f26 	beq	r2,zero,110491bc <_Balloc+0x60>
11049180:	8407883a 	add	r3,r16,r16
11049184:	18c7883a 	add	r3,r3,r3
11049188:	10c7883a 	add	r3,r2,r3
1104918c:	18800017 	ldw	r2,0(r3)
11049190:	10001126 	beq	r2,zero,110491d8 <_Balloc+0x7c>
11049194:	11000017 	ldw	r4,0(r2)
11049198:	19000015 	stw	r4,0(r3)
1104919c:	10000415 	stw	zero,16(r2)
110491a0:	10000315 	stw	zero,12(r2)
110491a4:	dfc00317 	ldw	ra,12(sp)
110491a8:	dc800217 	ldw	r18,8(sp)
110491ac:	dc400117 	ldw	r17,4(sp)
110491b0:	dc000017 	ldw	r16,0(sp)
110491b4:	dec00404 	addi	sp,sp,16
110491b8:	f800283a 	ret
110491bc:	01400104 	movi	r5,4
110491c0:	01800404 	movi	r6,16
110491c4:	104aa180 	call	1104aa18 <_calloc_r>
110491c8:	88801315 	stw	r2,76(r17)
110491cc:	103fec1e 	bne	r2,zero,11049180 <_Balloc+0x24>
110491d0:	0005883a 	mov	r2,zero
110491d4:	003ff306 	br	110491a4 <_Balloc+0x48>
110491d8:	01400044 	movi	r5,1
110491dc:	2c24983a 	sll	r18,r5,r16
110491e0:	8809883a 	mov	r4,r17
110491e4:	91800144 	addi	r6,r18,5
110491e8:	318d883a 	add	r6,r6,r6
110491ec:	318d883a 	add	r6,r6,r6
110491f0:	104aa180 	call	1104aa18 <_calloc_r>
110491f4:	103ff626 	beq	r2,zero,110491d0 <_Balloc+0x74>
110491f8:	14000115 	stw	r16,4(r2)
110491fc:	14800215 	stw	r18,8(r2)
11049200:	003fe606 	br	1104919c <_Balloc+0x40>

11049204 <_Bfree>:
11049204:	28000826 	beq	r5,zero,11049228 <_Bfree+0x24>
11049208:	28c00117 	ldw	r3,4(r5)
1104920c:	20801317 	ldw	r2,76(r4)
11049210:	18c7883a 	add	r3,r3,r3
11049214:	18c7883a 	add	r3,r3,r3
11049218:	10c5883a 	add	r2,r2,r3
1104921c:	10c00017 	ldw	r3,0(r2)
11049220:	28c00015 	stw	r3,0(r5)
11049224:	11400015 	stw	r5,0(r2)
11049228:	f800283a 	ret

1104922c <__multadd>:
1104922c:	defffa04 	addi	sp,sp,-24
11049230:	dc000115 	stw	r16,4(sp)
11049234:	2c000417 	ldw	r16,16(r5)
11049238:	dc800315 	stw	r18,12(sp)
1104923c:	dc400215 	stw	r17,8(sp)
11049240:	dfc00515 	stw	ra,20(sp)
11049244:	dcc00415 	stw	r19,16(sp)
11049248:	2823883a 	mov	r17,r5
1104924c:	2025883a 	mov	r18,r4
11049250:	28c00504 	addi	r3,r5,20
11049254:	0011883a 	mov	r8,zero
11049258:	1a800017 	ldw	r10,0(r3)
1104925c:	18c00104 	addi	r3,r3,4
11049260:	42000044 	addi	r8,r8,1
11049264:	527fffcc 	andi	r9,r10,65535
11049268:	4993383a 	mul	r9,r9,r6
1104926c:	5014d43a 	srli	r10,r10,16
11049270:	49d3883a 	add	r9,r9,r7
11049274:	480ed43a 	srli	r7,r9,16
11049278:	5195383a 	mul	r10,r10,r6
1104927c:	4a7fffcc 	andi	r9,r9,65535
11049280:	3a8f883a 	add	r7,r7,r10
11049284:	3814943a 	slli	r10,r7,16
11049288:	380ed43a 	srli	r7,r7,16
1104928c:	5253883a 	add	r9,r10,r9
11049290:	1a7fff15 	stw	r9,-4(r3)
11049294:	443ff016 	blt	r8,r16,11049258 <__multadd+0x2c>
11049298:	38000926 	beq	r7,zero,110492c0 <__multadd+0x94>
1104929c:	88800217 	ldw	r2,8(r17)
110492a0:	80800f0e 	bge	r16,r2,110492e0 <__multadd+0xb4>
110492a4:	80800144 	addi	r2,r16,5
110492a8:	1085883a 	add	r2,r2,r2
110492ac:	1085883a 	add	r2,r2,r2
110492b0:	8885883a 	add	r2,r17,r2
110492b4:	84000044 	addi	r16,r16,1
110492b8:	11c00015 	stw	r7,0(r2)
110492bc:	8c000415 	stw	r16,16(r17)
110492c0:	8805883a 	mov	r2,r17
110492c4:	dfc00517 	ldw	ra,20(sp)
110492c8:	dcc00417 	ldw	r19,16(sp)
110492cc:	dc800317 	ldw	r18,12(sp)
110492d0:	dc400217 	ldw	r17,8(sp)
110492d4:	dc000117 	ldw	r16,4(sp)
110492d8:	dec00604 	addi	sp,sp,24
110492dc:	f800283a 	ret
110492e0:	89400117 	ldw	r5,4(r17)
110492e4:	9009883a 	mov	r4,r18
110492e8:	d9c00015 	stw	r7,0(sp)
110492ec:	29400044 	addi	r5,r5,1
110492f0:	104915c0 	call	1104915c <_Balloc>
110492f4:	89800417 	ldw	r6,16(r17)
110492f8:	89400304 	addi	r5,r17,12
110492fc:	11000304 	addi	r4,r2,12
11049300:	31800084 	addi	r6,r6,2
11049304:	318d883a 	add	r6,r6,r6
11049308:	318d883a 	add	r6,r6,r6
1104930c:	1027883a 	mov	r19,r2
11049310:	1048e600 	call	11048e60 <memcpy>
11049314:	88c00117 	ldw	r3,4(r17)
11049318:	90801317 	ldw	r2,76(r18)
1104931c:	d9c00017 	ldw	r7,0(sp)
11049320:	18c7883a 	add	r3,r3,r3
11049324:	18c7883a 	add	r3,r3,r3
11049328:	10c5883a 	add	r2,r2,r3
1104932c:	10c00017 	ldw	r3,0(r2)
11049330:	88c00015 	stw	r3,0(r17)
11049334:	14400015 	stw	r17,0(r2)
11049338:	9823883a 	mov	r17,r19
1104933c:	003fd906 	br	110492a4 <__multadd+0x78>

11049340 <__s2b>:
11049340:	defff904 	addi	sp,sp,-28
11049344:	dd000415 	stw	r20,16(sp)
11049348:	dc400115 	stw	r17,4(sp)
1104934c:	2829883a 	mov	r20,r5
11049350:	2023883a 	mov	r17,r4
11049354:	01400244 	movi	r5,9
11049358:	39000204 	addi	r4,r7,8
1104935c:	dcc00315 	stw	r19,12(sp)
11049360:	dc800215 	stw	r18,8(sp)
11049364:	dfc00615 	stw	ra,24(sp)
11049368:	dd400515 	stw	r21,20(sp)
1104936c:	dc000015 	stw	r16,0(sp)
11049370:	3825883a 	mov	r18,r7
11049374:	3027883a 	mov	r19,r6
11049378:	10431080 	call	11043108 <__divsi3>
1104937c:	00c00044 	movi	r3,1
11049380:	000b883a 	mov	r5,zero
11049384:	1880030e 	bge	r3,r2,11049394 <__s2b+0x54>
11049388:	18c7883a 	add	r3,r3,r3
1104938c:	29400044 	addi	r5,r5,1
11049390:	18bffd16 	blt	r3,r2,11049388 <__s2b+0x48>
11049394:	8809883a 	mov	r4,r17
11049398:	104915c0 	call	1104915c <_Balloc>
1104939c:	d8c00717 	ldw	r3,28(sp)
110493a0:	10c00515 	stw	r3,20(r2)
110493a4:	00c00044 	movi	r3,1
110493a8:	10c00415 	stw	r3,16(r2)
110493ac:	00c00244 	movi	r3,9
110493b0:	1cc0210e 	bge	r3,r19,11049438 <__s2b+0xf8>
110493b4:	a0eb883a 	add	r21,r20,r3
110493b8:	a821883a 	mov	r16,r21
110493bc:	a4e9883a 	add	r20,r20,r19
110493c0:	81c00007 	ldb	r7,0(r16)
110493c4:	8809883a 	mov	r4,r17
110493c8:	84000044 	addi	r16,r16,1
110493cc:	100b883a 	mov	r5,r2
110493d0:	01800284 	movi	r6,10
110493d4:	39fff404 	addi	r7,r7,-48
110493d8:	104922c0 	call	1104922c <__multadd>
110493dc:	853ff81e 	bne	r16,r20,110493c0 <__s2b+0x80>
110493e0:	ace1883a 	add	r16,r21,r19
110493e4:	843ffe04 	addi	r16,r16,-8
110493e8:	9c800a0e 	bge	r19,r18,11049414 <__s2b+0xd4>
110493ec:	94e5c83a 	sub	r18,r18,r19
110493f0:	84a5883a 	add	r18,r16,r18
110493f4:	81c00007 	ldb	r7,0(r16)
110493f8:	8809883a 	mov	r4,r17
110493fc:	84000044 	addi	r16,r16,1
11049400:	100b883a 	mov	r5,r2
11049404:	01800284 	movi	r6,10
11049408:	39fff404 	addi	r7,r7,-48
1104940c:	104922c0 	call	1104922c <__multadd>
11049410:	84bff81e 	bne	r16,r18,110493f4 <__s2b+0xb4>
11049414:	dfc00617 	ldw	ra,24(sp)
11049418:	dd400517 	ldw	r21,20(sp)
1104941c:	dd000417 	ldw	r20,16(sp)
11049420:	dcc00317 	ldw	r19,12(sp)
11049424:	dc800217 	ldw	r18,8(sp)
11049428:	dc400117 	ldw	r17,4(sp)
1104942c:	dc000017 	ldw	r16,0(sp)
11049430:	dec00704 	addi	sp,sp,28
11049434:	f800283a 	ret
11049438:	a4000284 	addi	r16,r20,10
1104943c:	1827883a 	mov	r19,r3
11049440:	003fe906 	br	110493e8 <__s2b+0xa8>

11049444 <__hi0bits>:
11049444:	20bfffec 	andhi	r2,r4,65535
11049448:	1000141e 	bne	r2,zero,1104949c <__hi0bits+0x58>
1104944c:	2008943a 	slli	r4,r4,16
11049450:	00800404 	movi	r2,16
11049454:	20ffc02c 	andhi	r3,r4,65280
11049458:	1800021e 	bne	r3,zero,11049464 <__hi0bits+0x20>
1104945c:	2008923a 	slli	r4,r4,8
11049460:	10800204 	addi	r2,r2,8
11049464:	20fc002c 	andhi	r3,r4,61440
11049468:	1800021e 	bne	r3,zero,11049474 <__hi0bits+0x30>
1104946c:	2008913a 	slli	r4,r4,4
11049470:	10800104 	addi	r2,r2,4
11049474:	20f0002c 	andhi	r3,r4,49152
11049478:	1800031e 	bne	r3,zero,11049488 <__hi0bits+0x44>
1104947c:	2109883a 	add	r4,r4,r4
11049480:	10800084 	addi	r2,r2,2
11049484:	2109883a 	add	r4,r4,r4
11049488:	20000316 	blt	r4,zero,11049498 <__hi0bits+0x54>
1104948c:	2110002c 	andhi	r4,r4,16384
11049490:	2000041e 	bne	r4,zero,110494a4 <__hi0bits+0x60>
11049494:	00800804 	movi	r2,32
11049498:	f800283a 	ret
1104949c:	0005883a 	mov	r2,zero
110494a0:	003fec06 	br	11049454 <__hi0bits+0x10>
110494a4:	10800044 	addi	r2,r2,1
110494a8:	f800283a 	ret

110494ac <__lo0bits>:
110494ac:	20c00017 	ldw	r3,0(r4)
110494b0:	188001cc 	andi	r2,r3,7
110494b4:	10000826 	beq	r2,zero,110494d8 <__lo0bits+0x2c>
110494b8:	1880004c 	andi	r2,r3,1
110494bc:	1000211e 	bne	r2,zero,11049544 <__lo0bits+0x98>
110494c0:	1880008c 	andi	r2,r3,2
110494c4:	1000211e 	bne	r2,zero,1104954c <__lo0bits+0xa0>
110494c8:	1806d0ba 	srli	r3,r3,2
110494cc:	00800084 	movi	r2,2
110494d0:	20c00015 	stw	r3,0(r4)
110494d4:	f800283a 	ret
110494d8:	18bfffcc 	andi	r2,r3,65535
110494dc:	10001326 	beq	r2,zero,1104952c <__lo0bits+0x80>
110494e0:	0005883a 	mov	r2,zero
110494e4:	19403fcc 	andi	r5,r3,255
110494e8:	2800021e 	bne	r5,zero,110494f4 <__lo0bits+0x48>
110494ec:	1806d23a 	srli	r3,r3,8
110494f0:	10800204 	addi	r2,r2,8
110494f4:	194003cc 	andi	r5,r3,15
110494f8:	2800021e 	bne	r5,zero,11049504 <__lo0bits+0x58>
110494fc:	1806d13a 	srli	r3,r3,4
11049500:	10800104 	addi	r2,r2,4
11049504:	194000cc 	andi	r5,r3,3
11049508:	2800021e 	bne	r5,zero,11049514 <__lo0bits+0x68>
1104950c:	1806d0ba 	srli	r3,r3,2
11049510:	10800084 	addi	r2,r2,2
11049514:	1940004c 	andi	r5,r3,1
11049518:	2800081e 	bne	r5,zero,1104953c <__lo0bits+0x90>
1104951c:	1806d07a 	srli	r3,r3,1
11049520:	1800051e 	bne	r3,zero,11049538 <__lo0bits+0x8c>
11049524:	00800804 	movi	r2,32
11049528:	f800283a 	ret
1104952c:	1806d43a 	srli	r3,r3,16
11049530:	00800404 	movi	r2,16
11049534:	003feb06 	br	110494e4 <__lo0bits+0x38>
11049538:	10800044 	addi	r2,r2,1
1104953c:	20c00015 	stw	r3,0(r4)
11049540:	f800283a 	ret
11049544:	0005883a 	mov	r2,zero
11049548:	f800283a 	ret
1104954c:	1806d07a 	srli	r3,r3,1
11049550:	00800044 	movi	r2,1
11049554:	20c00015 	stw	r3,0(r4)
11049558:	f800283a 	ret

1104955c <__i2b>:
1104955c:	defffd04 	addi	sp,sp,-12
11049560:	dc000015 	stw	r16,0(sp)
11049564:	04000044 	movi	r16,1
11049568:	dc400115 	stw	r17,4(sp)
1104956c:	2823883a 	mov	r17,r5
11049570:	800b883a 	mov	r5,r16
11049574:	dfc00215 	stw	ra,8(sp)
11049578:	104915c0 	call	1104915c <_Balloc>
1104957c:	14400515 	stw	r17,20(r2)
11049580:	14000415 	stw	r16,16(r2)
11049584:	dfc00217 	ldw	ra,8(sp)
11049588:	dc400117 	ldw	r17,4(sp)
1104958c:	dc000017 	ldw	r16,0(sp)
11049590:	dec00304 	addi	sp,sp,12
11049594:	f800283a 	ret

11049598 <__multiply>:
11049598:	defffa04 	addi	sp,sp,-24
1104959c:	dcc00315 	stw	r19,12(sp)
110495a0:	dc400115 	stw	r17,4(sp)
110495a4:	34c00417 	ldw	r19,16(r6)
110495a8:	2c400417 	ldw	r17,16(r5)
110495ac:	dd000415 	stw	r20,16(sp)
110495b0:	dc800215 	stw	r18,8(sp)
110495b4:	dfc00515 	stw	ra,20(sp)
110495b8:	dc000015 	stw	r16,0(sp)
110495bc:	2825883a 	mov	r18,r5
110495c0:	3029883a 	mov	r20,r6
110495c4:	8cc0050e 	bge	r17,r19,110495dc <__multiply+0x44>
110495c8:	8807883a 	mov	r3,r17
110495cc:	3025883a 	mov	r18,r6
110495d0:	9823883a 	mov	r17,r19
110495d4:	2829883a 	mov	r20,r5
110495d8:	1827883a 	mov	r19,r3
110495dc:	90800217 	ldw	r2,8(r18)
110495e0:	8ce1883a 	add	r16,r17,r19
110495e4:	91400117 	ldw	r5,4(r18)
110495e8:	1400010e 	bge	r2,r16,110495f0 <__multiply+0x58>
110495ec:	29400044 	addi	r5,r5,1
110495f0:	104915c0 	call	1104915c <_Balloc>
110495f4:	83c00144 	addi	r15,r16,5
110495f8:	7bdf883a 	add	r15,r15,r15
110495fc:	7bdf883a 	add	r15,r15,r15
11049600:	13800504 	addi	r14,r2,20
11049604:	13df883a 	add	r15,r2,r15
11049608:	7007883a 	mov	r3,r14
1104960c:	73c0032e 	bgeu	r14,r15,1104961c <__multiply+0x84>
11049610:	18000015 	stw	zero,0(r3)
11049614:	18c00104 	addi	r3,r3,4
11049618:	1bfffd36 	bltu	r3,r15,11049610 <__multiply+0x78>
1104961c:	99800144 	addi	r6,r19,5
11049620:	8b000144 	addi	r12,r17,5
11049624:	318d883a 	add	r6,r6,r6
11049628:	6319883a 	add	r12,r12,r12
1104962c:	318d883a 	add	r6,r6,r6
11049630:	6319883a 	add	r12,r12,r12
11049634:	a3400504 	addi	r13,r20,20
11049638:	a18d883a 	add	r6,r20,r6
1104963c:	94400504 	addi	r17,r18,20
11049640:	9319883a 	add	r12,r18,r12
11049644:	6980392e 	bgeu	r13,r6,1104972c <__multiply+0x194>
11049648:	6a800017 	ldw	r10,0(r13)
1104964c:	52ffffcc 	andi	r11,r10,65535
11049650:	58001826 	beq	r11,zero,110496b4 <__multiply+0x11c>
11049654:	7007883a 	mov	r3,r14
11049658:	8809883a 	mov	r4,r17
1104965c:	000b883a 	mov	r5,zero
11049660:	22400017 	ldw	r9,0(r4)
11049664:	1a000017 	ldw	r8,0(r3)
11049668:	21000104 	addi	r4,r4,4
1104966c:	49ffffcc 	andi	r7,r9,65535
11049670:	3acf383a 	mul	r7,r7,r11
11049674:	4812d43a 	srli	r9,r9,16
11049678:	42bfffcc 	andi	r10,r8,65535
1104967c:	3a8f883a 	add	r7,r7,r10
11049680:	394f883a 	add	r7,r7,r5
11049684:	4010d43a 	srli	r8,r8,16
11049688:	4acb383a 	mul	r5,r9,r11
1104968c:	3814d43a 	srli	r10,r7,16
11049690:	19c0000d 	sth	r7,0(r3)
11049694:	2a0b883a 	add	r5,r5,r8
11049698:	2a8b883a 	add	r5,r5,r10
1104969c:	1940008d 	sth	r5,2(r3)
110496a0:	280ad43a 	srli	r5,r5,16
110496a4:	18c00104 	addi	r3,r3,4
110496a8:	233fed36 	bltu	r4,r12,11049660 <__multiply+0xc8>
110496ac:	19400015 	stw	r5,0(r3)
110496b0:	6a800017 	ldw	r10,0(r13)
110496b4:	5014d43a 	srli	r10,r10,16
110496b8:	50001926 	beq	r10,zero,11049720 <__multiply+0x188>
110496bc:	71400017 	ldw	r5,0(r14)
110496c0:	7007883a 	mov	r3,r14
110496c4:	8809883a 	mov	r4,r17
110496c8:	280f883a 	mov	r7,r5
110496cc:	0017883a 	mov	r11,zero
110496d0:	22400017 	ldw	r9,0(r4)
110496d4:	380ed43a 	srli	r7,r7,16
110496d8:	1940000d 	sth	r5,0(r3)
110496dc:	4a3fffcc 	andi	r8,r9,65535
110496e0:	4291383a 	mul	r8,r8,r10
110496e4:	4812d43a 	srli	r9,r9,16
110496e8:	18c00104 	addi	r3,r3,4
110496ec:	41d1883a 	add	r8,r8,r7
110496f0:	19c00017 	ldw	r7,0(r3)
110496f4:	42d1883a 	add	r8,r8,r11
110496f8:	4a93383a 	mul	r9,r9,r10
110496fc:	1a3fff8d 	sth	r8,-2(r3)
11049700:	4010d43a 	srli	r8,r8,16
11049704:	397fffcc 	andi	r5,r7,65535
11049708:	2a4b883a 	add	r5,r5,r9
1104970c:	2a0b883a 	add	r5,r5,r8
11049710:	21000104 	addi	r4,r4,4
11049714:	2816d43a 	srli	r11,r5,16
11049718:	233fed36 	bltu	r4,r12,110496d0 <__multiply+0x138>
1104971c:	19400015 	stw	r5,0(r3)
11049720:	6b400104 	addi	r13,r13,4
11049724:	73800104 	addi	r14,r14,4
11049728:	69bfc736 	bltu	r13,r6,11049648 <__multiply+0xb0>
1104972c:	0400090e 	bge	zero,r16,11049754 <__multiply+0x1bc>
11049730:	78ffff17 	ldw	r3,-4(r15)
11049734:	7bffff04 	addi	r15,r15,-4
11049738:	18000326 	beq	r3,zero,11049748 <__multiply+0x1b0>
1104973c:	00000506 	br	11049754 <__multiply+0x1bc>
11049740:	78c00017 	ldw	r3,0(r15)
11049744:	1800031e 	bne	r3,zero,11049754 <__multiply+0x1bc>
11049748:	843fffc4 	addi	r16,r16,-1
1104974c:	7bffff04 	addi	r15,r15,-4
11049750:	803ffb1e 	bne	r16,zero,11049740 <__multiply+0x1a8>
11049754:	14000415 	stw	r16,16(r2)
11049758:	dfc00517 	ldw	ra,20(sp)
1104975c:	dd000417 	ldw	r20,16(sp)
11049760:	dcc00317 	ldw	r19,12(sp)
11049764:	dc800217 	ldw	r18,8(sp)
11049768:	dc400117 	ldw	r17,4(sp)
1104976c:	dc000017 	ldw	r16,0(sp)
11049770:	dec00604 	addi	sp,sp,24
11049774:	f800283a 	ret

11049778 <__pow5mult>:
11049778:	defffb04 	addi	sp,sp,-20
1104977c:	dcc00315 	stw	r19,12(sp)
11049780:	dc800215 	stw	r18,8(sp)
11049784:	dc000015 	stw	r16,0(sp)
11049788:	dfc00415 	stw	ra,16(sp)
1104978c:	dc400115 	stw	r17,4(sp)
11049790:	308000cc 	andi	r2,r6,3
11049794:	3021883a 	mov	r16,r6
11049798:	2027883a 	mov	r19,r4
1104979c:	2825883a 	mov	r18,r5
110497a0:	10002e1e 	bne	r2,zero,1104985c <__pow5mult+0xe4>
110497a4:	8021d0ba 	srai	r16,r16,2
110497a8:	80001a26 	beq	r16,zero,11049814 <__pow5mult+0x9c>
110497ac:	9c401217 	ldw	r17,72(r19)
110497b0:	8800061e 	bne	r17,zero,110497cc <__pow5mult+0x54>
110497b4:	00003406 	br	11049888 <__pow5mult+0x110>
110497b8:	8021d07a 	srai	r16,r16,1
110497bc:	80001526 	beq	r16,zero,11049814 <__pow5mult+0x9c>
110497c0:	88c00017 	ldw	r3,0(r17)
110497c4:	18001b26 	beq	r3,zero,11049834 <__pow5mult+0xbc>
110497c8:	1823883a 	mov	r17,r3
110497cc:	80c0004c 	andi	r3,r16,1
110497d0:	183ff926 	beq	r3,zero,110497b8 <__pow5mult+0x40>
110497d4:	900b883a 	mov	r5,r18
110497d8:	880d883a 	mov	r6,r17
110497dc:	9809883a 	mov	r4,r19
110497e0:	10495980 	call	11049598 <__multiply>
110497e4:	90001b26 	beq	r18,zero,11049854 <__pow5mult+0xdc>
110497e8:	91000117 	ldw	r4,4(r18)
110497ec:	98c01317 	ldw	r3,76(r19)
110497f0:	8021d07a 	srai	r16,r16,1
110497f4:	2109883a 	add	r4,r4,r4
110497f8:	2109883a 	add	r4,r4,r4
110497fc:	1907883a 	add	r3,r3,r4
11049800:	19000017 	ldw	r4,0(r3)
11049804:	91000015 	stw	r4,0(r18)
11049808:	1c800015 	stw	r18,0(r3)
1104980c:	1025883a 	mov	r18,r2
11049810:	803feb1e 	bne	r16,zero,110497c0 <__pow5mult+0x48>
11049814:	9005883a 	mov	r2,r18
11049818:	dfc00417 	ldw	ra,16(sp)
1104981c:	dcc00317 	ldw	r19,12(sp)
11049820:	dc800217 	ldw	r18,8(sp)
11049824:	dc400117 	ldw	r17,4(sp)
11049828:	dc000017 	ldw	r16,0(sp)
1104982c:	dec00504 	addi	sp,sp,20
11049830:	f800283a 	ret
11049834:	880b883a 	mov	r5,r17
11049838:	880d883a 	mov	r6,r17
1104983c:	9809883a 	mov	r4,r19
11049840:	10495980 	call	11049598 <__multiply>
11049844:	88800015 	stw	r2,0(r17)
11049848:	10000015 	stw	zero,0(r2)
1104984c:	1023883a 	mov	r17,r2
11049850:	003fde06 	br	110497cc <__pow5mult+0x54>
11049854:	1025883a 	mov	r18,r2
11049858:	003fd706 	br	110497b8 <__pow5mult+0x40>
1104985c:	10bfffc4 	addi	r2,r2,-1
11049860:	1085883a 	add	r2,r2,r2
11049864:	00c00034 	movhi	r3,0
11049868:	18c36804 	addi	r3,r3,3488
1104986c:	1085883a 	add	r2,r2,r2
11049870:	1885883a 	add	r2,r3,r2
11049874:	11800017 	ldw	r6,0(r2)
11049878:	000f883a 	mov	r7,zero
1104987c:	104922c0 	call	1104922c <__multadd>
11049880:	1025883a 	mov	r18,r2
11049884:	003fc706 	br	110497a4 <__pow5mult+0x2c>
11049888:	9809883a 	mov	r4,r19
1104988c:	01409c44 	movi	r5,625
11049890:	104955c0 	call	1104955c <__i2b>
11049894:	98801215 	stw	r2,72(r19)
11049898:	1023883a 	mov	r17,r2
1104989c:	10000015 	stw	zero,0(r2)
110498a0:	003fca06 	br	110497cc <__pow5mult+0x54>

110498a4 <__lshift>:
110498a4:	defff904 	addi	sp,sp,-28
110498a8:	dd400515 	stw	r21,20(sp)
110498ac:	dc400115 	stw	r17,4(sp)
110498b0:	2d400417 	ldw	r21,16(r5)
110498b4:	3023d17a 	srai	r17,r6,5
110498b8:	28800217 	ldw	r2,8(r5)
110498bc:	dd000415 	stw	r20,16(sp)
110498c0:	8d6b883a 	add	r21,r17,r21
110498c4:	dcc00315 	stw	r19,12(sp)
110498c8:	dc800215 	stw	r18,8(sp)
110498cc:	dc000015 	stw	r16,0(sp)
110498d0:	dfc00615 	stw	ra,24(sp)
110498d4:	ac000044 	addi	r16,r21,1
110498d8:	2825883a 	mov	r18,r5
110498dc:	3029883a 	mov	r20,r6
110498e0:	2027883a 	mov	r19,r4
110498e4:	29400117 	ldw	r5,4(r5)
110498e8:	1400030e 	bge	r2,r16,110498f8 <__lshift+0x54>
110498ec:	1085883a 	add	r2,r2,r2
110498f0:	29400044 	addi	r5,r5,1
110498f4:	143ffd16 	blt	r2,r16,110498ec <__lshift+0x48>
110498f8:	9809883a 	mov	r4,r19
110498fc:	104915c0 	call	1104915c <_Balloc>
11049900:	10c00504 	addi	r3,r2,20
11049904:	0440090e 	bge	zero,r17,1104992c <__lshift+0x88>
11049908:	000f883a 	mov	r7,zero
1104990c:	18000015 	stw	zero,0(r3)
11049910:	39c00044 	addi	r7,r7,1
11049914:	18c00104 	addi	r3,r3,4
11049918:	3c7ffc1e 	bne	r7,r17,1104990c <__lshift+0x68>
1104991c:	38c00144 	addi	r3,r7,5
11049920:	18c7883a 	add	r3,r3,r3
11049924:	18c7883a 	add	r3,r3,r3
11049928:	10c7883a 	add	r3,r2,r3
1104992c:	92000417 	ldw	r8,16(r18)
11049930:	a18007cc 	andi	r6,r20,31
11049934:	91c00504 	addi	r7,r18,20
11049938:	42000144 	addi	r8,r8,5
1104993c:	4211883a 	add	r8,r8,r8
11049940:	4211883a 	add	r8,r8,r8
11049944:	9211883a 	add	r8,r18,r8
11049948:	30002226 	beq	r6,zero,110499d4 <__lshift+0x130>
1104994c:	02800804 	movi	r10,32
11049950:	5195c83a 	sub	r10,r10,r6
11049954:	000b883a 	mov	r5,zero
11049958:	3a400017 	ldw	r9,0(r7)
1104995c:	18c00104 	addi	r3,r3,4
11049960:	39c00104 	addi	r7,r7,4
11049964:	4992983a 	sll	r9,r9,r6
11049968:	2a4ab03a 	or	r5,r5,r9
1104996c:	197fff15 	stw	r5,-4(r3)
11049970:	397fff17 	ldw	r5,-4(r7)
11049974:	2a8ad83a 	srl	r5,r5,r10
11049978:	3a3ff736 	bltu	r7,r8,11049958 <__lshift+0xb4>
1104997c:	19400015 	stw	r5,0(r3)
11049980:	28000126 	beq	r5,zero,11049988 <__lshift+0xe4>
11049984:	ac000084 	addi	r16,r21,2
11049988:	91000117 	ldw	r4,4(r18)
1104998c:	98c01317 	ldw	r3,76(r19)
11049990:	843fffc4 	addi	r16,r16,-1
11049994:	2109883a 	add	r4,r4,r4
11049998:	2109883a 	add	r4,r4,r4
1104999c:	1907883a 	add	r3,r3,r4
110499a0:	19000017 	ldw	r4,0(r3)
110499a4:	14000415 	stw	r16,16(r2)
110499a8:	91000015 	stw	r4,0(r18)
110499ac:	1c800015 	stw	r18,0(r3)
110499b0:	dfc00617 	ldw	ra,24(sp)
110499b4:	dd400517 	ldw	r21,20(sp)
110499b8:	dd000417 	ldw	r20,16(sp)
110499bc:	dcc00317 	ldw	r19,12(sp)
110499c0:	dc800217 	ldw	r18,8(sp)
110499c4:	dc400117 	ldw	r17,4(sp)
110499c8:	dc000017 	ldw	r16,0(sp)
110499cc:	dec00704 	addi	sp,sp,28
110499d0:	f800283a 	ret
110499d4:	39400017 	ldw	r5,0(r7)
110499d8:	18c00104 	addi	r3,r3,4
110499dc:	39c00104 	addi	r7,r7,4
110499e0:	197fff15 	stw	r5,-4(r3)
110499e4:	3a3fe82e 	bgeu	r7,r8,11049988 <__lshift+0xe4>
110499e8:	39400017 	ldw	r5,0(r7)
110499ec:	18c00104 	addi	r3,r3,4
110499f0:	39c00104 	addi	r7,r7,4
110499f4:	197fff15 	stw	r5,-4(r3)
110499f8:	3a3ff636 	bltu	r7,r8,110499d4 <__lshift+0x130>
110499fc:	003fe206 	br	11049988 <__lshift+0xe4>

11049a00 <__mcmp>:
11049a00:	20800417 	ldw	r2,16(r4)
11049a04:	28c00417 	ldw	r3,16(r5)
11049a08:	10c5c83a 	sub	r2,r2,r3
11049a0c:	10000f1e 	bne	r2,zero,11049a4c <__mcmp+0x4c>
11049a10:	18c00144 	addi	r3,r3,5
11049a14:	18c7883a 	add	r3,r3,r3
11049a18:	18c7883a 	add	r3,r3,r3
11049a1c:	21c00504 	addi	r7,r4,20
11049a20:	28cb883a 	add	r5,r5,r3
11049a24:	20c9883a 	add	r4,r4,r3
11049a28:	213fff04 	addi	r4,r4,-4
11049a2c:	297fff04 	addi	r5,r5,-4
11049a30:	21800017 	ldw	r6,0(r4)
11049a34:	28c00017 	ldw	r3,0(r5)
11049a38:	30c0021e 	bne	r6,r3,11049a44 <__mcmp+0x44>
11049a3c:	393ffa36 	bltu	r7,r4,11049a28 <__mcmp+0x28>
11049a40:	f800283a 	ret
11049a44:	30c00236 	bltu	r6,r3,11049a50 <__mcmp+0x50>
11049a48:	00800044 	movi	r2,1
11049a4c:	f800283a 	ret
11049a50:	00bfffc4 	movi	r2,-1
11049a54:	f800283a 	ret

11049a58 <__mdiff>:
11049a58:	defffb04 	addi	sp,sp,-20
11049a5c:	dc000015 	stw	r16,0(sp)
11049a60:	2821883a 	mov	r16,r5
11049a64:	dc800215 	stw	r18,8(sp)
11049a68:	300b883a 	mov	r5,r6
11049a6c:	2025883a 	mov	r18,r4
11049a70:	8009883a 	mov	r4,r16
11049a74:	dc400115 	stw	r17,4(sp)
11049a78:	dfc00415 	stw	ra,16(sp)
11049a7c:	dcc00315 	stw	r19,12(sp)
11049a80:	3023883a 	mov	r17,r6
11049a84:	1049a000 	call	11049a00 <__mcmp>
11049a88:	10005026 	beq	r2,zero,11049bcc <__mdiff+0x174>
11049a8c:	10004a16 	blt	r2,zero,11049bb8 <__mdiff+0x160>
11049a90:	0027883a 	mov	r19,zero
11049a94:	81400117 	ldw	r5,4(r16)
11049a98:	9009883a 	mov	r4,r18
11049a9c:	104915c0 	call	1104915c <_Balloc>
11049aa0:	82400417 	ldw	r9,16(r16)
11049aa4:	89800417 	ldw	r6,16(r17)
11049aa8:	14c00315 	stw	r19,12(r2)
11049aac:	4b800144 	addi	r14,r9,5
11049ab0:	31800144 	addi	r6,r6,5
11049ab4:	739d883a 	add	r14,r14,r14
11049ab8:	318d883a 	add	r6,r6,r6
11049abc:	739d883a 	add	r14,r14,r14
11049ac0:	318d883a 	add	r6,r6,r6
11049ac4:	81c00504 	addi	r7,r16,20
11049ac8:	839d883a 	add	r14,r16,r14
11049acc:	8a000504 	addi	r8,r17,20
11049ad0:	898d883a 	add	r6,r17,r6
11049ad4:	10c00504 	addi	r3,r2,20
11049ad8:	0009883a 	mov	r4,zero
11049adc:	3b000017 	ldw	r12,0(r7)
11049ae0:	42c00017 	ldw	r11,0(r8)
11049ae4:	42000104 	addi	r8,r8,4
11049ae8:	62bfffcc 	andi	r10,r12,65535
11049aec:	5b7fffcc 	andi	r13,r11,65535
11049af0:	5109883a 	add	r4,r10,r4
11049af4:	2355c83a 	sub	r10,r4,r13
11049af8:	5816d43a 	srli	r11,r11,16
11049afc:	6008d43a 	srli	r4,r12,16
11049b00:	501bd43a 	srai	r13,r10,16
11049b04:	1a80000d 	sth	r10,0(r3)
11049b08:	22c9c83a 	sub	r4,r4,r11
11049b0c:	2349883a 	add	r4,r4,r13
11049b10:	1900008d 	sth	r4,2(r3)
11049b14:	39c00104 	addi	r7,r7,4
11049b18:	2009d43a 	srai	r4,r4,16
11049b1c:	18c00104 	addi	r3,r3,4
11049b20:	41bfee36 	bltu	r8,r6,11049adc <__mdiff+0x84>
11049b24:	180b883a 	mov	r5,r3
11049b28:	3815883a 	mov	r10,r7
11049b2c:	3b80132e 	bgeu	r7,r14,11049b7c <__mdiff+0x124>
11049b30:	3a000017 	ldw	r8,0(r7)
11049b34:	18c00104 	addi	r3,r3,4
11049b38:	39c00104 	addi	r7,r7,4
11049b3c:	41bfffcc 	andi	r6,r8,65535
11049b40:	310d883a 	add	r6,r6,r4
11049b44:	3009d43a 	srai	r4,r6,16
11049b48:	4010d43a 	srli	r8,r8,16
11049b4c:	19bfff0d 	sth	r6,-4(r3)
11049b50:	2209883a 	add	r4,r4,r8
11049b54:	193fff8d 	sth	r4,-2(r3)
11049b58:	2009d43a 	srai	r4,r4,16
11049b5c:	3bbff436 	bltu	r7,r14,11049b30 <__mdiff+0xd8>
11049b60:	0286303a 	nor	r3,zero,r10
11049b64:	1b87883a 	add	r3,r3,r14
11049b68:	1806d0ba 	srli	r3,r3,2
11049b6c:	18c00044 	addi	r3,r3,1
11049b70:	18c7883a 	add	r3,r3,r3
11049b74:	18c7883a 	add	r3,r3,r3
11049b78:	28c7883a 	add	r3,r5,r3
11049b7c:	193fff17 	ldw	r4,-4(r3)
11049b80:	18ffff04 	addi	r3,r3,-4
11049b84:	2000041e 	bne	r4,zero,11049b98 <__mdiff+0x140>
11049b88:	18ffff04 	addi	r3,r3,-4
11049b8c:	19000017 	ldw	r4,0(r3)
11049b90:	4a7fffc4 	addi	r9,r9,-1
11049b94:	203ffc26 	beq	r4,zero,11049b88 <__mdiff+0x130>
11049b98:	12400415 	stw	r9,16(r2)
11049b9c:	dfc00417 	ldw	ra,16(sp)
11049ba0:	dcc00317 	ldw	r19,12(sp)
11049ba4:	dc800217 	ldw	r18,8(sp)
11049ba8:	dc400117 	ldw	r17,4(sp)
11049bac:	dc000017 	ldw	r16,0(sp)
11049bb0:	dec00504 	addi	sp,sp,20
11049bb4:	f800283a 	ret
11049bb8:	8005883a 	mov	r2,r16
11049bbc:	04c00044 	movi	r19,1
11049bc0:	8821883a 	mov	r16,r17
11049bc4:	1023883a 	mov	r17,r2
11049bc8:	003fb206 	br	11049a94 <__mdiff+0x3c>
11049bcc:	9009883a 	mov	r4,r18
11049bd0:	000b883a 	mov	r5,zero
11049bd4:	104915c0 	call	1104915c <_Balloc>
11049bd8:	00c00044 	movi	r3,1
11049bdc:	10c00415 	stw	r3,16(r2)
11049be0:	10000515 	stw	zero,20(r2)
11049be4:	dfc00417 	ldw	ra,16(sp)
11049be8:	dcc00317 	ldw	r19,12(sp)
11049bec:	dc800217 	ldw	r18,8(sp)
11049bf0:	dc400117 	ldw	r17,4(sp)
11049bf4:	dc000017 	ldw	r16,0(sp)
11049bf8:	dec00504 	addi	sp,sp,20
11049bfc:	f800283a 	ret

11049c00 <__ulp>:
11049c00:	295ffc2c 	andhi	r5,r5,32752
11049c04:	00bf3034 	movhi	r2,64704
11049c08:	2887883a 	add	r3,r5,r2
11049c0c:	00c0020e 	bge	zero,r3,11049c18 <__ulp+0x18>
11049c10:	0005883a 	mov	r2,zero
11049c14:	f800283a 	ret
11049c18:	00c7c83a 	sub	r3,zero,r3
11049c1c:	1805d53a 	srai	r2,r3,20
11049c20:	00c004c4 	movi	r3,19
11049c24:	18800a0e 	bge	r3,r2,11049c50 <__ulp+0x50>
11049c28:	01000c84 	movi	r4,50
11049c2c:	0007883a 	mov	r3,zero
11049c30:	20800516 	blt	r4,r2,11049c48 <__ulp+0x48>
11049c34:	01000cc4 	movi	r4,51
11049c38:	2085c83a 	sub	r2,r4,r2
11049c3c:	01000044 	movi	r4,1
11049c40:	2084983a 	sll	r2,r4,r2
11049c44:	f800283a 	ret
11049c48:	00800044 	movi	r2,1
11049c4c:	f800283a 	ret
11049c50:	00c00234 	movhi	r3,8
11049c54:	1887d83a 	sra	r3,r3,r2
11049c58:	0005883a 	mov	r2,zero
11049c5c:	f800283a 	ret

11049c60 <__b2d>:
11049c60:	defffa04 	addi	sp,sp,-24
11049c64:	dc000015 	stw	r16,0(sp)
11049c68:	24000417 	ldw	r16,16(r4)
11049c6c:	dc400115 	stw	r17,4(sp)
11049c70:	dcc00315 	stw	r19,12(sp)
11049c74:	84000144 	addi	r16,r16,5
11049c78:	8421883a 	add	r16,r16,r16
11049c7c:	8421883a 	add	r16,r16,r16
11049c80:	2421883a 	add	r16,r4,r16
11049c84:	847fff17 	ldw	r17,-4(r16)
11049c88:	24c00504 	addi	r19,r4,20
11049c8c:	dd000415 	stw	r20,16(sp)
11049c90:	8809883a 	mov	r4,r17
11049c94:	dc800215 	stw	r18,8(sp)
11049c98:	2829883a 	mov	r20,r5
11049c9c:	dfc00515 	stw	ra,20(sp)
11049ca0:	10494440 	call	11049444 <__hi0bits>
11049ca4:	00c00804 	movi	r3,32
11049ca8:	1887c83a 	sub	r3,r3,r2
11049cac:	a0c00015 	stw	r3,0(r20)
11049cb0:	00c00284 	movi	r3,10
11049cb4:	84bfff04 	addi	r18,r16,-4
11049cb8:	18801216 	blt	r3,r2,11049d04 <__b2d+0xa4>
11049cbc:	010002c4 	movi	r4,11
11049cc0:	2089c83a 	sub	r4,r4,r2
11049cc4:	8906d83a 	srl	r3,r17,r4
11049cc8:	18cffc34 	orhi	r3,r3,16368
11049ccc:	9c80322e 	bgeu	r19,r18,11049d98 <__b2d+0x138>
11049cd0:	817ffe17 	ldw	r5,-8(r16)
11049cd4:	2908d83a 	srl	r4,r5,r4
11049cd8:	10800544 	addi	r2,r2,21
11049cdc:	88a2983a 	sll	r17,r17,r2
11049ce0:	2444b03a 	or	r2,r4,r17
11049ce4:	dfc00517 	ldw	ra,20(sp)
11049ce8:	dd000417 	ldw	r20,16(sp)
11049cec:	dcc00317 	ldw	r19,12(sp)
11049cf0:	dc800217 	ldw	r18,8(sp)
11049cf4:	dc400117 	ldw	r17,4(sp)
11049cf8:	dc000017 	ldw	r16,0(sp)
11049cfc:	dec00604 	addi	sp,sp,24
11049d00:	f800283a 	ret
11049d04:	9c801636 	bltu	r19,r18,11049d60 <__b2d+0x100>
11049d08:	113ffd44 	addi	r4,r2,-11
11049d0c:	000b883a 	mov	r5,zero
11049d10:	20001726 	beq	r4,zero,11049d70 <__b2d+0x110>
11049d14:	00c00ac4 	movi	r3,43
11049d18:	1885c83a 	sub	r2,r3,r2
11049d1c:	8906983a 	sll	r3,r17,r4
11049d20:	288cd83a 	srl	r6,r5,r2
11049d24:	18cffc34 	orhi	r3,r3,16368
11049d28:	1986b03a 	or	r3,r3,r6
11049d2c:	9c801c2e 	bgeu	r19,r18,11049da0 <__b2d+0x140>
11049d30:	91bfff17 	ldw	r6,-4(r18)
11049d34:	3084d83a 	srl	r2,r6,r2
11049d38:	2908983a 	sll	r4,r5,r4
11049d3c:	1104b03a 	or	r2,r2,r4
11049d40:	dfc00517 	ldw	ra,20(sp)
11049d44:	dd000417 	ldw	r20,16(sp)
11049d48:	dcc00317 	ldw	r19,12(sp)
11049d4c:	dc800217 	ldw	r18,8(sp)
11049d50:	dc400117 	ldw	r17,4(sp)
11049d54:	dc000017 	ldw	r16,0(sp)
11049d58:	dec00604 	addi	sp,sp,24
11049d5c:	f800283a 	ret
11049d60:	113ffd44 	addi	r4,r2,-11
11049d64:	84bffe04 	addi	r18,r16,-8
11049d68:	817ffe17 	ldw	r5,-8(r16)
11049d6c:	203fe91e 	bne	r4,zero,11049d14 <__b2d+0xb4>
11049d70:	88cffc34 	orhi	r3,r17,16368
11049d74:	2805883a 	mov	r2,r5
11049d78:	dfc00517 	ldw	ra,20(sp)
11049d7c:	dd000417 	ldw	r20,16(sp)
11049d80:	dcc00317 	ldw	r19,12(sp)
11049d84:	dc800217 	ldw	r18,8(sp)
11049d88:	dc400117 	ldw	r17,4(sp)
11049d8c:	dc000017 	ldw	r16,0(sp)
11049d90:	dec00604 	addi	sp,sp,24
11049d94:	f800283a 	ret
11049d98:	0009883a 	mov	r4,zero
11049d9c:	003fce06 	br	11049cd8 <__b2d+0x78>
11049da0:	0005883a 	mov	r2,zero
11049da4:	003fe406 	br	11049d38 <__b2d+0xd8>

11049da8 <__d2b>:
11049da8:	defff804 	addi	sp,sp,-32
11049dac:	dc400315 	stw	r17,12(sp)
11049db0:	3023883a 	mov	r17,r6
11049db4:	dc800415 	stw	r18,16(sp)
11049db8:	8824907a 	slli	r18,r17,1
11049dbc:	dcc00515 	stw	r19,20(sp)
11049dc0:	2827883a 	mov	r19,r5
11049dc4:	9024d57a 	srli	r18,r18,21
11049dc8:	01400044 	movi	r5,1
11049dcc:	dd000615 	stw	r20,24(sp)
11049dd0:	dc000215 	stw	r16,8(sp)
11049dd4:	dfc00715 	stw	ra,28(sp)
11049dd8:	3829883a 	mov	r20,r7
11049ddc:	104915c0 	call	1104915c <_Balloc>
11049de0:	1021883a 	mov	r16,r2
11049de4:	00800434 	movhi	r2,16
11049de8:	10bfffc4 	addi	r2,r2,-1
11049dec:	88a2703a 	and	r17,r17,r2
11049df0:	90000126 	beq	r18,zero,11049df8 <__d2b+0x50>
11049df4:	8c400434 	orhi	r17,r17,16
11049df8:	dc400015 	stw	r17,0(sp)
11049dfc:	98002226 	beq	r19,zero,11049e88 <__d2b+0xe0>
11049e00:	d9000104 	addi	r4,sp,4
11049e04:	dcc00115 	stw	r19,4(sp)
11049e08:	10494ac0 	call	110494ac <__lo0bits>
11049e0c:	d8c00017 	ldw	r3,0(sp)
11049e10:	10002d1e 	bne	r2,zero,11049ec8 <__d2b+0x120>
11049e14:	d9000117 	ldw	r4,4(sp)
11049e18:	81000515 	stw	r4,20(r16)
11049e1c:	1823003a 	cmpeq	r17,r3,zero
11049e20:	01000084 	movi	r4,2
11049e24:	2463c83a 	sub	r17,r4,r17
11049e28:	80c00615 	stw	r3,24(r16)
11049e2c:	84400415 	stw	r17,16(r16)
11049e30:	90001d1e 	bne	r18,zero,11049ea8 <__d2b+0x100>
11049e34:	88c00104 	addi	r3,r17,4
11049e38:	18c7883a 	add	r3,r3,r3
11049e3c:	18c7883a 	add	r3,r3,r3
11049e40:	80c7883a 	add	r3,r16,r3
11049e44:	19000017 	ldw	r4,0(r3)
11049e48:	10bef384 	addi	r2,r2,-1074
11049e4c:	a0800015 	stw	r2,0(r20)
11049e50:	10494440 	call	11049444 <__hi0bits>
11049e54:	8822917a 	slli	r17,r17,5
11049e58:	d8c00817 	ldw	r3,32(sp)
11049e5c:	8885c83a 	sub	r2,r17,r2
11049e60:	18800015 	stw	r2,0(r3)
11049e64:	8005883a 	mov	r2,r16
11049e68:	dfc00717 	ldw	ra,28(sp)
11049e6c:	dd000617 	ldw	r20,24(sp)
11049e70:	dcc00517 	ldw	r19,20(sp)
11049e74:	dc800417 	ldw	r18,16(sp)
11049e78:	dc400317 	ldw	r17,12(sp)
11049e7c:	dc000217 	ldw	r16,8(sp)
11049e80:	dec00804 	addi	sp,sp,32
11049e84:	f800283a 	ret
11049e88:	d809883a 	mov	r4,sp
11049e8c:	10494ac0 	call	110494ac <__lo0bits>
11049e90:	d8c00017 	ldw	r3,0(sp)
11049e94:	04400044 	movi	r17,1
11049e98:	84400415 	stw	r17,16(r16)
11049e9c:	80c00515 	stw	r3,20(r16)
11049ea0:	10800804 	addi	r2,r2,32
11049ea4:	903fe326 	beq	r18,zero,11049e34 <__d2b+0x8c>
11049ea8:	00c00d44 	movi	r3,53
11049eac:	94bef344 	addi	r18,r18,-1075
11049eb0:	90a5883a 	add	r18,r18,r2
11049eb4:	1885c83a 	sub	r2,r3,r2
11049eb8:	d8c00817 	ldw	r3,32(sp)
11049ebc:	a4800015 	stw	r18,0(r20)
11049ec0:	18800015 	stw	r2,0(r3)
11049ec4:	003fe706 	br	11049e64 <__d2b+0xbc>
11049ec8:	01000804 	movi	r4,32
11049ecc:	2089c83a 	sub	r4,r4,r2
11049ed0:	1908983a 	sll	r4,r3,r4
11049ed4:	d9400117 	ldw	r5,4(sp)
11049ed8:	1886d83a 	srl	r3,r3,r2
11049edc:	2148b03a 	or	r4,r4,r5
11049ee0:	81000515 	stw	r4,20(r16)
11049ee4:	d8c00015 	stw	r3,0(sp)
11049ee8:	003fcc06 	br	11049e1c <__d2b+0x74>

11049eec <__ratio>:
11049eec:	defff904 	addi	sp,sp,-28
11049ef0:	dc400315 	stw	r17,12(sp)
11049ef4:	2823883a 	mov	r17,r5
11049ef8:	d9400104 	addi	r5,sp,4
11049efc:	dfc00615 	stw	ra,24(sp)
11049f00:	dcc00515 	stw	r19,20(sp)
11049f04:	dc800415 	stw	r18,16(sp)
11049f08:	2027883a 	mov	r19,r4
11049f0c:	dc000215 	stw	r16,8(sp)
11049f10:	1049c600 	call	11049c60 <__b2d>
11049f14:	8809883a 	mov	r4,r17
11049f18:	d80b883a 	mov	r5,sp
11049f1c:	1025883a 	mov	r18,r2
11049f20:	1821883a 	mov	r16,r3
11049f24:	1049c600 	call	11049c60 <__b2d>
11049f28:	99400417 	ldw	r5,16(r19)
11049f2c:	89000417 	ldw	r4,16(r17)
11049f30:	d9800117 	ldw	r6,4(sp)
11049f34:	2909c83a 	sub	r4,r5,r4
11049f38:	d9400017 	ldw	r5,0(sp)
11049f3c:	2008917a 	slli	r4,r4,5
11049f40:	314bc83a 	sub	r5,r6,r5
11049f44:	290b883a 	add	r5,r5,r4
11049f48:	01400e0e 	bge	zero,r5,11049f84 <__ratio+0x98>
11049f4c:	280a953a 	slli	r5,r5,20
11049f50:	2c21883a 	add	r16,r5,r16
11049f54:	9009883a 	mov	r4,r18
11049f58:	800b883a 	mov	r5,r16
11049f5c:	100d883a 	mov	r6,r2
11049f60:	180f883a 	mov	r7,r3
11049f64:	1042e480 	call	11042e48 <__divdf3>
11049f68:	dfc00617 	ldw	ra,24(sp)
11049f6c:	dcc00517 	ldw	r19,20(sp)
11049f70:	dc800417 	ldw	r18,16(sp)
11049f74:	dc400317 	ldw	r17,12(sp)
11049f78:	dc000217 	ldw	r16,8(sp)
11049f7c:	dec00704 	addi	sp,sp,28
11049f80:	f800283a 	ret
11049f84:	280a953a 	slli	r5,r5,20
11049f88:	1947c83a 	sub	r3,r3,r5
11049f8c:	003ff106 	br	11049f54 <__ratio+0x68>

11049f90 <_mprec_log10>:
11049f90:	defffe04 	addi	sp,sp,-8
11049f94:	dc000015 	stw	r16,0(sp)
11049f98:	dfc00115 	stw	ra,4(sp)
11049f9c:	008005c4 	movi	r2,23
11049fa0:	2021883a 	mov	r16,r4
11049fa4:	11000d0e 	bge	r2,r4,11049fdc <_mprec_log10+0x4c>
11049fa8:	0005883a 	mov	r2,zero
11049fac:	00cffc34 	movhi	r3,16368
11049fb0:	843fffc4 	addi	r16,r16,-1
11049fb4:	1009883a 	mov	r4,r2
11049fb8:	180b883a 	mov	r5,r3
11049fbc:	000d883a 	mov	r6,zero
11049fc0:	01d00934 	movhi	r7,16420
11049fc4:	104b9800 	call	1104b980 <__muldf3>
11049fc8:	803ff91e 	bne	r16,zero,11049fb0 <_mprec_log10+0x20>
11049fcc:	dfc00117 	ldw	ra,4(sp)
11049fd0:	dc000017 	ldw	r16,0(sp)
11049fd4:	dec00204 	addi	sp,sp,8
11049fd8:	f800283a 	ret
11049fdc:	202090fa 	slli	r16,r4,3
11049fe0:	00800034 	movhi	r2,0
11049fe4:	10833604 	addi	r2,r2,3288
11049fe8:	1421883a 	add	r16,r2,r16
11049fec:	80800017 	ldw	r2,0(r16)
11049ff0:	80c00117 	ldw	r3,4(r16)
11049ff4:	dfc00117 	ldw	ra,4(sp)
11049ff8:	dc000017 	ldw	r16,0(sp)
11049ffc:	dec00204 	addi	sp,sp,8
1104a000:	f800283a 	ret

1104a004 <__copybits>:
1104a004:	297fffc4 	addi	r5,r5,-1
1104a008:	31c00417 	ldw	r7,16(r6)
1104a00c:	2811d17a 	srai	r8,r5,5
1104a010:	30800504 	addi	r2,r6,20
1104a014:	39c00144 	addi	r7,r7,5
1104a018:	42000044 	addi	r8,r8,1
1104a01c:	39cf883a 	add	r7,r7,r7
1104a020:	4211883a 	add	r8,r8,r8
1104a024:	39cf883a 	add	r7,r7,r7
1104a028:	4211883a 	add	r8,r8,r8
1104a02c:	31cf883a 	add	r7,r6,r7
1104a030:	2211883a 	add	r8,r4,r8
1104a034:	11c00d2e 	bgeu	r2,r7,1104a06c <__copybits+0x68>
1104a038:	2007883a 	mov	r3,r4
1104a03c:	11400017 	ldw	r5,0(r2)
1104a040:	18c00104 	addi	r3,r3,4
1104a044:	10800104 	addi	r2,r2,4
1104a048:	197fff15 	stw	r5,-4(r3)
1104a04c:	11fffb36 	bltu	r2,r7,1104a03c <__copybits+0x38>
1104a050:	3985c83a 	sub	r2,r7,r6
1104a054:	10bffac4 	addi	r2,r2,-21
1104a058:	1004d0ba 	srli	r2,r2,2
1104a05c:	10800044 	addi	r2,r2,1
1104a060:	1085883a 	add	r2,r2,r2
1104a064:	1085883a 	add	r2,r2,r2
1104a068:	2089883a 	add	r4,r4,r2
1104a06c:	2200032e 	bgeu	r4,r8,1104a07c <__copybits+0x78>
1104a070:	20000015 	stw	zero,0(r4)
1104a074:	21000104 	addi	r4,r4,4
1104a078:	223ffd36 	bltu	r4,r8,1104a070 <__copybits+0x6c>
1104a07c:	f800283a 	ret

1104a080 <__any_on>:
1104a080:	21800417 	ldw	r6,16(r4)
1104a084:	2805d17a 	srai	r2,r5,5
1104a088:	20c00504 	addi	r3,r4,20
1104a08c:	30800f0e 	bge	r6,r2,1104a0cc <__any_on+0x4c>
1104a090:	3005883a 	mov	r2,r6
1104a094:	10800144 	addi	r2,r2,5
1104a098:	1085883a 	add	r2,r2,r2
1104a09c:	1085883a 	add	r2,r2,r2
1104a0a0:	2089883a 	add	r4,r4,r2
1104a0a4:	1900152e 	bgeu	r3,r4,1104a0fc <__any_on+0x7c>
1104a0a8:	20bfff17 	ldw	r2,-4(r4)
1104a0ac:	213fff04 	addi	r4,r4,-4
1104a0b0:	1000041e 	bne	r2,zero,1104a0c4 <__any_on+0x44>
1104a0b4:	1900112e 	bgeu	r3,r4,1104a0fc <__any_on+0x7c>
1104a0b8:	213fff04 	addi	r4,r4,-4
1104a0bc:	20800017 	ldw	r2,0(r4)
1104a0c0:	103ffc26 	beq	r2,zero,1104a0b4 <__any_on+0x34>
1104a0c4:	00800044 	movi	r2,1
1104a0c8:	f800283a 	ret
1104a0cc:	11bff10e 	bge	r2,r6,1104a094 <__any_on+0x14>
1104a0d0:	294007cc 	andi	r5,r5,31
1104a0d4:	283fef26 	beq	r5,zero,1104a094 <__any_on+0x14>
1104a0d8:	11800144 	addi	r6,r2,5
1104a0dc:	318d883a 	add	r6,r6,r6
1104a0e0:	318d883a 	add	r6,r6,r6
1104a0e4:	218d883a 	add	r6,r4,r6
1104a0e8:	31800017 	ldw	r6,0(r6)
1104a0ec:	314ed83a 	srl	r7,r6,r5
1104a0f0:	394a983a 	sll	r5,r7,r5
1104a0f4:	29bff31e 	bne	r5,r6,1104a0c4 <__any_on+0x44>
1104a0f8:	003fe606 	br	1104a094 <__any_on+0x14>
1104a0fc:	0005883a 	mov	r2,zero
1104a100:	f800283a 	ret

1104a104 <_realloc_r>:
1104a104:	defff504 	addi	sp,sp,-44
1104a108:	dd400615 	stw	r21,24(sp)
1104a10c:	dc800315 	stw	r18,12(sp)
1104a110:	dc000115 	stw	r16,4(sp)
1104a114:	dfc00a15 	stw	ra,40(sp)
1104a118:	df000915 	stw	fp,36(sp)
1104a11c:	ddc00815 	stw	r23,32(sp)
1104a120:	dd800715 	stw	r22,28(sp)
1104a124:	dd000515 	stw	r20,20(sp)
1104a128:	dcc00415 	stw	r19,16(sp)
1104a12c:	dc400215 	stw	r17,8(sp)
1104a130:	2821883a 	mov	r16,r5
1104a134:	202b883a 	mov	r21,r4
1104a138:	3025883a 	mov	r18,r6
1104a13c:	28009626 	beq	r5,zero,1104a398 <_realloc_r+0x294>
1104a140:	104cc600 	call	1104cc60 <__malloc_lock>
1104a144:	80bfff17 	ldw	r2,-4(r16)
1104a148:	04ffff04 	movi	r19,-4
1104a14c:	90c002c4 	addi	r3,r18,11
1104a150:	01000584 	movi	r4,22
1104a154:	85bffe04 	addi	r22,r16,-8
1104a158:	14e6703a 	and	r19,r2,r19
1104a15c:	20c0372e 	bgeu	r4,r3,1104a23c <_realloc_r+0x138>
1104a160:	047ffe04 	movi	r17,-8
1104a164:	1c62703a 	and	r17,r3,r17
1104a168:	8807883a 	mov	r3,r17
1104a16c:	88005a16 	blt	r17,zero,1104a2d8 <_realloc_r+0x1d4>
1104a170:	8c805936 	bltu	r17,r18,1104a2d8 <_realloc_r+0x1d4>
1104a174:	98c0340e 	bge	r19,r3,1104a248 <_realloc_r+0x144>
1104a178:	07000034 	movhi	fp,0
1104a17c:	e7047904 	addi	fp,fp,4580
1104a180:	e1400217 	ldw	r5,8(fp)
1104a184:	b4c9883a 	add	r4,r22,r19
1104a188:	29009026 	beq	r5,r4,1104a3cc <_realloc_r+0x2c8>
1104a18c:	21800117 	ldw	r6,4(r4)
1104a190:	01ffff84 	movi	r7,-2
1104a194:	31ce703a 	and	r7,r6,r7
1104a198:	21cf883a 	add	r7,r4,r7
1104a19c:	39c00117 	ldw	r7,4(r7)
1104a1a0:	39c0004c 	andi	r7,r7,1
1104a1a4:	38004326 	beq	r7,zero,1104a2b4 <_realloc_r+0x1b0>
1104a1a8:	000d883a 	mov	r6,zero
1104a1ac:	0009883a 	mov	r4,zero
1104a1b0:	1080004c 	andi	r2,r2,1
1104a1b4:	10005a1e 	bne	r2,zero,1104a320 <_realloc_r+0x21c>
1104a1b8:	85fffe17 	ldw	r23,-8(r16)
1104a1bc:	00bfff04 	movi	r2,-4
1104a1c0:	b5efc83a 	sub	r23,r22,r23
1104a1c4:	b9c00117 	ldw	r7,4(r23)
1104a1c8:	388e703a 	and	r7,r7,r2
1104a1cc:	3ccf883a 	add	r7,r7,r19
1104a1d0:	20005226 	beq	r4,zero,1104a31c <_realloc_r+0x218>
1104a1d4:	31e9883a 	add	r20,r6,r7
1104a1d8:	2140c726 	beq	r4,r5,1104a4f8 <_realloc_r+0x3f4>
1104a1dc:	a0c04f16 	blt	r20,r3,1104a31c <_realloc_r+0x218>
1104a1e0:	20800317 	ldw	r2,12(r4)
1104a1e4:	20c00217 	ldw	r3,8(r4)
1104a1e8:	99bfff04 	addi	r6,r19,-4
1104a1ec:	01000904 	movi	r4,36
1104a1f0:	18800315 	stw	r2,12(r3)
1104a1f4:	10c00215 	stw	r3,8(r2)
1104a1f8:	b8c00217 	ldw	r3,8(r23)
1104a1fc:	b8800317 	ldw	r2,12(r23)
1104a200:	bc800204 	addi	r18,r23,8
1104a204:	18800315 	stw	r2,12(r3)
1104a208:	10c00215 	stw	r3,8(r2)
1104a20c:	2180ed36 	bltu	r4,r6,1104a5c4 <_realloc_r+0x4c0>
1104a210:	008004c4 	movi	r2,19
1104a214:	11809b2e 	bgeu	r2,r6,1104a484 <_realloc_r+0x380>
1104a218:	80800017 	ldw	r2,0(r16)
1104a21c:	b8800215 	stw	r2,8(r23)
1104a220:	80800117 	ldw	r2,4(r16)
1104a224:	b8800315 	stw	r2,12(r23)
1104a228:	008006c4 	movi	r2,27
1104a22c:	1180f936 	bltu	r2,r6,1104a614 <_realloc_r+0x510>
1104a230:	b8800404 	addi	r2,r23,16
1104a234:	80c00204 	addi	r3,r16,8
1104a238:	00009406 	br	1104a48c <_realloc_r+0x388>
1104a23c:	00c00404 	movi	r3,16
1104a240:	1823883a 	mov	r17,r3
1104a244:	003fca06 	br	1104a170 <_realloc_r+0x6c>
1104a248:	9829883a 	mov	r20,r19
1104a24c:	a447c83a 	sub	r3,r20,r17
1104a250:	010003c4 	movi	r4,15
1104a254:	1080004c 	andi	r2,r2,1
1104a258:	20c02336 	bltu	r4,r3,1104a2e8 <_realloc_r+0x1e4>
1104a25c:	1504b03a 	or	r2,r2,r20
1104a260:	b0800115 	stw	r2,4(r22)
1104a264:	b52d883a 	add	r22,r22,r20
1104a268:	b0800117 	ldw	r2,4(r22)
1104a26c:	10800054 	ori	r2,r2,1
1104a270:	b0800115 	stw	r2,4(r22)
1104a274:	a809883a 	mov	r4,r21
1104a278:	104cc800 	call	1104cc80 <__malloc_unlock>
1104a27c:	8025883a 	mov	r18,r16
1104a280:	9005883a 	mov	r2,r18
1104a284:	dfc00a17 	ldw	ra,40(sp)
1104a288:	df000917 	ldw	fp,36(sp)
1104a28c:	ddc00817 	ldw	r23,32(sp)
1104a290:	dd800717 	ldw	r22,28(sp)
1104a294:	dd400617 	ldw	r21,24(sp)
1104a298:	dd000517 	ldw	r20,20(sp)
1104a29c:	dcc00417 	ldw	r19,16(sp)
1104a2a0:	dc800317 	ldw	r18,12(sp)
1104a2a4:	dc400217 	ldw	r17,8(sp)
1104a2a8:	dc000117 	ldw	r16,4(sp)
1104a2ac:	dec00b04 	addi	sp,sp,44
1104a2b0:	f800283a 	ret
1104a2b4:	01ffff04 	movi	r7,-4
1104a2b8:	31cc703a 	and	r6,r6,r7
1104a2bc:	34e9883a 	add	r20,r6,r19
1104a2c0:	a0ffbb16 	blt	r20,r3,1104a1b0 <_realloc_r+0xac>
1104a2c4:	20c00317 	ldw	r3,12(r4)
1104a2c8:	21000217 	ldw	r4,8(r4)
1104a2cc:	20c00315 	stw	r3,12(r4)
1104a2d0:	19000215 	stw	r4,8(r3)
1104a2d4:	003fdd06 	br	1104a24c <_realloc_r+0x148>
1104a2d8:	00800304 	movi	r2,12
1104a2dc:	a8800015 	stw	r2,0(r21)
1104a2e0:	0025883a 	mov	r18,zero
1104a2e4:	003fe606 	br	1104a280 <_realloc_r+0x17c>
1104a2e8:	1444b03a 	or	r2,r2,r17
1104a2ec:	b0800115 	stw	r2,4(r22)
1104a2f0:	b44b883a 	add	r5,r22,r17
1104a2f4:	18800054 	ori	r2,r3,1
1104a2f8:	28800115 	stw	r2,4(r5)
1104a2fc:	28c7883a 	add	r3,r5,r3
1104a300:	18800117 	ldw	r2,4(r3)
1104a304:	a809883a 	mov	r4,r21
1104a308:	29400204 	addi	r5,r5,8
1104a30c:	10800054 	ori	r2,r2,1
1104a310:	18800115 	stw	r2,4(r3)
1104a314:	1047a4c0 	call	11047a4c <_free_r>
1104a318:	003fd606 	br	1104a274 <_realloc_r+0x170>
1104a31c:	38c0330e 	bge	r7,r3,1104a3ec <_realloc_r+0x2e8>
1104a320:	900b883a 	mov	r5,r18
1104a324:	a809883a 	mov	r4,r21
1104a328:	10485e40 	call	110485e4 <_malloc_r>
1104a32c:	1025883a 	mov	r18,r2
1104a330:	10001626 	beq	r2,zero,1104a38c <_realloc_r+0x288>
1104a334:	80bfff17 	ldw	r2,-4(r16)
1104a338:	00ffff84 	movi	r3,-2
1104a33c:	913ffe04 	addi	r4,r18,-8
1104a340:	10c6703a 	and	r3,r2,r3
1104a344:	b0c7883a 	add	r3,r22,r3
1104a348:	20c09926 	beq	r4,r3,1104a5b0 <_realloc_r+0x4ac>
1104a34c:	99bfff04 	addi	r6,r19,-4
1104a350:	00800904 	movi	r2,36
1104a354:	11806436 	bltu	r2,r6,1104a4e8 <_realloc_r+0x3e4>
1104a358:	00c004c4 	movi	r3,19
1104a35c:	19804036 	bltu	r3,r6,1104a460 <_realloc_r+0x35c>
1104a360:	9005883a 	mov	r2,r18
1104a364:	8007883a 	mov	r3,r16
1104a368:	19000017 	ldw	r4,0(r3)
1104a36c:	11000015 	stw	r4,0(r2)
1104a370:	19000117 	ldw	r4,4(r3)
1104a374:	11000115 	stw	r4,4(r2)
1104a378:	18c00217 	ldw	r3,8(r3)
1104a37c:	10c00215 	stw	r3,8(r2)
1104a380:	a809883a 	mov	r4,r21
1104a384:	800b883a 	mov	r5,r16
1104a388:	1047a4c0 	call	11047a4c <_free_r>
1104a38c:	a809883a 	mov	r4,r21
1104a390:	104cc800 	call	1104cc80 <__malloc_unlock>
1104a394:	003fba06 	br	1104a280 <_realloc_r+0x17c>
1104a398:	300b883a 	mov	r5,r6
1104a39c:	dfc00a17 	ldw	ra,40(sp)
1104a3a0:	df000917 	ldw	fp,36(sp)
1104a3a4:	ddc00817 	ldw	r23,32(sp)
1104a3a8:	dd800717 	ldw	r22,28(sp)
1104a3ac:	dd400617 	ldw	r21,24(sp)
1104a3b0:	dd000517 	ldw	r20,20(sp)
1104a3b4:	dcc00417 	ldw	r19,16(sp)
1104a3b8:	dc800317 	ldw	r18,12(sp)
1104a3bc:	dc400217 	ldw	r17,8(sp)
1104a3c0:	dc000117 	ldw	r16,4(sp)
1104a3c4:	dec00b04 	addi	sp,sp,44
1104a3c8:	10485e41 	jmpi	110485e4 <_malloc_r>
1104a3cc:	29800117 	ldw	r6,4(r5)
1104a3d0:	013fff04 	movi	r4,-4
1104a3d4:	89c00404 	addi	r7,r17,16
1104a3d8:	310c703a 	and	r6,r6,r4
1104a3dc:	34c9883a 	add	r4,r6,r19
1104a3e0:	21c0340e 	bge	r4,r7,1104a4b4 <_realloc_r+0x3b0>
1104a3e4:	2809883a 	mov	r4,r5
1104a3e8:	003f7106 	br	1104a1b0 <_realloc_r+0xac>
1104a3ec:	b8800317 	ldw	r2,12(r23)
1104a3f0:	b8c00217 	ldw	r3,8(r23)
1104a3f4:	99bfff04 	addi	r6,r19,-4
1104a3f8:	01000904 	movi	r4,36
1104a3fc:	18800315 	stw	r2,12(r3)
1104a400:	10c00215 	stw	r3,8(r2)
1104a404:	bc800204 	addi	r18,r23,8
1104a408:	21807836 	bltu	r4,r6,1104a5ec <_realloc_r+0x4e8>
1104a40c:	008004c4 	movi	r2,19
1104a410:	1180732e 	bgeu	r2,r6,1104a5e0 <_realloc_r+0x4dc>
1104a414:	80800017 	ldw	r2,0(r16)
1104a418:	b8800215 	stw	r2,8(r23)
1104a41c:	80800117 	ldw	r2,4(r16)
1104a420:	b8800315 	stw	r2,12(r23)
1104a424:	008006c4 	movi	r2,27
1104a428:	11808936 	bltu	r2,r6,1104a650 <_realloc_r+0x54c>
1104a42c:	b8800404 	addi	r2,r23,16
1104a430:	80c00204 	addi	r3,r16,8
1104a434:	19000017 	ldw	r4,0(r3)
1104a438:	9021883a 	mov	r16,r18
1104a43c:	3829883a 	mov	r20,r7
1104a440:	11000015 	stw	r4,0(r2)
1104a444:	19000117 	ldw	r4,4(r3)
1104a448:	b82d883a 	mov	r22,r23
1104a44c:	11000115 	stw	r4,4(r2)
1104a450:	18c00217 	ldw	r3,8(r3)
1104a454:	10c00215 	stw	r3,8(r2)
1104a458:	b8800117 	ldw	r2,4(r23)
1104a45c:	003f7b06 	br	1104a24c <_realloc_r+0x148>
1104a460:	80c00017 	ldw	r3,0(r16)
1104a464:	90c00015 	stw	r3,0(r18)
1104a468:	80c00117 	ldw	r3,4(r16)
1104a46c:	90c00115 	stw	r3,4(r18)
1104a470:	00c006c4 	movi	r3,27
1104a474:	19804636 	bltu	r3,r6,1104a590 <_realloc_r+0x48c>
1104a478:	90800204 	addi	r2,r18,8
1104a47c:	80c00204 	addi	r3,r16,8
1104a480:	003fb906 	br	1104a368 <_realloc_r+0x264>
1104a484:	9005883a 	mov	r2,r18
1104a488:	8007883a 	mov	r3,r16
1104a48c:	19000017 	ldw	r4,0(r3)
1104a490:	9021883a 	mov	r16,r18
1104a494:	b82d883a 	mov	r22,r23
1104a498:	11000015 	stw	r4,0(r2)
1104a49c:	19000117 	ldw	r4,4(r3)
1104a4a0:	11000115 	stw	r4,4(r2)
1104a4a4:	18c00217 	ldw	r3,8(r3)
1104a4a8:	10c00215 	stw	r3,8(r2)
1104a4ac:	b8800117 	ldw	r2,4(r23)
1104a4b0:	003f6606 	br	1104a24c <_realloc_r+0x148>
1104a4b4:	2445c83a 	sub	r2,r4,r17
1104a4b8:	b46d883a 	add	r22,r22,r17
1104a4bc:	10800054 	ori	r2,r2,1
1104a4c0:	b0800115 	stw	r2,4(r22)
1104a4c4:	80bfff17 	ldw	r2,-4(r16)
1104a4c8:	a809883a 	mov	r4,r21
1104a4cc:	e5800215 	stw	r22,8(fp)
1104a4d0:	1080004c 	andi	r2,r2,1
1104a4d4:	88a2b03a 	or	r17,r17,r2
1104a4d8:	847fff15 	stw	r17,-4(r16)
1104a4dc:	104cc800 	call	1104cc80 <__malloc_unlock>
1104a4e0:	8025883a 	mov	r18,r16
1104a4e4:	003f6606 	br	1104a280 <_realloc_r+0x17c>
1104a4e8:	9009883a 	mov	r4,r18
1104a4ec:	800b883a 	mov	r5,r16
1104a4f0:	1048f580 	call	11048f58 <memmove>
1104a4f4:	003fa206 	br	1104a380 <_realloc_r+0x27c>
1104a4f8:	88800404 	addi	r2,r17,16
1104a4fc:	a0bf8716 	blt	r20,r2,1104a31c <_realloc_r+0x218>
1104a500:	b8800317 	ldw	r2,12(r23)
1104a504:	b8c00217 	ldw	r3,8(r23)
1104a508:	99bfff04 	addi	r6,r19,-4
1104a50c:	01000904 	movi	r4,36
1104a510:	18800315 	stw	r2,12(r3)
1104a514:	10c00215 	stw	r3,8(r2)
1104a518:	bc800204 	addi	r18,r23,8
1104a51c:	21806536 	bltu	r4,r6,1104a6b4 <_realloc_r+0x5b0>
1104a520:	008004c4 	movi	r2,19
1104a524:	1180592e 	bgeu	r2,r6,1104a68c <_realloc_r+0x588>
1104a528:	80800017 	ldw	r2,0(r16)
1104a52c:	b8800215 	stw	r2,8(r23)
1104a530:	80800117 	ldw	r2,4(r16)
1104a534:	b8800315 	stw	r2,12(r23)
1104a538:	008006c4 	movi	r2,27
1104a53c:	11806136 	bltu	r2,r6,1104a6c4 <_realloc_r+0x5c0>
1104a540:	b8800404 	addi	r2,r23,16
1104a544:	80c00204 	addi	r3,r16,8
1104a548:	19000017 	ldw	r4,0(r3)
1104a54c:	11000015 	stw	r4,0(r2)
1104a550:	19000117 	ldw	r4,4(r3)
1104a554:	11000115 	stw	r4,4(r2)
1104a558:	18c00217 	ldw	r3,8(r3)
1104a55c:	10c00215 	stw	r3,8(r2)
1104a560:	a447c83a 	sub	r3,r20,r17
1104a564:	bc45883a 	add	r2,r23,r17
1104a568:	18c00054 	ori	r3,r3,1
1104a56c:	10c00115 	stw	r3,4(r2)
1104a570:	b8c00117 	ldw	r3,4(r23)
1104a574:	e0800215 	stw	r2,8(fp)
1104a578:	a809883a 	mov	r4,r21
1104a57c:	1880004c 	andi	r2,r3,1
1104a580:	88a2b03a 	or	r17,r17,r2
1104a584:	bc400115 	stw	r17,4(r23)
1104a588:	104cc800 	call	1104cc80 <__malloc_unlock>
1104a58c:	003f3c06 	br	1104a280 <_realloc_r+0x17c>
1104a590:	80c00217 	ldw	r3,8(r16)
1104a594:	90c00215 	stw	r3,8(r18)
1104a598:	80c00317 	ldw	r3,12(r16)
1104a59c:	90c00315 	stw	r3,12(r18)
1104a5a0:	30802426 	beq	r6,r2,1104a634 <_realloc_r+0x530>
1104a5a4:	90800404 	addi	r2,r18,16
1104a5a8:	80c00404 	addi	r3,r16,16
1104a5ac:	003f6e06 	br	1104a368 <_realloc_r+0x264>
1104a5b0:	953fff17 	ldw	r20,-4(r18)
1104a5b4:	00ffff04 	movi	r3,-4
1104a5b8:	a0e8703a 	and	r20,r20,r3
1104a5bc:	a4e9883a 	add	r20,r20,r19
1104a5c0:	003f2206 	br	1104a24c <_realloc_r+0x148>
1104a5c4:	800b883a 	mov	r5,r16
1104a5c8:	9009883a 	mov	r4,r18
1104a5cc:	1048f580 	call	11048f58 <memmove>
1104a5d0:	9021883a 	mov	r16,r18
1104a5d4:	b8800117 	ldw	r2,4(r23)
1104a5d8:	b82d883a 	mov	r22,r23
1104a5dc:	003f1b06 	br	1104a24c <_realloc_r+0x148>
1104a5e0:	9005883a 	mov	r2,r18
1104a5e4:	8007883a 	mov	r3,r16
1104a5e8:	003f9206 	br	1104a434 <_realloc_r+0x330>
1104a5ec:	800b883a 	mov	r5,r16
1104a5f0:	9009883a 	mov	r4,r18
1104a5f4:	d9c00015 	stw	r7,0(sp)
1104a5f8:	1048f580 	call	11048f58 <memmove>
1104a5fc:	d9c00017 	ldw	r7,0(sp)
1104a600:	9021883a 	mov	r16,r18
1104a604:	b8800117 	ldw	r2,4(r23)
1104a608:	3829883a 	mov	r20,r7
1104a60c:	b82d883a 	mov	r22,r23
1104a610:	003f0e06 	br	1104a24c <_realloc_r+0x148>
1104a614:	80800217 	ldw	r2,8(r16)
1104a618:	b8800415 	stw	r2,16(r23)
1104a61c:	80800317 	ldw	r2,12(r16)
1104a620:	b8800515 	stw	r2,20(r23)
1104a624:	31001226 	beq	r6,r4,1104a670 <_realloc_r+0x56c>
1104a628:	b8800604 	addi	r2,r23,24
1104a62c:	80c00404 	addi	r3,r16,16
1104a630:	003f9606 	br	1104a48c <_realloc_r+0x388>
1104a634:	81000417 	ldw	r4,16(r16)
1104a638:	90800604 	addi	r2,r18,24
1104a63c:	80c00604 	addi	r3,r16,24
1104a640:	91000415 	stw	r4,16(r18)
1104a644:	81000517 	ldw	r4,20(r16)
1104a648:	91000515 	stw	r4,20(r18)
1104a64c:	003f4606 	br	1104a368 <_realloc_r+0x264>
1104a650:	80800217 	ldw	r2,8(r16)
1104a654:	b8800415 	stw	r2,16(r23)
1104a658:	80800317 	ldw	r2,12(r16)
1104a65c:	b8800515 	stw	r2,20(r23)
1104a660:	31000d26 	beq	r6,r4,1104a698 <_realloc_r+0x594>
1104a664:	b8800604 	addi	r2,r23,24
1104a668:	80c00404 	addi	r3,r16,16
1104a66c:	003f7106 	br	1104a434 <_realloc_r+0x330>
1104a670:	81000417 	ldw	r4,16(r16)
1104a674:	b8800804 	addi	r2,r23,32
1104a678:	80c00604 	addi	r3,r16,24
1104a67c:	b9000615 	stw	r4,24(r23)
1104a680:	81000517 	ldw	r4,20(r16)
1104a684:	b9000715 	stw	r4,28(r23)
1104a688:	003f8006 	br	1104a48c <_realloc_r+0x388>
1104a68c:	9005883a 	mov	r2,r18
1104a690:	8007883a 	mov	r3,r16
1104a694:	003fac06 	br	1104a548 <_realloc_r+0x444>
1104a698:	81000417 	ldw	r4,16(r16)
1104a69c:	b8800804 	addi	r2,r23,32
1104a6a0:	80c00604 	addi	r3,r16,24
1104a6a4:	b9000615 	stw	r4,24(r23)
1104a6a8:	81000517 	ldw	r4,20(r16)
1104a6ac:	b9000715 	stw	r4,28(r23)
1104a6b0:	003f6006 	br	1104a434 <_realloc_r+0x330>
1104a6b4:	9009883a 	mov	r4,r18
1104a6b8:	800b883a 	mov	r5,r16
1104a6bc:	1048f580 	call	11048f58 <memmove>
1104a6c0:	003fa706 	br	1104a560 <_realloc_r+0x45c>
1104a6c4:	80800217 	ldw	r2,8(r16)
1104a6c8:	b8800415 	stw	r2,16(r23)
1104a6cc:	80800317 	ldw	r2,12(r16)
1104a6d0:	b8800515 	stw	r2,20(r23)
1104a6d4:	31000326 	beq	r6,r4,1104a6e4 <_realloc_r+0x5e0>
1104a6d8:	b8800604 	addi	r2,r23,24
1104a6dc:	80c00404 	addi	r3,r16,16
1104a6e0:	003f9906 	br	1104a548 <_realloc_r+0x444>
1104a6e4:	81000417 	ldw	r4,16(r16)
1104a6e8:	b8800804 	addi	r2,r23,32
1104a6ec:	80c00604 	addi	r3,r16,24
1104a6f0:	b9000615 	stw	r4,24(r23)
1104a6f4:	81000517 	ldw	r4,20(r16)
1104a6f8:	b9000715 	stw	r4,28(r23)
1104a6fc:	003f9206 	br	1104a548 <_realloc_r+0x444>

1104a700 <__isinfd>:
1104a700:	0105c83a 	sub	r2,zero,r4
1104a704:	1108b03a 	or	r4,r2,r4
1104a708:	2004d7fa 	srli	r2,r4,31
1104a70c:	00e00034 	movhi	r3,32768
1104a710:	18ffffc4 	addi	r3,r3,-1
1104a714:	28ca703a 	and	r5,r5,r3
1104a718:	1144b03a 	or	r2,r2,r5
1104a71c:	00dffc34 	movhi	r3,32752
1104a720:	1885c83a 	sub	r2,r3,r2
1104a724:	0087c83a 	sub	r3,zero,r2
1104a728:	1884b03a 	or	r2,r3,r2
1104a72c:	1005d7fa 	srai	r2,r2,31
1104a730:	10800044 	addi	r2,r2,1
1104a734:	f800283a 	ret

1104a738 <__isnand>:
1104a738:	0105c83a 	sub	r2,zero,r4
1104a73c:	1108b03a 	or	r4,r2,r4
1104a740:	2004d7fa 	srli	r2,r4,31
1104a744:	00e00034 	movhi	r3,32768
1104a748:	18ffffc4 	addi	r3,r3,-1
1104a74c:	28ca703a 	and	r5,r5,r3
1104a750:	1144b03a 	or	r2,r2,r5
1104a754:	00dffc34 	movhi	r3,32752
1104a758:	1885c83a 	sub	r2,r3,r2
1104a75c:	1004d7fa 	srli	r2,r2,31
1104a760:	f800283a 	ret

1104a764 <_sbrk_r>:
1104a764:	defffd04 	addi	sp,sp,-12
1104a768:	dc400115 	stw	r17,4(sp)
1104a76c:	dc000015 	stw	r16,0(sp)
1104a770:	2023883a 	mov	r17,r4
1104a774:	04000034 	movhi	r16,0
1104a778:	840a1504 	addi	r16,r16,10324
1104a77c:	2809883a 	mov	r4,r5
1104a780:	dfc00215 	stw	ra,8(sp)
1104a784:	80000015 	stw	zero,0(r16)
1104a788:	104ce400 	call	1104ce40 <sbrk>
1104a78c:	00ffffc4 	movi	r3,-1
1104a790:	10c00526 	beq	r2,r3,1104a7a8 <_sbrk_r+0x44>
1104a794:	dfc00217 	ldw	ra,8(sp)
1104a798:	dc400117 	ldw	r17,4(sp)
1104a79c:	dc000017 	ldw	r16,0(sp)
1104a7a0:	dec00304 	addi	sp,sp,12
1104a7a4:	f800283a 	ret
1104a7a8:	80c00017 	ldw	r3,0(r16)
1104a7ac:	183ff926 	beq	r3,zero,1104a794 <_sbrk_r+0x30>
1104a7b0:	88c00015 	stw	r3,0(r17)
1104a7b4:	dfc00217 	ldw	ra,8(sp)
1104a7b8:	dc400117 	ldw	r17,4(sp)
1104a7bc:	dc000017 	ldw	r16,0(sp)
1104a7c0:	dec00304 	addi	sp,sp,12
1104a7c4:	f800283a 	ret

1104a7c8 <__sread>:
1104a7c8:	defffe04 	addi	sp,sp,-8
1104a7cc:	dc000015 	stw	r16,0(sp)
1104a7d0:	2821883a 	mov	r16,r5
1104a7d4:	2940038f 	ldh	r5,14(r5)
1104a7d8:	dfc00115 	stw	ra,4(sp)
1104a7dc:	104adc00 	call	1104adc0 <_read_r>
1104a7e0:	10000716 	blt	r2,zero,1104a800 <__sread+0x38>
1104a7e4:	80c01417 	ldw	r3,80(r16)
1104a7e8:	1887883a 	add	r3,r3,r2
1104a7ec:	80c01415 	stw	r3,80(r16)
1104a7f0:	dfc00117 	ldw	ra,4(sp)
1104a7f4:	dc000017 	ldw	r16,0(sp)
1104a7f8:	dec00204 	addi	sp,sp,8
1104a7fc:	f800283a 	ret
1104a800:	80c0030b 	ldhu	r3,12(r16)
1104a804:	18fbffcc 	andi	r3,r3,61439
1104a808:	80c0030d 	sth	r3,12(r16)
1104a80c:	dfc00117 	ldw	ra,4(sp)
1104a810:	dc000017 	ldw	r16,0(sp)
1104a814:	dec00204 	addi	sp,sp,8
1104a818:	f800283a 	ret

1104a81c <__swrite>:
1104a81c:	2880030b 	ldhu	r2,12(r5)
1104a820:	defffb04 	addi	sp,sp,-20
1104a824:	dcc00315 	stw	r19,12(sp)
1104a828:	10c0400c 	andi	r3,r2,256
1104a82c:	18ffffcc 	andi	r3,r3,65535
1104a830:	18e0001c 	xori	r3,r3,32768
1104a834:	dc800215 	stw	r18,8(sp)
1104a838:	dc400115 	stw	r17,4(sp)
1104a83c:	dc000015 	stw	r16,0(sp)
1104a840:	dfc00415 	stw	ra,16(sp)
1104a844:	18e00004 	addi	r3,r3,-32768
1104a848:	2821883a 	mov	r16,r5
1104a84c:	2027883a 	mov	r19,r4
1104a850:	3025883a 	mov	r18,r6
1104a854:	3823883a 	mov	r17,r7
1104a858:	18000526 	beq	r3,zero,1104a870 <__swrite+0x54>
1104a85c:	2940038f 	ldh	r5,14(r5)
1104a860:	000d883a 	mov	r6,zero
1104a864:	01c00084 	movi	r7,2
1104a868:	104ad540 	call	1104ad54 <_lseek_r>
1104a86c:	8080030b 	ldhu	r2,12(r16)
1104a870:	8140038f 	ldh	r5,14(r16)
1104a874:	10bbffcc 	andi	r2,r2,61439
1104a878:	9809883a 	mov	r4,r19
1104a87c:	900d883a 	mov	r6,r18
1104a880:	880f883a 	mov	r7,r17
1104a884:	8080030d 	sth	r2,12(r16)
1104a888:	dfc00417 	ldw	ra,16(sp)
1104a88c:	dcc00317 	ldw	r19,12(sp)
1104a890:	dc800217 	ldw	r18,8(sp)
1104a894:	dc400117 	ldw	r17,4(sp)
1104a898:	dc000017 	ldw	r16,0(sp)
1104a89c:	dec00504 	addi	sp,sp,20
1104a8a0:	104a9ac1 	jmpi	1104a9ac <_write_r>

1104a8a4 <__sseek>:
1104a8a4:	defffe04 	addi	sp,sp,-8
1104a8a8:	dc000015 	stw	r16,0(sp)
1104a8ac:	2821883a 	mov	r16,r5
1104a8b0:	2940038f 	ldh	r5,14(r5)
1104a8b4:	dfc00115 	stw	ra,4(sp)
1104a8b8:	104ad540 	call	1104ad54 <_lseek_r>
1104a8bc:	00ffffc4 	movi	r3,-1
1104a8c0:	10c00826 	beq	r2,r3,1104a8e4 <__sseek+0x40>
1104a8c4:	80c0030b 	ldhu	r3,12(r16)
1104a8c8:	80801415 	stw	r2,80(r16)
1104a8cc:	18c40014 	ori	r3,r3,4096
1104a8d0:	80c0030d 	sth	r3,12(r16)
1104a8d4:	dfc00117 	ldw	ra,4(sp)
1104a8d8:	dc000017 	ldw	r16,0(sp)
1104a8dc:	dec00204 	addi	sp,sp,8
1104a8e0:	f800283a 	ret
1104a8e4:	80c0030b 	ldhu	r3,12(r16)
1104a8e8:	18fbffcc 	andi	r3,r3,61439
1104a8ec:	80c0030d 	sth	r3,12(r16)
1104a8f0:	dfc00117 	ldw	ra,4(sp)
1104a8f4:	dc000017 	ldw	r16,0(sp)
1104a8f8:	dec00204 	addi	sp,sp,8
1104a8fc:	f800283a 	ret

1104a900 <__sclose>:
1104a900:	2940038f 	ldh	r5,14(r5)
1104a904:	104aad41 	jmpi	1104aad4 <_close_r>

1104a908 <strcmp>:
1104a908:	2904b03a 	or	r2,r5,r4
1104a90c:	108000cc 	andi	r2,r2,3
1104a910:	1000171e 	bne	r2,zero,1104a970 <strcmp+0x68>
1104a914:	20800017 	ldw	r2,0(r4)
1104a918:	28c00017 	ldw	r3,0(r5)
1104a91c:	10c0141e 	bne	r2,r3,1104a970 <strcmp+0x68>
1104a920:	027fbff4 	movhi	r9,65279
1104a924:	4a7fbfc4 	addi	r9,r9,-257
1104a928:	1247883a 	add	r3,r2,r9
1104a92c:	0084303a 	nor	r2,zero,r2
1104a930:	1884703a 	and	r2,r3,r2
1104a934:	02202074 	movhi	r8,32897
1104a938:	42202004 	addi	r8,r8,-32640
1104a93c:	1204703a 	and	r2,r2,r8
1104a940:	10000226 	beq	r2,zero,1104a94c <strcmp+0x44>
1104a944:	00001706 	br	1104a9a4 <strcmp+0x9c>
1104a948:	3000161e 	bne	r6,zero,1104a9a4 <strcmp+0x9c>
1104a94c:	21000104 	addi	r4,r4,4
1104a950:	20800017 	ldw	r2,0(r4)
1104a954:	29400104 	addi	r5,r5,4
1104a958:	28c00017 	ldw	r3,0(r5)
1104a95c:	124f883a 	add	r7,r2,r9
1104a960:	008c303a 	nor	r6,zero,r2
1104a964:	398c703a 	and	r6,r7,r6
1104a968:	320c703a 	and	r6,r6,r8
1104a96c:	10fff626 	beq	r2,r3,1104a948 <strcmp+0x40>
1104a970:	20800007 	ldb	r2,0(r4)
1104a974:	1000051e 	bne	r2,zero,1104a98c <strcmp+0x84>
1104a978:	00000606 	br	1104a994 <strcmp+0x8c>
1104a97c:	21000044 	addi	r4,r4,1
1104a980:	20800007 	ldb	r2,0(r4)
1104a984:	29400044 	addi	r5,r5,1
1104a988:	10000226 	beq	r2,zero,1104a994 <strcmp+0x8c>
1104a98c:	28c00007 	ldb	r3,0(r5)
1104a990:	10fffa26 	beq	r2,r3,1104a97c <strcmp+0x74>
1104a994:	20c00003 	ldbu	r3,0(r4)
1104a998:	28800003 	ldbu	r2,0(r5)
1104a99c:	1885c83a 	sub	r2,r3,r2
1104a9a0:	f800283a 	ret
1104a9a4:	0005883a 	mov	r2,zero
1104a9a8:	f800283a 	ret

1104a9ac <_write_r>:
1104a9ac:	defffd04 	addi	sp,sp,-12
1104a9b0:	dc400115 	stw	r17,4(sp)
1104a9b4:	dc000015 	stw	r16,0(sp)
1104a9b8:	2023883a 	mov	r17,r4
1104a9bc:	04000034 	movhi	r16,0
1104a9c0:	840a1504 	addi	r16,r16,10324
1104a9c4:	2809883a 	mov	r4,r5
1104a9c8:	300b883a 	mov	r5,r6
1104a9cc:	380d883a 	mov	r6,r7
1104a9d0:	dfc00215 	stw	ra,8(sp)
1104a9d4:	80000015 	stw	zero,0(r16)
1104a9d8:	104cf700 	call	1104cf70 <write>
1104a9dc:	00ffffc4 	movi	r3,-1
1104a9e0:	10c00526 	beq	r2,r3,1104a9f8 <_write_r+0x4c>
1104a9e4:	dfc00217 	ldw	ra,8(sp)
1104a9e8:	dc400117 	ldw	r17,4(sp)
1104a9ec:	dc000017 	ldw	r16,0(sp)
1104a9f0:	dec00304 	addi	sp,sp,12
1104a9f4:	f800283a 	ret
1104a9f8:	80c00017 	ldw	r3,0(r16)
1104a9fc:	183ff926 	beq	r3,zero,1104a9e4 <_write_r+0x38>
1104aa00:	88c00015 	stw	r3,0(r17)
1104aa04:	dfc00217 	ldw	ra,8(sp)
1104aa08:	dc400117 	ldw	r17,4(sp)
1104aa0c:	dc000017 	ldw	r16,0(sp)
1104aa10:	dec00304 	addi	sp,sp,12
1104aa14:	f800283a 	ret

1104aa18 <_calloc_r>:
1104aa18:	314b383a 	mul	r5,r6,r5
1104aa1c:	defffe04 	addi	sp,sp,-8
1104aa20:	dc000015 	stw	r16,0(sp)
1104aa24:	dfc00115 	stw	ra,4(sp)
1104aa28:	10485e40 	call	110485e4 <_malloc_r>
1104aa2c:	1021883a 	mov	r16,r2
1104aa30:	10000c26 	beq	r2,zero,1104aa64 <_calloc_r+0x4c>
1104aa34:	11bfff17 	ldw	r6,-4(r2)
1104aa38:	00ffff04 	movi	r3,-4
1104aa3c:	00800904 	movi	r2,36
1104aa40:	30cc703a 	and	r6,r6,r3
1104aa44:	30cd883a 	add	r6,r6,r3
1104aa48:	11801436 	bltu	r2,r6,1104aa9c <_calloc_r+0x84>
1104aa4c:	00c004c4 	movi	r3,19
1104aa50:	19800936 	bltu	r3,r6,1104aa78 <_calloc_r+0x60>
1104aa54:	8005883a 	mov	r2,r16
1104aa58:	10000015 	stw	zero,0(r2)
1104aa5c:	10000115 	stw	zero,4(r2)
1104aa60:	10000215 	stw	zero,8(r2)
1104aa64:	8005883a 	mov	r2,r16
1104aa68:	dfc00117 	ldw	ra,4(sp)
1104aa6c:	dc000017 	ldw	r16,0(sp)
1104aa70:	dec00204 	addi	sp,sp,8
1104aa74:	f800283a 	ret
1104aa78:	80000015 	stw	zero,0(r16)
1104aa7c:	80000115 	stw	zero,4(r16)
1104aa80:	00c006c4 	movi	r3,27
1104aa84:	19800d2e 	bgeu	r3,r6,1104aabc <_calloc_r+0xa4>
1104aa88:	80000215 	stw	zero,8(r16)
1104aa8c:	80000315 	stw	zero,12(r16)
1104aa90:	30800c26 	beq	r6,r2,1104aac4 <_calloc_r+0xac>
1104aa94:	80800404 	addi	r2,r16,16
1104aa98:	003fef06 	br	1104aa58 <_calloc_r+0x40>
1104aa9c:	8009883a 	mov	r4,r16
1104aaa0:	000b883a 	mov	r5,zero
1104aaa4:	10490800 	call	11049080 <memset>
1104aaa8:	8005883a 	mov	r2,r16
1104aaac:	dfc00117 	ldw	ra,4(sp)
1104aab0:	dc000017 	ldw	r16,0(sp)
1104aab4:	dec00204 	addi	sp,sp,8
1104aab8:	f800283a 	ret
1104aabc:	80800204 	addi	r2,r16,8
1104aac0:	003fe506 	br	1104aa58 <_calloc_r+0x40>
1104aac4:	80000415 	stw	zero,16(r16)
1104aac8:	80000515 	stw	zero,20(r16)
1104aacc:	80800604 	addi	r2,r16,24
1104aad0:	003fe106 	br	1104aa58 <_calloc_r+0x40>

1104aad4 <_close_r>:
1104aad4:	defffd04 	addi	sp,sp,-12
1104aad8:	dc400115 	stw	r17,4(sp)
1104aadc:	dc000015 	stw	r16,0(sp)
1104aae0:	2023883a 	mov	r17,r4
1104aae4:	04000034 	movhi	r16,0
1104aae8:	840a1504 	addi	r16,r16,10324
1104aaec:	2809883a 	mov	r4,r5
1104aaf0:	dfc00215 	stw	ra,8(sp)
1104aaf4:	80000015 	stw	zero,0(r16)
1104aaf8:	104c2840 	call	1104c284 <close>
1104aafc:	00ffffc4 	movi	r3,-1
1104ab00:	10c00526 	beq	r2,r3,1104ab18 <_close_r+0x44>
1104ab04:	dfc00217 	ldw	ra,8(sp)
1104ab08:	dc400117 	ldw	r17,4(sp)
1104ab0c:	dc000017 	ldw	r16,0(sp)
1104ab10:	dec00304 	addi	sp,sp,12
1104ab14:	f800283a 	ret
1104ab18:	80c00017 	ldw	r3,0(r16)
1104ab1c:	183ff926 	beq	r3,zero,1104ab04 <_close_r+0x30>
1104ab20:	88c00015 	stw	r3,0(r17)
1104ab24:	dfc00217 	ldw	ra,8(sp)
1104ab28:	dc400117 	ldw	r17,4(sp)
1104ab2c:	dc000017 	ldw	r16,0(sp)
1104ab30:	dec00304 	addi	sp,sp,12
1104ab34:	f800283a 	ret

1104ab38 <_fclose_r>:
1104ab38:	defffc04 	addi	sp,sp,-16
1104ab3c:	dc400115 	stw	r17,4(sp)
1104ab40:	dc000015 	stw	r16,0(sp)
1104ab44:	dfc00315 	stw	ra,12(sp)
1104ab48:	dc800215 	stw	r18,8(sp)
1104ab4c:	2821883a 	mov	r16,r5
1104ab50:	2023883a 	mov	r17,r4
1104ab54:	28003426 	beq	r5,zero,1104ac28 <_fclose_r+0xf0>
1104ab58:	10478d00 	call	110478d0 <__sfp_lock_acquire>
1104ab5c:	88000226 	beq	r17,zero,1104ab68 <_fclose_r+0x30>
1104ab60:	88800e17 	ldw	r2,56(r17)
1104ab64:	10003826 	beq	r2,zero,1104ac48 <_fclose_r+0x110>
1104ab68:	8080030f 	ldh	r2,12(r16)
1104ab6c:	10002526 	beq	r2,zero,1104ac04 <_fclose_r+0xcc>
1104ab70:	8809883a 	mov	r4,r17
1104ab74:	800b883a 	mov	r5,r16
1104ab78:	10474200 	call	11047420 <_fflush_r>
1104ab7c:	1025883a 	mov	r18,r2
1104ab80:	80800b17 	ldw	r2,44(r16)
1104ab84:	10000426 	beq	r2,zero,1104ab98 <_fclose_r+0x60>
1104ab88:	81400717 	ldw	r5,28(r16)
1104ab8c:	8809883a 	mov	r4,r17
1104ab90:	103ee83a 	callr	r2
1104ab94:	10003516 	blt	r2,zero,1104ac6c <_fclose_r+0x134>
1104ab98:	8080030b 	ldhu	r2,12(r16)
1104ab9c:	1080200c 	andi	r2,r2,128
1104aba0:	10bfffcc 	andi	r2,r2,65535
1104aba4:	10a0001c 	xori	r2,r2,32768
1104aba8:	10a00004 	addi	r2,r2,-32768
1104abac:	10002b1e 	bne	r2,zero,1104ac5c <_fclose_r+0x124>
1104abb0:	81400c17 	ldw	r5,48(r16)
1104abb4:	28000526 	beq	r5,zero,1104abcc <_fclose_r+0x94>
1104abb8:	80801004 	addi	r2,r16,64
1104abbc:	28800226 	beq	r5,r2,1104abc8 <_fclose_r+0x90>
1104abc0:	8809883a 	mov	r4,r17
1104abc4:	1047a4c0 	call	11047a4c <_free_r>
1104abc8:	80000c15 	stw	zero,48(r16)
1104abcc:	81401117 	ldw	r5,68(r16)
1104abd0:	28000326 	beq	r5,zero,1104abe0 <_fclose_r+0xa8>
1104abd4:	8809883a 	mov	r4,r17
1104abd8:	1047a4c0 	call	11047a4c <_free_r>
1104abdc:	80001115 	stw	zero,68(r16)
1104abe0:	8000030d 	sth	zero,12(r16)
1104abe4:	10478d40 	call	110478d4 <__sfp_lock_release>
1104abe8:	9005883a 	mov	r2,r18
1104abec:	dfc00317 	ldw	ra,12(sp)
1104abf0:	dc800217 	ldw	r18,8(sp)
1104abf4:	dc400117 	ldw	r17,4(sp)
1104abf8:	dc000017 	ldw	r16,0(sp)
1104abfc:	dec00404 	addi	sp,sp,16
1104ac00:	f800283a 	ret
1104ac04:	10478d40 	call	110478d4 <__sfp_lock_release>
1104ac08:	0025883a 	mov	r18,zero
1104ac0c:	9005883a 	mov	r2,r18
1104ac10:	dfc00317 	ldw	ra,12(sp)
1104ac14:	dc800217 	ldw	r18,8(sp)
1104ac18:	dc400117 	ldw	r17,4(sp)
1104ac1c:	dc000017 	ldw	r16,0(sp)
1104ac20:	dec00404 	addi	sp,sp,16
1104ac24:	f800283a 	ret
1104ac28:	0025883a 	mov	r18,zero
1104ac2c:	9005883a 	mov	r2,r18
1104ac30:	dfc00317 	ldw	ra,12(sp)
1104ac34:	dc800217 	ldw	r18,8(sp)
1104ac38:	dc400117 	ldw	r17,4(sp)
1104ac3c:	dc000017 	ldw	r16,0(sp)
1104ac40:	dec00404 	addi	sp,sp,16
1104ac44:	f800283a 	ret
1104ac48:	8809883a 	mov	r4,r17
1104ac4c:	10476c80 	call	110476c8 <__sinit>
1104ac50:	8080030f 	ldh	r2,12(r16)
1104ac54:	103fc61e 	bne	r2,zero,1104ab70 <_fclose_r+0x38>
1104ac58:	003fea06 	br	1104ac04 <_fclose_r+0xcc>
1104ac5c:	81400417 	ldw	r5,16(r16)
1104ac60:	8809883a 	mov	r4,r17
1104ac64:	1047a4c0 	call	11047a4c <_free_r>
1104ac68:	003fd106 	br	1104abb0 <_fclose_r+0x78>
1104ac6c:	04bfffc4 	movi	r18,-1
1104ac70:	003fc906 	br	1104ab98 <_fclose_r+0x60>

1104ac74 <fclose>:
1104ac74:	00800034 	movhi	r2,0
1104ac78:	1089fe04 	addi	r2,r2,10232
1104ac7c:	200b883a 	mov	r5,r4
1104ac80:	11000017 	ldw	r4,0(r2)
1104ac84:	104ab381 	jmpi	1104ab38 <_fclose_r>

1104ac88 <_fstat_r>:
1104ac88:	defffd04 	addi	sp,sp,-12
1104ac8c:	dc400115 	stw	r17,4(sp)
1104ac90:	dc000015 	stw	r16,0(sp)
1104ac94:	2023883a 	mov	r17,r4
1104ac98:	04000034 	movhi	r16,0
1104ac9c:	840a1504 	addi	r16,r16,10324
1104aca0:	2809883a 	mov	r4,r5
1104aca4:	300b883a 	mov	r5,r6
1104aca8:	dfc00215 	stw	ra,8(sp)
1104acac:	80000015 	stw	zero,0(r16)
1104acb0:	104c3c80 	call	1104c3c8 <fstat>
1104acb4:	00ffffc4 	movi	r3,-1
1104acb8:	10c00526 	beq	r2,r3,1104acd0 <_fstat_r+0x48>
1104acbc:	dfc00217 	ldw	ra,8(sp)
1104acc0:	dc400117 	ldw	r17,4(sp)
1104acc4:	dc000017 	ldw	r16,0(sp)
1104acc8:	dec00304 	addi	sp,sp,12
1104accc:	f800283a 	ret
1104acd0:	80c00017 	ldw	r3,0(r16)
1104acd4:	183ff926 	beq	r3,zero,1104acbc <_fstat_r+0x34>
1104acd8:	88c00015 	stw	r3,0(r17)
1104acdc:	dfc00217 	ldw	ra,8(sp)
1104ace0:	dc400117 	ldw	r17,4(sp)
1104ace4:	dc000017 	ldw	r16,0(sp)
1104ace8:	dec00304 	addi	sp,sp,12
1104acec:	f800283a 	ret

1104acf0 <_isatty_r>:
1104acf0:	defffd04 	addi	sp,sp,-12
1104acf4:	dc400115 	stw	r17,4(sp)
1104acf8:	dc000015 	stw	r16,0(sp)
1104acfc:	2023883a 	mov	r17,r4
1104ad00:	04000034 	movhi	r16,0
1104ad04:	840a1504 	addi	r16,r16,10324
1104ad08:	2809883a 	mov	r4,r5
1104ad0c:	dfc00215 	stw	ra,8(sp)
1104ad10:	80000015 	stw	zero,0(r16)
1104ad14:	104c93c0 	call	1104c93c <isatty>
1104ad18:	00ffffc4 	movi	r3,-1
1104ad1c:	10c00526 	beq	r2,r3,1104ad34 <_isatty_r+0x44>
1104ad20:	dfc00217 	ldw	ra,8(sp)
1104ad24:	dc400117 	ldw	r17,4(sp)
1104ad28:	dc000017 	ldw	r16,0(sp)
1104ad2c:	dec00304 	addi	sp,sp,12
1104ad30:	f800283a 	ret
1104ad34:	80c00017 	ldw	r3,0(r16)
1104ad38:	183ff926 	beq	r3,zero,1104ad20 <_isatty_r+0x30>
1104ad3c:	88c00015 	stw	r3,0(r17)
1104ad40:	dfc00217 	ldw	ra,8(sp)
1104ad44:	dc400117 	ldw	r17,4(sp)
1104ad48:	dc000017 	ldw	r16,0(sp)
1104ad4c:	dec00304 	addi	sp,sp,12
1104ad50:	f800283a 	ret

1104ad54 <_lseek_r>:
1104ad54:	defffd04 	addi	sp,sp,-12
1104ad58:	dc400115 	stw	r17,4(sp)
1104ad5c:	dc000015 	stw	r16,0(sp)
1104ad60:	2023883a 	mov	r17,r4
1104ad64:	04000034 	movhi	r16,0
1104ad68:	840a1504 	addi	r16,r16,10324
1104ad6c:	2809883a 	mov	r4,r5
1104ad70:	300b883a 	mov	r5,r6
1104ad74:	380d883a 	mov	r6,r7
1104ad78:	dfc00215 	stw	ra,8(sp)
1104ad7c:	80000015 	stw	zero,0(r16)
1104ad80:	104cb180 	call	1104cb18 <lseek>
1104ad84:	00ffffc4 	movi	r3,-1
1104ad88:	10c00526 	beq	r2,r3,1104ada0 <_lseek_r+0x4c>
1104ad8c:	dfc00217 	ldw	ra,8(sp)
1104ad90:	dc400117 	ldw	r17,4(sp)
1104ad94:	dc000017 	ldw	r16,0(sp)
1104ad98:	dec00304 	addi	sp,sp,12
1104ad9c:	f800283a 	ret
1104ada0:	80c00017 	ldw	r3,0(r16)
1104ada4:	183ff926 	beq	r3,zero,1104ad8c <_lseek_r+0x38>
1104ada8:	88c00015 	stw	r3,0(r17)
1104adac:	dfc00217 	ldw	ra,8(sp)
1104adb0:	dc400117 	ldw	r17,4(sp)
1104adb4:	dc000017 	ldw	r16,0(sp)
1104adb8:	dec00304 	addi	sp,sp,12
1104adbc:	f800283a 	ret

1104adc0 <_read_r>:
1104adc0:	defffd04 	addi	sp,sp,-12
1104adc4:	dc400115 	stw	r17,4(sp)
1104adc8:	dc000015 	stw	r16,0(sp)
1104adcc:	2023883a 	mov	r17,r4
1104add0:	04000034 	movhi	r16,0
1104add4:	840a1504 	addi	r16,r16,10324
1104add8:	2809883a 	mov	r4,r5
1104addc:	300b883a 	mov	r5,r6
1104ade0:	380d883a 	mov	r6,r7
1104ade4:	dfc00215 	stw	ra,8(sp)
1104ade8:	80000015 	stw	zero,0(r16)
1104adec:	104ccf00 	call	1104ccf0 <read>
1104adf0:	00ffffc4 	movi	r3,-1
1104adf4:	10c00526 	beq	r2,r3,1104ae0c <_read_r+0x4c>
1104adf8:	dfc00217 	ldw	ra,8(sp)
1104adfc:	dc400117 	ldw	r17,4(sp)
1104ae00:	dc000017 	ldw	r16,0(sp)
1104ae04:	dec00304 	addi	sp,sp,12
1104ae08:	f800283a 	ret
1104ae0c:	80c00017 	ldw	r3,0(r16)
1104ae10:	183ff926 	beq	r3,zero,1104adf8 <_read_r+0x38>
1104ae14:	88c00015 	stw	r3,0(r17)
1104ae18:	dfc00217 	ldw	ra,8(sp)
1104ae1c:	dc400117 	ldw	r17,4(sp)
1104ae20:	dc000017 	ldw	r16,0(sp)
1104ae24:	dec00304 	addi	sp,sp,12
1104ae28:	f800283a 	ret

1104ae2c <__udivdi3>:
1104ae2c:	defff504 	addi	sp,sp,-44
1104ae30:	dd000515 	stw	r20,20(sp)
1104ae34:	dcc00415 	stw	r19,16(sp)
1104ae38:	dc800315 	stw	r18,12(sp)
1104ae3c:	dc400215 	stw	r17,8(sp)
1104ae40:	dc000115 	stw	r16,4(sp)
1104ae44:	dfc00a15 	stw	ra,40(sp)
1104ae48:	df000915 	stw	fp,36(sp)
1104ae4c:	ddc00815 	stw	r23,32(sp)
1104ae50:	dd800715 	stw	r22,28(sp)
1104ae54:	dd400615 	stw	r21,24(sp)
1104ae58:	2025883a 	mov	r18,r4
1104ae5c:	2823883a 	mov	r17,r5
1104ae60:	3021883a 	mov	r16,r6
1104ae64:	2027883a 	mov	r19,r4
1104ae68:	2829883a 	mov	r20,r5
1104ae6c:	3800401e 	bne	r7,zero,1104af70 <__udivdi3+0x144>
1104ae70:	2980602e 	bgeu	r5,r6,1104aff4 <__udivdi3+0x1c8>
1104ae74:	00bfffd4 	movui	r2,65535
1104ae78:	1180aa36 	bltu	r2,r6,1104b124 <__udivdi3+0x2f8>
1104ae7c:	00803fc4 	movi	r2,255
1104ae80:	11814436 	bltu	r2,r6,1104b394 <__udivdi3+0x568>
1104ae84:	0005883a 	mov	r2,zero
1104ae88:	0007883a 	mov	r3,zero
1104ae8c:	3084d83a 	srl	r2,r6,r2
1104ae90:	01000034 	movhi	r4,0
1104ae94:	2102b304 	addi	r4,r4,2764
1104ae98:	2085883a 	add	r2,r4,r2
1104ae9c:	10800003 	ldbu	r2,0(r2)
1104aea0:	10c7883a 	add	r3,r2,r3
1104aea4:	00800804 	movi	r2,32
1104aea8:	10c5c83a 	sub	r2,r2,r3
1104aeac:	10000526 	beq	r2,zero,1104aec4 <__udivdi3+0x98>
1104aeb0:	88a2983a 	sll	r17,r17,r2
1104aeb4:	90c6d83a 	srl	r3,r18,r3
1104aeb8:	30a0983a 	sll	r16,r6,r2
1104aebc:	90a6983a 	sll	r19,r18,r2
1104aec0:	88e8b03a 	or	r20,r17,r3
1104aec4:	8022d43a 	srli	r17,r16,16
1104aec8:	a009883a 	mov	r4,r20
1104aecc:	857fffcc 	andi	r21,r16,65535
1104aed0:	880b883a 	mov	r5,r17
1104aed4:	10431bc0 	call	110431bc <__umodsi3>
1104aed8:	a009883a 	mov	r4,r20
1104aedc:	880b883a 	mov	r5,r17
1104aee0:	102d883a 	mov	r22,r2
1104aee4:	10431b40 	call	110431b4 <__udivsi3>
1104aee8:	b02c943a 	slli	r22,r22,16
1104aeec:	9806d43a 	srli	r3,r19,16
1104aef0:	1549383a 	mul	r4,r2,r21
1104aef4:	1025883a 	mov	r18,r2
1104aef8:	b0c6b03a 	or	r3,r22,r3
1104aefc:	1900052e 	bgeu	r3,r4,1104af14 <__udivdi3+0xe8>
1104af00:	1c07883a 	add	r3,r3,r16
1104af04:	10bfffc4 	addi	r2,r2,-1
1104af08:	1c000136 	bltu	r3,r16,1104af10 <__udivdi3+0xe4>
1104af0c:	19013636 	bltu	r3,r4,1104b3e8 <__udivdi3+0x5bc>
1104af10:	1025883a 	mov	r18,r2
1104af14:	1929c83a 	sub	r20,r3,r4
1104af18:	a009883a 	mov	r4,r20
1104af1c:	880b883a 	mov	r5,r17
1104af20:	10431bc0 	call	110431bc <__umodsi3>
1104af24:	102d883a 	mov	r22,r2
1104af28:	a009883a 	mov	r4,r20
1104af2c:	880b883a 	mov	r5,r17
1104af30:	10431b40 	call	110431b4 <__udivsi3>
1104af34:	b02c943a 	slli	r22,r22,16
1104af38:	156b383a 	mul	r21,r2,r21
1104af3c:	9cffffcc 	andi	r19,r19,65535
1104af40:	b4e6b03a 	or	r19,r22,r19
1104af44:	1009883a 	mov	r4,r2
1104af48:	9d40052e 	bgeu	r19,r21,1104af60 <__udivdi3+0x134>
1104af4c:	9c27883a 	add	r19,r19,r16
1104af50:	10bfffc4 	addi	r2,r2,-1
1104af54:	9c00f736 	bltu	r19,r16,1104b334 <__udivdi3+0x508>
1104af58:	9d40f62e 	bgeu	r19,r21,1104b334 <__udivdi3+0x508>
1104af5c:	213fff84 	addi	r4,r4,-2
1104af60:	9004943a 	slli	r2,r18,16
1104af64:	0007883a 	mov	r3,zero
1104af68:	2084b03a 	or	r2,r4,r2
1104af6c:	00001506 	br	1104afc4 <__udivdi3+0x198>
1104af70:	29c06536 	bltu	r5,r7,1104b108 <__udivdi3+0x2dc>
1104af74:	00bfffd4 	movui	r2,65535
1104af78:	11c0652e 	bgeu	r2,r7,1104b110 <__udivdi3+0x2e4>
1104af7c:	00804034 	movhi	r2,256
1104af80:	10bfffc4 	addi	r2,r2,-1
1104af84:	11c0f736 	bltu	r2,r7,1104b364 <__udivdi3+0x538>
1104af88:	00c00404 	movi	r3,16
1104af8c:	180b883a 	mov	r5,r3
1104af90:	38c6d83a 	srl	r3,r7,r3
1104af94:	01000034 	movhi	r4,0
1104af98:	2102b304 	addi	r4,r4,2764
1104af9c:	04000804 	movi	r16,32
1104afa0:	20c7883a 	add	r3,r4,r3
1104afa4:	18800003 	ldbu	r2,0(r3)
1104afa8:	1145883a 	add	r2,r2,r5
1104afac:	80a1c83a 	sub	r16,r16,r2
1104afb0:	8000691e 	bne	r16,zero,1104b158 <__udivdi3+0x32c>
1104afb4:	0007883a 	mov	r3,zero
1104afb8:	3c406536 	bltu	r7,r17,1104b150 <__udivdi3+0x324>
1104afbc:	9180642e 	bgeu	r18,r6,1104b150 <__udivdi3+0x324>
1104afc0:	0005883a 	mov	r2,zero
1104afc4:	dfc00a17 	ldw	ra,40(sp)
1104afc8:	df000917 	ldw	fp,36(sp)
1104afcc:	ddc00817 	ldw	r23,32(sp)
1104afd0:	dd800717 	ldw	r22,28(sp)
1104afd4:	dd400617 	ldw	r21,24(sp)
1104afd8:	dd000517 	ldw	r20,20(sp)
1104afdc:	dcc00417 	ldw	r19,16(sp)
1104afe0:	dc800317 	ldw	r18,12(sp)
1104afe4:	dc400217 	ldw	r17,8(sp)
1104afe8:	dc000117 	ldw	r16,4(sp)
1104afec:	dec00b04 	addi	sp,sp,44
1104aff0:	f800283a 	ret
1104aff4:	3000041e 	bne	r6,zero,1104b008 <__udivdi3+0x1dc>
1104aff8:	01000044 	movi	r4,1
1104affc:	000b883a 	mov	r5,zero
1104b000:	10431b40 	call	110431b4 <__udivsi3>
1104b004:	1021883a 	mov	r16,r2
1104b008:	00bfffd4 	movui	r2,65535
1104b00c:	14004b2e 	bgeu	r2,r16,1104b13c <__udivdi3+0x310>
1104b010:	00804034 	movhi	r2,256
1104b014:	10bfffc4 	addi	r2,r2,-1
1104b018:	1400d836 	bltu	r2,r16,1104b37c <__udivdi3+0x550>
1104b01c:	00800404 	movi	r2,16
1104b020:	1007883a 	mov	r3,r2
1104b024:	8084d83a 	srl	r2,r16,r2
1104b028:	01000034 	movhi	r4,0
1104b02c:	2102b304 	addi	r4,r4,2764
1104b030:	2085883a 	add	r2,r4,r2
1104b034:	10800003 	ldbu	r2,0(r2)
1104b038:	10c7883a 	add	r3,r2,r3
1104b03c:	00800804 	movi	r2,32
1104b040:	10c5c83a 	sub	r2,r2,r3
1104b044:	1000891e 	bne	r2,zero,1104b26c <__udivdi3+0x440>
1104b048:	8028d43a 	srli	r20,r16,16
1104b04c:	8c23c83a 	sub	r17,r17,r16
1104b050:	84bfffcc 	andi	r18,r16,65535
1104b054:	00c00044 	movi	r3,1
1104b058:	8809883a 	mov	r4,r17
1104b05c:	a00b883a 	mov	r5,r20
1104b060:	d8c00015 	stw	r3,0(sp)
1104b064:	10431bc0 	call	110431bc <__umodsi3>
1104b068:	8809883a 	mov	r4,r17
1104b06c:	a00b883a 	mov	r5,r20
1104b070:	102b883a 	mov	r21,r2
1104b074:	10431b40 	call	110431b4 <__udivsi3>
1104b078:	a82a943a 	slli	r21,r21,16
1104b07c:	9808d43a 	srli	r4,r19,16
1104b080:	148b383a 	mul	r5,r2,r18
1104b084:	1023883a 	mov	r17,r2
1104b088:	a908b03a 	or	r4,r21,r4
1104b08c:	d8c00017 	ldw	r3,0(sp)
1104b090:	2140052e 	bgeu	r4,r5,1104b0a8 <__udivdi3+0x27c>
1104b094:	2409883a 	add	r4,r4,r16
1104b098:	10bfffc4 	addi	r2,r2,-1
1104b09c:	24000136 	bltu	r4,r16,1104b0a4 <__udivdi3+0x278>
1104b0a0:	2140ce36 	bltu	r4,r5,1104b3dc <__udivdi3+0x5b0>
1104b0a4:	1023883a 	mov	r17,r2
1104b0a8:	216bc83a 	sub	r21,r4,r5
1104b0ac:	a809883a 	mov	r4,r21
1104b0b0:	a00b883a 	mov	r5,r20
1104b0b4:	d8c00015 	stw	r3,0(sp)
1104b0b8:	10431bc0 	call	110431bc <__umodsi3>
1104b0bc:	102d883a 	mov	r22,r2
1104b0c0:	a809883a 	mov	r4,r21
1104b0c4:	a00b883a 	mov	r5,r20
1104b0c8:	10431b40 	call	110431b4 <__udivsi3>
1104b0cc:	b02c943a 	slli	r22,r22,16
1104b0d0:	14a5383a 	mul	r18,r2,r18
1104b0d4:	9cffffcc 	andi	r19,r19,65535
1104b0d8:	b4e6b03a 	or	r19,r22,r19
1104b0dc:	1009883a 	mov	r4,r2
1104b0e0:	d8c00017 	ldw	r3,0(sp)
1104b0e4:	9c80052e 	bgeu	r19,r18,1104b0fc <__udivdi3+0x2d0>
1104b0e8:	9c27883a 	add	r19,r19,r16
1104b0ec:	10bfffc4 	addi	r2,r2,-1
1104b0f0:	9c009236 	bltu	r19,r16,1104b33c <__udivdi3+0x510>
1104b0f4:	9c80912e 	bgeu	r19,r18,1104b33c <__udivdi3+0x510>
1104b0f8:	213fff84 	addi	r4,r4,-2
1104b0fc:	8804943a 	slli	r2,r17,16
1104b100:	2084b03a 	or	r2,r4,r2
1104b104:	003faf06 	br	1104afc4 <__udivdi3+0x198>
1104b108:	0007883a 	mov	r3,zero
1104b10c:	003fac06 	br	1104afc0 <__udivdi3+0x194>
1104b110:	00803fc4 	movi	r2,255
1104b114:	11c09636 	bltu	r2,r7,1104b370 <__udivdi3+0x544>
1104b118:	0007883a 	mov	r3,zero
1104b11c:	000b883a 	mov	r5,zero
1104b120:	003f9b06 	br	1104af90 <__udivdi3+0x164>
1104b124:	00804034 	movhi	r2,256
1104b128:	10bfffc4 	addi	r2,r2,-1
1104b12c:	11809636 	bltu	r2,r6,1104b388 <__udivdi3+0x55c>
1104b130:	00800404 	movi	r2,16
1104b134:	1007883a 	mov	r3,r2
1104b138:	003f5406 	br	1104ae8c <__udivdi3+0x60>
1104b13c:	00803fc4 	movi	r2,255
1104b140:	14009736 	bltu	r2,r16,1104b3a0 <__udivdi3+0x574>
1104b144:	0005883a 	mov	r2,zero
1104b148:	0007883a 	mov	r3,zero
1104b14c:	003fb506 	br	1104b024 <__udivdi3+0x1f8>
1104b150:	00800044 	movi	r2,1
1104b154:	003f9b06 	br	1104afc4 <__udivdi3+0x198>
1104b158:	3086d83a 	srl	r3,r6,r2
1104b15c:	3c0e983a 	sll	r7,r7,r16
1104b160:	88aad83a 	srl	r21,r17,r2
1104b164:	9084d83a 	srl	r2,r18,r2
1104b168:	38e6b03a 	or	r19,r7,r3
1104b16c:	9828d43a 	srli	r20,r19,16
1104b170:	8c22983a 	sll	r17,r17,r16
1104b174:	a809883a 	mov	r4,r21
1104b178:	a00b883a 	mov	r5,r20
1104b17c:	342c983a 	sll	r22,r6,r16
1104b180:	88a2b03a 	or	r17,r17,r2
1104b184:	10431bc0 	call	110431bc <__umodsi3>
1104b188:	a809883a 	mov	r4,r21
1104b18c:	a00b883a 	mov	r5,r20
1104b190:	1039883a 	mov	fp,r2
1104b194:	10431b40 	call	110431b4 <__udivsi3>
1104b198:	102b883a 	mov	r21,r2
1104b19c:	9dffffcc 	andi	r23,r19,65535
1104b1a0:	e008943a 	slli	r4,fp,16
1104b1a4:	8804d43a 	srli	r2,r17,16
1104b1a8:	adcd383a 	mul	r6,r21,r23
1104b1ac:	2088b03a 	or	r4,r4,r2
1104b1b0:	2180042e 	bgeu	r4,r6,1104b1c4 <__udivdi3+0x398>
1104b1b4:	24c9883a 	add	r4,r4,r19
1104b1b8:	a8bfffc4 	addi	r2,r21,-1
1104b1bc:	24c07f2e 	bgeu	r4,r19,1104b3bc <__udivdi3+0x590>
1104b1c0:	102b883a 	mov	r21,r2
1104b1c4:	21b9c83a 	sub	fp,r4,r6
1104b1c8:	e009883a 	mov	r4,fp
1104b1cc:	a00b883a 	mov	r5,r20
1104b1d0:	10431bc0 	call	110431bc <__umodsi3>
1104b1d4:	e009883a 	mov	r4,fp
1104b1d8:	a00b883a 	mov	r5,r20
1104b1dc:	d8800015 	stw	r2,0(sp)
1104b1e0:	10431b40 	call	110431b4 <__udivsi3>
1104b1e4:	d8c00017 	ldw	r3,0(sp)
1104b1e8:	15cb383a 	mul	r5,r2,r23
1104b1ec:	8c7fffcc 	andi	r17,r17,65535
1104b1f0:	1806943a 	slli	r3,r3,16
1104b1f4:	1009883a 	mov	r4,r2
1104b1f8:	1c46b03a 	or	r3,r3,r17
1104b1fc:	1940042e 	bgeu	r3,r5,1104b210 <__udivdi3+0x3e4>
1104b200:	1cc7883a 	add	r3,r3,r19
1104b204:	10bfffc4 	addi	r2,r2,-1
1104b208:	1cc0682e 	bgeu	r3,r19,1104b3ac <__udivdi3+0x580>
1104b20c:	1009883a 	mov	r4,r2
1104b210:	a804943a 	slli	r2,r21,16
1104b214:	b1ffffcc 	andi	r7,r22,65535
1104b218:	b02cd43a 	srli	r22,r22,16
1104b21c:	2084b03a 	or	r2,r4,r2
1104b220:	113fffcc 	andi	r4,r2,65535
1104b224:	100cd43a 	srli	r6,r2,16
1104b228:	21d1383a 	mul	r8,r4,r7
1104b22c:	2589383a 	mul	r4,r4,r22
1104b230:	31cf383a 	mul	r7,r6,r7
1104b234:	4012d43a 	srli	r9,r8,16
1104b238:	1947c83a 	sub	r3,r3,r5
1104b23c:	3909883a 	add	r4,r7,r4
1104b240:	2249883a 	add	r4,r4,r9
1104b244:	35ad383a 	mul	r22,r6,r22
1104b248:	21c0022e 	bgeu	r4,r7,1104b254 <__udivdi3+0x428>
1104b24c:	01400074 	movhi	r5,1
1104b250:	b16d883a 	add	r22,r22,r5
1104b254:	200ad43a 	srli	r5,r4,16
1104b258:	b16d883a 	add	r22,r22,r5
1104b25c:	1d803e36 	bltu	r3,r22,1104b358 <__udivdi3+0x52c>
1104b260:	1d803826 	beq	r3,r22,1104b344 <__udivdi3+0x518>
1104b264:	0007883a 	mov	r3,zero
1104b268:	003f5606 	br	1104afc4 <__udivdi3+0x198>
1104b26c:	80a0983a 	sll	r16,r16,r2
1104b270:	88ead83a 	srl	r21,r17,r3
1104b274:	90c6d83a 	srl	r3,r18,r3
1104b278:	8028d43a 	srli	r20,r16,16
1104b27c:	88a2983a 	sll	r17,r17,r2
1104b280:	a809883a 	mov	r4,r21
1104b284:	a00b883a 	mov	r5,r20
1104b288:	88ecb03a 	or	r22,r17,r3
1104b28c:	90a6983a 	sll	r19,r18,r2
1104b290:	10431bc0 	call	110431bc <__umodsi3>
1104b294:	a809883a 	mov	r4,r21
1104b298:	a00b883a 	mov	r5,r20
1104b29c:	1023883a 	mov	r17,r2
1104b2a0:	10431b40 	call	110431b4 <__udivsi3>
1104b2a4:	102b883a 	mov	r21,r2
1104b2a8:	84bfffcc 	andi	r18,r16,65535
1104b2ac:	8808943a 	slli	r4,r17,16
1104b2b0:	b004d43a 	srli	r2,r22,16
1104b2b4:	ac87383a 	mul	r3,r21,r18
1104b2b8:	2088b03a 	or	r4,r4,r2
1104b2bc:	20c0062e 	bgeu	r4,r3,1104b2d8 <__udivdi3+0x4ac>
1104b2c0:	2409883a 	add	r4,r4,r16
1104b2c4:	a8bfffc4 	addi	r2,r21,-1
1104b2c8:	24004236 	bltu	r4,r16,1104b3d4 <__udivdi3+0x5a8>
1104b2cc:	20c0412e 	bgeu	r4,r3,1104b3d4 <__udivdi3+0x5a8>
1104b2d0:	ad7fff84 	addi	r21,r21,-2
1104b2d4:	2409883a 	add	r4,r4,r16
1104b2d8:	20efc83a 	sub	r23,r4,r3
1104b2dc:	b809883a 	mov	r4,r23
1104b2e0:	a00b883a 	mov	r5,r20
1104b2e4:	10431bc0 	call	110431bc <__umodsi3>
1104b2e8:	1023883a 	mov	r17,r2
1104b2ec:	a00b883a 	mov	r5,r20
1104b2f0:	b809883a 	mov	r4,r23
1104b2f4:	10431b40 	call	110431b4 <__udivsi3>
1104b2f8:	8822943a 	slli	r17,r17,16
1104b2fc:	148b383a 	mul	r5,r2,r18
1104b300:	b5bfffcc 	andi	r22,r22,65535
1104b304:	8da2b03a 	or	r17,r17,r22
1104b308:	8940062e 	bgeu	r17,r5,1104b324 <__udivdi3+0x4f8>
1104b30c:	8c23883a 	add	r17,r17,r16
1104b310:	10ffffc4 	addi	r3,r2,-1
1104b314:	8c002d36 	bltu	r17,r16,1104b3cc <__udivdi3+0x5a0>
1104b318:	89402c2e 	bgeu	r17,r5,1104b3cc <__udivdi3+0x5a0>
1104b31c:	10bfff84 	addi	r2,r2,-2
1104b320:	8c23883a 	add	r17,r17,r16
1104b324:	a806943a 	slli	r3,r21,16
1104b328:	8963c83a 	sub	r17,r17,r5
1104b32c:	10c6b03a 	or	r3,r2,r3
1104b330:	003f4906 	br	1104b058 <__udivdi3+0x22c>
1104b334:	1009883a 	mov	r4,r2
1104b338:	003f0906 	br	1104af60 <__udivdi3+0x134>
1104b33c:	1009883a 	mov	r4,r2
1104b340:	003f6e06 	br	1104b0fc <__udivdi3+0x2d0>
1104b344:	2008943a 	slli	r4,r4,16
1104b348:	9420983a 	sll	r16,r18,r16
1104b34c:	423fffcc 	andi	r8,r8,65535
1104b350:	2209883a 	add	r4,r4,r8
1104b354:	813fc32e 	bgeu	r16,r4,1104b264 <__udivdi3+0x438>
1104b358:	10bfffc4 	addi	r2,r2,-1
1104b35c:	0007883a 	mov	r3,zero
1104b360:	003f1806 	br	1104afc4 <__udivdi3+0x198>
1104b364:	00c00604 	movi	r3,24
1104b368:	180b883a 	mov	r5,r3
1104b36c:	003f0806 	br	1104af90 <__udivdi3+0x164>
1104b370:	00c00204 	movi	r3,8
1104b374:	180b883a 	mov	r5,r3
1104b378:	003f0506 	br	1104af90 <__udivdi3+0x164>
1104b37c:	00800604 	movi	r2,24
1104b380:	1007883a 	mov	r3,r2
1104b384:	003f2706 	br	1104b024 <__udivdi3+0x1f8>
1104b388:	00800604 	movi	r2,24
1104b38c:	1007883a 	mov	r3,r2
1104b390:	003ebe06 	br	1104ae8c <__udivdi3+0x60>
1104b394:	00800204 	movi	r2,8
1104b398:	1007883a 	mov	r3,r2
1104b39c:	003ebb06 	br	1104ae8c <__udivdi3+0x60>
1104b3a0:	00800204 	movi	r2,8
1104b3a4:	1007883a 	mov	r3,r2
1104b3a8:	003f1e06 	br	1104b024 <__udivdi3+0x1f8>
1104b3ac:	197f972e 	bgeu	r3,r5,1104b20c <__udivdi3+0x3e0>
1104b3b0:	213fff84 	addi	r4,r4,-2
1104b3b4:	1cc7883a 	add	r3,r3,r19
1104b3b8:	003f9506 	br	1104b210 <__udivdi3+0x3e4>
1104b3bc:	21bf802e 	bgeu	r4,r6,1104b1c0 <__udivdi3+0x394>
1104b3c0:	ad7fff84 	addi	r21,r21,-2
1104b3c4:	24c9883a 	add	r4,r4,r19
1104b3c8:	003f7e06 	br	1104b1c4 <__udivdi3+0x398>
1104b3cc:	1805883a 	mov	r2,r3
1104b3d0:	003fd406 	br	1104b324 <__udivdi3+0x4f8>
1104b3d4:	102b883a 	mov	r21,r2
1104b3d8:	003fbf06 	br	1104b2d8 <__udivdi3+0x4ac>
1104b3dc:	8c7fff84 	addi	r17,r17,-2
1104b3e0:	2409883a 	add	r4,r4,r16
1104b3e4:	003f3006 	br	1104b0a8 <__udivdi3+0x27c>
1104b3e8:	94bfff84 	addi	r18,r18,-2
1104b3ec:	1c07883a 	add	r3,r3,r16
1104b3f0:	003ec806 	br	1104af14 <__udivdi3+0xe8>

1104b3f4 <__umoddi3>:
1104b3f4:	defff504 	addi	sp,sp,-44
1104b3f8:	dd000515 	stw	r20,20(sp)
1104b3fc:	dcc00415 	stw	r19,16(sp)
1104b400:	dc800315 	stw	r18,12(sp)
1104b404:	dc400215 	stw	r17,8(sp)
1104b408:	dc000115 	stw	r16,4(sp)
1104b40c:	dfc00a15 	stw	ra,40(sp)
1104b410:	df000915 	stw	fp,36(sp)
1104b414:	ddc00815 	stw	r23,32(sp)
1104b418:	dd800715 	stw	r22,28(sp)
1104b41c:	dd400615 	stw	r21,24(sp)
1104b420:	2025883a 	mov	r18,r4
1104b424:	2823883a 	mov	r17,r5
1104b428:	3021883a 	mov	r16,r6
1104b42c:	2027883a 	mov	r19,r4
1104b430:	2829883a 	mov	r20,r5
1104b434:	3800351e 	bne	r7,zero,1104b50c <__umoddi3+0x118>
1104b438:	29804d2e 	bgeu	r5,r6,1104b570 <__umoddi3+0x17c>
1104b43c:	00bfffd4 	movui	r2,65535
1104b440:	11809a36 	bltu	r2,r6,1104b6ac <__umoddi3+0x2b8>
1104b444:	00803fc4 	movi	r2,255
1104b448:	11813936 	bltu	r2,r6,1104b930 <__umoddi3+0x53c>
1104b44c:	0005883a 	mov	r2,zero
1104b450:	0009883a 	mov	r4,zero
1104b454:	3084d83a 	srl	r2,r6,r2
1104b458:	00c00034 	movhi	r3,0
1104b45c:	18c2b304 	addi	r3,r3,2764
1104b460:	05400804 	movi	r21,32
1104b464:	1885883a 	add	r2,r3,r2
1104b468:	10800003 	ldbu	r2,0(r2)
1104b46c:	1109883a 	add	r4,r2,r4
1104b470:	a92bc83a 	sub	r21,r21,r4
1104b474:	a800ec26 	beq	r21,zero,1104b828 <__umoddi3+0x434>
1104b478:	8d62983a 	sll	r17,r17,r21
1104b47c:	9108d83a 	srl	r4,r18,r4
1104b480:	3560983a 	sll	r16,r6,r21
1104b484:	9566983a 	sll	r19,r18,r21
1104b488:	8928b03a 	or	r20,r17,r4
1104b48c:	8022d43a 	srli	r17,r16,16
1104b490:	a009883a 	mov	r4,r20
1104b494:	84bfffcc 	andi	r18,r16,65535
1104b498:	880b883a 	mov	r5,r17
1104b49c:	10431bc0 	call	110431bc <__umodsi3>
1104b4a0:	a009883a 	mov	r4,r20
1104b4a4:	880b883a 	mov	r5,r17
1104b4a8:	102d883a 	mov	r22,r2
1104b4ac:	10431b40 	call	110431b4 <__udivsi3>
1104b4b0:	b02c943a 	slli	r22,r22,16
1104b4b4:	9806d43a 	srli	r3,r19,16
1104b4b8:	1485383a 	mul	r2,r2,r18
1104b4bc:	b0c6b03a 	or	r3,r22,r3
1104b4c0:	1880042e 	bgeu	r3,r2,1104b4d4 <__umoddi3+0xe0>
1104b4c4:	1c07883a 	add	r3,r3,r16
1104b4c8:	1c000236 	bltu	r3,r16,1104b4d4 <__umoddi3+0xe0>
1104b4cc:	1880012e 	bgeu	r3,r2,1104b4d4 <__umoddi3+0xe0>
1104b4d0:	1c07883a 	add	r3,r3,r16
1104b4d4:	18a9c83a 	sub	r20,r3,r2
1104b4d8:	a009883a 	mov	r4,r20
1104b4dc:	880b883a 	mov	r5,r17
1104b4e0:	10431bc0 	call	110431bc <__umodsi3>
1104b4e4:	102d883a 	mov	r22,r2
1104b4e8:	a009883a 	mov	r4,r20
1104b4ec:	880b883a 	mov	r5,r17
1104b4f0:	10431b40 	call	110431b4 <__udivsi3>
1104b4f4:	b02c943a 	slli	r22,r22,16
1104b4f8:	1485383a 	mul	r2,r2,r18
1104b4fc:	9cffffcc 	andi	r19,r19,65535
1104b500:	b4e6b03a 	or	r19,r22,r19
1104b504:	9880522e 	bgeu	r19,r2,1104b650 <__umoddi3+0x25c>
1104b508:	00004d06 	br	1104b640 <__umoddi3+0x24c>
1104b50c:	29c05436 	bltu	r5,r7,1104b660 <__umoddi3+0x26c>
1104b510:	00bfffd4 	movui	r2,65535
1104b514:	11c0602e 	bgeu	r2,r7,1104b698 <__umoddi3+0x2a4>
1104b518:	00804034 	movhi	r2,256
1104b51c:	10bfffc4 	addi	r2,r2,-1
1104b520:	11c0f736 	bltu	r2,r7,1104b900 <__umoddi3+0x50c>
1104b524:	00c00404 	movi	r3,16
1104b528:	1827883a 	mov	r19,r3
1104b52c:	38c6d83a 	srl	r3,r7,r3
1104b530:	01000034 	movhi	r4,0
1104b534:	2102b304 	addi	r4,r4,2764
1104b538:	04000804 	movi	r16,32
1104b53c:	20c7883a 	add	r3,r4,r3
1104b540:	18800003 	ldbu	r2,0(r3)
1104b544:	14e7883a 	add	r19,r2,r19
1104b548:	84e1c83a 	sub	r16,r16,r19
1104b54c:	8000621e 	bne	r16,zero,1104b6d8 <__umoddi3+0x2e4>
1104b550:	3c400136 	bltu	r7,r17,1104b558 <__umoddi3+0x164>
1104b554:	91810336 	bltu	r18,r6,1104b964 <__umoddi3+0x570>
1104b558:	9185c83a 	sub	r2,r18,r6
1104b55c:	89e3c83a 	sub	r17,r17,r7
1104b560:	90a5803a 	cmpltu	r18,r18,r2
1104b564:	8ca9c83a 	sub	r20,r17,r18
1104b568:	a007883a 	mov	r3,r20
1104b56c:	00003e06 	br	1104b668 <__umoddi3+0x274>
1104b570:	3000041e 	bne	r6,zero,1104b584 <__umoddi3+0x190>
1104b574:	01000044 	movi	r4,1
1104b578:	000b883a 	mov	r5,zero
1104b57c:	10431b40 	call	110431b4 <__udivsi3>
1104b580:	1021883a 	mov	r16,r2
1104b584:	00bfffd4 	movui	r2,65535
1104b588:	14004e2e 	bgeu	r2,r16,1104b6c4 <__umoddi3+0x2d0>
1104b58c:	00804034 	movhi	r2,256
1104b590:	10bfffc4 	addi	r2,r2,-1
1104b594:	1400e336 	bltu	r2,r16,1104b924 <__umoddi3+0x530>
1104b598:	00800404 	movi	r2,16
1104b59c:	1007883a 	mov	r3,r2
1104b5a0:	8084d83a 	srl	r2,r16,r2
1104b5a4:	01000034 	movhi	r4,0
1104b5a8:	2102b304 	addi	r4,r4,2764
1104b5ac:	05400804 	movi	r21,32
1104b5b0:	2085883a 	add	r2,r4,r2
1104b5b4:	10800003 	ldbu	r2,0(r2)
1104b5b8:	10c7883a 	add	r3,r2,r3
1104b5bc:	a8ebc83a 	sub	r21,r21,r3
1104b5c0:	a8009b1e 	bne	r21,zero,1104b830 <__umoddi3+0x43c>
1104b5c4:	8028d43a 	srli	r20,r16,16
1104b5c8:	8c23c83a 	sub	r17,r17,r16
1104b5cc:	85bfffcc 	andi	r22,r16,65535
1104b5d0:	8809883a 	mov	r4,r17
1104b5d4:	a00b883a 	mov	r5,r20
1104b5d8:	10431bc0 	call	110431bc <__umodsi3>
1104b5dc:	8809883a 	mov	r4,r17
1104b5e0:	a00b883a 	mov	r5,r20
1104b5e4:	1025883a 	mov	r18,r2
1104b5e8:	10431b40 	call	110431b4 <__udivsi3>
1104b5ec:	9024943a 	slli	r18,r18,16
1104b5f0:	9806d43a 	srli	r3,r19,16
1104b5f4:	1585383a 	mul	r2,r2,r22
1104b5f8:	90c6b03a 	or	r3,r18,r3
1104b5fc:	1880032e 	bgeu	r3,r2,1104b60c <__umoddi3+0x218>
1104b600:	1c07883a 	add	r3,r3,r16
1104b604:	1c000136 	bltu	r3,r16,1104b60c <__umoddi3+0x218>
1104b608:	1880d436 	bltu	r3,r2,1104b95c <__umoddi3+0x568>
1104b60c:	18a3c83a 	sub	r17,r3,r2
1104b610:	8809883a 	mov	r4,r17
1104b614:	a00b883a 	mov	r5,r20
1104b618:	10431bc0 	call	110431bc <__umodsi3>
1104b61c:	1025883a 	mov	r18,r2
1104b620:	8809883a 	mov	r4,r17
1104b624:	a00b883a 	mov	r5,r20
1104b628:	10431b40 	call	110431b4 <__udivsi3>
1104b62c:	9024943a 	slli	r18,r18,16
1104b630:	1585383a 	mul	r2,r2,r22
1104b634:	9cffffcc 	andi	r19,r19,65535
1104b638:	94e6b03a 	or	r19,r18,r19
1104b63c:	9880042e 	bgeu	r19,r2,1104b650 <__umoddi3+0x25c>
1104b640:	9c27883a 	add	r19,r19,r16
1104b644:	9c000236 	bltu	r19,r16,1104b650 <__umoddi3+0x25c>
1104b648:	9880012e 	bgeu	r19,r2,1104b650 <__umoddi3+0x25c>
1104b64c:	9c27883a 	add	r19,r19,r16
1104b650:	98a7c83a 	sub	r19,r19,r2
1104b654:	9d44d83a 	srl	r2,r19,r21
1104b658:	0007883a 	mov	r3,zero
1104b65c:	00000206 	br	1104b668 <__umoddi3+0x274>
1104b660:	2005883a 	mov	r2,r4
1104b664:	2807883a 	mov	r3,r5
1104b668:	dfc00a17 	ldw	ra,40(sp)
1104b66c:	df000917 	ldw	fp,36(sp)
1104b670:	ddc00817 	ldw	r23,32(sp)
1104b674:	dd800717 	ldw	r22,28(sp)
1104b678:	dd400617 	ldw	r21,24(sp)
1104b67c:	dd000517 	ldw	r20,20(sp)
1104b680:	dcc00417 	ldw	r19,16(sp)
1104b684:	dc800317 	ldw	r18,12(sp)
1104b688:	dc400217 	ldw	r17,8(sp)
1104b68c:	dc000117 	ldw	r16,4(sp)
1104b690:	dec00b04 	addi	sp,sp,44
1104b694:	f800283a 	ret
1104b698:	00803fc4 	movi	r2,255
1104b69c:	11c09536 	bltu	r2,r7,1104b8f4 <__umoddi3+0x500>
1104b6a0:	0007883a 	mov	r3,zero
1104b6a4:	0027883a 	mov	r19,zero
1104b6a8:	003fa006 	br	1104b52c <__umoddi3+0x138>
1104b6ac:	00804034 	movhi	r2,256
1104b6b0:	10bfffc4 	addi	r2,r2,-1
1104b6b4:	11809536 	bltu	r2,r6,1104b90c <__umoddi3+0x518>
1104b6b8:	00800404 	movi	r2,16
1104b6bc:	1009883a 	mov	r4,r2
1104b6c0:	003f6406 	br	1104b454 <__umoddi3+0x60>
1104b6c4:	00803fc4 	movi	r2,255
1104b6c8:	14009336 	bltu	r2,r16,1104b918 <__umoddi3+0x524>
1104b6cc:	0005883a 	mov	r2,zero
1104b6d0:	0007883a 	mov	r3,zero
1104b6d4:	003fb206 	br	1104b5a0 <__umoddi3+0x1ac>
1104b6d8:	34c4d83a 	srl	r2,r6,r19
1104b6dc:	3c0e983a 	sll	r7,r7,r16
1104b6e0:	8ceed83a 	srl	r23,r17,r19
1104b6e4:	8c22983a 	sll	r17,r17,r16
1104b6e8:	38a8b03a 	or	r20,r7,r2
1104b6ec:	a02ad43a 	srli	r21,r20,16
1104b6f0:	94c4d83a 	srl	r2,r18,r19
1104b6f4:	b809883a 	mov	r4,r23
1104b6f8:	a80b883a 	mov	r5,r21
1104b6fc:	88a2b03a 	or	r17,r17,r2
1104b700:	342c983a 	sll	r22,r6,r16
1104b704:	10431bc0 	call	110431bc <__umodsi3>
1104b708:	b809883a 	mov	r4,r23
1104b70c:	a80b883a 	mov	r5,r21
1104b710:	d8800015 	stw	r2,0(sp)
1104b714:	10431b40 	call	110431b4 <__udivsi3>
1104b718:	d8c00017 	ldw	r3,0(sp)
1104b71c:	102f883a 	mov	r23,r2
1104b720:	a73fffcc 	andi	fp,r20,65535
1104b724:	180a943a 	slli	r5,r3,16
1104b728:	8804d43a 	srli	r2,r17,16
1104b72c:	bf09383a 	mul	r4,r23,fp
1104b730:	9424983a 	sll	r18,r18,r16
1104b734:	288ab03a 	or	r5,r5,r2
1104b738:	2900042e 	bgeu	r5,r4,1104b74c <__umoddi3+0x358>
1104b73c:	2d0b883a 	add	r5,r5,r20
1104b740:	b8bfffc4 	addi	r2,r23,-1
1104b744:	2d00812e 	bgeu	r5,r20,1104b94c <__umoddi3+0x558>
1104b748:	102f883a 	mov	r23,r2
1104b74c:	2907c83a 	sub	r3,r5,r4
1104b750:	1809883a 	mov	r4,r3
1104b754:	a80b883a 	mov	r5,r21
1104b758:	d8c00015 	stw	r3,0(sp)
1104b75c:	10431bc0 	call	110431bc <__umodsi3>
1104b760:	d8c00017 	ldw	r3,0(sp)
1104b764:	a80b883a 	mov	r5,r21
1104b768:	d8800015 	stw	r2,0(sp)
1104b76c:	1809883a 	mov	r4,r3
1104b770:	10431b40 	call	110431b4 <__udivsi3>
1104b774:	d9800017 	ldw	r6,0(sp)
1104b778:	8c7fffcc 	andi	r17,r17,65535
1104b77c:	3008943a 	slli	r4,r6,16
1104b780:	170d383a 	mul	r6,r2,fp
1104b784:	2448b03a 	or	r4,r4,r17
1104b788:	2180042e 	bgeu	r4,r6,1104b79c <__umoddi3+0x3a8>
1104b78c:	2509883a 	add	r4,r4,r20
1104b790:	10ffffc4 	addi	r3,r2,-1
1104b794:	2500692e 	bgeu	r4,r20,1104b93c <__umoddi3+0x548>
1104b798:	1805883a 	mov	r2,r3
1104b79c:	b82e943a 	slli	r23,r23,16
1104b7a0:	b010d43a 	srli	r8,r22,16
1104b7a4:	b1ffffcc 	andi	r7,r22,65535
1104b7a8:	15eeb03a 	or	r23,r2,r23
1104b7ac:	b8bfffcc 	andi	r2,r23,65535
1104b7b0:	b82ed43a 	srli	r23,r23,16
1104b7b4:	11c7383a 	mul	r3,r2,r7
1104b7b8:	1205383a 	mul	r2,r2,r8
1104b7bc:	b9cf383a 	mul	r7,r23,r7
1104b7c0:	400b883a 	mov	r5,r8
1104b7c4:	1810d43a 	srli	r8,r3,16
1104b7c8:	3885883a 	add	r2,r7,r2
1104b7cc:	2189c83a 	sub	r4,r4,r6
1104b7d0:	1205883a 	add	r2,r2,r8
1104b7d4:	b94b383a 	mul	r5,r23,r5
1104b7d8:	11c0022e 	bgeu	r2,r7,1104b7e4 <__umoddi3+0x3f0>
1104b7dc:	01800074 	movhi	r6,1
1104b7e0:	298b883a 	add	r5,r5,r6
1104b7e4:	100cd43a 	srli	r6,r2,16
1104b7e8:	1004943a 	slli	r2,r2,16
1104b7ec:	18ffffcc 	andi	r3,r3,65535
1104b7f0:	298b883a 	add	r5,r5,r6
1104b7f4:	10c5883a 	add	r2,r2,r3
1104b7f8:	21403836 	bltu	r4,r5,1104b8dc <__umoddi3+0x4e8>
1104b7fc:	21405c26 	beq	r4,r5,1104b970 <__umoddi3+0x57c>
1104b800:	2147c83a 	sub	r3,r4,r5
1104b804:	102d883a 	mov	r22,r2
1104b808:	95adc83a 	sub	r22,r18,r22
1104b80c:	95a5803a 	cmpltu	r18,r18,r22
1104b810:	1c87c83a 	sub	r3,r3,r18
1104b814:	1cc4983a 	sll	r2,r3,r19
1104b818:	b42cd83a 	srl	r22,r22,r16
1104b81c:	1c06d83a 	srl	r3,r3,r16
1104b820:	1584b03a 	or	r2,r2,r22
1104b824:	003f9006 	br	1104b668 <__umoddi3+0x274>
1104b828:	002b883a 	mov	r21,zero
1104b82c:	003f1706 	br	1104b48c <__umoddi3+0x98>
1104b830:	8560983a 	sll	r16,r16,r21
1104b834:	88e6d83a 	srl	r19,r17,r3
1104b838:	90c6d83a 	srl	r3,r18,r3
1104b83c:	8028d43a 	srli	r20,r16,16
1104b840:	8d62983a 	sll	r17,r17,r21
1104b844:	9809883a 	mov	r4,r19
1104b848:	a00b883a 	mov	r5,r20
1104b84c:	88eeb03a 	or	r23,r17,r3
1104b850:	10431bc0 	call	110431bc <__umodsi3>
1104b854:	9809883a 	mov	r4,r19
1104b858:	a00b883a 	mov	r5,r20
1104b85c:	1023883a 	mov	r17,r2
1104b860:	10431b40 	call	110431b4 <__udivsi3>
1104b864:	85bfffcc 	andi	r22,r16,65535
1104b868:	880a943a 	slli	r5,r17,16
1104b86c:	b806d43a 	srli	r3,r23,16
1104b870:	1585383a 	mul	r2,r2,r22
1104b874:	9566983a 	sll	r19,r18,r21
1104b878:	28cab03a 	or	r5,r5,r3
1104b87c:	2880042e 	bgeu	r5,r2,1104b890 <__umoddi3+0x49c>
1104b880:	2c0b883a 	add	r5,r5,r16
1104b884:	2c000236 	bltu	r5,r16,1104b890 <__umoddi3+0x49c>
1104b888:	2880012e 	bgeu	r5,r2,1104b890 <__umoddi3+0x49c>
1104b88c:	2c0b883a 	add	r5,r5,r16
1104b890:	28a5c83a 	sub	r18,r5,r2
1104b894:	9009883a 	mov	r4,r18
1104b898:	a00b883a 	mov	r5,r20
1104b89c:	10431bc0 	call	110431bc <__umodsi3>
1104b8a0:	1023883a 	mov	r17,r2
1104b8a4:	9009883a 	mov	r4,r18
1104b8a8:	a00b883a 	mov	r5,r20
1104b8ac:	10431b40 	call	110431b4 <__udivsi3>
1104b8b0:	8822943a 	slli	r17,r17,16
1104b8b4:	1585383a 	mul	r2,r2,r22
1104b8b8:	bdffffcc 	andi	r23,r23,65535
1104b8bc:	8de2b03a 	or	r17,r17,r23
1104b8c0:	8880042e 	bgeu	r17,r2,1104b8d4 <__umoddi3+0x4e0>
1104b8c4:	8c23883a 	add	r17,r17,r16
1104b8c8:	8c000236 	bltu	r17,r16,1104b8d4 <__umoddi3+0x4e0>
1104b8cc:	8880012e 	bgeu	r17,r2,1104b8d4 <__umoddi3+0x4e0>
1104b8d0:	8c23883a 	add	r17,r17,r16
1104b8d4:	88a3c83a 	sub	r17,r17,r2
1104b8d8:	003f3d06 	br	1104b5d0 <__umoddi3+0x1dc>
1104b8dc:	15adc83a 	sub	r22,r2,r22
1104b8e0:	2d07c83a 	sub	r3,r5,r20
1104b8e4:	1585803a 	cmpltu	r2,r2,r22
1104b8e8:	1887c83a 	sub	r3,r3,r2
1104b8ec:	20c7c83a 	sub	r3,r4,r3
1104b8f0:	003fc506 	br	1104b808 <__umoddi3+0x414>
1104b8f4:	00c00204 	movi	r3,8
1104b8f8:	1827883a 	mov	r19,r3
1104b8fc:	003f0b06 	br	1104b52c <__umoddi3+0x138>
1104b900:	00c00604 	movi	r3,24
1104b904:	1827883a 	mov	r19,r3
1104b908:	003f0806 	br	1104b52c <__umoddi3+0x138>
1104b90c:	00800604 	movi	r2,24
1104b910:	1009883a 	mov	r4,r2
1104b914:	003ecf06 	br	1104b454 <__umoddi3+0x60>
1104b918:	00800204 	movi	r2,8
1104b91c:	1007883a 	mov	r3,r2
1104b920:	003f1f06 	br	1104b5a0 <__umoddi3+0x1ac>
1104b924:	00800604 	movi	r2,24
1104b928:	1007883a 	mov	r3,r2
1104b92c:	003f1c06 	br	1104b5a0 <__umoddi3+0x1ac>
1104b930:	00800204 	movi	r2,8
1104b934:	1009883a 	mov	r4,r2
1104b938:	003ec606 	br	1104b454 <__umoddi3+0x60>
1104b93c:	21bf962e 	bgeu	r4,r6,1104b798 <__umoddi3+0x3a4>
1104b940:	10bfff84 	addi	r2,r2,-2
1104b944:	2509883a 	add	r4,r4,r20
1104b948:	003f9406 	br	1104b79c <__umoddi3+0x3a8>
1104b94c:	293f7e2e 	bgeu	r5,r4,1104b748 <__umoddi3+0x354>
1104b950:	bdffff84 	addi	r23,r23,-2
1104b954:	2d0b883a 	add	r5,r5,r20
1104b958:	003f7c06 	br	1104b74c <__umoddi3+0x358>
1104b95c:	1c07883a 	add	r3,r3,r16
1104b960:	003f2a06 	br	1104b60c <__umoddi3+0x218>
1104b964:	9005883a 	mov	r2,r18
1104b968:	a007883a 	mov	r3,r20
1104b96c:	003f3e06 	br	1104b668 <__umoddi3+0x274>
1104b970:	90bfda36 	bltu	r18,r2,1104b8dc <__umoddi3+0x4e8>
1104b974:	102d883a 	mov	r22,r2
1104b978:	0007883a 	mov	r3,zero
1104b97c:	003fa206 	br	1104b808 <__umoddi3+0x414>

1104b980 <__muldf3>:
1104b980:	deffe404 	addi	sp,sp,-112
1104b984:	d9001115 	stw	r4,68(sp)
1104b988:	d9401215 	stw	r5,72(sp)
1104b98c:	d9001104 	addi	r4,sp,68
1104b990:	d9400a04 	addi	r5,sp,40
1104b994:	dfc01b15 	stw	ra,108(sp)
1104b998:	d9800f15 	stw	r6,60(sp)
1104b99c:	d9c01015 	stw	r7,64(sp)
1104b9a0:	ddc01a15 	stw	r23,104(sp)
1104b9a4:	dd801915 	stw	r22,100(sp)
1104b9a8:	dd401815 	stw	r21,96(sp)
1104b9ac:	dd001715 	stw	r20,92(sp)
1104b9b0:	dcc01615 	stw	r19,88(sp)
1104b9b4:	dc801515 	stw	r18,84(sp)
1104b9b8:	dc401415 	stw	r17,80(sp)
1104b9bc:	dc001315 	stw	r16,76(sp)
1104b9c0:	10437700 	call	11043770 <__unpack_d>
1104b9c4:	d9000f04 	addi	r4,sp,60
1104b9c8:	d9400504 	addi	r5,sp,20
1104b9cc:	10437700 	call	11043770 <__unpack_d>
1104b9d0:	d8c00a17 	ldw	r3,40(sp)
1104b9d4:	00800044 	movi	r2,1
1104b9d8:	10c01136 	bltu	r2,r3,1104ba20 <__muldf3+0xa0>
1104b9dc:	d8c00b17 	ldw	r3,44(sp)
1104b9e0:	d8800617 	ldw	r2,24(sp)
1104b9e4:	d9000a04 	addi	r4,sp,40
1104b9e8:	1884c03a 	cmpne	r2,r3,r2
1104b9ec:	d8800b15 	stw	r2,44(sp)
1104b9f0:	104354c0 	call	1104354c <__pack_d>
1104b9f4:	dfc01b17 	ldw	ra,108(sp)
1104b9f8:	ddc01a17 	ldw	r23,104(sp)
1104b9fc:	dd801917 	ldw	r22,100(sp)
1104ba00:	dd401817 	ldw	r21,96(sp)
1104ba04:	dd001717 	ldw	r20,92(sp)
1104ba08:	dcc01617 	ldw	r19,88(sp)
1104ba0c:	dc801517 	ldw	r18,84(sp)
1104ba10:	dc401417 	ldw	r17,80(sp)
1104ba14:	dc001317 	ldw	r16,76(sp)
1104ba18:	dec01c04 	addi	sp,sp,112
1104ba1c:	f800283a 	ret
1104ba20:	d9000517 	ldw	r4,20(sp)
1104ba24:	11000636 	bltu	r2,r4,1104ba40 <__muldf3+0xc0>
1104ba28:	d8800617 	ldw	r2,24(sp)
1104ba2c:	d8c00b17 	ldw	r3,44(sp)
1104ba30:	d9000504 	addi	r4,sp,20
1104ba34:	1884c03a 	cmpne	r2,r3,r2
1104ba38:	d8800615 	stw	r2,24(sp)
1104ba3c:	003fec06 	br	1104b9f0 <__muldf3+0x70>
1104ba40:	00800104 	movi	r2,4
1104ba44:	1880051e 	bne	r3,r2,1104ba5c <__muldf3+0xdc>
1104ba48:	00800084 	movi	r2,2
1104ba4c:	20bfe31e 	bne	r4,r2,1104b9dc <__muldf3+0x5c>
1104ba50:	01000034 	movhi	r4,0
1104ba54:	2102ae04 	addi	r4,r4,2744
1104ba58:	003fe506 	br	1104b9f0 <__muldf3+0x70>
1104ba5c:	2080031e 	bne	r4,r2,1104ba6c <__muldf3+0xec>
1104ba60:	00800084 	movi	r2,2
1104ba64:	18bffa26 	beq	r3,r2,1104ba50 <__muldf3+0xd0>
1104ba68:	003fef06 	br	1104ba28 <__muldf3+0xa8>
1104ba6c:	00800084 	movi	r2,2
1104ba70:	18bfda26 	beq	r3,r2,1104b9dc <__muldf3+0x5c>
1104ba74:	20bfec26 	beq	r4,r2,1104ba28 <__muldf3+0xa8>
1104ba78:	dc000d17 	ldw	r16,52(sp)
1104ba7c:	dd000817 	ldw	r20,32(sp)
1104ba80:	dc800917 	ldw	r18,36(sp)
1104ba84:	8009883a 	mov	r4,r16
1104ba88:	000b883a 	mov	r5,zero
1104ba8c:	a00d883a 	mov	r6,r20
1104ba90:	000f883a 	mov	r7,zero
1104ba94:	104c1040 	call	1104c104 <__muldi3>
1104ba98:	dc400e17 	ldw	r17,56(sp)
1104ba9c:	9009883a 	mov	r4,r18
1104baa0:	800d883a 	mov	r6,r16
1104baa4:	000b883a 	mov	r5,zero
1104baa8:	000f883a 	mov	r7,zero
1104baac:	102f883a 	mov	r23,r2
1104bab0:	1827883a 	mov	r19,r3
1104bab4:	104c1040 	call	1104c104 <__muldi3>
1104bab8:	900d883a 	mov	r6,r18
1104babc:	8809883a 	mov	r4,r17
1104bac0:	000b883a 	mov	r5,zero
1104bac4:	000f883a 	mov	r7,zero
1104bac8:	102b883a 	mov	r21,r2
1104bacc:	1821883a 	mov	r16,r3
1104bad0:	104c1040 	call	1104c104 <__muldi3>
1104bad4:	8809883a 	mov	r4,r17
1104bad8:	000b883a 	mov	r5,zero
1104badc:	a00d883a 	mov	r6,r20
1104bae0:	000f883a 	mov	r7,zero
1104bae4:	102d883a 	mov	r22,r2
1104bae8:	1825883a 	mov	r18,r3
1104baec:	104c1040 	call	1104c104 <__muldi3>
1104baf0:	154b883a 	add	r5,r2,r21
1104baf4:	2889803a 	cmpltu	r4,r5,r2
1104baf8:	1c07883a 	add	r3,r3,r16
1104bafc:	20c9883a 	add	r4,r4,r3
1104bb00:	24004b36 	bltu	r4,r16,1104bc30 <__muldf3+0x2b0>
1104bb04:	8100011e 	bne	r16,r4,1104bb0c <__muldf3+0x18c>
1104bb08:	2d404936 	bltu	r5,r21,1104bc30 <__muldf3+0x2b0>
1104bb0c:	0011883a 	mov	r8,zero
1104bb10:	0007883a 	mov	r3,zero
1104bb14:	2ccb883a 	add	r5,r5,r19
1104bb18:	b80d883a 	mov	r6,r23
1104bb1c:	2cc0012e 	bgeu	r5,r19,1104bb24 <__muldf3+0x1a4>
1104bb20:	02000044 	movi	r8,1
1104bb24:	258f883a 	add	r7,r4,r22
1104bb28:	3909803a 	cmpltu	r4,r7,r4
1104bb2c:	da400c17 	ldw	r9,48(sp)
1104bb30:	2489883a 	add	r4,r4,r18
1104bb34:	d8800717 	ldw	r2,28(sp)
1104bb38:	20c9883a 	add	r4,r4,r3
1104bb3c:	da800b17 	ldw	r10,44(sp)
1104bb40:	d8c00617 	ldw	r3,24(sp)
1104bb44:	3a11883a 	add	r8,r7,r8
1104bb48:	4885883a 	add	r2,r9,r2
1104bb4c:	50c6c03a 	cmpne	r3,r10,r3
1104bb50:	41cf803a 	cmpltu	r7,r8,r7
1104bb54:	12400104 	addi	r9,r2,4
1104bb58:	d8c00115 	stw	r3,4(sp)
1104bb5c:	3909883a 	add	r4,r7,r4
1104bb60:	da400215 	stw	r9,8(sp)
1104bb64:	03480034 	movhi	r13,8192
1104bb68:	6b7fffc4 	addi	r13,r13,-1
1104bb6c:	4007883a 	mov	r3,r8
1104bb70:	6900102e 	bgeu	r13,r4,1104bbb4 <__muldf3+0x234>
1104bb74:	10800144 	addi	r2,r2,5
1104bb78:	180ed07a 	srli	r7,r3,1
1104bb7c:	18c0004c 	andi	r3,r3,1
1104bb80:	201097fa 	slli	r8,r4,31
1104bb84:	281697fa 	slli	r11,r5,31
1104bb88:	2008d07a 	srli	r4,r4,1
1104bb8c:	3014d07a 	srli	r10,r6,1
1104bb90:	2812d07a 	srli	r9,r5,1
1104bb94:	1019883a 	mov	r12,r2
1104bb98:	18000226 	beq	r3,zero,1104bba4 <__muldf3+0x224>
1104bb9c:	5a8cb03a 	or	r6,r11,r10
1104bba0:	49600034 	orhi	r5,r9,32768
1104bba4:	41c6b03a 	or	r3,r8,r7
1104bba8:	10800044 	addi	r2,r2,1
1104bbac:	693ff236 	bltu	r13,r4,1104bb78 <__muldf3+0x1f8>
1104bbb0:	db000215 	stw	r12,8(sp)
1104bbb4:	03440034 	movhi	r13,4096
1104bbb8:	6b7fffc4 	addi	r13,r13,-1
1104bbbc:	69001336 	bltu	r13,r4,1104bc0c <__muldf3+0x28c>
1104bbc0:	d8800217 	ldw	r2,8(sp)
1104bbc4:	10bfffc4 	addi	r2,r2,-1
1104bbc8:	18d3883a 	add	r9,r3,r3
1104bbcc:	48c7803a 	cmpltu	r3,r9,r3
1104bbd0:	2109883a 	add	r4,r4,r4
1104bbd4:	190f883a 	add	r7,r3,r4
1104bbd8:	3191883a 	add	r8,r6,r6
1104bbdc:	4197803a 	cmpltu	r11,r8,r6
1104bbe0:	2955883a 	add	r10,r5,r5
1104bbe4:	1019883a 	mov	r12,r2
1104bbe8:	4807883a 	mov	r3,r9
1104bbec:	3809883a 	mov	r4,r7
1104bbf0:	2800010e 	bge	r5,zero,1104bbf8 <__muldf3+0x278>
1104bbf4:	48c00054 	ori	r3,r9,1
1104bbf8:	400d883a 	mov	r6,r8
1104bbfc:	5a8b883a 	add	r5,r11,r10
1104bc00:	10bfffc4 	addi	r2,r2,-1
1104bc04:	69fff02e 	bgeu	r13,r7,1104bbc8 <__muldf3+0x248>
1104bc08:	db000215 	stw	r12,8(sp)
1104bc0c:	18803fcc 	andi	r2,r3,255
1104bc10:	01c02004 	movi	r7,128
1104bc14:	11c00926 	beq	r2,r7,1104bc3c <__muldf3+0x2bc>
1104bc18:	008000c4 	movi	r2,3
1104bc1c:	d9000415 	stw	r4,16(sp)
1104bc20:	d8c00315 	stw	r3,12(sp)
1104bc24:	d8800015 	stw	r2,0(sp)
1104bc28:	d809883a 	mov	r4,sp
1104bc2c:	003f7006 	br	1104b9f0 <__muldf3+0x70>
1104bc30:	0011883a 	mov	r8,zero
1104bc34:	00c00044 	movi	r3,1
1104bc38:	003fb606 	br	1104bb14 <__muldf3+0x194>
1104bc3c:	19c0400c 	andi	r7,r3,256
1104bc40:	383ff51e 	bne	r7,zero,1104bc18 <__muldf3+0x298>
1104bc44:	314ab03a 	or	r5,r6,r5
1104bc48:	283ff326 	beq	r5,zero,1104bc18 <__muldf3+0x298>
1104bc4c:	1885883a 	add	r2,r3,r2
1104bc50:	10cb803a 	cmpltu	r5,r2,r3
1104bc54:	00ffc004 	movi	r3,-256
1104bc58:	10c6703a 	and	r3,r2,r3
1104bc5c:	2909883a 	add	r4,r5,r4
1104bc60:	003fed06 	br	1104bc18 <__muldf3+0x298>

1104bc64 <__eqdf2>:
1104bc64:	defff104 	addi	sp,sp,-60
1104bc68:	d9000c15 	stw	r4,48(sp)
1104bc6c:	d9400d15 	stw	r5,52(sp)
1104bc70:	d9000c04 	addi	r4,sp,48
1104bc74:	d9400504 	addi	r5,sp,20
1104bc78:	dfc00e15 	stw	ra,56(sp)
1104bc7c:	d9800a15 	stw	r6,40(sp)
1104bc80:	d9c00b15 	stw	r7,44(sp)
1104bc84:	10437700 	call	11043770 <__unpack_d>
1104bc88:	d9000a04 	addi	r4,sp,40
1104bc8c:	d80b883a 	mov	r5,sp
1104bc90:	10437700 	call	11043770 <__unpack_d>
1104bc94:	d8c00517 	ldw	r3,20(sp)
1104bc98:	00800044 	movi	r2,1
1104bc9c:	10c0052e 	bgeu	r2,r3,1104bcb4 <__eqdf2+0x50>
1104bca0:	d8c00017 	ldw	r3,0(sp)
1104bca4:	10c0032e 	bgeu	r2,r3,1104bcb4 <__eqdf2+0x50>
1104bca8:	d9000504 	addi	r4,sp,20
1104bcac:	d80b883a 	mov	r5,sp
1104bcb0:	104c1640 	call	1104c164 <__fpcmp_parts_d>
1104bcb4:	dfc00e17 	ldw	ra,56(sp)
1104bcb8:	dec00f04 	addi	sp,sp,60
1104bcbc:	f800283a 	ret

1104bcc0 <__nedf2>:
1104bcc0:	defff104 	addi	sp,sp,-60
1104bcc4:	d9000c15 	stw	r4,48(sp)
1104bcc8:	d9400d15 	stw	r5,52(sp)
1104bccc:	d9000c04 	addi	r4,sp,48
1104bcd0:	d9400504 	addi	r5,sp,20
1104bcd4:	dfc00e15 	stw	ra,56(sp)
1104bcd8:	d9800a15 	stw	r6,40(sp)
1104bcdc:	d9c00b15 	stw	r7,44(sp)
1104bce0:	10437700 	call	11043770 <__unpack_d>
1104bce4:	d9000a04 	addi	r4,sp,40
1104bce8:	d80b883a 	mov	r5,sp
1104bcec:	10437700 	call	11043770 <__unpack_d>
1104bcf0:	d8c00517 	ldw	r3,20(sp)
1104bcf4:	00800044 	movi	r2,1
1104bcf8:	10c0052e 	bgeu	r2,r3,1104bd10 <__nedf2+0x50>
1104bcfc:	d8c00017 	ldw	r3,0(sp)
1104bd00:	10c0032e 	bgeu	r2,r3,1104bd10 <__nedf2+0x50>
1104bd04:	d9000504 	addi	r4,sp,20
1104bd08:	d80b883a 	mov	r5,sp
1104bd0c:	104c1640 	call	1104c164 <__fpcmp_parts_d>
1104bd10:	dfc00e17 	ldw	ra,56(sp)
1104bd14:	dec00f04 	addi	sp,sp,60
1104bd18:	f800283a 	ret

1104bd1c <__gtdf2>:
1104bd1c:	defff104 	addi	sp,sp,-60
1104bd20:	d9000c15 	stw	r4,48(sp)
1104bd24:	d9400d15 	stw	r5,52(sp)
1104bd28:	d9000c04 	addi	r4,sp,48
1104bd2c:	d9400504 	addi	r5,sp,20
1104bd30:	dfc00e15 	stw	ra,56(sp)
1104bd34:	d9800a15 	stw	r6,40(sp)
1104bd38:	d9c00b15 	stw	r7,44(sp)
1104bd3c:	10437700 	call	11043770 <__unpack_d>
1104bd40:	d9000a04 	addi	r4,sp,40
1104bd44:	d80b883a 	mov	r5,sp
1104bd48:	10437700 	call	11043770 <__unpack_d>
1104bd4c:	d8c00517 	ldw	r3,20(sp)
1104bd50:	00800044 	movi	r2,1
1104bd54:	10c0082e 	bgeu	r2,r3,1104bd78 <__gtdf2+0x5c>
1104bd58:	d8c00017 	ldw	r3,0(sp)
1104bd5c:	10c0062e 	bgeu	r2,r3,1104bd78 <__gtdf2+0x5c>
1104bd60:	d9000504 	addi	r4,sp,20
1104bd64:	d80b883a 	mov	r5,sp
1104bd68:	104c1640 	call	1104c164 <__fpcmp_parts_d>
1104bd6c:	dfc00e17 	ldw	ra,56(sp)
1104bd70:	dec00f04 	addi	sp,sp,60
1104bd74:	f800283a 	ret
1104bd78:	00bfffc4 	movi	r2,-1
1104bd7c:	003ffb06 	br	1104bd6c <__gtdf2+0x50>

1104bd80 <__gedf2>:
1104bd80:	defff104 	addi	sp,sp,-60
1104bd84:	d9000c15 	stw	r4,48(sp)
1104bd88:	d9400d15 	stw	r5,52(sp)
1104bd8c:	d9000c04 	addi	r4,sp,48
1104bd90:	d9400504 	addi	r5,sp,20
1104bd94:	dfc00e15 	stw	ra,56(sp)
1104bd98:	d9800a15 	stw	r6,40(sp)
1104bd9c:	d9c00b15 	stw	r7,44(sp)
1104bda0:	10437700 	call	11043770 <__unpack_d>
1104bda4:	d9000a04 	addi	r4,sp,40
1104bda8:	d80b883a 	mov	r5,sp
1104bdac:	10437700 	call	11043770 <__unpack_d>
1104bdb0:	d8c00517 	ldw	r3,20(sp)
1104bdb4:	00800044 	movi	r2,1
1104bdb8:	10c0082e 	bgeu	r2,r3,1104bddc <__gedf2+0x5c>
1104bdbc:	d8c00017 	ldw	r3,0(sp)
1104bdc0:	10c0062e 	bgeu	r2,r3,1104bddc <__gedf2+0x5c>
1104bdc4:	d9000504 	addi	r4,sp,20
1104bdc8:	d80b883a 	mov	r5,sp
1104bdcc:	104c1640 	call	1104c164 <__fpcmp_parts_d>
1104bdd0:	dfc00e17 	ldw	ra,56(sp)
1104bdd4:	dec00f04 	addi	sp,sp,60
1104bdd8:	f800283a 	ret
1104bddc:	00bfffc4 	movi	r2,-1
1104bde0:	003ffb06 	br	1104bdd0 <__gedf2+0x50>

1104bde4 <__ltdf2>:
1104bde4:	defff104 	addi	sp,sp,-60
1104bde8:	d9000c15 	stw	r4,48(sp)
1104bdec:	d9400d15 	stw	r5,52(sp)
1104bdf0:	d9000c04 	addi	r4,sp,48
1104bdf4:	d9400504 	addi	r5,sp,20
1104bdf8:	dfc00e15 	stw	ra,56(sp)
1104bdfc:	d9800a15 	stw	r6,40(sp)
1104be00:	d9c00b15 	stw	r7,44(sp)
1104be04:	10437700 	call	11043770 <__unpack_d>
1104be08:	d9000a04 	addi	r4,sp,40
1104be0c:	d80b883a 	mov	r5,sp
1104be10:	10437700 	call	11043770 <__unpack_d>
1104be14:	d8c00517 	ldw	r3,20(sp)
1104be18:	00800044 	movi	r2,1
1104be1c:	10c0052e 	bgeu	r2,r3,1104be34 <__ltdf2+0x50>
1104be20:	d8c00017 	ldw	r3,0(sp)
1104be24:	10c0032e 	bgeu	r2,r3,1104be34 <__ltdf2+0x50>
1104be28:	d9000504 	addi	r4,sp,20
1104be2c:	d80b883a 	mov	r5,sp
1104be30:	104c1640 	call	1104c164 <__fpcmp_parts_d>
1104be34:	dfc00e17 	ldw	ra,56(sp)
1104be38:	dec00f04 	addi	sp,sp,60
1104be3c:	f800283a 	ret

1104be40 <__floatsidf>:
1104be40:	2004d7fa 	srli	r2,r4,31
1104be44:	defff904 	addi	sp,sp,-28
1104be48:	00c000c4 	movi	r3,3
1104be4c:	dfc00615 	stw	ra,24(sp)
1104be50:	dc000515 	stw	r16,20(sp)
1104be54:	d8c00015 	stw	r3,0(sp)
1104be58:	d8800115 	stw	r2,4(sp)
1104be5c:	2000081e 	bne	r4,zero,1104be80 <__floatsidf+0x40>
1104be60:	00800084 	movi	r2,2
1104be64:	d8800015 	stw	r2,0(sp)
1104be68:	d809883a 	mov	r4,sp
1104be6c:	104354c0 	call	1104354c <__pack_d>
1104be70:	dfc00617 	ldw	ra,24(sp)
1104be74:	dc000517 	ldw	r16,20(sp)
1104be78:	dec00704 	addi	sp,sp,28
1104be7c:	f800283a 	ret
1104be80:	00c00f04 	movi	r3,60
1104be84:	d8c00215 	stw	r3,8(sp)
1104be88:	10000f1e 	bne	r2,zero,1104bec8 <__floatsidf+0x88>
1104be8c:	2021883a 	mov	r16,r4
1104be90:	8009883a 	mov	r4,r16
1104be94:	10431c40 	call	110431c4 <__clzsi2>
1104be98:	11000744 	addi	r4,r2,29
1104be9c:	0100110e 	bge	zero,r4,1104bee4 <__floatsidf+0xa4>
1104bea0:	10ffff44 	addi	r3,r2,-3
1104bea4:	18001216 	blt	r3,zero,1104bef0 <__floatsidf+0xb0>
1104bea8:	80c6983a 	sll	r3,r16,r3
1104beac:	0009883a 	mov	r4,zero
1104beb0:	014007c4 	movi	r5,31
1104beb4:	2885c83a 	sub	r2,r5,r2
1104beb8:	d9000315 	stw	r4,12(sp)
1104bebc:	d8c00415 	stw	r3,16(sp)
1104bec0:	d8800215 	stw	r2,8(sp)
1104bec4:	003fe806 	br	1104be68 <__floatsidf+0x28>
1104bec8:	00a00034 	movhi	r2,32768
1104becc:	20800e26 	beq	r4,r2,1104bf08 <__floatsidf+0xc8>
1104bed0:	0121c83a 	sub	r16,zero,r4
1104bed4:	8009883a 	mov	r4,r16
1104bed8:	10431c40 	call	110431c4 <__clzsi2>
1104bedc:	11000744 	addi	r4,r2,29
1104bee0:	013fef16 	blt	zero,r4,1104bea0 <__floatsidf+0x60>
1104bee4:	dc000315 	stw	r16,12(sp)
1104bee8:	d8000415 	stw	zero,16(sp)
1104beec:	003fde06 	br	1104be68 <__floatsidf+0x28>
1104bef0:	800ad07a 	srli	r5,r16,1
1104bef4:	00c007c4 	movi	r3,31
1104bef8:	1907c83a 	sub	r3,r3,r4
1104befc:	28c6d83a 	srl	r3,r5,r3
1104bf00:	8108983a 	sll	r4,r16,r4
1104bf04:	003fea06 	br	1104beb0 <__floatsidf+0x70>
1104bf08:	0005883a 	mov	r2,zero
1104bf0c:	00f07834 	movhi	r3,49632
1104bf10:	003fd706 	br	1104be70 <__floatsidf+0x30>

1104bf14 <__fixdfsi>:
1104bf14:	defff804 	addi	sp,sp,-32
1104bf18:	d9000515 	stw	r4,20(sp)
1104bf1c:	d9400615 	stw	r5,24(sp)
1104bf20:	d9000504 	addi	r4,sp,20
1104bf24:	d80b883a 	mov	r5,sp
1104bf28:	dfc00715 	stw	ra,28(sp)
1104bf2c:	10437700 	call	11043770 <__unpack_d>
1104bf30:	d8800017 	ldw	r2,0(sp)
1104bf34:	00c00084 	movi	r3,2
1104bf38:	10c01c26 	beq	r2,r3,1104bfac <__fixdfsi+0x98>
1104bf3c:	00c00044 	movi	r3,1
1104bf40:	18801a2e 	bgeu	r3,r2,1104bfac <__fixdfsi+0x98>
1104bf44:	00c00104 	movi	r3,4
1104bf48:	10c01126 	beq	r2,r3,1104bf90 <__fixdfsi+0x7c>
1104bf4c:	d8800217 	ldw	r2,8(sp)
1104bf50:	10001616 	blt	r2,zero,1104bfac <__fixdfsi+0x98>
1104bf54:	00c00784 	movi	r3,30
1104bf58:	18800d16 	blt	r3,r2,1104bf90 <__fixdfsi+0x7c>
1104bf5c:	00c00f04 	movi	r3,60
1104bf60:	1885c83a 	sub	r2,r3,r2
1104bf64:	10fff804 	addi	r3,r2,-32
1104bf68:	d9400317 	ldw	r5,12(sp)
1104bf6c:	d9000417 	ldw	r4,16(sp)
1104bf70:	18001616 	blt	r3,zero,1104bfcc <__fixdfsi+0xb8>
1104bf74:	20c4d83a 	srl	r2,r4,r3
1104bf78:	d8c00117 	ldw	r3,4(sp)
1104bf7c:	18000126 	beq	r3,zero,1104bf84 <__fixdfsi+0x70>
1104bf80:	0085c83a 	sub	r2,zero,r2
1104bf84:	dfc00717 	ldw	ra,28(sp)
1104bf88:	dec00804 	addi	sp,sp,32
1104bf8c:	f800283a 	ret
1104bf90:	d8800117 	ldw	r2,4(sp)
1104bf94:	1000091e 	bne	r2,zero,1104bfbc <__fixdfsi+0xa8>
1104bf98:	00a00034 	movhi	r2,32768
1104bf9c:	10bfffc4 	addi	r2,r2,-1
1104bfa0:	dfc00717 	ldw	ra,28(sp)
1104bfa4:	dec00804 	addi	sp,sp,32
1104bfa8:	f800283a 	ret
1104bfac:	0005883a 	mov	r2,zero
1104bfb0:	dfc00717 	ldw	ra,28(sp)
1104bfb4:	dec00804 	addi	sp,sp,32
1104bfb8:	f800283a 	ret
1104bfbc:	00a00034 	movhi	r2,32768
1104bfc0:	dfc00717 	ldw	ra,28(sp)
1104bfc4:	dec00804 	addi	sp,sp,32
1104bfc8:	f800283a 	ret
1104bfcc:	2008907a 	slli	r4,r4,1
1104bfd0:	018007c4 	movi	r6,31
1104bfd4:	308dc83a 	sub	r6,r6,r2
1104bfd8:	2188983a 	sll	r4,r4,r6
1104bfdc:	2884d83a 	srl	r2,r5,r2
1104bfe0:	2084b03a 	or	r2,r4,r2
1104bfe4:	003fe406 	br	1104bf78 <__fixdfsi+0x64>

1104bfe8 <__floatunsidf>:
1104bfe8:	defff904 	addi	sp,sp,-28
1104bfec:	dc000515 	stw	r16,20(sp)
1104bff0:	dfc00615 	stw	ra,24(sp)
1104bff4:	d8000115 	stw	zero,4(sp)
1104bff8:	2021883a 	mov	r16,r4
1104bffc:	20001726 	beq	r4,zero,1104c05c <__floatunsidf+0x74>
1104c000:	008000c4 	movi	r2,3
1104c004:	d8800015 	stw	r2,0(sp)
1104c008:	00800f04 	movi	r2,60
1104c00c:	d8800215 	stw	r2,8(sp)
1104c010:	10431c40 	call	110431c4 <__clzsi2>
1104c014:	10c00744 	addi	r3,r2,29
1104c018:	18001816 	blt	r3,zero,1104c07c <__floatunsidf+0x94>
1104c01c:	18002d26 	beq	r3,zero,1104c0d4 <__floatunsidf+0xec>
1104c020:	113fff44 	addi	r4,r2,-3
1104c024:	20002e16 	blt	r4,zero,1104c0e0 <__floatunsidf+0xf8>
1104c028:	8108983a 	sll	r4,r16,r4
1104c02c:	0021883a 	mov	r16,zero
1104c030:	014007c4 	movi	r5,31
1104c034:	2885c83a 	sub	r2,r5,r2
1104c038:	dc000315 	stw	r16,12(sp)
1104c03c:	d9000415 	stw	r4,16(sp)
1104c040:	d8800215 	stw	r2,8(sp)
1104c044:	d809883a 	mov	r4,sp
1104c048:	104354c0 	call	1104354c <__pack_d>
1104c04c:	dfc00617 	ldw	ra,24(sp)
1104c050:	dc000517 	ldw	r16,20(sp)
1104c054:	dec00704 	addi	sp,sp,28
1104c058:	f800283a 	ret
1104c05c:	00800084 	movi	r2,2
1104c060:	d809883a 	mov	r4,sp
1104c064:	d8800015 	stw	r2,0(sp)
1104c068:	104354c0 	call	1104354c <__pack_d>
1104c06c:	dfc00617 	ldw	ra,24(sp)
1104c070:	dc000517 	ldw	r16,20(sp)
1104c074:	dec00704 	addi	sp,sp,28
1104c078:	f800283a 	ret
1104c07c:	00c7c83a 	sub	r3,zero,r3
1104c080:	193ff804 	addi	r4,r3,-32
1104c084:	20001c16 	blt	r4,zero,1104c0f8 <__floatunsidf+0x110>
1104c088:	000b883a 	mov	r5,zero
1104c08c:	2009d7fa 	srai	r4,r4,31
1104c090:	80c6d83a 	srl	r3,r16,r3
1104c094:	297fffc4 	addi	r5,r5,-1
1104c098:	2c20703a 	and	r16,r5,r16
1104c09c:	8020c03a 	cmpne	r16,r16,zero
1104c0a0:	1906703a 	and	r3,r3,r4
1104c0a4:	010007c4 	movi	r4,31
1104c0a8:	80c6b03a 	or	r3,r16,r3
1104c0ac:	2085c83a 	sub	r2,r4,r2
1104c0b0:	d809883a 	mov	r4,sp
1104c0b4:	d8c00315 	stw	r3,12(sp)
1104c0b8:	d8000415 	stw	zero,16(sp)
1104c0bc:	d8800215 	stw	r2,8(sp)
1104c0c0:	104354c0 	call	1104354c <__pack_d>
1104c0c4:	dfc00617 	ldw	ra,24(sp)
1104c0c8:	dc000517 	ldw	r16,20(sp)
1104c0cc:	dec00704 	addi	sp,sp,28
1104c0d0:	f800283a 	ret
1104c0d4:	dc000315 	stw	r16,12(sp)
1104c0d8:	d8000415 	stw	zero,16(sp)
1104c0dc:	003fd906 	br	1104c044 <__floatunsidf+0x5c>
1104c0e0:	800ad07a 	srli	r5,r16,1
1104c0e4:	010007c4 	movi	r4,31
1104c0e8:	20c9c83a 	sub	r4,r4,r3
1104c0ec:	2908d83a 	srl	r4,r5,r4
1104c0f0:	80e0983a 	sll	r16,r16,r3
1104c0f4:	003fce06 	br	1104c030 <__floatunsidf+0x48>
1104c0f8:	01400044 	movi	r5,1
1104c0fc:	28ca983a 	sll	r5,r5,r3
1104c100:	003fe206 	br	1104c08c <__floatunsidf+0xa4>

1104c104 <__muldi3>:
1104c104:	20bfffcc 	andi	r2,r4,65535
1104c108:	2010d43a 	srli	r8,r4,16
1104c10c:	30ffffcc 	andi	r3,r6,65535
1104c110:	3014d43a 	srli	r10,r6,16
1104c114:	1893383a 	mul	r9,r3,r2
1104c118:	1a07383a 	mul	r3,r3,r8
1104c11c:	5085383a 	mul	r2,r10,r2
1104c120:	4816d43a 	srli	r11,r9,16
1104c124:	5211383a 	mul	r8,r10,r8
1104c128:	1885883a 	add	r2,r3,r2
1104c12c:	12c5883a 	add	r2,r2,r11
1104c130:	10c0022e 	bgeu	r2,r3,1104c13c <__muldi3+0x38>
1104c134:	00c00074 	movhi	r3,1
1104c138:	40d1883a 	add	r8,r8,r3
1104c13c:	1014d43a 	srli	r10,r2,16
1104c140:	21c9383a 	mul	r4,r4,r7
1104c144:	314d383a 	mul	r6,r6,r5
1104c148:	1004943a 	slli	r2,r2,16
1104c14c:	4291883a 	add	r8,r8,r10
1104c150:	4a7fffcc 	andi	r9,r9,65535
1104c154:	2187883a 	add	r3,r4,r6
1104c158:	1245883a 	add	r2,r2,r9
1104c15c:	1a07883a 	add	r3,r3,r8
1104c160:	f800283a 	ret

1104c164 <__fpcmp_parts_d>:
1104c164:	20c00017 	ldw	r3,0(r4)
1104c168:	00800044 	movi	r2,1
1104c16c:	10c0142e 	bgeu	r2,r3,1104c1c0 <__fpcmp_parts_d+0x5c>
1104c170:	29800017 	ldw	r6,0(r5)
1104c174:	1180122e 	bgeu	r2,r6,1104c1c0 <__fpcmp_parts_d+0x5c>
1104c178:	01c00104 	movi	r7,4
1104c17c:	19c02826 	beq	r3,r7,1104c220 <__fpcmp_parts_d+0xbc>
1104c180:	31c00926 	beq	r6,r7,1104c1a8 <__fpcmp_parts_d+0x44>
1104c184:	01c00084 	movi	r7,2
1104c188:	19c00626 	beq	r3,r7,1104c1a4 <__fpcmp_parts_d+0x40>
1104c18c:	31c00a26 	beq	r6,r7,1104c1b8 <__fpcmp_parts_d+0x54>
1104c190:	20c00117 	ldw	r3,4(r4)
1104c194:	29800117 	ldw	r6,4(r5)
1104c198:	19800b26 	beq	r3,r6,1104c1c8 <__fpcmp_parts_d+0x64>
1104c19c:	1800041e 	bne	r3,zero,1104c1b0 <__fpcmp_parts_d+0x4c>
1104c1a0:	f800283a 	ret
1104c1a4:	30c01a26 	beq	r6,r3,1104c210 <__fpcmp_parts_d+0xac>
1104c1a8:	28800117 	ldw	r2,4(r5)
1104c1ac:	1000041e 	bne	r2,zero,1104c1c0 <__fpcmp_parts_d+0x5c>
1104c1b0:	00bfffc4 	movi	r2,-1
1104c1b4:	f800283a 	ret
1104c1b8:	20800117 	ldw	r2,4(r4)
1104c1bc:	103ffc1e 	bne	r2,zero,1104c1b0 <__fpcmp_parts_d+0x4c>
1104c1c0:	00800044 	movi	r2,1
1104c1c4:	f800283a 	ret
1104c1c8:	21c00217 	ldw	r7,8(r4)
1104c1cc:	29800217 	ldw	r6,8(r5)
1104c1d0:	31c0020e 	bge	r6,r7,1104c1dc <__fpcmp_parts_d+0x78>
1104c1d4:	183ff61e 	bne	r3,zero,1104c1b0 <__fpcmp_parts_d+0x4c>
1104c1d8:	f800283a 	ret
1104c1dc:	39800a16 	blt	r7,r6,1104c208 <__fpcmp_parts_d+0xa4>
1104c1e0:	20800417 	ldw	r2,16(r4)
1104c1e4:	29800417 	ldw	r6,16(r5)
1104c1e8:	21c00317 	ldw	r7,12(r4)
1104c1ec:	29000317 	ldw	r4,12(r5)
1104c1f0:	30800936 	bltu	r6,r2,1104c218 <__fpcmp_parts_d+0xb4>
1104c1f4:	1180011e 	bne	r2,r6,1104c1fc <__fpcmp_parts_d+0x98>
1104c1f8:	21c00736 	bltu	r4,r7,1104c218 <__fpcmp_parts_d+0xb4>
1104c1fc:	11800236 	bltu	r2,r6,1104c208 <__fpcmp_parts_d+0xa4>
1104c200:	3080031e 	bne	r6,r2,1104c210 <__fpcmp_parts_d+0xac>
1104c204:	3900022e 	bgeu	r7,r4,1104c210 <__fpcmp_parts_d+0xac>
1104c208:	183fe926 	beq	r3,zero,1104c1b0 <__fpcmp_parts_d+0x4c>
1104c20c:	003fec06 	br	1104c1c0 <__fpcmp_parts_d+0x5c>
1104c210:	0005883a 	mov	r2,zero
1104c214:	f800283a 	ret
1104c218:	183fe926 	beq	r3,zero,1104c1c0 <__fpcmp_parts_d+0x5c>
1104c21c:	003fe406 	br	1104c1b0 <__fpcmp_parts_d+0x4c>
1104c220:	30ffe51e 	bne	r6,r3,1104c1b8 <__fpcmp_parts_d+0x54>
1104c224:	28c00117 	ldw	r3,4(r5)
1104c228:	20800117 	ldw	r2,4(r4)
1104c22c:	1885c83a 	sub	r2,r3,r2
1104c230:	f800283a 	ret

1104c234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1104c234:	defffe04 	addi	sp,sp,-8
1104c238:	dfc00115 	stw	ra,4(sp)
1104c23c:	df000015 	stw	fp,0(sp)
1104c240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1104c244:	00800034 	movhi	r2,0
1104c248:	108a0704 	addi	r2,r2,10268
1104c24c:	10800017 	ldw	r2,0(r2)
1104c250:	10000526 	beq	r2,zero,1104c268 <alt_get_errno+0x34>
1104c254:	00800034 	movhi	r2,0
1104c258:	108a0704 	addi	r2,r2,10268
1104c25c:	10800017 	ldw	r2,0(r2)
1104c260:	103ee83a 	callr	r2
1104c264:	00000206 	br	1104c270 <alt_get_errno+0x3c>
1104c268:	00800034 	movhi	r2,0
1104c26c:	108a1504 	addi	r2,r2,10324
}
1104c270:	e037883a 	mov	sp,fp
1104c274:	dfc00117 	ldw	ra,4(sp)
1104c278:	df000017 	ldw	fp,0(sp)
1104c27c:	dec00204 	addi	sp,sp,8
1104c280:	f800283a 	ret

1104c284 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1104c284:	defffb04 	addi	sp,sp,-20
1104c288:	dfc00415 	stw	ra,16(sp)
1104c28c:	df000315 	stw	fp,12(sp)
1104c290:	df000304 	addi	fp,sp,12
1104c294:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1104c298:	e0bfff17 	ldw	r2,-4(fp)
1104c29c:	10000616 	blt	r2,zero,1104c2b8 <close+0x34>
1104c2a0:	e0bfff17 	ldw	r2,-4(fp)
1104c2a4:	10c00324 	muli	r3,r2,12
1104c2a8:	00800034 	movhi	r2,0
1104c2ac:	10858504 	addi	r2,r2,5652
1104c2b0:	1885883a 	add	r2,r3,r2
1104c2b4:	00000106 	br	1104c2bc <close+0x38>
1104c2b8:	0005883a 	mov	r2,zero
1104c2bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1104c2c0:	e0bffd17 	ldw	r2,-12(fp)
1104c2c4:	10001826 	beq	r2,zero,1104c328 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1104c2c8:	e0bffd17 	ldw	r2,-12(fp)
1104c2cc:	10800017 	ldw	r2,0(r2)
1104c2d0:	10800417 	ldw	r2,16(r2)
1104c2d4:	10000626 	beq	r2,zero,1104c2f0 <close+0x6c>
1104c2d8:	e0bffd17 	ldw	r2,-12(fp)
1104c2dc:	10800017 	ldw	r2,0(r2)
1104c2e0:	10800417 	ldw	r2,16(r2)
1104c2e4:	e13ffd17 	ldw	r4,-12(fp)
1104c2e8:	103ee83a 	callr	r2
1104c2ec:	00000106 	br	1104c2f4 <close+0x70>
1104c2f0:	0005883a 	mov	r2,zero
1104c2f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1104c2f8:	e13fff17 	ldw	r4,-4(fp)
1104c2fc:	104cde00 	call	1104cde0 <alt_release_fd>
    if (rval < 0)
1104c300:	e0bffe17 	ldw	r2,-8(fp)
1104c304:	1000060e 	bge	r2,zero,1104c320 <close+0x9c>
    {
      ALT_ERRNO = -rval;
1104c308:	104c2340 	call	1104c234 <alt_get_errno>
1104c30c:	e0fffe17 	ldw	r3,-8(fp)
1104c310:	00c7c83a 	sub	r3,zero,r3
1104c314:	10c00015 	stw	r3,0(r2)
      return -1;
1104c318:	00bfffc4 	movi	r2,-1
1104c31c:	00000606 	br	1104c338 <close+0xb4>
    }
    return 0;
1104c320:	0005883a 	mov	r2,zero
1104c324:	00000406 	br	1104c338 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1104c328:	104c2340 	call	1104c234 <alt_get_errno>
1104c32c:	00c01444 	movi	r3,81
1104c330:	10c00015 	stw	r3,0(r2)
    return -1;
1104c334:	00bfffc4 	movi	r2,-1
  }
}
1104c338:	e037883a 	mov	sp,fp
1104c33c:	dfc00117 	ldw	ra,4(sp)
1104c340:	df000017 	ldw	fp,0(sp)
1104c344:	dec00204 	addi	sp,sp,8
1104c348:	f800283a 	ret

1104c34c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1104c34c:	defffc04 	addi	sp,sp,-16
1104c350:	df000315 	stw	fp,12(sp)
1104c354:	df000304 	addi	fp,sp,12
1104c358:	e13ffd15 	stw	r4,-12(fp)
1104c35c:	e17ffe15 	stw	r5,-8(fp)
1104c360:	e1bfff15 	stw	r6,-4(fp)
  return len;
1104c364:	e0bfff17 	ldw	r2,-4(fp)
}
1104c368:	e037883a 	mov	sp,fp
1104c36c:	df000017 	ldw	fp,0(sp)
1104c370:	dec00104 	addi	sp,sp,4
1104c374:	f800283a 	ret

1104c378 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1104c378:	defffe04 	addi	sp,sp,-8
1104c37c:	dfc00115 	stw	ra,4(sp)
1104c380:	df000015 	stw	fp,0(sp)
1104c384:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1104c388:	00800034 	movhi	r2,0
1104c38c:	108a0704 	addi	r2,r2,10268
1104c390:	10800017 	ldw	r2,0(r2)
1104c394:	10000526 	beq	r2,zero,1104c3ac <alt_get_errno+0x34>
1104c398:	00800034 	movhi	r2,0
1104c39c:	108a0704 	addi	r2,r2,10268
1104c3a0:	10800017 	ldw	r2,0(r2)
1104c3a4:	103ee83a 	callr	r2
1104c3a8:	00000206 	br	1104c3b4 <alt_get_errno+0x3c>
1104c3ac:	00800034 	movhi	r2,0
1104c3b0:	108a1504 	addi	r2,r2,10324
}
1104c3b4:	e037883a 	mov	sp,fp
1104c3b8:	dfc00117 	ldw	ra,4(sp)
1104c3bc:	df000017 	ldw	fp,0(sp)
1104c3c0:	dec00204 	addi	sp,sp,8
1104c3c4:	f800283a 	ret

1104c3c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1104c3c8:	defffb04 	addi	sp,sp,-20
1104c3cc:	dfc00415 	stw	ra,16(sp)
1104c3d0:	df000315 	stw	fp,12(sp)
1104c3d4:	df000304 	addi	fp,sp,12
1104c3d8:	e13ffe15 	stw	r4,-8(fp)
1104c3dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1104c3e0:	e0bffe17 	ldw	r2,-8(fp)
1104c3e4:	10000616 	blt	r2,zero,1104c400 <fstat+0x38>
1104c3e8:	e0bffe17 	ldw	r2,-8(fp)
1104c3ec:	10c00324 	muli	r3,r2,12
1104c3f0:	00800034 	movhi	r2,0
1104c3f4:	10858504 	addi	r2,r2,5652
1104c3f8:	1885883a 	add	r2,r3,r2
1104c3fc:	00000106 	br	1104c404 <fstat+0x3c>
1104c400:	0005883a 	mov	r2,zero
1104c404:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1104c408:	e0bffd17 	ldw	r2,-12(fp)
1104c40c:	10001026 	beq	r2,zero,1104c450 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1104c410:	e0bffd17 	ldw	r2,-12(fp)
1104c414:	10800017 	ldw	r2,0(r2)
1104c418:	10800817 	ldw	r2,32(r2)
1104c41c:	10000726 	beq	r2,zero,1104c43c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1104c420:	e0bffd17 	ldw	r2,-12(fp)
1104c424:	10800017 	ldw	r2,0(r2)
1104c428:	10800817 	ldw	r2,32(r2)
1104c42c:	e13ffd17 	ldw	r4,-12(fp)
1104c430:	e17fff17 	ldw	r5,-4(fp)
1104c434:	103ee83a 	callr	r2
1104c438:	00000906 	br	1104c460 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1104c43c:	e0bfff17 	ldw	r2,-4(fp)
1104c440:	00c80004 	movi	r3,8192
1104c444:	10c00115 	stw	r3,4(r2)
      return 0;
1104c448:	0005883a 	mov	r2,zero
1104c44c:	00000406 	br	1104c460 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1104c450:	104c3780 	call	1104c378 <alt_get_errno>
1104c454:	00c01444 	movi	r3,81
1104c458:	10c00015 	stw	r3,0(r2)
    return -1;
1104c45c:	00bfffc4 	movi	r2,-1
  }
}
1104c460:	e037883a 	mov	sp,fp
1104c464:	dfc00117 	ldw	ra,4(sp)
1104c468:	df000017 	ldw	fp,0(sp)
1104c46c:	dec00204 	addi	sp,sp,8
1104c470:	f800283a 	ret

1104c474 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1104c474:	defff904 	addi	sp,sp,-28
1104c478:	dfc00615 	stw	ra,24(sp)
1104c47c:	df000515 	stw	fp,20(sp)
1104c480:	df000504 	addi	fp,sp,20
1104c484:	e13ffc15 	stw	r4,-16(fp)
1104c488:	e17ffd15 	stw	r5,-12(fp)
1104c48c:	e1bffe15 	stw	r6,-8(fp)
1104c490:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1104c494:	e0800217 	ldw	r2,8(fp)
1104c498:	d8800015 	stw	r2,0(sp)
1104c49c:	e13ffc17 	ldw	r4,-16(fp)
1104c4a0:	e17ffd17 	ldw	r5,-12(fp)
1104c4a4:	e1bffe17 	ldw	r6,-8(fp)
1104c4a8:	e1ffff17 	ldw	r7,-4(fp)
1104c4ac:	104c64c0 	call	1104c64c <alt_iic_isr_register>
}  
1104c4b0:	e037883a 	mov	sp,fp
1104c4b4:	dfc00117 	ldw	ra,4(sp)
1104c4b8:	df000017 	ldw	fp,0(sp)
1104c4bc:	dec00204 	addi	sp,sp,8
1104c4c0:	f800283a 	ret

1104c4c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1104c4c4:	defff904 	addi	sp,sp,-28
1104c4c8:	df000615 	stw	fp,24(sp)
1104c4cc:	df000604 	addi	fp,sp,24
1104c4d0:	e13ffe15 	stw	r4,-8(fp)
1104c4d4:	e17fff15 	stw	r5,-4(fp)
1104c4d8:	e0bfff17 	ldw	r2,-4(fp)
1104c4dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104c4e0:	0005303a 	rdctl	r2,status
1104c4e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104c4e8:	e0fffb17 	ldw	r3,-20(fp)
1104c4ec:	00bfff84 	movi	r2,-2
1104c4f0:	1884703a 	and	r2,r3,r2
1104c4f4:	1001703a 	wrctl	status,r2
  
  return context;
1104c4f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1104c4fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1104c500:	e0bffa17 	ldw	r2,-24(fp)
1104c504:	00c00044 	movi	r3,1
1104c508:	1884983a 	sll	r2,r3,r2
1104c50c:	1007883a 	mov	r3,r2
1104c510:	00800034 	movhi	r2,0
1104c514:	108a1604 	addi	r2,r2,10328
1104c518:	10800017 	ldw	r2,0(r2)
1104c51c:	1886b03a 	or	r3,r3,r2
1104c520:	00800034 	movhi	r2,0
1104c524:	108a1604 	addi	r2,r2,10328
1104c528:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1104c52c:	00800034 	movhi	r2,0
1104c530:	108a1604 	addi	r2,r2,10328
1104c534:	10800017 	ldw	r2,0(r2)
1104c538:	100170fa 	wrctl	ienable,r2
1104c53c:	e0bffc17 	ldw	r2,-16(fp)
1104c540:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104c544:	e0bffd17 	ldw	r2,-12(fp)
1104c548:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1104c54c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
1104c550:	e037883a 	mov	sp,fp
1104c554:	df000017 	ldw	fp,0(sp)
1104c558:	dec00104 	addi	sp,sp,4
1104c55c:	f800283a 	ret

1104c560 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1104c560:	defff904 	addi	sp,sp,-28
1104c564:	df000615 	stw	fp,24(sp)
1104c568:	df000604 	addi	fp,sp,24
1104c56c:	e13ffe15 	stw	r4,-8(fp)
1104c570:	e17fff15 	stw	r5,-4(fp)
1104c574:	e0bfff17 	ldw	r2,-4(fp)
1104c578:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104c57c:	0005303a 	rdctl	r2,status
1104c580:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104c584:	e0fffb17 	ldw	r3,-20(fp)
1104c588:	00bfff84 	movi	r2,-2
1104c58c:	1884703a 	and	r2,r3,r2
1104c590:	1001703a 	wrctl	status,r2
  
  return context;
1104c594:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1104c598:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1104c59c:	e0bffa17 	ldw	r2,-24(fp)
1104c5a0:	00c00044 	movi	r3,1
1104c5a4:	1884983a 	sll	r2,r3,r2
1104c5a8:	0084303a 	nor	r2,zero,r2
1104c5ac:	1007883a 	mov	r3,r2
1104c5b0:	00800034 	movhi	r2,0
1104c5b4:	108a1604 	addi	r2,r2,10328
1104c5b8:	10800017 	ldw	r2,0(r2)
1104c5bc:	1886703a 	and	r3,r3,r2
1104c5c0:	00800034 	movhi	r2,0
1104c5c4:	108a1604 	addi	r2,r2,10328
1104c5c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1104c5cc:	00800034 	movhi	r2,0
1104c5d0:	108a1604 	addi	r2,r2,10328
1104c5d4:	10800017 	ldw	r2,0(r2)
1104c5d8:	100170fa 	wrctl	ienable,r2
1104c5dc:	e0bffc17 	ldw	r2,-16(fp)
1104c5e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104c5e4:	e0bffd17 	ldw	r2,-12(fp)
1104c5e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1104c5ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
1104c5f0:	e037883a 	mov	sp,fp
1104c5f4:	df000017 	ldw	fp,0(sp)
1104c5f8:	dec00104 	addi	sp,sp,4
1104c5fc:	f800283a 	ret

1104c600 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1104c600:	defffc04 	addi	sp,sp,-16
1104c604:	df000315 	stw	fp,12(sp)
1104c608:	df000304 	addi	fp,sp,12
1104c60c:	e13ffe15 	stw	r4,-8(fp)
1104c610:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1104c614:	000530fa 	rdctl	r2,ienable
1104c618:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1104c61c:	e0bfff17 	ldw	r2,-4(fp)
1104c620:	00c00044 	movi	r3,1
1104c624:	1884983a 	sll	r2,r3,r2
1104c628:	1007883a 	mov	r3,r2
1104c62c:	e0bffd17 	ldw	r2,-12(fp)
1104c630:	1884703a 	and	r2,r3,r2
1104c634:	1004c03a 	cmpne	r2,r2,zero
1104c638:	10803fcc 	andi	r2,r2,255
}
1104c63c:	e037883a 	mov	sp,fp
1104c640:	df000017 	ldw	fp,0(sp)
1104c644:	dec00104 	addi	sp,sp,4
1104c648:	f800283a 	ret

1104c64c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1104c64c:	defff504 	addi	sp,sp,-44
1104c650:	dfc00a15 	stw	ra,40(sp)
1104c654:	df000915 	stw	fp,36(sp)
1104c658:	df000904 	addi	fp,sp,36
1104c65c:	e13ffc15 	stw	r4,-16(fp)
1104c660:	e17ffd15 	stw	r5,-12(fp)
1104c664:	e1bffe15 	stw	r6,-8(fp)
1104c668:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1104c66c:	00bffa84 	movi	r2,-22
1104c670:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1104c674:	e0bffd17 	ldw	r2,-12(fp)
1104c678:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1104c67c:	e0bff817 	ldw	r2,-32(fp)
1104c680:	10800808 	cmpgei	r2,r2,32
1104c684:	1000271e 	bne	r2,zero,1104c724 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104c688:	0005303a 	rdctl	r2,status
1104c68c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104c690:	e0fffa17 	ldw	r3,-24(fp)
1104c694:	00bfff84 	movi	r2,-2
1104c698:	1884703a 	and	r2,r3,r2
1104c69c:	1001703a 	wrctl	status,r2
  
  return context;
1104c6a0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1104c6a4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1104c6a8:	00c00034 	movhi	r3,0
1104c6ac:	18ca3004 	addi	r3,r3,10432
1104c6b0:	e0bff817 	ldw	r2,-32(fp)
1104c6b4:	100490fa 	slli	r2,r2,3
1104c6b8:	1885883a 	add	r2,r3,r2
1104c6bc:	e0fffe17 	ldw	r3,-8(fp)
1104c6c0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1104c6c4:	00c00034 	movhi	r3,0
1104c6c8:	18ca3004 	addi	r3,r3,10432
1104c6cc:	e0bff817 	ldw	r2,-32(fp)
1104c6d0:	100490fa 	slli	r2,r2,3
1104c6d4:	1885883a 	add	r2,r3,r2
1104c6d8:	10800104 	addi	r2,r2,4
1104c6dc:	e0ffff17 	ldw	r3,-4(fp)
1104c6e0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1104c6e4:	e0bffe17 	ldw	r2,-8(fp)
1104c6e8:	10000526 	beq	r2,zero,1104c700 <alt_iic_isr_register+0xb4>
1104c6ec:	e0bff817 	ldw	r2,-32(fp)
1104c6f0:	e13ffc17 	ldw	r4,-16(fp)
1104c6f4:	100b883a 	mov	r5,r2
1104c6f8:	104c4c40 	call	1104c4c4 <alt_ic_irq_enable>
1104c6fc:	00000406 	br	1104c710 <alt_iic_isr_register+0xc4>
1104c700:	e0bff817 	ldw	r2,-32(fp)
1104c704:	e13ffc17 	ldw	r4,-16(fp)
1104c708:	100b883a 	mov	r5,r2
1104c70c:	104c5600 	call	1104c560 <alt_ic_irq_disable>
1104c710:	e0bff715 	stw	r2,-36(fp)
1104c714:	e0bff917 	ldw	r2,-28(fp)
1104c718:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104c71c:	e0bffb17 	ldw	r2,-20(fp)
1104c720:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1104c724:	e0bff717 	ldw	r2,-36(fp)
}
1104c728:	e037883a 	mov	sp,fp
1104c72c:	dfc00117 	ldw	ra,4(sp)
1104c730:	df000017 	ldw	fp,0(sp)
1104c734:	dec00204 	addi	sp,sp,8
1104c738:	f800283a 	ret

1104c73c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
1104c73c:	defff004 	addi	sp,sp,-64
1104c740:	df000f15 	stw	fp,60(sp)
1104c744:	df000f04 	addi	fp,sp,60
1104c748:	e13ffd15 	stw	r4,-12(fp)
1104c74c:	e17ffe15 	stw	r5,-8(fp)
1104c750:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
1104c754:	00bffa84 	movi	r2,-22
1104c758:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1104c75c:	e0bffd17 	ldw	r2,-12(fp)
1104c760:	10800828 	cmpgeui	r2,r2,32
1104c764:	10005c1e 	bne	r2,zero,1104c8d8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104c768:	0005303a 	rdctl	r2,status
1104c76c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104c770:	e0fff317 	ldw	r3,-52(fp)
1104c774:	00bfff84 	movi	r2,-2
1104c778:	1884703a 	and	r2,r3,r2
1104c77c:	1001703a 	wrctl	status,r2
  
  return context;
1104c780:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
1104c784:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
1104c788:	00c00034 	movhi	r3,0
1104c78c:	18ca3004 	addi	r3,r3,10432
1104c790:	e0bffd17 	ldw	r2,-12(fp)
1104c794:	100490fa 	slli	r2,r2,3
1104c798:	1885883a 	add	r2,r3,r2
1104c79c:	e0ffff17 	ldw	r3,-4(fp)
1104c7a0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
1104c7a4:	00c00034 	movhi	r3,0
1104c7a8:	18ca3004 	addi	r3,r3,10432
1104c7ac:	e0bffd17 	ldw	r2,-12(fp)
1104c7b0:	100490fa 	slli	r2,r2,3
1104c7b4:	1885883a 	add	r2,r3,r2
1104c7b8:	10800104 	addi	r2,r2,4
1104c7bc:	e0fffe17 	ldw	r3,-8(fp)
1104c7c0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
1104c7c4:	e0bfff17 	ldw	r2,-4(fp)
1104c7c8:	10001f26 	beq	r2,zero,1104c848 <alt_irq_register+0x10c>
1104c7cc:	e0bffd17 	ldw	r2,-12(fp)
1104c7d0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104c7d4:	0005303a 	rdctl	r2,status
1104c7d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104c7dc:	e0fff517 	ldw	r3,-44(fp)
1104c7e0:	00bfff84 	movi	r2,-2
1104c7e4:	1884703a 	and	r2,r3,r2
1104c7e8:	1001703a 	wrctl	status,r2
  
  return context;
1104c7ec:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1104c7f0:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
1104c7f4:	e0bff417 	ldw	r2,-48(fp)
1104c7f8:	00c00044 	movi	r3,1
1104c7fc:	1884983a 	sll	r2,r3,r2
1104c800:	1007883a 	mov	r3,r2
1104c804:	00800034 	movhi	r2,0
1104c808:	108a1604 	addi	r2,r2,10328
1104c80c:	10800017 	ldw	r2,0(r2)
1104c810:	1886b03a 	or	r3,r3,r2
1104c814:	00800034 	movhi	r2,0
1104c818:	108a1604 	addi	r2,r2,10328
1104c81c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1104c820:	00800034 	movhi	r2,0
1104c824:	108a1604 	addi	r2,r2,10328
1104c828:	10800017 	ldw	r2,0(r2)
1104c82c:	100170fa 	wrctl	ienable,r2
1104c830:	e0bff617 	ldw	r2,-40(fp)
1104c834:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104c838:	e0bff717 	ldw	r2,-36(fp)
1104c83c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1104c840:	0005883a 	mov	r2,zero
1104c844:	00001f06 	br	1104c8c4 <alt_irq_register+0x188>
1104c848:	e0bffd17 	ldw	r2,-12(fp)
1104c84c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104c850:	0005303a 	rdctl	r2,status
1104c854:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104c858:	e0fff917 	ldw	r3,-28(fp)
1104c85c:	00bfff84 	movi	r2,-2
1104c860:	1884703a 	and	r2,r3,r2
1104c864:	1001703a 	wrctl	status,r2
  
  return context;
1104c868:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1104c86c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
1104c870:	e0bff817 	ldw	r2,-32(fp)
1104c874:	00c00044 	movi	r3,1
1104c878:	1884983a 	sll	r2,r3,r2
1104c87c:	0084303a 	nor	r2,zero,r2
1104c880:	1007883a 	mov	r3,r2
1104c884:	00800034 	movhi	r2,0
1104c888:	108a1604 	addi	r2,r2,10328
1104c88c:	10800017 	ldw	r2,0(r2)
1104c890:	1886703a 	and	r3,r3,r2
1104c894:	00800034 	movhi	r2,0
1104c898:	108a1604 	addi	r2,r2,10328
1104c89c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1104c8a0:	00800034 	movhi	r2,0
1104c8a4:	108a1604 	addi	r2,r2,10328
1104c8a8:	10800017 	ldw	r2,0(r2)
1104c8ac:	100170fa 	wrctl	ienable,r2
1104c8b0:	e0bffa17 	ldw	r2,-24(fp)
1104c8b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104c8b8:	e0bffb17 	ldw	r2,-20(fp)
1104c8bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1104c8c0:	0005883a 	mov	r2,zero
1104c8c4:	e0bff115 	stw	r2,-60(fp)
1104c8c8:	e0bff217 	ldw	r2,-56(fp)
1104c8cc:	e0bffc15 	stw	r2,-16(fp)
1104c8d0:	e0bffc17 	ldw	r2,-16(fp)
1104c8d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
1104c8d8:	e0bff117 	ldw	r2,-60(fp)
}
1104c8dc:	e037883a 	mov	sp,fp
1104c8e0:	df000017 	ldw	fp,0(sp)
1104c8e4:	dec00104 	addi	sp,sp,4
1104c8e8:	f800283a 	ret

1104c8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1104c8ec:	defffe04 	addi	sp,sp,-8
1104c8f0:	dfc00115 	stw	ra,4(sp)
1104c8f4:	df000015 	stw	fp,0(sp)
1104c8f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1104c8fc:	00800034 	movhi	r2,0
1104c900:	108a0704 	addi	r2,r2,10268
1104c904:	10800017 	ldw	r2,0(r2)
1104c908:	10000526 	beq	r2,zero,1104c920 <alt_get_errno+0x34>
1104c90c:	00800034 	movhi	r2,0
1104c910:	108a0704 	addi	r2,r2,10268
1104c914:	10800017 	ldw	r2,0(r2)
1104c918:	103ee83a 	callr	r2
1104c91c:	00000206 	br	1104c928 <alt_get_errno+0x3c>
1104c920:	00800034 	movhi	r2,0
1104c924:	108a1504 	addi	r2,r2,10324
}
1104c928:	e037883a 	mov	sp,fp
1104c92c:	dfc00117 	ldw	ra,4(sp)
1104c930:	df000017 	ldw	fp,0(sp)
1104c934:	dec00204 	addi	sp,sp,8
1104c938:	f800283a 	ret

1104c93c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1104c93c:	deffed04 	addi	sp,sp,-76
1104c940:	dfc01215 	stw	ra,72(sp)
1104c944:	df001115 	stw	fp,68(sp)
1104c948:	df001104 	addi	fp,sp,68
1104c94c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1104c950:	e0bfff17 	ldw	r2,-4(fp)
1104c954:	10000616 	blt	r2,zero,1104c970 <isatty+0x34>
1104c958:	e0bfff17 	ldw	r2,-4(fp)
1104c95c:	10c00324 	muli	r3,r2,12
1104c960:	00800034 	movhi	r2,0
1104c964:	10858504 	addi	r2,r2,5652
1104c968:	1885883a 	add	r2,r3,r2
1104c96c:	00000106 	br	1104c974 <isatty+0x38>
1104c970:	0005883a 	mov	r2,zero
1104c974:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1104c978:	e0bfef17 	ldw	r2,-68(fp)
1104c97c:	10000e26 	beq	r2,zero,1104c9b8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1104c980:	e0bfef17 	ldw	r2,-68(fp)
1104c984:	10800017 	ldw	r2,0(r2)
1104c988:	10800817 	ldw	r2,32(r2)
1104c98c:	1000021e 	bne	r2,zero,1104c998 <isatty+0x5c>
    {
      return 1;
1104c990:	00800044 	movi	r2,1
1104c994:	00000c06 	br	1104c9c8 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1104c998:	e0bff004 	addi	r2,fp,-64
1104c99c:	e13fff17 	ldw	r4,-4(fp)
1104c9a0:	100b883a 	mov	r5,r2
1104c9a4:	104c3c80 	call	1104c3c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1104c9a8:	e0bff117 	ldw	r2,-60(fp)
1104c9ac:	10880020 	cmpeqi	r2,r2,8192
1104c9b0:	10803fcc 	andi	r2,r2,255
1104c9b4:	00000406 	br	1104c9c8 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1104c9b8:	104c8ec0 	call	1104c8ec <alt_get_errno>
1104c9bc:	00c01444 	movi	r3,81
1104c9c0:	10c00015 	stw	r3,0(r2)
    return 0;
1104c9c4:	0005883a 	mov	r2,zero
  }
}
1104c9c8:	e037883a 	mov	sp,fp
1104c9cc:	dfc00117 	ldw	ra,4(sp)
1104c9d0:	df000017 	ldw	fp,0(sp)
1104c9d4:	dec00204 	addi	sp,sp,8
1104c9d8:	f800283a 	ret

1104c9dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1104c9dc:	defffc04 	addi	sp,sp,-16
1104c9e0:	df000315 	stw	fp,12(sp)
1104c9e4:	df000304 	addi	fp,sp,12
1104c9e8:	e13ffd15 	stw	r4,-12(fp)
1104c9ec:	e17ffe15 	stw	r5,-8(fp)
1104c9f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1104c9f4:	e0fffe17 	ldw	r3,-8(fp)
1104c9f8:	e0bffd17 	ldw	r2,-12(fp)
1104c9fc:	18800e26 	beq	r3,r2,1104ca38 <alt_load_section+0x5c>
  {
    while( to != end )
1104ca00:	00000a06 	br	1104ca2c <alt_load_section+0x50>
    {
      *to++ = *from++;
1104ca04:	e0bffd17 	ldw	r2,-12(fp)
1104ca08:	10c00017 	ldw	r3,0(r2)
1104ca0c:	e0bffe17 	ldw	r2,-8(fp)
1104ca10:	10c00015 	stw	r3,0(r2)
1104ca14:	e0bffe17 	ldw	r2,-8(fp)
1104ca18:	10800104 	addi	r2,r2,4
1104ca1c:	e0bffe15 	stw	r2,-8(fp)
1104ca20:	e0bffd17 	ldw	r2,-12(fp)
1104ca24:	10800104 	addi	r2,r2,4
1104ca28:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1104ca2c:	e0fffe17 	ldw	r3,-8(fp)
1104ca30:	e0bfff17 	ldw	r2,-4(fp)
1104ca34:	18bff31e 	bne	r3,r2,1104ca04 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
1104ca38:	e037883a 	mov	sp,fp
1104ca3c:	df000017 	ldw	fp,0(sp)
1104ca40:	dec00104 	addi	sp,sp,4
1104ca44:	f800283a 	ret

1104ca48 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1104ca48:	defffe04 	addi	sp,sp,-8
1104ca4c:	dfc00115 	stw	ra,4(sp)
1104ca50:	df000015 	stw	fp,0(sp)
1104ca54:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1104ca58:	01044174 	movhi	r4,4357
1104ca5c:	213f4e04 	addi	r4,r4,-712
1104ca60:	01400034 	movhi	r5,0
1104ca64:	29437604 	addi	r5,r5,3544
1104ca68:	01800034 	movhi	r6,0
1104ca6c:	318a0c04 	addi	r6,r6,10288
1104ca70:	104c9dc0 	call	1104c9dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1104ca74:	01044134 	movhi	r4,4356
1104ca78:	21000804 	addi	r4,r4,32
1104ca7c:	01444134 	movhi	r5,4356
1104ca80:	29400804 	addi	r5,r5,32
1104ca84:	01844134 	movhi	r6,4356
1104ca88:	31806e04 	addi	r6,r6,440
1104ca8c:	104c9dc0 	call	1104c9dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1104ca90:	01044174 	movhi	r4,4357
1104ca94:	213bd804 	addi	r4,r4,-4256
1104ca98:	01400034 	movhi	r5,0
1104ca9c:	29400004 	addi	r5,r5,0
1104caa0:	01800034 	movhi	r6,0
1104caa4:	31837604 	addi	r6,r6,3544
1104caa8:	104c9dc0 	call	1104c9dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1104caac:	104e1280 	call	1104e128 <alt_dcache_flush_all>
  alt_icache_flush_all();
1104cab0:	104e3140 	call	1104e314 <alt_icache_flush_all>
}
1104cab4:	e037883a 	mov	sp,fp
1104cab8:	dfc00117 	ldw	ra,4(sp)
1104cabc:	df000017 	ldw	fp,0(sp)
1104cac0:	dec00204 	addi	sp,sp,8
1104cac4:	f800283a 	ret

1104cac8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1104cac8:	defffe04 	addi	sp,sp,-8
1104cacc:	dfc00115 	stw	ra,4(sp)
1104cad0:	df000015 	stw	fp,0(sp)
1104cad4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1104cad8:	00800034 	movhi	r2,0
1104cadc:	108a0704 	addi	r2,r2,10268
1104cae0:	10800017 	ldw	r2,0(r2)
1104cae4:	10000526 	beq	r2,zero,1104cafc <alt_get_errno+0x34>
1104cae8:	00800034 	movhi	r2,0
1104caec:	108a0704 	addi	r2,r2,10268
1104caf0:	10800017 	ldw	r2,0(r2)
1104caf4:	103ee83a 	callr	r2
1104caf8:	00000206 	br	1104cb04 <alt_get_errno+0x3c>
1104cafc:	00800034 	movhi	r2,0
1104cb00:	108a1504 	addi	r2,r2,10324
}
1104cb04:	e037883a 	mov	sp,fp
1104cb08:	dfc00117 	ldw	ra,4(sp)
1104cb0c:	df000017 	ldw	fp,0(sp)
1104cb10:	dec00204 	addi	sp,sp,8
1104cb14:	f800283a 	ret

1104cb18 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1104cb18:	defff904 	addi	sp,sp,-28
1104cb1c:	dfc00615 	stw	ra,24(sp)
1104cb20:	df000515 	stw	fp,20(sp)
1104cb24:	df000504 	addi	fp,sp,20
1104cb28:	e13ffd15 	stw	r4,-12(fp)
1104cb2c:	e17ffe15 	stw	r5,-8(fp)
1104cb30:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1104cb34:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1104cb38:	e0bffd17 	ldw	r2,-12(fp)
1104cb3c:	10000616 	blt	r2,zero,1104cb58 <lseek+0x40>
1104cb40:	e0bffd17 	ldw	r2,-12(fp)
1104cb44:	10c00324 	muli	r3,r2,12
1104cb48:	00800034 	movhi	r2,0
1104cb4c:	10858504 	addi	r2,r2,5652
1104cb50:	1885883a 	add	r2,r3,r2
1104cb54:	00000106 	br	1104cb5c <lseek+0x44>
1104cb58:	0005883a 	mov	r2,zero
1104cb5c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1104cb60:	e0bffc17 	ldw	r2,-16(fp)
1104cb64:	10001026 	beq	r2,zero,1104cba8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1104cb68:	e0bffc17 	ldw	r2,-16(fp)
1104cb6c:	10800017 	ldw	r2,0(r2)
1104cb70:	10800717 	ldw	r2,28(r2)
1104cb74:	10000926 	beq	r2,zero,1104cb9c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1104cb78:	e0bffc17 	ldw	r2,-16(fp)
1104cb7c:	10800017 	ldw	r2,0(r2)
1104cb80:	10800717 	ldw	r2,28(r2)
1104cb84:	e13ffc17 	ldw	r4,-16(fp)
1104cb88:	e17ffe17 	ldw	r5,-8(fp)
1104cb8c:	e1bfff17 	ldw	r6,-4(fp)
1104cb90:	103ee83a 	callr	r2
1104cb94:	e0bffb15 	stw	r2,-20(fp)
1104cb98:	00000506 	br	1104cbb0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1104cb9c:	00bfde84 	movi	r2,-134
1104cba0:	e0bffb15 	stw	r2,-20(fp)
1104cba4:	00000206 	br	1104cbb0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1104cba8:	00bfebc4 	movi	r2,-81
1104cbac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1104cbb0:	e0bffb17 	ldw	r2,-20(fp)
1104cbb4:	1000060e 	bge	r2,zero,1104cbd0 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
1104cbb8:	104cac80 	call	1104cac8 <alt_get_errno>
1104cbbc:	e0fffb17 	ldw	r3,-20(fp)
1104cbc0:	00c7c83a 	sub	r3,zero,r3
1104cbc4:	10c00015 	stw	r3,0(r2)
    rc = -1;
1104cbc8:	00bfffc4 	movi	r2,-1
1104cbcc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1104cbd0:	e0bffb17 	ldw	r2,-20(fp)
}
1104cbd4:	e037883a 	mov	sp,fp
1104cbd8:	dfc00117 	ldw	ra,4(sp)
1104cbdc:	df000017 	ldw	fp,0(sp)
1104cbe0:	dec00204 	addi	sp,sp,8
1104cbe4:	f800283a 	ret

1104cbe8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1104cbe8:	defffd04 	addi	sp,sp,-12
1104cbec:	dfc00215 	stw	ra,8(sp)
1104cbf0:	df000115 	stw	fp,4(sp)
1104cbf4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1104cbf8:	0009883a 	mov	r4,zero
1104cbfc:	104d0940 	call	1104d094 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1104cc00:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1104cc04:	104d0c80 	call	1104d0c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1104cc08:	01000034 	movhi	r4,0
1104cc0c:	21036e04 	addi	r4,r4,3512
1104cc10:	01400034 	movhi	r5,0
1104cc14:	29436e04 	addi	r5,r5,3512
1104cc18:	01800034 	movhi	r6,0
1104cc1c:	31836e04 	addi	r6,r6,3512
1104cc20:	104e4040 	call	1104e404 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1104cc24:	104e25c0 	call	1104e25c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1104cc28:	01044174 	movhi	r4,4357
1104cc2c:	2138ae04 	addi	r4,r4,-7496
1104cc30:	104eb8c0 	call	1104eb8c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1104cc34:	d1201a17 	ldw	r4,-32664(gp)
1104cc38:	d0e01b17 	ldw	r3,-32660(gp)
1104cc3c:	d0a01c17 	ldw	r2,-32656(gp)
1104cc40:	180b883a 	mov	r5,r3
1104cc44:	100d883a 	mov	r6,r2
1104cc48:	104227c0 	call	1104227c <main>
1104cc4c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1104cc50:	01000044 	movi	r4,1
1104cc54:	104c2840 	call	1104c284 <close>
  exit (result);
1104cc58:	e13fff17 	ldw	r4,-4(fp)
1104cc5c:	104eba00 	call	1104eba0 <exit>

1104cc60 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1104cc60:	defffe04 	addi	sp,sp,-8
1104cc64:	df000115 	stw	fp,4(sp)
1104cc68:	df000104 	addi	fp,sp,4
1104cc6c:	e13fff15 	stw	r4,-4(fp)
}
1104cc70:	e037883a 	mov	sp,fp
1104cc74:	df000017 	ldw	fp,0(sp)
1104cc78:	dec00104 	addi	sp,sp,4
1104cc7c:	f800283a 	ret

1104cc80 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1104cc80:	defffe04 	addi	sp,sp,-8
1104cc84:	df000115 	stw	fp,4(sp)
1104cc88:	df000104 	addi	fp,sp,4
1104cc8c:	e13fff15 	stw	r4,-4(fp)
}
1104cc90:	e037883a 	mov	sp,fp
1104cc94:	df000017 	ldw	fp,0(sp)
1104cc98:	dec00104 	addi	sp,sp,4
1104cc9c:	f800283a 	ret

1104cca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1104cca0:	defffe04 	addi	sp,sp,-8
1104cca4:	dfc00115 	stw	ra,4(sp)
1104cca8:	df000015 	stw	fp,0(sp)
1104ccac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1104ccb0:	00800034 	movhi	r2,0
1104ccb4:	108a0704 	addi	r2,r2,10268
1104ccb8:	10800017 	ldw	r2,0(r2)
1104ccbc:	10000526 	beq	r2,zero,1104ccd4 <alt_get_errno+0x34>
1104ccc0:	00800034 	movhi	r2,0
1104ccc4:	108a0704 	addi	r2,r2,10268
1104ccc8:	10800017 	ldw	r2,0(r2)
1104cccc:	103ee83a 	callr	r2
1104ccd0:	00000206 	br	1104ccdc <alt_get_errno+0x3c>
1104ccd4:	00800034 	movhi	r2,0
1104ccd8:	108a1504 	addi	r2,r2,10324
}
1104ccdc:	e037883a 	mov	sp,fp
1104cce0:	dfc00117 	ldw	ra,4(sp)
1104cce4:	df000017 	ldw	fp,0(sp)
1104cce8:	dec00204 	addi	sp,sp,8
1104ccec:	f800283a 	ret

1104ccf0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1104ccf0:	defff904 	addi	sp,sp,-28
1104ccf4:	dfc00615 	stw	ra,24(sp)
1104ccf8:	df000515 	stw	fp,20(sp)
1104ccfc:	df000504 	addi	fp,sp,20
1104cd00:	e13ffd15 	stw	r4,-12(fp)
1104cd04:	e17ffe15 	stw	r5,-8(fp)
1104cd08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1104cd0c:	e0bffd17 	ldw	r2,-12(fp)
1104cd10:	10000616 	blt	r2,zero,1104cd2c <read+0x3c>
1104cd14:	e0bffd17 	ldw	r2,-12(fp)
1104cd18:	10c00324 	muli	r3,r2,12
1104cd1c:	00800034 	movhi	r2,0
1104cd20:	10858504 	addi	r2,r2,5652
1104cd24:	1885883a 	add	r2,r3,r2
1104cd28:	00000106 	br	1104cd30 <read+0x40>
1104cd2c:	0005883a 	mov	r2,zero
1104cd30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1104cd34:	e0bffb17 	ldw	r2,-20(fp)
1104cd38:	10002026 	beq	r2,zero,1104cdbc <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1104cd3c:	e0bffb17 	ldw	r2,-20(fp)
1104cd40:	10800217 	ldw	r2,8(r2)
1104cd44:	108000cc 	andi	r2,r2,3
1104cd48:	10800060 	cmpeqi	r2,r2,1
1104cd4c:	1000171e 	bne	r2,zero,1104cdac <read+0xbc>
        (fd->dev->read))
1104cd50:	e0bffb17 	ldw	r2,-20(fp)
1104cd54:	10800017 	ldw	r2,0(r2)
1104cd58:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1104cd5c:	10001326 	beq	r2,zero,1104cdac <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1104cd60:	e0bffb17 	ldw	r2,-20(fp)
1104cd64:	10800017 	ldw	r2,0(r2)
1104cd68:	10c00517 	ldw	r3,20(r2)
1104cd6c:	e0bfff17 	ldw	r2,-4(fp)
1104cd70:	e13ffb17 	ldw	r4,-20(fp)
1104cd74:	e17ffe17 	ldw	r5,-8(fp)
1104cd78:	100d883a 	mov	r6,r2
1104cd7c:	183ee83a 	callr	r3
1104cd80:	e0bffc15 	stw	r2,-16(fp)
1104cd84:	e0bffc17 	ldw	r2,-16(fp)
1104cd88:	1000060e 	bge	r2,zero,1104cda4 <read+0xb4>
        {
          ALT_ERRNO = -rval;
1104cd8c:	104cca00 	call	1104cca0 <alt_get_errno>
1104cd90:	e0fffc17 	ldw	r3,-16(fp)
1104cd94:	00c7c83a 	sub	r3,zero,r3
1104cd98:	10c00015 	stw	r3,0(r2)
          return -1;
1104cd9c:	00bfffc4 	movi	r2,-1
1104cda0:	00000a06 	br	1104cdcc <read+0xdc>
        }
        return rval;
1104cda4:	e0bffc17 	ldw	r2,-16(fp)
1104cda8:	00000806 	br	1104cdcc <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
1104cdac:	104cca00 	call	1104cca0 <alt_get_errno>
1104cdb0:	00c00344 	movi	r3,13
1104cdb4:	10c00015 	stw	r3,0(r2)
1104cdb8:	00000306 	br	1104cdc8 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1104cdbc:	104cca00 	call	1104cca0 <alt_get_errno>
1104cdc0:	00c01444 	movi	r3,81
1104cdc4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1104cdc8:	00bfffc4 	movi	r2,-1
}
1104cdcc:	e037883a 	mov	sp,fp
1104cdd0:	dfc00117 	ldw	ra,4(sp)
1104cdd4:	df000017 	ldw	fp,0(sp)
1104cdd8:	dec00204 	addi	sp,sp,8
1104cddc:	f800283a 	ret

1104cde0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1104cde0:	defffe04 	addi	sp,sp,-8
1104cde4:	df000115 	stw	fp,4(sp)
1104cde8:	df000104 	addi	fp,sp,4
1104cdec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1104cdf0:	e0bfff17 	ldw	r2,-4(fp)
1104cdf4:	108000d0 	cmplti	r2,r2,3
1104cdf8:	10000d1e 	bne	r2,zero,1104ce30 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1104cdfc:	00c00034 	movhi	r3,0
1104ce00:	18c58504 	addi	r3,r3,5652
1104ce04:	e0bfff17 	ldw	r2,-4(fp)
1104ce08:	10800324 	muli	r2,r2,12
1104ce0c:	1885883a 	add	r2,r3,r2
1104ce10:	10800204 	addi	r2,r2,8
1104ce14:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1104ce18:	00c00034 	movhi	r3,0
1104ce1c:	18c58504 	addi	r3,r3,5652
1104ce20:	e0bfff17 	ldw	r2,-4(fp)
1104ce24:	10800324 	muli	r2,r2,12
1104ce28:	1885883a 	add	r2,r3,r2
1104ce2c:	10000015 	stw	zero,0(r2)
  }
}
1104ce30:	e037883a 	mov	sp,fp
1104ce34:	df000017 	ldw	fp,0(sp)
1104ce38:	dec00104 	addi	sp,sp,4
1104ce3c:	f800283a 	ret

1104ce40 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1104ce40:	defff904 	addi	sp,sp,-28
1104ce44:	df000615 	stw	fp,24(sp)
1104ce48:	df000604 	addi	fp,sp,24
1104ce4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104ce50:	0005303a 	rdctl	r2,status
1104ce54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104ce58:	e0fffc17 	ldw	r3,-16(fp)
1104ce5c:	00bfff84 	movi	r2,-2
1104ce60:	1884703a 	and	r2,r3,r2
1104ce64:	1001703a 	wrctl	status,r2
  
  return context;
1104ce68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1104ce6c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1104ce70:	d0a00c17 	ldw	r2,-32720(gp)
1104ce74:	10c000c4 	addi	r3,r2,3
1104ce78:	00bfff04 	movi	r2,-4
1104ce7c:	1884703a 	and	r2,r3,r2
1104ce80:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1104ce84:	d0e00c17 	ldw	r3,-32720(gp)
1104ce88:	e0bfff17 	ldw	r2,-4(fp)
1104ce8c:	1885883a 	add	r2,r3,r2
1104ce90:	00c40034 	movhi	r3,4096
1104ce94:	18c00004 	addi	r3,r3,0
1104ce98:	1880062e 	bgeu	r3,r2,1104ceb4 <sbrk+0x74>
1104ce9c:	e0bffa17 	ldw	r2,-24(fp)
1104cea0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104cea4:	e0bffd17 	ldw	r2,-12(fp)
1104cea8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1104ceac:	00bfffc4 	movi	r2,-1
1104ceb0:	00000b06 	br	1104cee0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1104ceb4:	d0a00c17 	ldw	r2,-32720(gp)
1104ceb8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1104cebc:	d0e00c17 	ldw	r3,-32720(gp)
1104cec0:	e0bfff17 	ldw	r2,-4(fp)
1104cec4:	1885883a 	add	r2,r3,r2
1104cec8:	d0a00c15 	stw	r2,-32720(gp)
1104cecc:	e0bffa17 	ldw	r2,-24(fp)
1104ced0:	e0bffe15 	stw	r2,-8(fp)
1104ced4:	e0bffe17 	ldw	r2,-8(fp)
1104ced8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1104cedc:	e0bffb17 	ldw	r2,-20(fp)
} 
1104cee0:	e037883a 	mov	sp,fp
1104cee4:	df000017 	ldw	fp,0(sp)
1104cee8:	dec00104 	addi	sp,sp,4
1104ceec:	f800283a 	ret

1104cef0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1104cef0:	defffd04 	addi	sp,sp,-12
1104cef4:	dfc00215 	stw	ra,8(sp)
1104cef8:	df000115 	stw	fp,4(sp)
1104cefc:	df000104 	addi	fp,sp,4
1104cf00:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1104cf04:	e13fff17 	ldw	r4,-4(fp)
1104cf08:	104dfd40 	call	1104dfd4 <alt_busy_sleep>
}
1104cf0c:	e037883a 	mov	sp,fp
1104cf10:	dfc00117 	ldw	ra,4(sp)
1104cf14:	df000017 	ldw	fp,0(sp)
1104cf18:	dec00204 	addi	sp,sp,8
1104cf1c:	f800283a 	ret

1104cf20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1104cf20:	defffe04 	addi	sp,sp,-8
1104cf24:	dfc00115 	stw	ra,4(sp)
1104cf28:	df000015 	stw	fp,0(sp)
1104cf2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1104cf30:	00800034 	movhi	r2,0
1104cf34:	108a0704 	addi	r2,r2,10268
1104cf38:	10800017 	ldw	r2,0(r2)
1104cf3c:	10000526 	beq	r2,zero,1104cf54 <alt_get_errno+0x34>
1104cf40:	00800034 	movhi	r2,0
1104cf44:	108a0704 	addi	r2,r2,10268
1104cf48:	10800017 	ldw	r2,0(r2)
1104cf4c:	103ee83a 	callr	r2
1104cf50:	00000206 	br	1104cf5c <alt_get_errno+0x3c>
1104cf54:	00800034 	movhi	r2,0
1104cf58:	108a1504 	addi	r2,r2,10324
}
1104cf5c:	e037883a 	mov	sp,fp
1104cf60:	dfc00117 	ldw	ra,4(sp)
1104cf64:	df000017 	ldw	fp,0(sp)
1104cf68:	dec00204 	addi	sp,sp,8
1104cf6c:	f800283a 	ret

1104cf70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1104cf70:	defff904 	addi	sp,sp,-28
1104cf74:	dfc00615 	stw	ra,24(sp)
1104cf78:	df000515 	stw	fp,20(sp)
1104cf7c:	df000504 	addi	fp,sp,20
1104cf80:	e13ffd15 	stw	r4,-12(fp)
1104cf84:	e17ffe15 	stw	r5,-8(fp)
1104cf88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1104cf8c:	e0bffd17 	ldw	r2,-12(fp)
1104cf90:	10000616 	blt	r2,zero,1104cfac <write+0x3c>
1104cf94:	e0bffd17 	ldw	r2,-12(fp)
1104cf98:	10c00324 	muli	r3,r2,12
1104cf9c:	00800034 	movhi	r2,0
1104cfa0:	10858504 	addi	r2,r2,5652
1104cfa4:	1885883a 	add	r2,r3,r2
1104cfa8:	00000106 	br	1104cfb0 <write+0x40>
1104cfac:	0005883a 	mov	r2,zero
1104cfb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1104cfb4:	e0bffb17 	ldw	r2,-20(fp)
1104cfb8:	10001f26 	beq	r2,zero,1104d038 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1104cfbc:	e0bffb17 	ldw	r2,-20(fp)
1104cfc0:	10800217 	ldw	r2,8(r2)
1104cfc4:	108000cc 	andi	r2,r2,3
1104cfc8:	10001726 	beq	r2,zero,1104d028 <write+0xb8>
1104cfcc:	e0bffb17 	ldw	r2,-20(fp)
1104cfd0:	10800017 	ldw	r2,0(r2)
1104cfd4:	10800617 	ldw	r2,24(r2)
1104cfd8:	10001326 	beq	r2,zero,1104d028 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1104cfdc:	e0bffb17 	ldw	r2,-20(fp)
1104cfe0:	10800017 	ldw	r2,0(r2)
1104cfe4:	10c00617 	ldw	r3,24(r2)
1104cfe8:	e0bfff17 	ldw	r2,-4(fp)
1104cfec:	e13ffb17 	ldw	r4,-20(fp)
1104cff0:	e17ffe17 	ldw	r5,-8(fp)
1104cff4:	100d883a 	mov	r6,r2
1104cff8:	183ee83a 	callr	r3
1104cffc:	e0bffc15 	stw	r2,-16(fp)
1104d000:	e0bffc17 	ldw	r2,-16(fp)
1104d004:	1000060e 	bge	r2,zero,1104d020 <write+0xb0>
      {
        ALT_ERRNO = -rval;
1104d008:	104cf200 	call	1104cf20 <alt_get_errno>
1104d00c:	e0fffc17 	ldw	r3,-16(fp)
1104d010:	00c7c83a 	sub	r3,zero,r3
1104d014:	10c00015 	stw	r3,0(r2)
        return -1;
1104d018:	00bfffc4 	movi	r2,-1
1104d01c:	00000a06 	br	1104d048 <write+0xd8>
      }
      return rval;
1104d020:	e0bffc17 	ldw	r2,-16(fp)
1104d024:	00000806 	br	1104d048 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
1104d028:	104cf200 	call	1104cf20 <alt_get_errno>
1104d02c:	00c00344 	movi	r3,13
1104d030:	10c00015 	stw	r3,0(r2)
1104d034:	00000306 	br	1104d044 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1104d038:	104cf200 	call	1104cf20 <alt_get_errno>
1104d03c:	00c01444 	movi	r3,81
1104d040:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1104d044:	00bfffc4 	movi	r2,-1
}
1104d048:	e037883a 	mov	sp,fp
1104d04c:	dfc00117 	ldw	ra,4(sp)
1104d050:	df000017 	ldw	fp,0(sp)
1104d054:	dec00204 	addi	sp,sp,8
1104d058:	f800283a 	ret

1104d05c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1104d05c:	defffd04 	addi	sp,sp,-12
1104d060:	dfc00215 	stw	ra,8(sp)
1104d064:	df000115 	stw	fp,4(sp)
1104d068:	df000104 	addi	fp,sp,4
1104d06c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1104d070:	e13fff17 	ldw	r4,-4(fp)
1104d074:	01400034 	movhi	r5,0
1104d078:	294a0404 	addi	r5,r5,10256
1104d07c:	104e1bc0 	call	1104e1bc <alt_dev_llist_insert>
}
1104d080:	e037883a 	mov	sp,fp
1104d084:	dfc00117 	ldw	ra,4(sp)
1104d088:	df000017 	ldw	fp,0(sp)
1104d08c:	dec00204 	addi	sp,sp,8
1104d090:	f800283a 	ret

1104d094 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1104d094:	defffd04 	addi	sp,sp,-12
1104d098:	dfc00215 	stw	ra,8(sp)
1104d09c:	df000115 	stw	fp,4(sp)
1104d0a0:	df000104 	addi	fp,sp,4
1104d0a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
1104d0a8:	104e8880 	call	1104e888 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1104d0ac:	00800044 	movi	r2,1
1104d0b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1104d0b4:	e037883a 	mov	sp,fp
1104d0b8:	dfc00117 	ldw	ra,4(sp)
1104d0bc:	df000017 	ldw	fp,0(sp)
1104d0c0:	dec00204 	addi	sp,sp,8
1104d0c4:	f800283a 	ret

1104d0c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1104d0c8:	defffe04 	addi	sp,sp,-8
1104d0cc:	dfc00115 	stw	ra,4(sp)
1104d0d0:	df000015 	stw	fp,0(sp)
1104d0d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
1104d0d8:	01044234 	movhi	r4,4360
1104d0dc:	21040004 	addi	r4,r4,4096
1104d0e0:	000b883a 	mov	r5,zero
1104d0e4:	01800104 	movi	r6,4
1104d0e8:	01c00044 	movi	r7,1
1104d0ec:	104de0c0 	call	1104de0c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
1104d0f0:	01000034 	movhi	r4,0
1104d0f4:	2105ef04 	addi	r4,r4,6076
1104d0f8:	000b883a 	mov	r5,zero
1104d0fc:	000d883a 	mov	r6,zero
1104d100:	104d2900 	call	1104d290 <altera_avalon_jtag_uart_init>
1104d104:	01000034 	movhi	r4,0
1104d108:	2105e504 	addi	r4,r4,6036
1104d10c:	104d05c0 	call	1104d05c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_TEMPERATURE, spi_temperature);
1104d110:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
1104d114:	0001883a 	nop
}
1104d118:	e037883a 	mov	sp,fp
1104d11c:	dfc00117 	ldw	ra,4(sp)
1104d120:	df000017 	ldw	fp,0(sp)
1104d124:	dec00204 	addi	sp,sp,8
1104d128:	f800283a 	ret

1104d12c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1104d12c:	defffa04 	addi	sp,sp,-24
1104d130:	dfc00515 	stw	ra,20(sp)
1104d134:	df000415 	stw	fp,16(sp)
1104d138:	df000404 	addi	fp,sp,16
1104d13c:	e13ffd15 	stw	r4,-12(fp)
1104d140:	e17ffe15 	stw	r5,-8(fp)
1104d144:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1104d148:	e0bffd17 	ldw	r2,-12(fp)
1104d14c:	10800017 	ldw	r2,0(r2)
1104d150:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1104d154:	e0bffc17 	ldw	r2,-16(fp)
1104d158:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
1104d15c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1104d160:	10800217 	ldw	r2,8(r2)
1104d164:	1809883a 	mov	r4,r3
1104d168:	e17ffe17 	ldw	r5,-8(fp)
1104d16c:	e1bfff17 	ldw	r6,-4(fp)
1104d170:	100f883a 	mov	r7,r2
1104d174:	104d7540 	call	1104d754 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1104d178:	e037883a 	mov	sp,fp
1104d17c:	dfc00117 	ldw	ra,4(sp)
1104d180:	df000017 	ldw	fp,0(sp)
1104d184:	dec00204 	addi	sp,sp,8
1104d188:	f800283a 	ret

1104d18c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1104d18c:	defffa04 	addi	sp,sp,-24
1104d190:	dfc00515 	stw	ra,20(sp)
1104d194:	df000415 	stw	fp,16(sp)
1104d198:	df000404 	addi	fp,sp,16
1104d19c:	e13ffd15 	stw	r4,-12(fp)
1104d1a0:	e17ffe15 	stw	r5,-8(fp)
1104d1a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1104d1a8:	e0bffd17 	ldw	r2,-12(fp)
1104d1ac:	10800017 	ldw	r2,0(r2)
1104d1b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1104d1b4:	e0bffc17 	ldw	r2,-16(fp)
1104d1b8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
1104d1bc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1104d1c0:	10800217 	ldw	r2,8(r2)
1104d1c4:	1809883a 	mov	r4,r3
1104d1c8:	e17ffe17 	ldw	r5,-8(fp)
1104d1cc:	e1bfff17 	ldw	r6,-4(fp)
1104d1d0:	100f883a 	mov	r7,r2
1104d1d4:	104d96c0 	call	1104d96c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1104d1d8:	e037883a 	mov	sp,fp
1104d1dc:	dfc00117 	ldw	ra,4(sp)
1104d1e0:	df000017 	ldw	fp,0(sp)
1104d1e4:	dec00204 	addi	sp,sp,8
1104d1e8:	f800283a 	ret

1104d1ec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1104d1ec:	defffc04 	addi	sp,sp,-16
1104d1f0:	dfc00315 	stw	ra,12(sp)
1104d1f4:	df000215 	stw	fp,8(sp)
1104d1f8:	df000204 	addi	fp,sp,8
1104d1fc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1104d200:	e0bfff17 	ldw	r2,-4(fp)
1104d204:	10800017 	ldw	r2,0(r2)
1104d208:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1104d20c:	e0bffe17 	ldw	r2,-8(fp)
1104d210:	10c00a04 	addi	r3,r2,40
1104d214:	e0bfff17 	ldw	r2,-4(fp)
1104d218:	10800217 	ldw	r2,8(r2)
1104d21c:	1809883a 	mov	r4,r3
1104d220:	100b883a 	mov	r5,r2
1104d224:	104d5f80 	call	1104d5f8 <altera_avalon_jtag_uart_close>
}
1104d228:	e037883a 	mov	sp,fp
1104d22c:	dfc00117 	ldw	ra,4(sp)
1104d230:	df000017 	ldw	fp,0(sp)
1104d234:	dec00204 	addi	sp,sp,8
1104d238:	f800283a 	ret

1104d23c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1104d23c:	defffa04 	addi	sp,sp,-24
1104d240:	dfc00515 	stw	ra,20(sp)
1104d244:	df000415 	stw	fp,16(sp)
1104d248:	df000404 	addi	fp,sp,16
1104d24c:	e13ffd15 	stw	r4,-12(fp)
1104d250:	e17ffe15 	stw	r5,-8(fp)
1104d254:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1104d258:	e0bffd17 	ldw	r2,-12(fp)
1104d25c:	10800017 	ldw	r2,0(r2)
1104d260:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1104d264:	e0bffc17 	ldw	r2,-16(fp)
1104d268:	10800a04 	addi	r2,r2,40
1104d26c:	1009883a 	mov	r4,r2
1104d270:	e17ffe17 	ldw	r5,-8(fp)
1104d274:	e1bfff17 	ldw	r6,-4(fp)
1104d278:	104d6600 	call	1104d660 <altera_avalon_jtag_uart_ioctl>
}
1104d27c:	e037883a 	mov	sp,fp
1104d280:	dfc00117 	ldw	ra,4(sp)
1104d284:	df000017 	ldw	fp,0(sp)
1104d288:	dec00204 	addi	sp,sp,8
1104d28c:	f800283a 	ret

1104d290 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1104d290:	defffa04 	addi	sp,sp,-24
1104d294:	dfc00515 	stw	ra,20(sp)
1104d298:	df000415 	stw	fp,16(sp)
1104d29c:	df000404 	addi	fp,sp,16
1104d2a0:	e13ffd15 	stw	r4,-12(fp)
1104d2a4:	e17ffe15 	stw	r5,-8(fp)
1104d2a8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1104d2ac:	e0bffd17 	ldw	r2,-12(fp)
1104d2b0:	00c00044 	movi	r3,1
1104d2b4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1104d2b8:	e0bffd17 	ldw	r2,-12(fp)
1104d2bc:	10800017 	ldw	r2,0(r2)
1104d2c0:	10800104 	addi	r2,r2,4
1104d2c4:	e0fffd17 	ldw	r3,-12(fp)
1104d2c8:	18c00817 	ldw	r3,32(r3)
1104d2cc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1104d2d0:	e0fffe17 	ldw	r3,-8(fp)
1104d2d4:	e0bfff17 	ldw	r2,-4(fp)
1104d2d8:	d8000015 	stw	zero,0(sp)
1104d2dc:	1809883a 	mov	r4,r3
1104d2e0:	100b883a 	mov	r5,r2
1104d2e4:	01844174 	movhi	r6,4357
1104d2e8:	31b4d404 	addi	r6,r6,-11440
1104d2ec:	e1fffd17 	ldw	r7,-12(fp)
1104d2f0:	104c4740 	call	1104c474 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1104d2f4:	e0bffd17 	ldw	r2,-12(fp)
1104d2f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1104d2fc:	e0bffd17 	ldw	r2,-12(fp)
1104d300:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1104d304:	00800034 	movhi	r2,0
1104d308:	108a1a04 	addi	r2,r2,10344
1104d30c:	10800017 	ldw	r2,0(r2)
1104d310:	1809883a 	mov	r4,r3
1104d314:	100b883a 	mov	r5,r2
1104d318:	01844174 	movhi	r6,4357
1104d31c:	31b55504 	addi	r6,r6,-10924
1104d320:	e1fffd17 	ldw	r7,-12(fp)
1104d324:	104de940 	call	1104de94 <alt_alarm_start>
1104d328:	1000040e 	bge	r2,zero,1104d33c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1104d32c:	e0bffd17 	ldw	r2,-12(fp)
1104d330:	00e00034 	movhi	r3,32768
1104d334:	18ffffc4 	addi	r3,r3,-1
1104d338:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1104d33c:	e037883a 	mov	sp,fp
1104d340:	dfc00117 	ldw	ra,4(sp)
1104d344:	df000017 	ldw	fp,0(sp)
1104d348:	dec00204 	addi	sp,sp,8
1104d34c:	f800283a 	ret

1104d350 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1104d350:	defff804 	addi	sp,sp,-32
1104d354:	df000715 	stw	fp,28(sp)
1104d358:	df000704 	addi	fp,sp,28
1104d35c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1104d360:	e0bfff17 	ldw	r2,-4(fp)
1104d364:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1104d368:	e0bffb17 	ldw	r2,-20(fp)
1104d36c:	10800017 	ldw	r2,0(r2)
1104d370:	e0bffc15 	stw	r2,-16(fp)
1104d374:	00000106 	br	1104d37c <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
1104d378:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1104d37c:	e0bffc17 	ldw	r2,-16(fp)
1104d380:	10800104 	addi	r2,r2,4
1104d384:	10800037 	ldwio	r2,0(r2)
1104d388:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1104d38c:	e0bffd17 	ldw	r2,-12(fp)
1104d390:	1080c00c 	andi	r2,r2,768
1104d394:	10006a26 	beq	r2,zero,1104d540 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1104d398:	e0bffd17 	ldw	r2,-12(fp)
1104d39c:	1080400c 	andi	r2,r2,256
1104d3a0:	10003326 	beq	r2,zero,1104d470 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1104d3a4:	00800074 	movhi	r2,1
1104d3a8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1104d3ac:	e0bffb17 	ldw	r2,-20(fp)
1104d3b0:	10800a17 	ldw	r2,40(r2)
1104d3b4:	10800044 	addi	r2,r2,1
1104d3b8:	1081ffcc 	andi	r2,r2,2047
1104d3bc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1104d3c0:	e0bffb17 	ldw	r2,-20(fp)
1104d3c4:	10c00b17 	ldw	r3,44(r2)
1104d3c8:	e0bffe17 	ldw	r2,-8(fp)
1104d3cc:	18801426 	beq	r3,r2,1104d420 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1104d3d0:	e0bffc17 	ldw	r2,-16(fp)
1104d3d4:	10800037 	ldwio	r2,0(r2)
1104d3d8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1104d3dc:	e0bff917 	ldw	r2,-28(fp)
1104d3e0:	10a0000c 	andi	r2,r2,32768
1104d3e4:	10001026 	beq	r2,zero,1104d428 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1104d3e8:	e0bffb17 	ldw	r2,-20(fp)
1104d3ec:	10800a17 	ldw	r2,40(r2)
1104d3f0:	e0fff917 	ldw	r3,-28(fp)
1104d3f4:	e13ffb17 	ldw	r4,-20(fp)
1104d3f8:	2085883a 	add	r2,r4,r2
1104d3fc:	10800e04 	addi	r2,r2,56
1104d400:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1104d404:	e0bffb17 	ldw	r2,-20(fp)
1104d408:	10800a17 	ldw	r2,40(r2)
1104d40c:	10800044 	addi	r2,r2,1
1104d410:	10c1ffcc 	andi	r3,r2,2047
1104d414:	e0bffb17 	ldw	r2,-20(fp)
1104d418:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1104d41c:	003fe306 	br	1104d3ac <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1104d420:	0001883a 	nop
1104d424:	00000106 	br	1104d42c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1104d428:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1104d42c:	e0bff917 	ldw	r2,-28(fp)
1104d430:	10bfffec 	andhi	r2,r2,65535
1104d434:	10000e26 	beq	r2,zero,1104d470 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1104d438:	e0bffb17 	ldw	r2,-20(fp)
1104d43c:	10c00817 	ldw	r3,32(r2)
1104d440:	00bfff84 	movi	r2,-2
1104d444:	1886703a 	and	r3,r3,r2
1104d448:	e0bffb17 	ldw	r2,-20(fp)
1104d44c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1104d450:	e0bffc17 	ldw	r2,-16(fp)
1104d454:	10800104 	addi	r2,r2,4
1104d458:	e0fffb17 	ldw	r3,-20(fp)
1104d45c:	18c00817 	ldw	r3,32(r3)
1104d460:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1104d464:	e0bffc17 	ldw	r2,-16(fp)
1104d468:	10800104 	addi	r2,r2,4
1104d46c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1104d470:	e0bffd17 	ldw	r2,-12(fp)
1104d474:	1080800c 	andi	r2,r2,512
1104d478:	103fbf26 	beq	r2,zero,1104d378 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1104d47c:	e0bffd17 	ldw	r2,-12(fp)
1104d480:	1004d43a 	srli	r2,r2,16
1104d484:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1104d488:	00001406 	br	1104d4dc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1104d48c:	e0bffc17 	ldw	r2,-16(fp)
1104d490:	e0fffb17 	ldw	r3,-20(fp)
1104d494:	18c00d17 	ldw	r3,52(r3)
1104d498:	e13ffb17 	ldw	r4,-20(fp)
1104d49c:	20c7883a 	add	r3,r4,r3
1104d4a0:	18c20e04 	addi	r3,r3,2104
1104d4a4:	18c00003 	ldbu	r3,0(r3)
1104d4a8:	18c03fcc 	andi	r3,r3,255
1104d4ac:	18c0201c 	xori	r3,r3,128
1104d4b0:	18ffe004 	addi	r3,r3,-128
1104d4b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1104d4b8:	e0bffb17 	ldw	r2,-20(fp)
1104d4bc:	10800d17 	ldw	r2,52(r2)
1104d4c0:	10800044 	addi	r2,r2,1
1104d4c4:	10c1ffcc 	andi	r3,r2,2047
1104d4c8:	e0bffb17 	ldw	r2,-20(fp)
1104d4cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1104d4d0:	e0bffa17 	ldw	r2,-24(fp)
1104d4d4:	10bfffc4 	addi	r2,r2,-1
1104d4d8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1104d4dc:	e0bffa17 	ldw	r2,-24(fp)
1104d4e0:	10000526 	beq	r2,zero,1104d4f8 <altera_avalon_jtag_uart_irq+0x1a8>
1104d4e4:	e0bffb17 	ldw	r2,-20(fp)
1104d4e8:	10c00d17 	ldw	r3,52(r2)
1104d4ec:	e0bffb17 	ldw	r2,-20(fp)
1104d4f0:	10800c17 	ldw	r2,48(r2)
1104d4f4:	18bfe51e 	bne	r3,r2,1104d48c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1104d4f8:	e0bffa17 	ldw	r2,-24(fp)
1104d4fc:	103f9e26 	beq	r2,zero,1104d378 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1104d500:	e0bffb17 	ldw	r2,-20(fp)
1104d504:	10c00817 	ldw	r3,32(r2)
1104d508:	00bfff44 	movi	r2,-3
1104d50c:	1886703a 	and	r3,r3,r2
1104d510:	e0bffb17 	ldw	r2,-20(fp)
1104d514:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1104d518:	e0bffb17 	ldw	r2,-20(fp)
1104d51c:	10800017 	ldw	r2,0(r2)
1104d520:	10800104 	addi	r2,r2,4
1104d524:	e0fffb17 	ldw	r3,-20(fp)
1104d528:	18c00817 	ldw	r3,32(r3)
1104d52c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1104d530:	e0bffc17 	ldw	r2,-16(fp)
1104d534:	10800104 	addi	r2,r2,4
1104d538:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1104d53c:	003f8e06 	br	1104d378 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1104d540:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1104d544:	e037883a 	mov	sp,fp
1104d548:	df000017 	ldw	fp,0(sp)
1104d54c:	dec00104 	addi	sp,sp,4
1104d550:	f800283a 	ret

1104d554 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1104d554:	defffc04 	addi	sp,sp,-16
1104d558:	df000315 	stw	fp,12(sp)
1104d55c:	df000304 	addi	fp,sp,12
1104d560:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1104d564:	e0bfff17 	ldw	r2,-4(fp)
1104d568:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1104d56c:	e0bffd17 	ldw	r2,-12(fp)
1104d570:	10800017 	ldw	r2,0(r2)
1104d574:	10800104 	addi	r2,r2,4
1104d578:	10800037 	ldwio	r2,0(r2)
1104d57c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1104d580:	e0bffe17 	ldw	r2,-8(fp)
1104d584:	1081000c 	andi	r2,r2,1024
1104d588:	10000a26 	beq	r2,zero,1104d5b4 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1104d58c:	e0bffd17 	ldw	r2,-12(fp)
1104d590:	10800017 	ldw	r2,0(r2)
1104d594:	10800104 	addi	r2,r2,4
1104d598:	e0fffd17 	ldw	r3,-12(fp)
1104d59c:	18c00817 	ldw	r3,32(r3)
1104d5a0:	18c10014 	ori	r3,r3,1024
1104d5a4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
1104d5a8:	e0bffd17 	ldw	r2,-12(fp)
1104d5ac:	10000915 	stw	zero,36(r2)
1104d5b0:	00000a06 	br	1104d5dc <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1104d5b4:	e0bffd17 	ldw	r2,-12(fp)
1104d5b8:	10800917 	ldw	r2,36(r2)
1104d5bc:	00e00034 	movhi	r3,32768
1104d5c0:	18ffff04 	addi	r3,r3,-4
1104d5c4:	18800536 	bltu	r3,r2,1104d5dc <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
1104d5c8:	e0bffd17 	ldw	r2,-12(fp)
1104d5cc:	10800917 	ldw	r2,36(r2)
1104d5d0:	10c00044 	addi	r3,r2,1
1104d5d4:	e0bffd17 	ldw	r2,-12(fp)
1104d5d8:	10c00915 	stw	r3,36(r2)
1104d5dc:	00800034 	movhi	r2,0
1104d5e0:	108a1a04 	addi	r2,r2,10344
1104d5e4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1104d5e8:	e037883a 	mov	sp,fp
1104d5ec:	df000017 	ldw	fp,0(sp)
1104d5f0:	dec00104 	addi	sp,sp,4
1104d5f4:	f800283a 	ret

1104d5f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1104d5f8:	defffd04 	addi	sp,sp,-12
1104d5fc:	df000215 	stw	fp,8(sp)
1104d600:	df000204 	addi	fp,sp,8
1104d604:	e13ffe15 	stw	r4,-8(fp)
1104d608:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1104d60c:	00000506 	br	1104d624 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1104d610:	e0bfff17 	ldw	r2,-4(fp)
1104d614:	1090000c 	andi	r2,r2,16384
1104d618:	10000226 	beq	r2,zero,1104d624 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1104d61c:	00bffd44 	movi	r2,-11
1104d620:	00000b06 	br	1104d650 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1104d624:	e0bffe17 	ldw	r2,-8(fp)
1104d628:	10c00d17 	ldw	r3,52(r2)
1104d62c:	e0bffe17 	ldw	r2,-8(fp)
1104d630:	10800c17 	ldw	r2,48(r2)
1104d634:	18800526 	beq	r3,r2,1104d64c <altera_avalon_jtag_uart_close+0x54>
1104d638:	e0bffe17 	ldw	r2,-8(fp)
1104d63c:	10c00917 	ldw	r3,36(r2)
1104d640:	e0bffe17 	ldw	r2,-8(fp)
1104d644:	10800117 	ldw	r2,4(r2)
1104d648:	18bff136 	bltu	r3,r2,1104d610 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1104d64c:	0005883a 	mov	r2,zero
}
1104d650:	e037883a 	mov	sp,fp
1104d654:	df000017 	ldw	fp,0(sp)
1104d658:	dec00104 	addi	sp,sp,4
1104d65c:	f800283a 	ret

1104d660 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1104d660:	defffa04 	addi	sp,sp,-24
1104d664:	df000515 	stw	fp,20(sp)
1104d668:	df000504 	addi	fp,sp,20
1104d66c:	e13ffd15 	stw	r4,-12(fp)
1104d670:	e17ffe15 	stw	r5,-8(fp)
1104d674:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1104d678:	00bff9c4 	movi	r2,-25
1104d67c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1104d680:	e0bffe17 	ldw	r2,-8(fp)
1104d684:	10da8060 	cmpeqi	r3,r2,27137
1104d688:	1800031e 	bne	r3,zero,1104d698 <altera_avalon_jtag_uart_ioctl+0x38>
1104d68c:	109a80a0 	cmpeqi	r2,r2,27138
1104d690:	1000181e 	bne	r2,zero,1104d6f4 <altera_avalon_jtag_uart_ioctl+0x94>
1104d694:	00002606 	br	1104d730 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1104d698:	e0bffd17 	ldw	r2,-12(fp)
1104d69c:	10c00117 	ldw	r3,4(r2)
1104d6a0:	00a00034 	movhi	r2,32768
1104d6a4:	10bfffc4 	addi	r2,r2,-1
1104d6a8:	18802226 	beq	r3,r2,1104d734 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
1104d6ac:	e0bfff17 	ldw	r2,-4(fp)
1104d6b0:	10800017 	ldw	r2,0(r2)
1104d6b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1104d6b8:	e0bffc17 	ldw	r2,-16(fp)
1104d6bc:	10800090 	cmplti	r2,r2,2
1104d6c0:	1000061e 	bne	r2,zero,1104d6dc <altera_avalon_jtag_uart_ioctl+0x7c>
1104d6c4:	e0fffc17 	ldw	r3,-16(fp)
1104d6c8:	00a00034 	movhi	r2,32768
1104d6cc:	10bfffc4 	addi	r2,r2,-1
1104d6d0:	18800226 	beq	r3,r2,1104d6dc <altera_avalon_jtag_uart_ioctl+0x7c>
1104d6d4:	e0bffc17 	ldw	r2,-16(fp)
1104d6d8:	00000206 	br	1104d6e4 <altera_avalon_jtag_uart_ioctl+0x84>
1104d6dc:	00a00034 	movhi	r2,32768
1104d6e0:	10bfff84 	addi	r2,r2,-2
1104d6e4:	e0fffd17 	ldw	r3,-12(fp)
1104d6e8:	18800115 	stw	r2,4(r3)
      rc = 0;
1104d6ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1104d6f0:	00001006 	br	1104d734 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1104d6f4:	e0bffd17 	ldw	r2,-12(fp)
1104d6f8:	10c00117 	ldw	r3,4(r2)
1104d6fc:	00a00034 	movhi	r2,32768
1104d700:	10bfffc4 	addi	r2,r2,-1
1104d704:	18800d26 	beq	r3,r2,1104d73c <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1104d708:	e0bffd17 	ldw	r2,-12(fp)
1104d70c:	10c00917 	ldw	r3,36(r2)
1104d710:	e0bffd17 	ldw	r2,-12(fp)
1104d714:	10800117 	ldw	r2,4(r2)
1104d718:	1885803a 	cmpltu	r2,r3,r2
1104d71c:	10c03fcc 	andi	r3,r2,255
1104d720:	e0bfff17 	ldw	r2,-4(fp)
1104d724:	10c00015 	stw	r3,0(r2)
      rc = 0;
1104d728:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1104d72c:	00000306 	br	1104d73c <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
1104d730:	00000306 	br	1104d740 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1104d734:	0001883a 	nop
1104d738:	00000106 	br	1104d740 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1104d73c:	0001883a 	nop

  default:
    break;
  }

  return rc;
1104d740:	e0bffb17 	ldw	r2,-20(fp)
}
1104d744:	e037883a 	mov	sp,fp
1104d748:	df000017 	ldw	fp,0(sp)
1104d74c:	dec00104 	addi	sp,sp,4
1104d750:	f800283a 	ret

1104d754 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1104d754:	defff304 	addi	sp,sp,-52
1104d758:	dfc00c15 	stw	ra,48(sp)
1104d75c:	df000b15 	stw	fp,44(sp)
1104d760:	df000b04 	addi	fp,sp,44
1104d764:	e13ffc15 	stw	r4,-16(fp)
1104d768:	e17ffd15 	stw	r5,-12(fp)
1104d76c:	e1bffe15 	stw	r6,-8(fp)
1104d770:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1104d774:	e0bffd17 	ldw	r2,-12(fp)
1104d778:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1104d77c:	00004706 	br	1104d89c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1104d780:	e0bffc17 	ldw	r2,-16(fp)
1104d784:	10800a17 	ldw	r2,40(r2)
1104d788:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1104d78c:	e0bffc17 	ldw	r2,-16(fp)
1104d790:	10800b17 	ldw	r2,44(r2)
1104d794:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1104d798:	e0fff717 	ldw	r3,-36(fp)
1104d79c:	e0bff817 	ldw	r2,-32(fp)
1104d7a0:	18800536 	bltu	r3,r2,1104d7b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1104d7a4:	e0fff717 	ldw	r3,-36(fp)
1104d7a8:	e0bff817 	ldw	r2,-32(fp)
1104d7ac:	1885c83a 	sub	r2,r3,r2
1104d7b0:	e0bff615 	stw	r2,-40(fp)
1104d7b4:	00000406 	br	1104d7c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1104d7b8:	00c20004 	movi	r3,2048
1104d7bc:	e0bff817 	ldw	r2,-32(fp)
1104d7c0:	1885c83a 	sub	r2,r3,r2
1104d7c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1104d7c8:	e0bff617 	ldw	r2,-40(fp)
1104d7cc:	10001e26 	beq	r2,zero,1104d848 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1104d7d0:	e0fffe17 	ldw	r3,-8(fp)
1104d7d4:	e0bff617 	ldw	r2,-40(fp)
1104d7d8:	1880022e 	bgeu	r3,r2,1104d7e4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1104d7dc:	e0bffe17 	ldw	r2,-8(fp)
1104d7e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1104d7e4:	e0bff817 	ldw	r2,-32(fp)
1104d7e8:	10800e04 	addi	r2,r2,56
1104d7ec:	e0fffc17 	ldw	r3,-16(fp)
1104d7f0:	1885883a 	add	r2,r3,r2
1104d7f4:	e13ff517 	ldw	r4,-44(fp)
1104d7f8:	100b883a 	mov	r5,r2
1104d7fc:	e1bff617 	ldw	r6,-40(fp)
1104d800:	1048e600 	call	11048e60 <memcpy>
      ptr   += n;
1104d804:	e0fff517 	ldw	r3,-44(fp)
1104d808:	e0bff617 	ldw	r2,-40(fp)
1104d80c:	1885883a 	add	r2,r3,r2
1104d810:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1104d814:	e0fffe17 	ldw	r3,-8(fp)
1104d818:	e0bff617 	ldw	r2,-40(fp)
1104d81c:	1885c83a 	sub	r2,r3,r2
1104d820:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1104d824:	e0fff817 	ldw	r3,-32(fp)
1104d828:	e0bff617 	ldw	r2,-40(fp)
1104d82c:	1885883a 	add	r2,r3,r2
1104d830:	10c1ffcc 	andi	r3,r2,2047
1104d834:	e0bffc17 	ldw	r2,-16(fp)
1104d838:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1104d83c:	e0bffe17 	ldw	r2,-8(fp)
1104d840:	00bfcf16 	blt	zero,r2,1104d780 <altera_avalon_jtag_uart_read+0x2c>
1104d844:	00000106 	br	1104d84c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1104d848:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1104d84c:	e0fff517 	ldw	r3,-44(fp)
1104d850:	e0bffd17 	ldw	r2,-12(fp)
1104d854:	1880141e 	bne	r3,r2,1104d8a8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1104d858:	e0bfff17 	ldw	r2,-4(fp)
1104d85c:	1090000c 	andi	r2,r2,16384
1104d860:	1000131e 	bne	r2,zero,1104d8b0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1104d864:	0001883a 	nop
1104d868:	e0bffc17 	ldw	r2,-16(fp)
1104d86c:	10c00a17 	ldw	r3,40(r2)
1104d870:	e0bff717 	ldw	r2,-36(fp)
1104d874:	1880051e 	bne	r3,r2,1104d88c <altera_avalon_jtag_uart_read+0x138>
1104d878:	e0bffc17 	ldw	r2,-16(fp)
1104d87c:	10c00917 	ldw	r3,36(r2)
1104d880:	e0bffc17 	ldw	r2,-16(fp)
1104d884:	10800117 	ldw	r2,4(r2)
1104d888:	18bff736 	bltu	r3,r2,1104d868 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1104d88c:	e0bffc17 	ldw	r2,-16(fp)
1104d890:	10c00a17 	ldw	r3,40(r2)
1104d894:	e0bff717 	ldw	r2,-36(fp)
1104d898:	18800726 	beq	r3,r2,1104d8b8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1104d89c:	e0bffe17 	ldw	r2,-8(fp)
1104d8a0:	00bfb716 	blt	zero,r2,1104d780 <altera_avalon_jtag_uart_read+0x2c>
1104d8a4:	00000506 	br	1104d8bc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1104d8a8:	0001883a 	nop
1104d8ac:	00000306 	br	1104d8bc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1104d8b0:	0001883a 	nop
1104d8b4:	00000106 	br	1104d8bc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1104d8b8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1104d8bc:	e0fff517 	ldw	r3,-44(fp)
1104d8c0:	e0bffd17 	ldw	r2,-12(fp)
1104d8c4:	18801726 	beq	r3,r2,1104d924 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104d8c8:	0005303a 	rdctl	r2,status
1104d8cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104d8d0:	e0fffa17 	ldw	r3,-24(fp)
1104d8d4:	00bfff84 	movi	r2,-2
1104d8d8:	1884703a 	and	r2,r3,r2
1104d8dc:	1001703a 	wrctl	status,r2
  
  return context;
1104d8e0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1104d8e4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1104d8e8:	e0bffc17 	ldw	r2,-16(fp)
1104d8ec:	10800817 	ldw	r2,32(r2)
1104d8f0:	10c00054 	ori	r3,r2,1
1104d8f4:	e0bffc17 	ldw	r2,-16(fp)
1104d8f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1104d8fc:	e0bffc17 	ldw	r2,-16(fp)
1104d900:	10800017 	ldw	r2,0(r2)
1104d904:	10800104 	addi	r2,r2,4
1104d908:	e0fffc17 	ldw	r3,-16(fp)
1104d90c:	18c00817 	ldw	r3,32(r3)
1104d910:	10c00035 	stwio	r3,0(r2)
1104d914:	e0bff917 	ldw	r2,-28(fp)
1104d918:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104d91c:	e0bffb17 	ldw	r2,-20(fp)
1104d920:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1104d924:	e0fff517 	ldw	r3,-44(fp)
1104d928:	e0bffd17 	ldw	r2,-12(fp)
1104d92c:	18800426 	beq	r3,r2,1104d940 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
1104d930:	e0fff517 	ldw	r3,-44(fp)
1104d934:	e0bffd17 	ldw	r2,-12(fp)
1104d938:	1885c83a 	sub	r2,r3,r2
1104d93c:	00000606 	br	1104d958 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
1104d940:	e0bfff17 	ldw	r2,-4(fp)
1104d944:	1090000c 	andi	r2,r2,16384
1104d948:	10000226 	beq	r2,zero,1104d954 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
1104d94c:	00bffd44 	movi	r2,-11
1104d950:	00000106 	br	1104d958 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
1104d954:	00bffec4 	movi	r2,-5
}
1104d958:	e037883a 	mov	sp,fp
1104d95c:	dfc00117 	ldw	ra,4(sp)
1104d960:	df000017 	ldw	fp,0(sp)
1104d964:	dec00204 	addi	sp,sp,8
1104d968:	f800283a 	ret

1104d96c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1104d96c:	defff304 	addi	sp,sp,-52
1104d970:	dfc00c15 	stw	ra,48(sp)
1104d974:	df000b15 	stw	fp,44(sp)
1104d978:	df000b04 	addi	fp,sp,44
1104d97c:	e13ffc15 	stw	r4,-16(fp)
1104d980:	e17ffd15 	stw	r5,-12(fp)
1104d984:	e1bffe15 	stw	r6,-8(fp)
1104d988:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1104d98c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1104d990:	e0bffd17 	ldw	r2,-12(fp)
1104d994:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1104d998:	00003706 	br	1104da78 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1104d99c:	e0bffc17 	ldw	r2,-16(fp)
1104d9a0:	10800c17 	ldw	r2,48(r2)
1104d9a4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1104d9a8:	e0bffc17 	ldw	r2,-16(fp)
1104d9ac:	10800d17 	ldw	r2,52(r2)
1104d9b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1104d9b4:	e0fff817 	ldw	r3,-32(fp)
1104d9b8:	e0bff517 	ldw	r2,-44(fp)
1104d9bc:	1880062e 	bgeu	r3,r2,1104d9d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1104d9c0:	e0fff517 	ldw	r3,-44(fp)
1104d9c4:	e0bff817 	ldw	r2,-32(fp)
1104d9c8:	1885c83a 	sub	r2,r3,r2
1104d9cc:	10bfffc4 	addi	r2,r2,-1
1104d9d0:	e0bff615 	stw	r2,-40(fp)
1104d9d4:	00000b06 	br	1104da04 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1104d9d8:	e0bff517 	ldw	r2,-44(fp)
1104d9dc:	10000526 	beq	r2,zero,1104d9f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1104d9e0:	00c20004 	movi	r3,2048
1104d9e4:	e0bff817 	ldw	r2,-32(fp)
1104d9e8:	1885c83a 	sub	r2,r3,r2
1104d9ec:	e0bff615 	stw	r2,-40(fp)
1104d9f0:	00000406 	br	1104da04 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1104d9f4:	00c1ffc4 	movi	r3,2047
1104d9f8:	e0bff817 	ldw	r2,-32(fp)
1104d9fc:	1885c83a 	sub	r2,r3,r2
1104da00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1104da04:	e0bff617 	ldw	r2,-40(fp)
1104da08:	10001e26 	beq	r2,zero,1104da84 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1104da0c:	e0fffe17 	ldw	r3,-8(fp)
1104da10:	e0bff617 	ldw	r2,-40(fp)
1104da14:	1880022e 	bgeu	r3,r2,1104da20 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1104da18:	e0bffe17 	ldw	r2,-8(fp)
1104da1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1104da20:	e0bff817 	ldw	r2,-32(fp)
1104da24:	10820e04 	addi	r2,r2,2104
1104da28:	e0fffc17 	ldw	r3,-16(fp)
1104da2c:	1885883a 	add	r2,r3,r2
1104da30:	1009883a 	mov	r4,r2
1104da34:	e17ffd17 	ldw	r5,-12(fp)
1104da38:	e1bff617 	ldw	r6,-40(fp)
1104da3c:	1048e600 	call	11048e60 <memcpy>
      ptr   += n;
1104da40:	e0fffd17 	ldw	r3,-12(fp)
1104da44:	e0bff617 	ldw	r2,-40(fp)
1104da48:	1885883a 	add	r2,r3,r2
1104da4c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1104da50:	e0fffe17 	ldw	r3,-8(fp)
1104da54:	e0bff617 	ldw	r2,-40(fp)
1104da58:	1885c83a 	sub	r2,r3,r2
1104da5c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1104da60:	e0fff817 	ldw	r3,-32(fp)
1104da64:	e0bff617 	ldw	r2,-40(fp)
1104da68:	1885883a 	add	r2,r3,r2
1104da6c:	10c1ffcc 	andi	r3,r2,2047
1104da70:	e0bffc17 	ldw	r2,-16(fp)
1104da74:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1104da78:	e0bffe17 	ldw	r2,-8(fp)
1104da7c:	00bfc716 	blt	zero,r2,1104d99c <altera_avalon_jtag_uart_write+0x30>
1104da80:	00000106 	br	1104da88 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1104da84:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104da88:	0005303a 	rdctl	r2,status
1104da8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104da90:	e0fffa17 	ldw	r3,-24(fp)
1104da94:	00bfff84 	movi	r2,-2
1104da98:	1884703a 	and	r2,r3,r2
1104da9c:	1001703a 	wrctl	status,r2
  
  return context;
1104daa0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1104daa4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1104daa8:	e0bffc17 	ldw	r2,-16(fp)
1104daac:	10800817 	ldw	r2,32(r2)
1104dab0:	10c00094 	ori	r3,r2,2
1104dab4:	e0bffc17 	ldw	r2,-16(fp)
1104dab8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1104dabc:	e0bffc17 	ldw	r2,-16(fp)
1104dac0:	10800017 	ldw	r2,0(r2)
1104dac4:	10800104 	addi	r2,r2,4
1104dac8:	e0fffc17 	ldw	r3,-16(fp)
1104dacc:	18c00817 	ldw	r3,32(r3)
1104dad0:	10c00035 	stwio	r3,0(r2)
1104dad4:	e0bff917 	ldw	r2,-28(fp)
1104dad8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104dadc:	e0bffb17 	ldw	r2,-20(fp)
1104dae0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1104dae4:	e0bffe17 	ldw	r2,-8(fp)
1104dae8:	0080110e 	bge	zero,r2,1104db30 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1104daec:	e0bfff17 	ldw	r2,-4(fp)
1104daf0:	1090000c 	andi	r2,r2,16384
1104daf4:	1000111e 	bne	r2,zero,1104db3c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1104daf8:	0001883a 	nop
1104dafc:	e0bffc17 	ldw	r2,-16(fp)
1104db00:	10c00d17 	ldw	r3,52(r2)
1104db04:	e0bff517 	ldw	r2,-44(fp)
1104db08:	1880051e 	bne	r3,r2,1104db20 <altera_avalon_jtag_uart_write+0x1b4>
1104db0c:	e0bffc17 	ldw	r2,-16(fp)
1104db10:	10c00917 	ldw	r3,36(r2)
1104db14:	e0bffc17 	ldw	r2,-16(fp)
1104db18:	10800117 	ldw	r2,4(r2)
1104db1c:	18bff736 	bltu	r3,r2,1104dafc <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
1104db20:	e0bffc17 	ldw	r2,-16(fp)
1104db24:	10c00d17 	ldw	r3,52(r2)
1104db28:	e0bff517 	ldw	r2,-44(fp)
1104db2c:	18800526 	beq	r3,r2,1104db44 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1104db30:	e0bffe17 	ldw	r2,-8(fp)
1104db34:	00bfd016 	blt	zero,r2,1104da78 <altera_avalon_jtag_uart_write+0x10c>
1104db38:	00000306 	br	1104db48 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1104db3c:	0001883a 	nop
1104db40:	00000106 	br	1104db48 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
1104db44:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1104db48:	e0fffd17 	ldw	r3,-12(fp)
1104db4c:	e0bff717 	ldw	r2,-36(fp)
1104db50:	18800426 	beq	r3,r2,1104db64 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1104db54:	e0fffd17 	ldw	r3,-12(fp)
1104db58:	e0bff717 	ldw	r2,-36(fp)
1104db5c:	1885c83a 	sub	r2,r3,r2
1104db60:	00000606 	br	1104db7c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1104db64:	e0bfff17 	ldw	r2,-4(fp)
1104db68:	1090000c 	andi	r2,r2,16384
1104db6c:	10000226 	beq	r2,zero,1104db78 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1104db70:	00bffd44 	movi	r2,-11
1104db74:	00000106 	br	1104db7c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1104db78:	00bffec4 	movi	r2,-5
}
1104db7c:	e037883a 	mov	sp,fp
1104db80:	dfc00117 	ldw	ra,4(sp)
1104db84:	df000017 	ldw	fp,0(sp)
1104db88:	dec00204 	addi	sp,sp,8
1104db8c:	f800283a 	ret

1104db90 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
1104db90:	defff404 	addi	sp,sp,-48
1104db94:	df000b15 	stw	fp,44(sp)
1104db98:	df000b04 	addi	fp,sp,44
1104db9c:	e13ffc15 	stw	r4,-16(fp)
1104dba0:	e17ffd15 	stw	r5,-12(fp)
1104dba4:	e1bffe15 	stw	r6,-8(fp)
1104dba8:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
1104dbac:	e0ffff17 	ldw	r3,-4(fp)
1104dbb0:	e0bffe17 	ldw	r2,-8(fp)
1104dbb4:	1885883a 	add	r2,r3,r2
1104dbb8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
1104dbbc:	e0c00217 	ldw	r3,8(fp)
1104dbc0:	e0800117 	ldw	r2,4(fp)
1104dbc4:	1885883a 	add	r2,r3,r2
1104dbc8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
1104dbcc:	e0800117 	ldw	r2,4(fp)
1104dbd0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
1104dbd4:	e0bffe17 	ldw	r2,-8(fp)
1104dbd8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
1104dbdc:	00800044 	movi	r2,1
1104dbe0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
1104dbe4:	e0bffc17 	ldw	r2,-16(fp)
1104dbe8:	10800504 	addi	r2,r2,20
1104dbec:	e0fffd17 	ldw	r3,-12(fp)
1104dbf0:	01000044 	movi	r4,1
1104dbf4:	20c6983a 	sll	r3,r4,r3
1104dbf8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
1104dbfc:	e0800317 	ldw	r2,12(fp)
1104dc00:	1080008c 	andi	r2,r2,2
1104dc04:	1000041e 	bne	r2,zero,1104dc18 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
1104dc08:	e0bffc17 	ldw	r2,-16(fp)
1104dc0c:	10800304 	addi	r2,r2,12
1104dc10:	00c10004 	movi	r3,1024
1104dc14:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
1104dc18:	e0bffc17 	ldw	r2,-16(fp)
1104dc1c:	10800037 	ldwio	r2,0(r2)
1104dc20:	00000106 	br	1104dc28 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
1104dc24:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
1104dc28:	e0bffc17 	ldw	r2,-16(fp)
1104dc2c:	10800204 	addi	r2,r2,8
1104dc30:	10800037 	ldwio	r2,0(r2)
1104dc34:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
1104dc38:	e0bffa17 	ldw	r2,-24(fp)
1104dc3c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
1104dc40:	10000226 	beq	r2,zero,1104dc4c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
1104dc44:	e0bff717 	ldw	r2,-36(fp)
1104dc48:	1000031e 	bne	r2,zero,1104dc58 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
1104dc4c:	e0bffa17 	ldw	r2,-24(fp)
1104dc50:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
1104dc54:	103ff426 	beq	r2,zero,1104dc28 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
1104dc58:	e0bffa17 	ldw	r2,-24(fp)
1104dc5c:	1080100c 	andi	r2,r2,64
1104dc60:	10001e26 	beq	r2,zero,1104dcdc <alt_avalon_spi_command+0x14c>
1104dc64:	e0bff717 	ldw	r2,-36(fp)
1104dc68:	00801c0e 	bge	zero,r2,1104dcdc <alt_avalon_spi_command+0x14c>
    {
      credits--;
1104dc6c:	e0bff717 	ldw	r2,-36(fp)
1104dc70:	10bfffc4 	addi	r2,r2,-1
1104dc74:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
1104dc78:	e0ffff17 	ldw	r3,-4(fp)
1104dc7c:	e0bff817 	ldw	r2,-32(fp)
1104dc80:	18800a2e 	bgeu	r3,r2,1104dcac <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
1104dc84:	e0bffc17 	ldw	r2,-16(fp)
1104dc88:	10800104 	addi	r2,r2,4
1104dc8c:	e0ffff17 	ldw	r3,-4(fp)
1104dc90:	18c00003 	ldbu	r3,0(r3)
1104dc94:	18c03fcc 	andi	r3,r3,255
1104dc98:	e13fff17 	ldw	r4,-4(fp)
1104dc9c:	21000044 	addi	r4,r4,1
1104dca0:	e13fff15 	stw	r4,-4(fp)
1104dca4:	10c00035 	stwio	r3,0(r2)
1104dca8:	00000c06 	br	1104dcdc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
1104dcac:	e0bff517 	ldw	r2,-44(fp)
1104dcb0:	10000826 	beq	r2,zero,1104dcd4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
1104dcb4:	e0bff517 	ldw	r2,-44(fp)
1104dcb8:	10bfffc4 	addi	r2,r2,-1
1104dcbc:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
1104dcc0:	e0bffc17 	ldw	r2,-16(fp)
1104dcc4:	10800104 	addi	r2,r2,4
1104dcc8:	0007883a 	mov	r3,zero
1104dccc:	10c00035 	stwio	r3,0(r2)
1104dcd0:	00000206 	br	1104dcdc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
1104dcd4:	00bf0004 	movi	r2,-1024
1104dcd8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
1104dcdc:	e0bffa17 	ldw	r2,-24(fp)
1104dce0:	1080200c 	andi	r2,r2,128
1104dce4:	103fcf26 	beq	r2,zero,1104dc24 <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
1104dce8:	e0bffc17 	ldw	r2,-16(fp)
1104dcec:	10800037 	ldwio	r2,0(r2)
1104dcf0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
1104dcf4:	e0bff617 	ldw	r2,-40(fp)
1104dcf8:	10000426 	beq	r2,zero,1104dd0c <alt_avalon_spi_command+0x17c>
        read_ignore--;
1104dcfc:	e0bff617 	ldw	r2,-40(fp)
1104dd00:	10bfffc4 	addi	r2,r2,-1
1104dd04:	e0bff615 	stw	r2,-40(fp)
1104dd08:	00000706 	br	1104dd28 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
1104dd0c:	e0bffb17 	ldw	r2,-20(fp)
1104dd10:	1007883a 	mov	r3,r2
1104dd14:	e0800217 	ldw	r2,8(fp)
1104dd18:	10c00005 	stb	r3,0(r2)
1104dd1c:	e0800217 	ldw	r2,8(fp)
1104dd20:	10800044 	addi	r2,r2,1
1104dd24:	e0800215 	stw	r2,8(fp)
      credits++;
1104dd28:	e0bff717 	ldw	r2,-36(fp)
1104dd2c:	10800044 	addi	r2,r2,1
1104dd30:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
1104dd34:	e0bff617 	ldw	r2,-40(fp)
1104dd38:	103fba1e 	bne	r2,zero,1104dc24 <alt_avalon_spi_command+0x94>
1104dd3c:	e0c00217 	ldw	r3,8(fp)
1104dd40:	e0bff917 	ldw	r2,-28(fp)
1104dd44:	18bfb71e 	bne	r3,r2,1104dc24 <alt_avalon_spi_command+0x94>
        break;
1104dd48:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
1104dd4c:	e0bffc17 	ldw	r2,-16(fp)
1104dd50:	10800204 	addi	r2,r2,8
1104dd54:	10800037 	ldwio	r2,0(r2)
1104dd58:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
1104dd5c:	e0bffa17 	ldw	r2,-24(fp)
1104dd60:	1080080c 	andi	r2,r2,32
1104dd64:	103ff926 	beq	r2,zero,1104dd4c <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
1104dd68:	e0800317 	ldw	r2,12(fp)
1104dd6c:	1080004c 	andi	r2,r2,1
1104dd70:	1000041e 	bne	r2,zero,1104dd84 <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
1104dd74:	e0bffc17 	ldw	r2,-16(fp)
1104dd78:	10800304 	addi	r2,r2,12
1104dd7c:	0007883a 	mov	r3,zero
1104dd80:	10c00035 	stwio	r3,0(r2)

  return read_length;
1104dd84:	e0800117 	ldw	r2,4(fp)
}
1104dd88:	e037883a 	mov	sp,fp
1104dd8c:	df000017 	ldw	fp,0(sp)
1104dd90:	dec00104 	addi	sp,sp,4
1104dd94:	f800283a 	ret

1104dd98 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
1104dd98:	defffa04 	addi	sp,sp,-24
1104dd9c:	dfc00515 	stw	ra,20(sp)
1104dda0:	df000415 	stw	fp,16(sp)
1104dda4:	df000404 	addi	fp,sp,16
1104dda8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
1104ddac:	0007883a 	mov	r3,zero
1104ddb0:	e0bfff17 	ldw	r2,-4(fp)
1104ddb4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
1104ddb8:	e0bfff17 	ldw	r2,-4(fp)
1104ddbc:	10800104 	addi	r2,r2,4
1104ddc0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104ddc4:	0005303a 	rdctl	r2,status
1104ddc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104ddcc:	e0fffd17 	ldw	r3,-12(fp)
1104ddd0:	00bfff84 	movi	r2,-2
1104ddd4:	1884703a 	and	r2,r3,r2
1104ddd8:	1001703a 	wrctl	status,r2
  
  return context;
1104dddc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
1104dde0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
1104dde4:	104e7840 	call	1104e784 <alt_tick>
1104dde8:	e0bffc17 	ldw	r2,-16(fp)
1104ddec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104ddf0:	e0bffe17 	ldw	r2,-8(fp)
1104ddf4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
1104ddf8:	e037883a 	mov	sp,fp
1104ddfc:	dfc00117 	ldw	ra,4(sp)
1104de00:	df000017 	ldw	fp,0(sp)
1104de04:	dec00204 	addi	sp,sp,8
1104de08:	f800283a 	ret

1104de0c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
1104de0c:	defff804 	addi	sp,sp,-32
1104de10:	dfc00715 	stw	ra,28(sp)
1104de14:	df000615 	stw	fp,24(sp)
1104de18:	df000604 	addi	fp,sp,24
1104de1c:	e13ffc15 	stw	r4,-16(fp)
1104de20:	e17ffd15 	stw	r5,-12(fp)
1104de24:	e1bffe15 	stw	r6,-8(fp)
1104de28:	e1ffff15 	stw	r7,-4(fp)
1104de2c:	e0bfff17 	ldw	r2,-4(fp)
1104de30:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
1104de34:	00800034 	movhi	r2,0
1104de38:	108a1a04 	addi	r2,r2,10344
1104de3c:	10800017 	ldw	r2,0(r2)
1104de40:	1000041e 	bne	r2,zero,1104de54 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
1104de44:	00800034 	movhi	r2,0
1104de48:	108a1a04 	addi	r2,r2,10344
1104de4c:	e0fffb17 	ldw	r3,-20(fp)
1104de50:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
1104de54:	e0bffc17 	ldw	r2,-16(fp)
1104de58:	10800104 	addi	r2,r2,4
1104de5c:	00c001c4 	movi	r3,7
1104de60:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
1104de64:	d8000015 	stw	zero,0(sp)
1104de68:	e13ffd17 	ldw	r4,-12(fp)
1104de6c:	e17ffe17 	ldw	r5,-8(fp)
1104de70:	01844174 	movhi	r6,4357
1104de74:	31b76604 	addi	r6,r6,-8808
1104de78:	e1fffc17 	ldw	r7,-16(fp)
1104de7c:	104c4740 	call	1104c474 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
1104de80:	e037883a 	mov	sp,fp
1104de84:	dfc00117 	ldw	ra,4(sp)
1104de88:	df000017 	ldw	fp,0(sp)
1104de8c:	dec00204 	addi	sp,sp,8
1104de90:	f800283a 	ret

1104de94 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1104de94:	defff504 	addi	sp,sp,-44
1104de98:	df000a15 	stw	fp,40(sp)
1104de9c:	df000a04 	addi	fp,sp,40
1104dea0:	e13ffc15 	stw	r4,-16(fp)
1104dea4:	e17ffd15 	stw	r5,-12(fp)
1104dea8:	e1bffe15 	stw	r6,-8(fp)
1104deac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1104deb0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1104deb4:	00800034 	movhi	r2,0
1104deb8:	108a1a04 	addi	r2,r2,10344
1104debc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1104dec0:	10003f26 	beq	r2,zero,1104dfc0 <alt_alarm_start+0x12c>
  {
    if (alarm)
1104dec4:	e0bffc17 	ldw	r2,-16(fp)
1104dec8:	10003b26 	beq	r2,zero,1104dfb8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1104decc:	e0bffc17 	ldw	r2,-16(fp)
1104ded0:	e0fffe17 	ldw	r3,-8(fp)
1104ded4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1104ded8:	e0bffc17 	ldw	r2,-16(fp)
1104dedc:	e0ffff17 	ldw	r3,-4(fp)
1104dee0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104dee4:	0005303a 	rdctl	r2,status
1104dee8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104deec:	e0fff817 	ldw	r3,-32(fp)
1104def0:	00bfff84 	movi	r2,-2
1104def4:	1884703a 	and	r2,r3,r2
1104def8:	1001703a 	wrctl	status,r2
  
  return context;
1104defc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1104df00:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1104df04:	00800034 	movhi	r2,0
1104df08:	108a1b04 	addi	r2,r2,10348
1104df0c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1104df10:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1104df14:	e0fffd17 	ldw	r3,-12(fp)
1104df18:	e0bff617 	ldw	r2,-40(fp)
1104df1c:	1885883a 	add	r2,r3,r2
1104df20:	10c00044 	addi	r3,r2,1
1104df24:	e0bffc17 	ldw	r2,-16(fp)
1104df28:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1104df2c:	e0bffc17 	ldw	r2,-16(fp)
1104df30:	10c00217 	ldw	r3,8(r2)
1104df34:	e0bff617 	ldw	r2,-40(fp)
1104df38:	1880042e 	bgeu	r3,r2,1104df4c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1104df3c:	e0bffc17 	ldw	r2,-16(fp)
1104df40:	00c00044 	movi	r3,1
1104df44:	10c00405 	stb	r3,16(r2)
1104df48:	00000206 	br	1104df54 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1104df4c:	e0bffc17 	ldw	r2,-16(fp)
1104df50:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1104df54:	e0bffc17 	ldw	r2,-16(fp)
1104df58:	00c00034 	movhi	r3,0
1104df5c:	18ca0a04 	addi	r3,r3,10280
1104df60:	e0fff915 	stw	r3,-28(fp)
1104df64:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1104df68:	e0bffa17 	ldw	r2,-24(fp)
1104df6c:	e0fff917 	ldw	r3,-28(fp)
1104df70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1104df74:	e0bff917 	ldw	r2,-28(fp)
1104df78:	10c00017 	ldw	r3,0(r2)
1104df7c:	e0bffa17 	ldw	r2,-24(fp)
1104df80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1104df84:	e0bff917 	ldw	r2,-28(fp)
1104df88:	10800017 	ldw	r2,0(r2)
1104df8c:	e0fffa17 	ldw	r3,-24(fp)
1104df90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1104df94:	e0bff917 	ldw	r2,-28(fp)
1104df98:	e0fffa17 	ldw	r3,-24(fp)
1104df9c:	10c00015 	stw	r3,0(r2)
1104dfa0:	e0bff717 	ldw	r2,-36(fp)
1104dfa4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104dfa8:	e0bffb17 	ldw	r2,-20(fp)
1104dfac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1104dfb0:	0005883a 	mov	r2,zero
1104dfb4:	00000306 	br	1104dfc4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1104dfb8:	00bffa84 	movi	r2,-22
1104dfbc:	00000106 	br	1104dfc4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1104dfc0:	00bfde84 	movi	r2,-134
  }
}
1104dfc4:	e037883a 	mov	sp,fp
1104dfc8:	df000017 	ldw	fp,0(sp)
1104dfcc:	dec00104 	addi	sp,sp,4
1104dfd0:	f800283a 	ret

1104dfd4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1104dfd4:	defffa04 	addi	sp,sp,-24
1104dfd8:	dfc00515 	stw	ra,20(sp)
1104dfdc:	df000415 	stw	fp,16(sp)
1104dfe0:	df000404 	addi	fp,sp,16
1104dfe4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
1104dfe8:	008000c4 	movi	r2,3
1104dfec:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1104dff0:	e0fffd17 	ldw	r3,-12(fp)
1104dff4:	008003f4 	movhi	r2,15
1104dff8:	10909004 	addi	r2,r2,16960
1104dffc:	1885383a 	mul	r2,r3,r2
1104e000:	01017db4 	movhi	r4,1526
1104e004:	21384004 	addi	r4,r4,-7936
1104e008:	100b883a 	mov	r5,r2
1104e00c:	10431b40 	call	110431b4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1104e010:	01200034 	movhi	r4,32768
1104e014:	213fffc4 	addi	r4,r4,-1
1104e018:	100b883a 	mov	r5,r2
1104e01c:	10431b40 	call	110431b4 <__udivsi3>
1104e020:	e13fff17 	ldw	r4,-4(fp)
1104e024:	100b883a 	mov	r5,r2
1104e028:	10431b40 	call	110431b4 <__udivsi3>
1104e02c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1104e030:	e0bffe17 	ldw	r2,-8(fp)
1104e034:	10002926 	beq	r2,zero,1104e0dc <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
1104e038:	e03ffc15 	stw	zero,-16(fp)
1104e03c:	00001606 	br	1104e098 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1104e040:	00a00034 	movhi	r2,32768
1104e044:	10bfffc4 	addi	r2,r2,-1
1104e048:	10bfffc4 	addi	r2,r2,-1
1104e04c:	103ffe1e 	bne	r2,zero,1104e048 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1104e050:	e0fffd17 	ldw	r3,-12(fp)
1104e054:	008003f4 	movhi	r2,15
1104e058:	10909004 	addi	r2,r2,16960
1104e05c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1104e060:	01017db4 	movhi	r4,1526
1104e064:	21384004 	addi	r4,r4,-7936
1104e068:	100b883a 	mov	r5,r2
1104e06c:	10431b40 	call	110431b4 <__udivsi3>
1104e070:	01200034 	movhi	r4,32768
1104e074:	213fffc4 	addi	r4,r4,-1
1104e078:	100b883a 	mov	r5,r2
1104e07c:	10431b40 	call	110431b4 <__udivsi3>
1104e080:	e0ffff17 	ldw	r3,-4(fp)
1104e084:	1885c83a 	sub	r2,r3,r2
1104e088:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1104e08c:	e0bffc17 	ldw	r2,-16(fp)
1104e090:	10800044 	addi	r2,r2,1
1104e094:	e0bffc15 	stw	r2,-16(fp)
1104e098:	e0fffc17 	ldw	r3,-16(fp)
1104e09c:	e0bffe17 	ldw	r2,-8(fp)
1104e0a0:	18bfe716 	blt	r3,r2,1104e040 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1104e0a4:	e0fffd17 	ldw	r3,-12(fp)
1104e0a8:	008003f4 	movhi	r2,15
1104e0ac:	10909004 	addi	r2,r2,16960
1104e0b0:	1885383a 	mul	r2,r3,r2
1104e0b4:	01017db4 	movhi	r4,1526
1104e0b8:	21384004 	addi	r4,r4,-7936
1104e0bc:	100b883a 	mov	r5,r2
1104e0c0:	10431b40 	call	110431b4 <__udivsi3>
1104e0c4:	1007883a 	mov	r3,r2
1104e0c8:	e0bfff17 	ldw	r2,-4(fp)
1104e0cc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1104e0d0:	10bfffc4 	addi	r2,r2,-1
1104e0d4:	103ffe1e 	bne	r2,zero,1104e0d0 <alt_busy_sleep+0xfc>
1104e0d8:	00000d06 	br	1104e110 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1104e0dc:	e0fffd17 	ldw	r3,-12(fp)
1104e0e0:	008003f4 	movhi	r2,15
1104e0e4:	10909004 	addi	r2,r2,16960
1104e0e8:	1885383a 	mul	r2,r3,r2
1104e0ec:	01017db4 	movhi	r4,1526
1104e0f0:	21384004 	addi	r4,r4,-7936
1104e0f4:	100b883a 	mov	r5,r2
1104e0f8:	10431b40 	call	110431b4 <__udivsi3>
1104e0fc:	1007883a 	mov	r3,r2
1104e100:	e0bfff17 	ldw	r2,-4(fp)
1104e104:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1104e108:	10bfffc4 	addi	r2,r2,-1
1104e10c:	00bffe16 	blt	zero,r2,1104e108 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1104e110:	0005883a 	mov	r2,zero
}
1104e114:	e037883a 	mov	sp,fp
1104e118:	dfc00117 	ldw	ra,4(sp)
1104e11c:	df000017 	ldw	fp,0(sp)
1104e120:	dec00204 	addi	sp,sp,8
1104e124:	f800283a 	ret

1104e128 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1104e128:	defffe04 	addi	sp,sp,-8
1104e12c:	df000115 	stw	fp,4(sp)
1104e130:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1104e134:	e03fff15 	stw	zero,-4(fp)
1104e138:	00000506 	br	1104e150 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
1104e13c:	e0bfff17 	ldw	r2,-4(fp)
1104e140:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1104e144:	e0bfff17 	ldw	r2,-4(fp)
1104e148:	10800804 	addi	r2,r2,32
1104e14c:	e0bfff15 	stw	r2,-4(fp)
1104e150:	e0bfff17 	ldw	r2,-4(fp)
1104e154:	10820030 	cmpltui	r2,r2,2048
1104e158:	103ff81e 	bne	r2,zero,1104e13c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1104e15c:	e037883a 	mov	sp,fp
1104e160:	df000017 	ldw	fp,0(sp)
1104e164:	dec00104 	addi	sp,sp,4
1104e168:	f800283a 	ret

1104e16c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1104e16c:	defffe04 	addi	sp,sp,-8
1104e170:	dfc00115 	stw	ra,4(sp)
1104e174:	df000015 	stw	fp,0(sp)
1104e178:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1104e17c:	00800034 	movhi	r2,0
1104e180:	108a0704 	addi	r2,r2,10268
1104e184:	10800017 	ldw	r2,0(r2)
1104e188:	10000526 	beq	r2,zero,1104e1a0 <alt_get_errno+0x34>
1104e18c:	00800034 	movhi	r2,0
1104e190:	108a0704 	addi	r2,r2,10268
1104e194:	10800017 	ldw	r2,0(r2)
1104e198:	103ee83a 	callr	r2
1104e19c:	00000206 	br	1104e1a8 <alt_get_errno+0x3c>
1104e1a0:	00800034 	movhi	r2,0
1104e1a4:	108a1504 	addi	r2,r2,10324
}
1104e1a8:	e037883a 	mov	sp,fp
1104e1ac:	dfc00117 	ldw	ra,4(sp)
1104e1b0:	df000017 	ldw	fp,0(sp)
1104e1b4:	dec00204 	addi	sp,sp,8
1104e1b8:	f800283a 	ret

1104e1bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1104e1bc:	defffa04 	addi	sp,sp,-24
1104e1c0:	dfc00515 	stw	ra,20(sp)
1104e1c4:	df000415 	stw	fp,16(sp)
1104e1c8:	df000404 	addi	fp,sp,16
1104e1cc:	e13ffe15 	stw	r4,-8(fp)
1104e1d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1104e1d4:	e0bffe17 	ldw	r2,-8(fp)
1104e1d8:	10000326 	beq	r2,zero,1104e1e8 <alt_dev_llist_insert+0x2c>
1104e1dc:	e0bffe17 	ldw	r2,-8(fp)
1104e1e0:	10800217 	ldw	r2,8(r2)
1104e1e4:	1000051e 	bne	r2,zero,1104e1fc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
1104e1e8:	104e16c0 	call	1104e16c <alt_get_errno>
1104e1ec:	00c00584 	movi	r3,22
1104e1f0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
1104e1f4:	00bffa84 	movi	r2,-22
1104e1f8:	00001306 	br	1104e248 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1104e1fc:	e0bffe17 	ldw	r2,-8(fp)
1104e200:	e0ffff17 	ldw	r3,-4(fp)
1104e204:	e0fffc15 	stw	r3,-16(fp)
1104e208:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1104e20c:	e0bffd17 	ldw	r2,-12(fp)
1104e210:	e0fffc17 	ldw	r3,-16(fp)
1104e214:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1104e218:	e0bffc17 	ldw	r2,-16(fp)
1104e21c:	10c00017 	ldw	r3,0(r2)
1104e220:	e0bffd17 	ldw	r2,-12(fp)
1104e224:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1104e228:	e0bffc17 	ldw	r2,-16(fp)
1104e22c:	10800017 	ldw	r2,0(r2)
1104e230:	e0fffd17 	ldw	r3,-12(fp)
1104e234:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1104e238:	e0bffc17 	ldw	r2,-16(fp)
1104e23c:	e0fffd17 	ldw	r3,-12(fp)
1104e240:	10c00015 	stw	r3,0(r2)

  return 0;  
1104e244:	0005883a 	mov	r2,zero
}
1104e248:	e037883a 	mov	sp,fp
1104e24c:	dfc00117 	ldw	ra,4(sp)
1104e250:	df000017 	ldw	fp,0(sp)
1104e254:	dec00204 	addi	sp,sp,8
1104e258:	f800283a 	ret

1104e25c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1104e25c:	defffd04 	addi	sp,sp,-12
1104e260:	dfc00215 	stw	ra,8(sp)
1104e264:	df000115 	stw	fp,4(sp)
1104e268:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1104e26c:	00844174 	movhi	r2,4357
1104e270:	10bbd704 	addi	r2,r2,-4260
1104e274:	e0bfff15 	stw	r2,-4(fp)
1104e278:	00000606 	br	1104e294 <_do_ctors+0x38>
        (*ctor) (); 
1104e27c:	e0bfff17 	ldw	r2,-4(fp)
1104e280:	10800017 	ldw	r2,0(r2)
1104e284:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1104e288:	e0bfff17 	ldw	r2,-4(fp)
1104e28c:	10bfff04 	addi	r2,r2,-4
1104e290:	e0bfff15 	stw	r2,-4(fp)
1104e294:	e0ffff17 	ldw	r3,-4(fp)
1104e298:	00844174 	movhi	r2,4357
1104e29c:	10bbd804 	addi	r2,r2,-4256
1104e2a0:	18bff62e 	bgeu	r3,r2,1104e27c <_do_ctors+0x20>
        (*ctor) (); 
}
1104e2a4:	e037883a 	mov	sp,fp
1104e2a8:	dfc00117 	ldw	ra,4(sp)
1104e2ac:	df000017 	ldw	fp,0(sp)
1104e2b0:	dec00204 	addi	sp,sp,8
1104e2b4:	f800283a 	ret

1104e2b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1104e2b8:	defffd04 	addi	sp,sp,-12
1104e2bc:	dfc00215 	stw	ra,8(sp)
1104e2c0:	df000115 	stw	fp,4(sp)
1104e2c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1104e2c8:	00844174 	movhi	r2,4357
1104e2cc:	10bbd704 	addi	r2,r2,-4260
1104e2d0:	e0bfff15 	stw	r2,-4(fp)
1104e2d4:	00000606 	br	1104e2f0 <_do_dtors+0x38>
        (*dtor) (); 
1104e2d8:	e0bfff17 	ldw	r2,-4(fp)
1104e2dc:	10800017 	ldw	r2,0(r2)
1104e2e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1104e2e4:	e0bfff17 	ldw	r2,-4(fp)
1104e2e8:	10bfff04 	addi	r2,r2,-4
1104e2ec:	e0bfff15 	stw	r2,-4(fp)
1104e2f0:	e0ffff17 	ldw	r3,-4(fp)
1104e2f4:	00844174 	movhi	r2,4357
1104e2f8:	10bbd804 	addi	r2,r2,-4256
1104e2fc:	18bff62e 	bgeu	r3,r2,1104e2d8 <_do_dtors+0x20>
        (*dtor) (); 
}
1104e300:	e037883a 	mov	sp,fp
1104e304:	dfc00117 	ldw	ra,4(sp)
1104e308:	df000017 	ldw	fp,0(sp)
1104e30c:	dec00204 	addi	sp,sp,8
1104e310:	f800283a 	ret

1104e314 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1104e314:	defffe04 	addi	sp,sp,-8
1104e318:	dfc00115 	stw	ra,4(sp)
1104e31c:	df000015 	stw	fp,0(sp)
1104e320:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1104e324:	0009883a 	mov	r4,zero
1104e328:	01440004 	movi	r5,4096
1104e32c:	104eb000 	call	1104eb00 <alt_icache_flush>
#endif
}
1104e330:	e037883a 	mov	sp,fp
1104e334:	dfc00117 	ldw	ra,4(sp)
1104e338:	df000017 	ldw	fp,0(sp)
1104e33c:	dec00204 	addi	sp,sp,8
1104e340:	f800283a 	ret

1104e344 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1104e344:	defff904 	addi	sp,sp,-28
1104e348:	dfc00615 	stw	ra,24(sp)
1104e34c:	df000515 	stw	fp,20(sp)
1104e350:	df000504 	addi	fp,sp,20
1104e354:	e13ffc15 	stw	r4,-16(fp)
1104e358:	e17ffd15 	stw	r5,-12(fp)
1104e35c:	e1bffe15 	stw	r6,-8(fp)
1104e360:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
1104e364:	e13ffd17 	ldw	r4,-12(fp)
1104e368:	e17ffe17 	ldw	r5,-8(fp)
1104e36c:	e1bfff17 	ldw	r6,-4(fp)
1104e370:	104e5980 	call	1104e598 <open>
1104e374:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1104e378:	e0bffb17 	ldw	r2,-20(fp)
1104e37c:	10001c16 	blt	r2,zero,1104e3f0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
1104e380:	00c00034 	movhi	r3,0
1104e384:	18c58504 	addi	r3,r3,5652
1104e388:	e0bffb17 	ldw	r2,-20(fp)
1104e38c:	10800324 	muli	r2,r2,12
1104e390:	1885883a 	add	r2,r3,r2
1104e394:	10c00017 	ldw	r3,0(r2)
1104e398:	e0bffc17 	ldw	r2,-16(fp)
1104e39c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1104e3a0:	00c00034 	movhi	r3,0
1104e3a4:	18c58504 	addi	r3,r3,5652
1104e3a8:	e0bffb17 	ldw	r2,-20(fp)
1104e3ac:	10800324 	muli	r2,r2,12
1104e3b0:	1885883a 	add	r2,r3,r2
1104e3b4:	10800104 	addi	r2,r2,4
1104e3b8:	10c00017 	ldw	r3,0(r2)
1104e3bc:	e0bffc17 	ldw	r2,-16(fp)
1104e3c0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1104e3c4:	00c00034 	movhi	r3,0
1104e3c8:	18c58504 	addi	r3,r3,5652
1104e3cc:	e0bffb17 	ldw	r2,-20(fp)
1104e3d0:	10800324 	muli	r2,r2,12
1104e3d4:	1885883a 	add	r2,r3,r2
1104e3d8:	10800204 	addi	r2,r2,8
1104e3dc:	10c00017 	ldw	r3,0(r2)
1104e3e0:	e0bffc17 	ldw	r2,-16(fp)
1104e3e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1104e3e8:	e13ffb17 	ldw	r4,-20(fp)
1104e3ec:	104cde00 	call	1104cde0 <alt_release_fd>
  }
} 
1104e3f0:	e037883a 	mov	sp,fp
1104e3f4:	dfc00117 	ldw	ra,4(sp)
1104e3f8:	df000017 	ldw	fp,0(sp)
1104e3fc:	dec00204 	addi	sp,sp,8
1104e400:	f800283a 	ret

1104e404 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1104e404:	defffb04 	addi	sp,sp,-20
1104e408:	dfc00415 	stw	ra,16(sp)
1104e40c:	df000315 	stw	fp,12(sp)
1104e410:	df000304 	addi	fp,sp,12
1104e414:	e13ffd15 	stw	r4,-12(fp)
1104e418:	e17ffe15 	stw	r5,-8(fp)
1104e41c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1104e420:	01000034 	movhi	r4,0
1104e424:	21058804 	addi	r4,r4,5664
1104e428:	e17ffd17 	ldw	r5,-12(fp)
1104e42c:	01800044 	movi	r6,1
1104e430:	01c07fc4 	movi	r7,511
1104e434:	104e3440 	call	1104e344 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1104e438:	01000034 	movhi	r4,0
1104e43c:	21058504 	addi	r4,r4,5652
1104e440:	e17ffe17 	ldw	r5,-8(fp)
1104e444:	000d883a 	mov	r6,zero
1104e448:	01c07fc4 	movi	r7,511
1104e44c:	104e3440 	call	1104e344 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1104e450:	01000034 	movhi	r4,0
1104e454:	21058b04 	addi	r4,r4,5676
1104e458:	e17fff17 	ldw	r5,-4(fp)
1104e45c:	01800044 	movi	r6,1
1104e460:	01c07fc4 	movi	r7,511
1104e464:	104e3440 	call	1104e344 <alt_open_fd>
}  
1104e468:	e037883a 	mov	sp,fp
1104e46c:	dfc00117 	ldw	ra,4(sp)
1104e470:	df000017 	ldw	fp,0(sp)
1104e474:	dec00204 	addi	sp,sp,8
1104e478:	f800283a 	ret

1104e47c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1104e47c:	defffe04 	addi	sp,sp,-8
1104e480:	dfc00115 	stw	ra,4(sp)
1104e484:	df000015 	stw	fp,0(sp)
1104e488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1104e48c:	00800034 	movhi	r2,0
1104e490:	108a0704 	addi	r2,r2,10268
1104e494:	10800017 	ldw	r2,0(r2)
1104e498:	10000526 	beq	r2,zero,1104e4b0 <alt_get_errno+0x34>
1104e49c:	00800034 	movhi	r2,0
1104e4a0:	108a0704 	addi	r2,r2,10268
1104e4a4:	10800017 	ldw	r2,0(r2)
1104e4a8:	103ee83a 	callr	r2
1104e4ac:	00000206 	br	1104e4b8 <alt_get_errno+0x3c>
1104e4b0:	00800034 	movhi	r2,0
1104e4b4:	108a1504 	addi	r2,r2,10324
}
1104e4b8:	e037883a 	mov	sp,fp
1104e4bc:	dfc00117 	ldw	ra,4(sp)
1104e4c0:	df000017 	ldw	fp,0(sp)
1104e4c4:	dec00204 	addi	sp,sp,8
1104e4c8:	f800283a 	ret

1104e4cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1104e4cc:	defffd04 	addi	sp,sp,-12
1104e4d0:	df000215 	stw	fp,8(sp)
1104e4d4:	df000204 	addi	fp,sp,8
1104e4d8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1104e4dc:	e0bfff17 	ldw	r2,-4(fp)
1104e4e0:	10800217 	ldw	r2,8(r2)
1104e4e4:	10d00034 	orhi	r3,r2,16384
1104e4e8:	e0bfff17 	ldw	r2,-4(fp)
1104e4ec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1104e4f0:	e03ffe15 	stw	zero,-8(fp)
1104e4f4:	00001d06 	br	1104e56c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1104e4f8:	00c00034 	movhi	r3,0
1104e4fc:	18c58504 	addi	r3,r3,5652
1104e500:	e0bffe17 	ldw	r2,-8(fp)
1104e504:	10800324 	muli	r2,r2,12
1104e508:	1885883a 	add	r2,r3,r2
1104e50c:	10c00017 	ldw	r3,0(r2)
1104e510:	e0bfff17 	ldw	r2,-4(fp)
1104e514:	10800017 	ldw	r2,0(r2)
1104e518:	1880111e 	bne	r3,r2,1104e560 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1104e51c:	00c00034 	movhi	r3,0
1104e520:	18c58504 	addi	r3,r3,5652
1104e524:	e0bffe17 	ldw	r2,-8(fp)
1104e528:	10800324 	muli	r2,r2,12
1104e52c:	1885883a 	add	r2,r3,r2
1104e530:	10800204 	addi	r2,r2,8
1104e534:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1104e538:	1000090e 	bge	r2,zero,1104e560 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1104e53c:	e0bffe17 	ldw	r2,-8(fp)
1104e540:	10c00324 	muli	r3,r2,12
1104e544:	00800034 	movhi	r2,0
1104e548:	10858504 	addi	r2,r2,5652
1104e54c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1104e550:	e0bfff17 	ldw	r2,-4(fp)
1104e554:	18800226 	beq	r3,r2,1104e560 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1104e558:	00bffcc4 	movi	r2,-13
1104e55c:	00000a06 	br	1104e588 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1104e560:	e0bffe17 	ldw	r2,-8(fp)
1104e564:	10800044 	addi	r2,r2,1
1104e568:	e0bffe15 	stw	r2,-8(fp)
1104e56c:	00800034 	movhi	r2,0
1104e570:	108a0604 	addi	r2,r2,10264
1104e574:	10800017 	ldw	r2,0(r2)
1104e578:	1007883a 	mov	r3,r2
1104e57c:	e0bffe17 	ldw	r2,-8(fp)
1104e580:	18bfdd2e 	bgeu	r3,r2,1104e4f8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1104e584:	0005883a 	mov	r2,zero
}
1104e588:	e037883a 	mov	sp,fp
1104e58c:	df000017 	ldw	fp,0(sp)
1104e590:	dec00104 	addi	sp,sp,4
1104e594:	f800283a 	ret

1104e598 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1104e598:	defff604 	addi	sp,sp,-40
1104e59c:	dfc00915 	stw	ra,36(sp)
1104e5a0:	df000815 	stw	fp,32(sp)
1104e5a4:	df000804 	addi	fp,sp,32
1104e5a8:	e13ffd15 	stw	r4,-12(fp)
1104e5ac:	e17ffe15 	stw	r5,-8(fp)
1104e5b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1104e5b4:	00bfffc4 	movi	r2,-1
1104e5b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1104e5bc:	00bffb44 	movi	r2,-19
1104e5c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1104e5c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1104e5c8:	e13ffd17 	ldw	r4,-12(fp)
1104e5cc:	01400034 	movhi	r5,0
1104e5d0:	294a0404 	addi	r5,r5,10256
1104e5d4:	104e8a80 	call	1104e8a8 <alt_find_dev>
1104e5d8:	e0bff815 	stw	r2,-32(fp)
1104e5dc:	e0bff817 	ldw	r2,-32(fp)
1104e5e0:	1000051e 	bne	r2,zero,1104e5f8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1104e5e4:	e13ffd17 	ldw	r4,-12(fp)
1104e5e8:	104e9380 	call	1104e938 <alt_find_file>
1104e5ec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1104e5f0:	00800044 	movi	r2,1
1104e5f4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1104e5f8:	e0bff817 	ldw	r2,-32(fp)
1104e5fc:	10002926 	beq	r2,zero,1104e6a4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
1104e600:	e13ff817 	ldw	r4,-32(fp)
1104e604:	104ea4c0 	call	1104ea4c <alt_get_fd>
1104e608:	e0bff915 	stw	r2,-28(fp)
1104e60c:	e0bff917 	ldw	r2,-28(fp)
1104e610:	1000030e 	bge	r2,zero,1104e620 <open+0x88>
    {
      status = index;
1104e614:	e0bff917 	ldw	r2,-28(fp)
1104e618:	e0bffa15 	stw	r2,-24(fp)
1104e61c:	00002306 	br	1104e6ac <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
1104e620:	e0bff917 	ldw	r2,-28(fp)
1104e624:	10c00324 	muli	r3,r2,12
1104e628:	00800034 	movhi	r2,0
1104e62c:	10858504 	addi	r2,r2,5652
1104e630:	1885883a 	add	r2,r3,r2
1104e634:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1104e638:	e0fffe17 	ldw	r3,-8(fp)
1104e63c:	00900034 	movhi	r2,16384
1104e640:	10bfffc4 	addi	r2,r2,-1
1104e644:	1886703a 	and	r3,r3,r2
1104e648:	e0bffc17 	ldw	r2,-16(fp)
1104e64c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1104e650:	e0bffb17 	ldw	r2,-20(fp)
1104e654:	1000051e 	bne	r2,zero,1104e66c <open+0xd4>
1104e658:	e13ffc17 	ldw	r4,-16(fp)
1104e65c:	104e4cc0 	call	1104e4cc <alt_file_locked>
1104e660:	e0bffa15 	stw	r2,-24(fp)
1104e664:	e0bffa17 	ldw	r2,-24(fp)
1104e668:	10001016 	blt	r2,zero,1104e6ac <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1104e66c:	e0bff817 	ldw	r2,-32(fp)
1104e670:	10800317 	ldw	r2,12(r2)
1104e674:	10000826 	beq	r2,zero,1104e698 <open+0x100>
1104e678:	e0bff817 	ldw	r2,-32(fp)
1104e67c:	10800317 	ldw	r2,12(r2)
1104e680:	e13ffc17 	ldw	r4,-16(fp)
1104e684:	e17ffd17 	ldw	r5,-12(fp)
1104e688:	e1bffe17 	ldw	r6,-8(fp)
1104e68c:	e1ffff17 	ldw	r7,-4(fp)
1104e690:	103ee83a 	callr	r2
1104e694:	00000106 	br	1104e69c <open+0x104>
1104e698:	0005883a 	mov	r2,zero
1104e69c:	e0bffa15 	stw	r2,-24(fp)
1104e6a0:	00000206 	br	1104e6ac <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
1104e6a4:	00bffb44 	movi	r2,-19
1104e6a8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1104e6ac:	e0bffa17 	ldw	r2,-24(fp)
1104e6b0:	1000080e 	bge	r2,zero,1104e6d4 <open+0x13c>
  {
    alt_release_fd (index);  
1104e6b4:	e13ff917 	ldw	r4,-28(fp)
1104e6b8:	104cde00 	call	1104cde0 <alt_release_fd>
    ALT_ERRNO = -status;
1104e6bc:	104e47c0 	call	1104e47c <alt_get_errno>
1104e6c0:	e0fffa17 	ldw	r3,-24(fp)
1104e6c4:	00c7c83a 	sub	r3,zero,r3
1104e6c8:	10c00015 	stw	r3,0(r2)
    return -1;
1104e6cc:	00bfffc4 	movi	r2,-1
1104e6d0:	00000106 	br	1104e6d8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1104e6d4:	e0bff917 	ldw	r2,-28(fp)
}
1104e6d8:	e037883a 	mov	sp,fp
1104e6dc:	dfc00117 	ldw	ra,4(sp)
1104e6e0:	df000017 	ldw	fp,0(sp)
1104e6e4:	dec00204 	addi	sp,sp,8
1104e6e8:	f800283a 	ret

1104e6ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1104e6ec:	defffa04 	addi	sp,sp,-24
1104e6f0:	df000515 	stw	fp,20(sp)
1104e6f4:	df000504 	addi	fp,sp,20
1104e6f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1104e6fc:	0005303a 	rdctl	r2,status
1104e700:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1104e704:	e0fffc17 	ldw	r3,-16(fp)
1104e708:	00bfff84 	movi	r2,-2
1104e70c:	1884703a 	and	r2,r3,r2
1104e710:	1001703a 	wrctl	status,r2
  
  return context;
1104e714:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1104e718:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1104e71c:	e0bfff17 	ldw	r2,-4(fp)
1104e720:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1104e724:	e0bffd17 	ldw	r2,-12(fp)
1104e728:	10800017 	ldw	r2,0(r2)
1104e72c:	e0fffd17 	ldw	r3,-12(fp)
1104e730:	18c00117 	ldw	r3,4(r3)
1104e734:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1104e738:	e0bffd17 	ldw	r2,-12(fp)
1104e73c:	10800117 	ldw	r2,4(r2)
1104e740:	e0fffd17 	ldw	r3,-12(fp)
1104e744:	18c00017 	ldw	r3,0(r3)
1104e748:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1104e74c:	e0bffd17 	ldw	r2,-12(fp)
1104e750:	e0fffd17 	ldw	r3,-12(fp)
1104e754:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1104e758:	e0bffd17 	ldw	r2,-12(fp)
1104e75c:	e0fffd17 	ldw	r3,-12(fp)
1104e760:	10c00015 	stw	r3,0(r2)
1104e764:	e0bffb17 	ldw	r2,-20(fp)
1104e768:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1104e76c:	e0bffe17 	ldw	r2,-8(fp)
1104e770:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1104e774:	e037883a 	mov	sp,fp
1104e778:	df000017 	ldw	fp,0(sp)
1104e77c:	dec00104 	addi	sp,sp,4
1104e780:	f800283a 	ret

1104e784 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1104e784:	defffb04 	addi	sp,sp,-20
1104e788:	dfc00415 	stw	ra,16(sp)
1104e78c:	df000315 	stw	fp,12(sp)
1104e790:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1104e794:	d0a00d17 	ldw	r2,-32716(gp)
1104e798:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1104e79c:	d0a01e17 	ldw	r2,-32648(gp)
1104e7a0:	10800044 	addi	r2,r2,1
1104e7a4:	d0a01e15 	stw	r2,-32648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1104e7a8:	00002e06 	br	1104e864 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1104e7ac:	e0bffd17 	ldw	r2,-12(fp)
1104e7b0:	10800017 	ldw	r2,0(r2)
1104e7b4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1104e7b8:	e0bffd17 	ldw	r2,-12(fp)
1104e7bc:	10800403 	ldbu	r2,16(r2)
1104e7c0:	10803fcc 	andi	r2,r2,255
1104e7c4:	10000426 	beq	r2,zero,1104e7d8 <alt_tick+0x54>
1104e7c8:	d0a01e17 	ldw	r2,-32648(gp)
1104e7cc:	1000021e 	bne	r2,zero,1104e7d8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1104e7d0:	e0bffd17 	ldw	r2,-12(fp)
1104e7d4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1104e7d8:	e0bffd17 	ldw	r2,-12(fp)
1104e7dc:	10800217 	ldw	r2,8(r2)
1104e7e0:	d0e01e17 	ldw	r3,-32648(gp)
1104e7e4:	18801d36 	bltu	r3,r2,1104e85c <alt_tick+0xd8>
1104e7e8:	e0bffd17 	ldw	r2,-12(fp)
1104e7ec:	10800403 	ldbu	r2,16(r2)
1104e7f0:	10803fcc 	andi	r2,r2,255
1104e7f4:	1000191e 	bne	r2,zero,1104e85c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1104e7f8:	e0bffd17 	ldw	r2,-12(fp)
1104e7fc:	10c00317 	ldw	r3,12(r2)
1104e800:	e0bffd17 	ldw	r2,-12(fp)
1104e804:	10800517 	ldw	r2,20(r2)
1104e808:	1009883a 	mov	r4,r2
1104e80c:	183ee83a 	callr	r3
1104e810:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1104e814:	e0bfff17 	ldw	r2,-4(fp)
1104e818:	1000031e 	bne	r2,zero,1104e828 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1104e81c:	e13ffd17 	ldw	r4,-12(fp)
1104e820:	104e6ec0 	call	1104e6ec <alt_alarm_stop>
1104e824:	00000d06 	br	1104e85c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1104e828:	e0bffd17 	ldw	r2,-12(fp)
1104e82c:	10c00217 	ldw	r3,8(r2)
1104e830:	e0bfff17 	ldw	r2,-4(fp)
1104e834:	1887883a 	add	r3,r3,r2
1104e838:	e0bffd17 	ldw	r2,-12(fp)
1104e83c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1104e840:	e0bffd17 	ldw	r2,-12(fp)
1104e844:	10c00217 	ldw	r3,8(r2)
1104e848:	d0a01e17 	ldw	r2,-32648(gp)
1104e84c:	1880032e 	bgeu	r3,r2,1104e85c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1104e850:	e0bffd17 	ldw	r2,-12(fp)
1104e854:	00c00044 	movi	r3,1
1104e858:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1104e85c:	e0bffe17 	ldw	r2,-8(fp)
1104e860:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1104e864:	e0fffd17 	ldw	r3,-12(fp)
1104e868:	d0a00d04 	addi	r2,gp,-32716
1104e86c:	18bfcf1e 	bne	r3,r2,1104e7ac <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1104e870:	0001883a 	nop
}
1104e874:	e037883a 	mov	sp,fp
1104e878:	dfc00117 	ldw	ra,4(sp)
1104e87c:	df000017 	ldw	fp,0(sp)
1104e880:	dec00204 	addi	sp,sp,8
1104e884:	f800283a 	ret

1104e888 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
1104e888:	deffff04 	addi	sp,sp,-4
1104e88c:	df000015 	stw	fp,0(sp)
1104e890:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1104e894:	000170fa 	wrctl	ienable,zero
}
1104e898:	e037883a 	mov	sp,fp
1104e89c:	df000017 	ldw	fp,0(sp)
1104e8a0:	dec00104 	addi	sp,sp,4
1104e8a4:	f800283a 	ret

1104e8a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1104e8a8:	defffa04 	addi	sp,sp,-24
1104e8ac:	dfc00515 	stw	ra,20(sp)
1104e8b0:	df000415 	stw	fp,16(sp)
1104e8b4:	df000404 	addi	fp,sp,16
1104e8b8:	e13ffe15 	stw	r4,-8(fp)
1104e8bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1104e8c0:	e0bfff17 	ldw	r2,-4(fp)
1104e8c4:	10800017 	ldw	r2,0(r2)
1104e8c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1104e8cc:	e13ffe17 	ldw	r4,-8(fp)
1104e8d0:	1043ac00 	call	11043ac0 <strlen>
1104e8d4:	10800044 	addi	r2,r2,1
1104e8d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1104e8dc:	00000d06 	br	1104e914 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1104e8e0:	e0bffc17 	ldw	r2,-16(fp)
1104e8e4:	10c00217 	ldw	r3,8(r2)
1104e8e8:	e0bffd17 	ldw	r2,-12(fp)
1104e8ec:	1809883a 	mov	r4,r3
1104e8f0:	e17ffe17 	ldw	r5,-8(fp)
1104e8f4:	100d883a 	mov	r6,r2
1104e8f8:	104ebd80 	call	1104ebd8 <memcmp>
1104e8fc:	1000021e 	bne	r2,zero,1104e908 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1104e900:	e0bffc17 	ldw	r2,-16(fp)
1104e904:	00000706 	br	1104e924 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1104e908:	e0bffc17 	ldw	r2,-16(fp)
1104e90c:	10800017 	ldw	r2,0(r2)
1104e910:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1104e914:	e0fffc17 	ldw	r3,-16(fp)
1104e918:	e0bfff17 	ldw	r2,-4(fp)
1104e91c:	18bff01e 	bne	r3,r2,1104e8e0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1104e920:	0005883a 	mov	r2,zero
}
1104e924:	e037883a 	mov	sp,fp
1104e928:	dfc00117 	ldw	ra,4(sp)
1104e92c:	df000017 	ldw	fp,0(sp)
1104e930:	dec00204 	addi	sp,sp,8
1104e934:	f800283a 	ret

1104e938 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1104e938:	defffb04 	addi	sp,sp,-20
1104e93c:	dfc00415 	stw	ra,16(sp)
1104e940:	df000315 	stw	fp,12(sp)
1104e944:	df000304 	addi	fp,sp,12
1104e948:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1104e94c:	00800034 	movhi	r2,0
1104e950:	108a0204 	addi	r2,r2,10248
1104e954:	10800017 	ldw	r2,0(r2)
1104e958:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1104e95c:	00003106 	br	1104ea24 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1104e960:	e0bffd17 	ldw	r2,-12(fp)
1104e964:	10800217 	ldw	r2,8(r2)
1104e968:	1009883a 	mov	r4,r2
1104e96c:	1043ac00 	call	11043ac0 <strlen>
1104e970:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1104e974:	e0bffd17 	ldw	r2,-12(fp)
1104e978:	10c00217 	ldw	r3,8(r2)
1104e97c:	e0bffe17 	ldw	r2,-8(fp)
1104e980:	10bfffc4 	addi	r2,r2,-1
1104e984:	1885883a 	add	r2,r3,r2
1104e988:	10800003 	ldbu	r2,0(r2)
1104e98c:	10803fcc 	andi	r2,r2,255
1104e990:	1080201c 	xori	r2,r2,128
1104e994:	10bfe004 	addi	r2,r2,-128
1104e998:	10800bd8 	cmpnei	r2,r2,47
1104e99c:	1000031e 	bne	r2,zero,1104e9ac <alt_find_file+0x74>
    {
      len -= 1;
1104e9a0:	e0bffe17 	ldw	r2,-8(fp)
1104e9a4:	10bfffc4 	addi	r2,r2,-1
1104e9a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1104e9ac:	e0bffe17 	ldw	r2,-8(fp)
1104e9b0:	e0ffff17 	ldw	r3,-4(fp)
1104e9b4:	1885883a 	add	r2,r3,r2
1104e9b8:	10800003 	ldbu	r2,0(r2)
1104e9bc:	10803fcc 	andi	r2,r2,255
1104e9c0:	1080201c 	xori	r2,r2,128
1104e9c4:	10bfe004 	addi	r2,r2,-128
1104e9c8:	10800be0 	cmpeqi	r2,r2,47
1104e9cc:	1000081e 	bne	r2,zero,1104e9f0 <alt_find_file+0xb8>
1104e9d0:	e0bffe17 	ldw	r2,-8(fp)
1104e9d4:	e0ffff17 	ldw	r3,-4(fp)
1104e9d8:	1885883a 	add	r2,r3,r2
1104e9dc:	10800003 	ldbu	r2,0(r2)
1104e9e0:	10803fcc 	andi	r2,r2,255
1104e9e4:	1080201c 	xori	r2,r2,128
1104e9e8:	10bfe004 	addi	r2,r2,-128
1104e9ec:	10000a1e 	bne	r2,zero,1104ea18 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1104e9f0:	e0bffd17 	ldw	r2,-12(fp)
1104e9f4:	10c00217 	ldw	r3,8(r2)
1104e9f8:	e0bffe17 	ldw	r2,-8(fp)
1104e9fc:	1809883a 	mov	r4,r3
1104ea00:	e17fff17 	ldw	r5,-4(fp)
1104ea04:	100d883a 	mov	r6,r2
1104ea08:	104ebd80 	call	1104ebd8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1104ea0c:	1000021e 	bne	r2,zero,1104ea18 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1104ea10:	e0bffd17 	ldw	r2,-12(fp)
1104ea14:	00000806 	br	1104ea38 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1104ea18:	e0bffd17 	ldw	r2,-12(fp)
1104ea1c:	10800017 	ldw	r2,0(r2)
1104ea20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1104ea24:	e0fffd17 	ldw	r3,-12(fp)
1104ea28:	00800034 	movhi	r2,0
1104ea2c:	108a0204 	addi	r2,r2,10248
1104ea30:	18bfcb1e 	bne	r3,r2,1104e960 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1104ea34:	0005883a 	mov	r2,zero
}
1104ea38:	e037883a 	mov	sp,fp
1104ea3c:	dfc00117 	ldw	ra,4(sp)
1104ea40:	df000017 	ldw	fp,0(sp)
1104ea44:	dec00204 	addi	sp,sp,8
1104ea48:	f800283a 	ret

1104ea4c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1104ea4c:	defffc04 	addi	sp,sp,-16
1104ea50:	df000315 	stw	fp,12(sp)
1104ea54:	df000304 	addi	fp,sp,12
1104ea58:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
1104ea5c:	00bffa04 	movi	r2,-24
1104ea60:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1104ea64:	e03ffd15 	stw	zero,-12(fp)
1104ea68:	00001d06 	br	1104eae0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
1104ea6c:	00c00034 	movhi	r3,0
1104ea70:	18c58504 	addi	r3,r3,5652
1104ea74:	e0bffd17 	ldw	r2,-12(fp)
1104ea78:	10800324 	muli	r2,r2,12
1104ea7c:	1885883a 	add	r2,r3,r2
1104ea80:	10800017 	ldw	r2,0(r2)
1104ea84:	1000131e 	bne	r2,zero,1104ead4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
1104ea88:	00c00034 	movhi	r3,0
1104ea8c:	18c58504 	addi	r3,r3,5652
1104ea90:	e0bffd17 	ldw	r2,-12(fp)
1104ea94:	10800324 	muli	r2,r2,12
1104ea98:	1885883a 	add	r2,r3,r2
1104ea9c:	e0ffff17 	ldw	r3,-4(fp)
1104eaa0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1104eaa4:	00800034 	movhi	r2,0
1104eaa8:	108a0604 	addi	r2,r2,10264
1104eaac:	10c00017 	ldw	r3,0(r2)
1104eab0:	e0bffd17 	ldw	r2,-12(fp)
1104eab4:	1880040e 	bge	r3,r2,1104eac8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
1104eab8:	00800034 	movhi	r2,0
1104eabc:	108a0604 	addi	r2,r2,10264
1104eac0:	e0fffd17 	ldw	r3,-12(fp)
1104eac4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1104eac8:	e0bffd17 	ldw	r2,-12(fp)
1104eacc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1104ead0:	00000606 	br	1104eaec <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1104ead4:	e0bffd17 	ldw	r2,-12(fp)
1104ead8:	10800044 	addi	r2,r2,1
1104eadc:	e0bffd15 	stw	r2,-12(fp)
1104eae0:	e0bffd17 	ldw	r2,-12(fp)
1104eae4:	10800810 	cmplti	r2,r2,32
1104eae8:	103fe01e 	bne	r2,zero,1104ea6c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1104eaec:	e0bffe17 	ldw	r2,-8(fp)
}
1104eaf0:	e037883a 	mov	sp,fp
1104eaf4:	df000017 	ldw	fp,0(sp)
1104eaf8:	dec00104 	addi	sp,sp,4
1104eafc:	f800283a 	ret

1104eb00 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
1104eb00:	defffb04 	addi	sp,sp,-20
1104eb04:	df000415 	stw	fp,16(sp)
1104eb08:	df000404 	addi	fp,sp,16
1104eb0c:	e13ffe15 	stw	r4,-8(fp)
1104eb10:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1104eb14:	e0bfff17 	ldw	r2,-4(fp)
1104eb18:	10840070 	cmpltui	r2,r2,4097
1104eb1c:	1000021e 	bne	r2,zero,1104eb28 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
1104eb20:	00840004 	movi	r2,4096
1104eb24:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
1104eb28:	e0fffe17 	ldw	r3,-8(fp)
1104eb2c:	e0bfff17 	ldw	r2,-4(fp)
1104eb30:	1885883a 	add	r2,r3,r2
1104eb34:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1104eb38:	e0bffe17 	ldw	r2,-8(fp)
1104eb3c:	e0bffc15 	stw	r2,-16(fp)
1104eb40:	00000506 	br	1104eb58 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
1104eb44:	e0bffc17 	ldw	r2,-16(fp)
1104eb48:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1104eb4c:	e0bffc17 	ldw	r2,-16(fp)
1104eb50:	10800804 	addi	r2,r2,32
1104eb54:	e0bffc15 	stw	r2,-16(fp)
1104eb58:	e0fffc17 	ldw	r3,-16(fp)
1104eb5c:	e0bffd17 	ldw	r2,-12(fp)
1104eb60:	18bff836 	bltu	r3,r2,1104eb44 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
1104eb64:	e0bffe17 	ldw	r2,-8(fp)
1104eb68:	108007cc 	andi	r2,r2,31
1104eb6c:	10000226 	beq	r2,zero,1104eb78 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
1104eb70:	e0bffc17 	ldw	r2,-16(fp)
1104eb74:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
1104eb78:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
1104eb7c:	e037883a 	mov	sp,fp
1104eb80:	df000017 	ldw	fp,0(sp)
1104eb84:	dec00104 	addi	sp,sp,4
1104eb88:	f800283a 	ret

1104eb8c <atexit>:
1104eb8c:	200b883a 	mov	r5,r4
1104eb90:	000d883a 	mov	r6,zero
1104eb94:	0009883a 	mov	r4,zero
1104eb98:	000f883a 	mov	r7,zero
1104eb9c:	104ec541 	jmpi	1104ec54 <__register_exitproc>

1104eba0 <exit>:
1104eba0:	defffe04 	addi	sp,sp,-8
1104eba4:	000b883a 	mov	r5,zero
1104eba8:	dc000015 	stw	r16,0(sp)
1104ebac:	dfc00115 	stw	ra,4(sp)
1104ebb0:	2021883a 	mov	r16,r4
1104ebb4:	104ed840 	call	1104ed84 <__call_exitprocs>
1104ebb8:	00800034 	movhi	r2,0
1104ebbc:	1089fd04 	addi	r2,r2,10228
1104ebc0:	11000017 	ldw	r4,0(r2)
1104ebc4:	20800f17 	ldw	r2,60(r4)
1104ebc8:	10000126 	beq	r2,zero,1104ebd0 <exit+0x30>
1104ebcc:	103ee83a 	callr	r2
1104ebd0:	8009883a 	mov	r4,r16
1104ebd4:	104ef240 	call	1104ef24 <_exit>

1104ebd8 <memcmp>:
1104ebd8:	01c000c4 	movi	r7,3
1104ebdc:	3980192e 	bgeu	r7,r6,1104ec44 <memcmp+0x6c>
1104ebe0:	2904b03a 	or	r2,r5,r4
1104ebe4:	11c4703a 	and	r2,r2,r7
1104ebe8:	10000f26 	beq	r2,zero,1104ec28 <memcmp+0x50>
1104ebec:	20c00003 	ldbu	r3,0(r4)
1104ebf0:	28800003 	ldbu	r2,0(r5)
1104ebf4:	1880151e 	bne	r3,r2,1104ec4c <memcmp+0x74>
1104ebf8:	31bfff84 	addi	r6,r6,-2
1104ebfc:	01ffffc4 	movi	r7,-1
1104ec00:	00000406 	br	1104ec14 <memcmp+0x3c>
1104ec04:	20c00003 	ldbu	r3,0(r4)
1104ec08:	28800003 	ldbu	r2,0(r5)
1104ec0c:	31bfffc4 	addi	r6,r6,-1
1104ec10:	18800e1e 	bne	r3,r2,1104ec4c <memcmp+0x74>
1104ec14:	21000044 	addi	r4,r4,1
1104ec18:	29400044 	addi	r5,r5,1
1104ec1c:	31fff91e 	bne	r6,r7,1104ec04 <memcmp+0x2c>
1104ec20:	0005883a 	mov	r2,zero
1104ec24:	f800283a 	ret
1104ec28:	20c00017 	ldw	r3,0(r4)
1104ec2c:	28800017 	ldw	r2,0(r5)
1104ec30:	1880041e 	bne	r3,r2,1104ec44 <memcmp+0x6c>
1104ec34:	31bfff04 	addi	r6,r6,-4
1104ec38:	21000104 	addi	r4,r4,4
1104ec3c:	29400104 	addi	r5,r5,4
1104ec40:	39bff936 	bltu	r7,r6,1104ec28 <memcmp+0x50>
1104ec44:	303fe91e 	bne	r6,zero,1104ebec <memcmp+0x14>
1104ec48:	003ff506 	br	1104ec20 <memcmp+0x48>
1104ec4c:	1885c83a 	sub	r2,r3,r2
1104ec50:	f800283a 	ret

1104ec54 <__register_exitproc>:
1104ec54:	defffa04 	addi	sp,sp,-24
1104ec58:	00800034 	movhi	r2,0
1104ec5c:	1089fd04 	addi	r2,r2,10228
1104ec60:	dc000315 	stw	r16,12(sp)
1104ec64:	14000017 	ldw	r16,0(r2)
1104ec68:	dc400415 	stw	r17,16(sp)
1104ec6c:	dfc00515 	stw	ra,20(sp)
1104ec70:	80805217 	ldw	r2,328(r16)
1104ec74:	2023883a 	mov	r17,r4
1104ec78:	10003e26 	beq	r2,zero,1104ed74 <__register_exitproc+0x120>
1104ec7c:	10c00117 	ldw	r3,4(r2)
1104ec80:	020007c4 	movi	r8,31
1104ec84:	40c0180e 	bge	r8,r3,1104ece8 <__register_exitproc+0x94>
1104ec88:	00800034 	movhi	r2,0
1104ec8c:	10800004 	addi	r2,r2,0
1104ec90:	1000061e 	bne	r2,zero,1104ecac <__register_exitproc+0x58>
1104ec94:	00bfffc4 	movi	r2,-1
1104ec98:	dfc00517 	ldw	ra,20(sp)
1104ec9c:	dc400417 	ldw	r17,16(sp)
1104eca0:	dc000317 	ldw	r16,12(sp)
1104eca4:	dec00604 	addi	sp,sp,24
1104eca8:	f800283a 	ret
1104ecac:	01006404 	movi	r4,400
1104ecb0:	d9400015 	stw	r5,0(sp)
1104ecb4:	d9800115 	stw	r6,4(sp)
1104ecb8:	d9c00215 	stw	r7,8(sp)
1104ecbc:	00000000 	call	10000000 <__alt_data_end>
1104ecc0:	d9400017 	ldw	r5,0(sp)
1104ecc4:	d9800117 	ldw	r6,4(sp)
1104ecc8:	d9c00217 	ldw	r7,8(sp)
1104eccc:	103ff126 	beq	r2,zero,1104ec94 <__register_exitproc+0x40>
1104ecd0:	80c05217 	ldw	r3,328(r16)
1104ecd4:	10000115 	stw	zero,4(r2)
1104ecd8:	10c00015 	stw	r3,0(r2)
1104ecdc:	80805215 	stw	r2,328(r16)
1104ece0:	10006215 	stw	zero,392(r2)
1104ece4:	10006315 	stw	zero,396(r2)
1104ece8:	10c00117 	ldw	r3,4(r2)
1104ecec:	88000d1e 	bne	r17,zero,1104ed24 <__register_exitproc+0xd0>
1104ecf0:	19000084 	addi	r4,r3,2
1104ecf4:	2109883a 	add	r4,r4,r4
1104ecf8:	18c00044 	addi	r3,r3,1
1104ecfc:	2109883a 	add	r4,r4,r4
1104ed00:	1109883a 	add	r4,r2,r4
1104ed04:	10c00115 	stw	r3,4(r2)
1104ed08:	0005883a 	mov	r2,zero
1104ed0c:	21400015 	stw	r5,0(r4)
1104ed10:	dfc00517 	ldw	ra,20(sp)
1104ed14:	dc400417 	ldw	r17,16(sp)
1104ed18:	dc000317 	ldw	r16,12(sp)
1104ed1c:	dec00604 	addi	sp,sp,24
1104ed20:	f800283a 	ret
1104ed24:	02400044 	movi	r9,1
1104ed28:	12806217 	ldw	r10,392(r2)
1104ed2c:	48d2983a 	sll	r9,r9,r3
1104ed30:	19000804 	addi	r4,r3,32
1104ed34:	18d1883a 	add	r8,r3,r3
1104ed38:	2109883a 	add	r4,r4,r4
1104ed3c:	4211883a 	add	r8,r8,r8
1104ed40:	2109883a 	add	r4,r4,r4
1104ed44:	1109883a 	add	r4,r2,r4
1104ed48:	1211883a 	add	r8,r2,r8
1104ed4c:	5254b03a 	or	r10,r10,r9
1104ed50:	21c02215 	stw	r7,136(r4)
1104ed54:	41802215 	stw	r6,136(r8)
1104ed58:	12806215 	stw	r10,392(r2)
1104ed5c:	01000084 	movi	r4,2
1104ed60:	893fe31e 	bne	r17,r4,1104ecf0 <__register_exitproc+0x9c>
1104ed64:	11006317 	ldw	r4,396(r2)
1104ed68:	2252b03a 	or	r9,r4,r9
1104ed6c:	12406315 	stw	r9,396(r2)
1104ed70:	003fdf06 	br	1104ecf0 <__register_exitproc+0x9c>
1104ed74:	00800034 	movhi	r2,0
1104ed78:	108a7004 	addi	r2,r2,10688
1104ed7c:	80805215 	stw	r2,328(r16)
1104ed80:	003fbe06 	br	1104ec7c <__register_exitproc+0x28>

1104ed84 <__call_exitprocs>:
1104ed84:	00800034 	movhi	r2,0
1104ed88:	1089fd04 	addi	r2,r2,10228
1104ed8c:	10800017 	ldw	r2,0(r2)
1104ed90:	defff304 	addi	sp,sp,-52
1104ed94:	df000b15 	stw	fp,44(sp)
1104ed98:	d8800015 	stw	r2,0(sp)
1104ed9c:	10805204 	addi	r2,r2,328
1104eda0:	dd400815 	stw	r21,32(sp)
1104eda4:	dfc00c15 	stw	ra,48(sp)
1104eda8:	ddc00a15 	stw	r23,40(sp)
1104edac:	dd800915 	stw	r22,36(sp)
1104edb0:	dd000715 	stw	r20,28(sp)
1104edb4:	dcc00615 	stw	r19,24(sp)
1104edb8:	dc800515 	stw	r18,20(sp)
1104edbc:	dc400415 	stw	r17,16(sp)
1104edc0:	dc000315 	stw	r16,12(sp)
1104edc4:	d9000115 	stw	r4,4(sp)
1104edc8:	2839883a 	mov	fp,r5
1104edcc:	d8800215 	stw	r2,8(sp)
1104edd0:	057fffc4 	movi	r21,-1
1104edd4:	d8800017 	ldw	r2,0(sp)
1104edd8:	ddc00217 	ldw	r23,8(sp)
1104eddc:	14805217 	ldw	r18,328(r2)
1104ede0:	90001726 	beq	r18,zero,1104ee40 <__call_exitprocs+0xbc>
1104ede4:	94400117 	ldw	r17,4(r18)
1104ede8:	8c3fffc4 	addi	r16,r17,-1
1104edec:	80001116 	blt	r16,zero,1104ee34 <__call_exitprocs+0xb0>
1104edf0:	8c400044 	addi	r17,r17,1
1104edf4:	8427883a 	add	r19,r16,r16
1104edf8:	8c63883a 	add	r17,r17,r17
1104edfc:	95802204 	addi	r22,r18,136
1104ee00:	9ce7883a 	add	r19,r19,r19
1104ee04:	8c63883a 	add	r17,r17,r17
1104ee08:	b4e7883a 	add	r19,r22,r19
1104ee0c:	9463883a 	add	r17,r18,r17
1104ee10:	e0001726 	beq	fp,zero,1104ee70 <__call_exitprocs+0xec>
1104ee14:	8c87c83a 	sub	r3,r17,r18
1104ee18:	b0c7883a 	add	r3,r22,r3
1104ee1c:	18c01e17 	ldw	r3,120(r3)
1104ee20:	1f001326 	beq	r3,fp,1104ee70 <__call_exitprocs+0xec>
1104ee24:	843fffc4 	addi	r16,r16,-1
1104ee28:	9cffff04 	addi	r19,r19,-4
1104ee2c:	8c7fff04 	addi	r17,r17,-4
1104ee30:	857ff71e 	bne	r16,r21,1104ee10 <__call_exitprocs+0x8c>
1104ee34:	00800034 	movhi	r2,0
1104ee38:	10800004 	addi	r2,r2,0
1104ee3c:	10002a1e 	bne	r2,zero,1104eee8 <__call_exitprocs+0x164>
1104ee40:	dfc00c17 	ldw	ra,48(sp)
1104ee44:	df000b17 	ldw	fp,44(sp)
1104ee48:	ddc00a17 	ldw	r23,40(sp)
1104ee4c:	dd800917 	ldw	r22,36(sp)
1104ee50:	dd400817 	ldw	r21,32(sp)
1104ee54:	dd000717 	ldw	r20,28(sp)
1104ee58:	dcc00617 	ldw	r19,24(sp)
1104ee5c:	dc800517 	ldw	r18,20(sp)
1104ee60:	dc400417 	ldw	r17,16(sp)
1104ee64:	dc000317 	ldw	r16,12(sp)
1104ee68:	dec00d04 	addi	sp,sp,52
1104ee6c:	f800283a 	ret
1104ee70:	91000117 	ldw	r4,4(r18)
1104ee74:	88c00017 	ldw	r3,0(r17)
1104ee78:	213fffc4 	addi	r4,r4,-1
1104ee7c:	24001526 	beq	r4,r16,1104eed4 <__call_exitprocs+0x150>
1104ee80:	88000015 	stw	zero,0(r17)
1104ee84:	183fe726 	beq	r3,zero,1104ee24 <__call_exitprocs+0xa0>
1104ee88:	00800044 	movi	r2,1
1104ee8c:	1408983a 	sll	r4,r2,r16
1104ee90:	91406217 	ldw	r5,392(r18)
1104ee94:	95000117 	ldw	r20,4(r18)
1104ee98:	214a703a 	and	r5,r4,r5
1104ee9c:	28000b26 	beq	r5,zero,1104eecc <__call_exitprocs+0x148>
1104eea0:	91406317 	ldw	r5,396(r18)
1104eea4:	2148703a 	and	r4,r4,r5
1104eea8:	20000c1e 	bne	r4,zero,1104eedc <__call_exitprocs+0x158>
1104eeac:	99400017 	ldw	r5,0(r19)
1104eeb0:	d9000117 	ldw	r4,4(sp)
1104eeb4:	183ee83a 	callr	r3
1104eeb8:	90c00117 	ldw	r3,4(r18)
1104eebc:	1d3fc51e 	bne	r3,r20,1104edd4 <__call_exitprocs+0x50>
1104eec0:	b8c00017 	ldw	r3,0(r23)
1104eec4:	1cbfd726 	beq	r3,r18,1104ee24 <__call_exitprocs+0xa0>
1104eec8:	003fc206 	br	1104edd4 <__call_exitprocs+0x50>
1104eecc:	183ee83a 	callr	r3
1104eed0:	003ff906 	br	1104eeb8 <__call_exitprocs+0x134>
1104eed4:	94000115 	stw	r16,4(r18)
1104eed8:	003fea06 	br	1104ee84 <__call_exitprocs+0x100>
1104eedc:	99000017 	ldw	r4,0(r19)
1104eee0:	183ee83a 	callr	r3
1104eee4:	003ff406 	br	1104eeb8 <__call_exitprocs+0x134>
1104eee8:	90c00117 	ldw	r3,4(r18)
1104eeec:	1800071e 	bne	r3,zero,1104ef0c <__call_exitprocs+0x188>
1104eef0:	90c00017 	ldw	r3,0(r18)
1104eef4:	18000926 	beq	r3,zero,1104ef1c <__call_exitprocs+0x198>
1104eef8:	9009883a 	mov	r4,r18
1104eefc:	b8c00015 	stw	r3,0(r23)
1104ef00:	00000000 	call	10000000 <__alt_data_end>
1104ef04:	bc800017 	ldw	r18,0(r23)
1104ef08:	003fb506 	br	1104ede0 <__call_exitprocs+0x5c>
1104ef0c:	90c00017 	ldw	r3,0(r18)
1104ef10:	902f883a 	mov	r23,r18
1104ef14:	1825883a 	mov	r18,r3
1104ef18:	003fb106 	br	1104ede0 <__call_exitprocs+0x5c>
1104ef1c:	0007883a 	mov	r3,zero
1104ef20:	003ffb06 	br	1104ef10 <__call_exitprocs+0x18c>

1104ef24 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1104ef24:	defffc04 	addi	sp,sp,-16
1104ef28:	df000315 	stw	fp,12(sp)
1104ef2c:	df000304 	addi	fp,sp,12
1104ef30:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1104ef34:	0001883a 	nop
1104ef38:	e0bfff17 	ldw	r2,-4(fp)
1104ef3c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
1104ef40:	e0bffd17 	ldw	r2,-12(fp)
1104ef44:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1104ef48:	e0bffe17 	ldw	r2,-8(fp)
1104ef4c:	10000226 	beq	r2,zero,1104ef58 <_exit+0x34>
    ALT_SIM_FAIL();
1104ef50:	002af070 	cmpltui	zero,zero,43969
1104ef54:	00000106 	br	1104ef5c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
1104ef58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1104ef5c:	003fff06 	br	1104ef5c <_exit+0x38>
