
SoCKit_Audio.elf:     file format elf32-littlenios2
SoCKit_Audio.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x110801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x11080000 paddr 0x11080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x11080020 paddr 0x11080020 align 2**12
         filesz 0x0000f8b4 memsz 0x0000f8b4 flags r-x
    LOAD off    0x000108d4 vaddr 0x1108f8d4 paddr 0x11091330 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00012d8c vaddr 0x11092d8c paddr 0x11092d8c align 2**12
         filesz 0x00000000 memsz 0x00000318 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  11080000  11080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  11080020  11080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e970  110801b4  110801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000db0  1108eb24  1108eb24  0000fb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  1108f8d4  11091330  000108d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000318  11092d8c  11092d8c  00012d8c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00012330  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d78  00000000  00000000  00012358  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000017d2  00000000  00000000  000130d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026009  00000000  00000000  000148a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008272  00000000  00000000  0003a8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015b5e  00000000  00000000  00042b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001e14  00000000  00000000  0005867c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022e2  00000000  00000000  0005a490  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c78c  00000000  00000000  0005c772  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00068f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00068f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ce81  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006ce84  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ce87  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ce88  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006ce89  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006ce92  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006ce9b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006cea4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000035  00000000  00000000  0006ceae  2**0
                  CONTENTS, READONLY
 26 .jdi          00004cba  00000000  00000000  0006cee3  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000d6b8d  00000000  00000000  00071b9d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
11080000 l    d  .entry	00000000 .entry
11080020 l    d  .exceptions	00000000 .exceptions
110801b4 l    d  .text	00000000 .text
1108eb24 l    d  .rodata	00000000 .rodata
1108f8d4 l    d  .rwdata	00000000 .rwdata
11092d8c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
110801fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 AUDIO.c
11092dc4 l     O .bss	00000028 reg_file
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 LED.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
11082564 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
11082924 l     F .text	00000058 __sprint_r
1108f60c l     O .rodata	00000010 blanks.3452
1108f5fc l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
11084a7c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
11086478 l     F .text	00000058 std
11086584 l     F .text	00000008 __fp_lock
1108658c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1108f8d4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
110912fc l     O .rwdata	00000004 charset
1108f640 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1108f788 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
1108a718 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
1108bf6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1108bfcc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1108c0cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1108c3ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1108c48c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1108c5e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1108c814 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
11091324 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1108cae0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
11090290 l     O .rwdata	00001060 jtag_uart
1108cbb8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1108cdf8 l     F .text	00000228 altera_avalon_jtag_uart_irq
1108d020 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1108da34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1108de58 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
1108df94 l     F .text	000000dc alt_file_locked
1108e1f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
1108e90c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
1108eac0 l     F .text	00000040 alt_sim_halt
11081ec4 g     F .text	00000044 display_time_elapsed
11088234 g     F .text	00000094 _mprec_log10
1108126c g     F .text	0000018c I2C_Read
11088320 g     F .text	00000088 __any_on
11089a2c g     F .text	00000070 _isatty_r
1108f760 g     O .rodata	00000028 __mprec_tinytens
1108c648 g     F .text	0000006c alt_main
11082728 g     F .text	000000a0 _puts_r
11081c78 g     F .text	0000005c button_monitor_isr
11092e14 g     O .bss	00000100 alt_irq
11089a9c g     F .text	00000078 _lseek_r
11091330 g       *ABS*	00000000 __flash_rwdata_start
1108b238 g     F .text	00000088 __eqdf2
11081b7c g     F .text	00000054 ui_is_mic_record
110930a4 g       *ABS*	00000000 __alt_heap_start
11080200 g     F .text	00000218 AUDIO_Init
110826b0 g     F .text	00000044 printf
11080694 g     F .text	00000078 AUDIO_AdcEnableHighPassFilter
110894f8 g     F .text	00000068 __sseek
110864e0 g     F .text	000000a4 __sinit
110871b8 g     F .text	00000084 _setlocale_r
110865e0 g     F .text	00000068 __sfmoreglue
1108c6d4 g     F .text	00000020 __malloc_unlock
11087cb0 g     F .text	000000e0 memmove
110865d0 g     F .text	00000010 _cleanup
11080e84 g     F .text	000000f8 aduio_RegWrite
11081144 g     F .text	0000002c AUDIO_FifoClear
110883a8 g     F .text	000000bc _Balloc
11081950 g     F .text	0000002c LED_AllOff
1108b348 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
110810f0 g     F .text	00000054 AUDIO_AdcFifoGetData
1108167c g     F .text	00000124 i2c_write
11080000 g     F .entry	0000001c __reset
11080020 g       *ABS*	00000000 __flash_exceptions_start
110899b8 g     F .text	00000074 _fstat_r
11092da8 g     O .bss	00000004 errno
11092db4 g     O .bss	00000004 alt_argv
110992f0 g       *ABS*	00000000 _gp
1108c990 g     F .text	00000030 usleep
1108209c g     F .text	00000064 show_menu
11090110 g     O .rwdata	00000180 alt_fd_list
1108e41c g     F .text	00000094 alt_find_dev
11087c10 g     F .text	000000a0 memcpy
110818ec g     F .text	00000038 LED_Display
110865c4 g     F .text	0000000c _cleanup_r
1108b4e0 g     F .text	000000f8 __floatsidf
11081cd4 g     F .text	00000088 button_monitor_start
1108df1c g     F .text	00000078 alt_io_redirect
1108b458 g     F .text	00000088 __ltdf2
1108eb24 g       *ABS*	00000000 __DTOR_END__
110827c8 g     F .text	00000014 puts
11088184 g     F .text	000000b0 __ratio
11081d5c g     F .text	00000168 init_audio
1108d238 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
110826f4 g     F .text	00000034 _printf_r
110826a0 g     F .text	00000008 __udivsi3
1108c2ec g     F .text	000000c0 isatty
11080d6c g     F .text	0000008c AUDIO_EnableByPass
1108f670 g     O .rodata	000000c8 __mprec_tens
11087194 g     F .text	00000008 __locale_charset
11084900 g     F .text	00000040 vsnprintf
1108e688 g     F .text	00000090 alt_icache_flush
110813f8 g     F .text	00000184 I2C_MultipleRead
11092d9c g     O .bss	00000004 __malloc_top_pad
11080b34 g     F .text	0000011c AUDIO_SetLineInVol
110912f8 g     O .rwdata	00000004 __mb_cur_max
1108719c g     F .text	0000000c _localeconv_r
11088aa0 g     F .text	0000003c __i2b
11086b78 g     F .text	0000049c __sfvwrite_r
11089480 g     F .text	00000070 _sbrk_r
11081af8 g     F .text	00000084 myprintf_dword_array
11089b14 g     F .text	00000078 _read_r
1108fcd4 g     O .rwdata	0000000c __lc_ctype
11091318 g     O .rwdata	00000004 alt_max_fd
1108bc70 g     F .text	00000138 __unpack_d
11089894 g     F .text	00000110 _fclose_r
11086444 g     F .text	00000034 fflush
11092da0 g     O .bss	00000004 __malloc_max_sbrked_mem
1108c12c g     F .text	000001c0 alt_irq_register
1108aba8 g     F .text	00000074 __adddf3
11088064 g     F .text	00000120 __b2d
1108a168 g     F .text	000005b0 __umoddi3
1108c4f8 g     F .text	000000f0 lseek
110912f4 g     O .rwdata	00000004 _global_impure_ptr
11088e1c g     F .text	000005f4 _realloc_r
110930a4 g       *ABS*	00000000 __bss_end
1108dd60 g     F .text	000000f8 alt_iic_isr_register
1108e2f0 g     F .text	0000010c alt_tick
11089b8c g     F .text	000005dc __udivdi3
1108f738 g     O .rodata	00000028 __mprec_bigtens
11088cfc g     F .text	00000120 __s2b
1108b6b0 g     F .text	00000194 __floatunsidf
1108061c g     F .text	00000078 AUDIO_MicBoost
11087f84 g     F .text	00000060 __mcmp
11080418 g     F .text	000001c4 AUDIO_REG_READ
110865ac g     F .text	00000018 __fp_lock_all
1108dd18 g     F .text	00000048 alt_ic_irq_enabled
11081170 g     F .text	000000fc I2C_Write
1108e258 g     F .text	00000098 alt_alarm_stop
11092dac g     O .bss	00000004 alt_irq_active
110800ec g     F .exceptions	000000c8 alt_irq_handler
110900e8 g     O .rwdata	00000028 alt_dev_null
1108157c g     F .text	00000088 i2c_start
1108d93c g     F .text	00000044 alt_dcache_flush_all
11087e50 g     F .text	00000070 __hi0bits
1108b5d8 g     F .text	000000d8 __fixdfsi
11091330 g       *ABS*	00000000 __ram_rwdata_end
11091310 g     O .rwdata	00000008 alt_dev_list
1108c9c0 g     F .text	00000120 write
1108f8d4 g       *ABS*	00000000 __ram_rodata_end
1108bff8 g     F .text	000000d4 fstat
11081a18 g     F .text	00000060 myprintf
11088bdc g     F .text	00000120 __pow5mult
11092d90 g     O .bss	00000004 __nlocale_changed
110826a8 g     F .text	00000008 __umodsi3
11080df8 g     F .text	0000008c AUDIO_EnableSiteTone
110930a4 g       *ABS*	00000000 end
11081924 g     F .text	0000002c LED_AllOn
1108cd38 g     F .text	000000c0 altera_avalon_jtag_uart_init
1108eb20 g       *ABS*	00000000 __CTOR_LIST__
110b2000 g       *ABS*	00000000 __alt_stack_pointer
1108b8dc g     F .text	00000080 __clzsi2
1108d45c g     F .text	00000240 altera_avalon_jtag_uart_write
110864d0 g     F .text	00000004 __sfp_lock_acquire
11087b2c g     F .text	000000e4 memchr
1108297c g     F .text	00001eac ___vfprintf_internal_r
11082850 g     F .text	00000060 _sprintf_r
11086864 g     F .text	00000314 _free_r
1108e910 g     F .text	000001b0 __call_exitprocs
11092d94 g     O .bss	00000004 __mlocale_changed
11091304 g     O .rwdata	00000004 __malloc_sbrk_base
110801b4 g     F .text	0000004c _start
11092dbc g     O .bss	00000004 _alt_tick_rate
1108876c g     F .text	0000014c __lshift
11092dc0 g     O .bss	00000004 _alt_nticks
1108c6f4 g     F .text	00000120 read
1108cb74 g     F .text	00000044 alt_sys_init
1108e7d8 g     F .text	00000134 __register_exitproc
110807c4 g     F .text	0000008c AUDIO_DacEnableSoftMute
110888b8 g     F .text	000001e8 __multiply
1108d0d0 g     F .text	00000074 altera_avalon_jtag_uart_close
1108f8d4 g       *ABS*	00000000 __ram_rwdata_start
1108eb24 g       *ABS*	00000000 __ram_rodata_start
11092dec g     O .bss	00000028 __malloc_current_mallinfo
11080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
11088464 g     F .text	0000017c __d2b
1108cbf0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
1108e5d0 g     F .text	000000b8 alt_get_fd
1108d7f0 g     F .text	0000014c alt_busy_sleep
1108bda8 g     F .text	000000c8 __fpcmp_parts_d
11080f7c g     F .text	000000a4 aduio_RegRead
11089824 g     F .text	00000070 _close_r
1108e764 g     F .text	00000074 memcmp
1108cca0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
110930a4 g       *ABS*	00000000 __alt_stack_base
1108cce8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
11084940 g     F .text	0000013c __swsetup_r
11081f08 g     F .text	00000078 init
1108afe0 g     F .text	00000258 __divdf3
11086648 g     F .text	000000f0 __sfp
110882c8 g     F .text	00000058 __copybits
1108070c g     F .text	000000b8 AUDIO_DacDeemphasisControl
1108fce0 g     O .rwdata	00000408 __malloc_av_
110864dc g     F .text	00000004 __sinit_lock_release
1108484c g     F .text	000000b4 _vsnprintf_r
11081604 g     F .text	00000078 i2c_stop
1108ac1c g     F .text	000003c4 __muldf3
110895dc g     F .text	00000060 __sread
1108e4b0 g     F .text	00000120 alt_find_file
1108d980 g     F .text	000000b4 alt_dev_llist_insert
1108c6b4 g     F .text	00000020 __malloc_lock
1108c8d4 g     F .text	000000bc sbrk
110809bc g     F .text	0000008c AUDIO_SetInputSource
11086248 g     F .text	000001fc _fflush_r
11089770 g     F .text	000000b4 _calloc_r
110805dc g     F .text	00000040 AUDIO_InterfaceActive
11092d8c g       *ABS*	00000000 __bss_start
11087d90 g     F .text	00000098 memset
11082100 g     F .text	00000464 main
11092db8 g     O .bss	00000004 alt_envp
11092da4 g     O .bss	00000004 __malloc_max_total_mem
1108cc48 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
110817a0 g     F .text	0000014c i2c_read
11092d8c g     O .bss	00000004 record_sample_rate
110894f0 g     F .text	00000008 __sclose
110b2000 g       *ABS*	00000000 __alt_heap_limit
110899a4 g     F .text	00000014 fclose
11092f14 g     O .bss	00000190 _atexit0
11084c94 g     F .text	000015b4 _dtoa_r
110873ec g     F .text	00000740 _malloc_r
1109131c g     O .rwdata	00000004 alt_errno
110870dc g     F .text	000000b8 _fwalk
11081bd0 g     F .text	000000a8 ui_get_sample_rate
110825e0 g     F .text	00000060 __divsi3
1108f794 g     O .rodata	00000014 __thenan_df
11086738 g     F .text	0000012c _malloc_trim_r
1108eb24 g       *ABS*	00000000 __CTOR_END__
110808dc g     F .text	000000e0 AUDIO_LineInMute
1108963c g     F .text	000000bc strcmp
11080850 g     F .text	0000008c AUDIO_MicMute
1108eb24 g       *ABS*	00000000 __flash_rodata_start
1108eb24 g       *ABS*	00000000 __DTOR_LIST__
1108b2c0 g     F .text	00000088 __nedf2
1108cb40 g     F .text	00000034 alt_irq_init
1108c874 g     F .text	00000060 alt_release_fd
110827dc g     F .text	00000074 sprintf
1108f7a8 g     O .rodata	00000100 __clz_tab
110819e8 g     F .text	00000030 debug_output
11092d98 g     O .bss	00000004 _PathLocale
1108e718 g     F .text	00000014 atexit
11081f80 g     F .text	0000011c dump_record_data
110896f8 g     F .text	00000078 _write_r
1108723c g     F .text	0000001c setlocale
110912f0 g     O .rwdata	00000004 _impure_ptr
11092db0 g     O .bss	00000004 alt_argc
1108daf8 g     F .text	00000064 _do_dtors
110810b8 g     F .text	00000038 AUDIO_AdcFifoNotEmpty
11080020 g       .exceptions	00000000 alt_irq_entry
11087fe4 g     F .text	00000080 __ulp
11089410 g     F .text	00000040 __isinfd
11086594 g     F .text	00000018 __fp_unlock_all
11081074 g     F .text	00000044 AUDIO_DacFifoSetData
11091308 g     O .rwdata	00000008 alt_fs_list
11081a78 g     F .text	00000080 myprintf_hex_array
11080020 g       *ABS*	00000000 __ram_exceptions_start
11080a48 g     F .text	000000ec AUDIO_SetSampleRate
110871a8 g     F .text	00000010 localeconv
00000000 g       *ABS*	00000000 __alt_mem_DDR3
1108db8c g     F .text	00000050 alt_ic_isr_register
11091330 g       *ABS*	00000000 _edata
110930a4 g       *ABS*	00000000 _end
11080c50 g     F .text	0000011c AUDIO_SetLineOutVol
110801b4 g       *ABS*	00000000 __ram_exceptions_end
1108d144 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
1108dc78 g     F .text	000000a0 alt_ic_irq_disable
11089560 g     F .text	0000007c __swrite
11091300 g     O .rwdata	00000004 __malloc_trim_threshold
1108e3fc g     F .text	00000020 altera_nios2_qsys_irq_init
1108e72c g     F .text	00000038 exit
1108197c g     F .text	0000006c LED_LightCount
11087014 g     F .text	000000c8 _fwalk_reent
110885e0 g     F .text	0000018c __mdiff
11082640 g     F .text	00000060 __modsi3
110b2000 g       *ABS*	00000000 __alt_data_end
11080020 g     F .exceptions	00000000 alt_exception
110864d4 g     F .text	00000004 __sfp_lock_release
1108eb00 g     F .text	00000020 _exit
11089450 g     F .text	00000030 __isnand
1108d69c g     F .text	00000154 alt_alarm_start
1108b844 g     F .text	00000098 __muldi3
11087258 g     F .text	00000194 __smakebuf_r
110828b0 g     F .text	00000074 strlen
1108e070 g     F .text	00000188 open
11081020 g     F .text	00000054 AUDIO_DacFifoNotFull
1108b3d0 g     F .text	00000088 __gedf2
1108db5c g     F .text	00000030 alt_icache_flush_all
11091320 g     O .rwdata	00000004 alt_priority_mask
1108dbdc g     F .text	0000009c alt_ic_irq_enable
11084828 g     F .text	00000024 __vfprintf_internal
1108ab28 g     F .text	00000080 __subdf3
11087ec0 g     F .text	000000c4 __lo0bits
11091328 g     O .rwdata	00000008 alt_alarm_list
1108da94 g     F .text	00000064 _do_ctors
1108be70 g     F .text	000000fc close
1108c40c g     F .text	00000080 alt_load
1108b95c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
110864d8 g     F .text	00000004 __sinit_lock_acquire
11088adc g     F .text	00000100 __multadd
1108ed80 g     O .rodata	00000700 szMenu
11087e28 g     F .text	00000028 _Bfree



Disassembly of section .entry:

11080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
11080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
11080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
11080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1108000c:	00bffd16 	blt	zero,r2,11080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
11080010:	00444234 	movhi	at,4360
    ori r1, r1, %lo(_start)
11080014:	08406d14 	ori	at,at,436
    jmp r1
11080018:	0800683a 	jmp	at
1108001c:	00000000 	call	10000000 <__alt_mem_DDR3+0x10000000>

Disassembly of section .exceptions:

11080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
11080020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
11080024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
11080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1108002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
11080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
11080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
11080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1108003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
11080040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
11080044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
11080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1108004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
11080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
11080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
11080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1108005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
11080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
11080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
11080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1108006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
11080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
11080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
11080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1108007c:	10000326 	beq	r2,zero,1108008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
11080080:	20000226 	beq	r4,zero,1108008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
11080084:	10800ec0 	call	110800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
11080088:	00000306 	br	11080098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1108008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
11080090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
11080094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
11080098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1108009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
110800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
110800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
110800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
110800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
110800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
110800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
110800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
110800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
110800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
110800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
110800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
110800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
110800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
110800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
110800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
110800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
110800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
110800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
110800e8:	ef80083a 	eret

110800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
110800ec:	defff904 	addi	sp,sp,-28
110800f0:	dfc00615 	stw	ra,24(sp)
110800f4:	df000515 	stw	fp,20(sp)
110800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
110800fc:	0005313a 	rdctl	r2,ipending
11080100:	e0bffc15 	stw	r2,-16(fp)

  return active;
11080104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
11080108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
1108010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
11080110:	00800044 	movi	r2,1
11080114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
11080118:	e0ffff17 	ldw	r3,-4(fp)
1108011c:	e0bffe17 	ldw	r2,-8(fp)
11080120:	1884703a 	and	r2,r3,r2
11080124:	1005003a 	cmpeq	r2,r2,zero
11080128:	1000161e 	bne	r2,zero,11080184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1108012c:	e0bffd17 	ldw	r2,-12(fp)
11080130:	00c44274 	movhi	r3,4361
11080134:	18cb8504 	addi	r3,r3,11796
11080138:	100490fa 	slli	r2,r2,3
1108013c:	10c5883a 	add	r2,r2,r3
11080140:	11400017 	ldw	r5,0(r2)
11080144:	e0bffd17 	ldw	r2,-12(fp)
11080148:	00c44274 	movhi	r3,4361
1108014c:	18cb8504 	addi	r3,r3,11796
11080150:	100490fa 	slli	r2,r2,3
11080154:	10c5883a 	add	r2,r2,r3
11080158:	10800104 	addi	r2,r2,4
1108015c:	11000017 	ldw	r4,0(r2)
11080160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
11080164:	0005313a 	rdctl	r2,ipending
11080168:	e0bffb15 	stw	r2,-20(fp)

  return active;
1108016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
11080170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
11080174:	e0bfff17 	ldw	r2,-4(fp)
11080178:	1004c03a 	cmpne	r2,r2,zero
1108017c:	103fe31e 	bne	r2,zero,1108010c <alt_irq_handler+0x20>
11080180:	00000706 	br	110801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
11080184:	e0bffe17 	ldw	r2,-8(fp)
11080188:	1085883a 	add	r2,r2,r2
1108018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
11080190:	e0bffd17 	ldw	r2,-12(fp)
11080194:	10800044 	addi	r2,r2,1
11080198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
1108019c:	003fde06 	br	11080118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
110801a0:	e037883a 	mov	sp,fp
110801a4:	dfc00117 	ldw	ra,4(sp)
110801a8:	df000017 	ldw	fp,0(sp)
110801ac:	dec00204 	addi	sp,sp,8
110801b0:	f800283a 	ret

Disassembly of section .text:

110801b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
110801b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
110801b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
110801bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
110801c0:	00bffd16 	blt	zero,r2,110801b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
110801c4:	06c442f4 	movhi	sp,4363
    ori sp, sp, %lo(__alt_stack_pointer)
110801c8:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
110801cc:	06844274 	movhi	gp,4361
    ori gp, gp, %lo(_gp)
110801d0:	d6a4bc14 	ori	gp,gp,37616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
110801d4:	00844274 	movhi	r2,4361
    ori r2, r2, %lo(__bss_start)
110801d8:	108b6314 	ori	r2,r2,11660

    movhi r3, %hi(__bss_end)
110801dc:	00c44274 	movhi	r3,4361
    ori r3, r3, %lo(__bss_end)
110801e0:	18cc2914 	ori	r3,r3,12452

    beq r2, r3, 1f
110801e4:	10c00326 	beq	r2,r3,110801f4 <_start+0x40>

0:
    stw zero, (r2)
110801e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
110801ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
110801f0:	10fffd36 	bltu	r2,r3,110801e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
110801f4:	108c40c0 	call	1108c40c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
110801f8:	108c6480 	call	1108c648 <alt_main>

110801fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
110801fc:	003fff06 	br	110801fc <alt_after_alt_main>

11080200 <AUDIO_Init>:

/////////////////////////////////////////////////////////////////////////
///////////// External function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool AUDIO_Init(void){
11080200:	defffc04 	addi	sp,sp,-16
11080204:	dfc00315 	stw	ra,12(sp)
11080208:	df000215 	stw	fp,8(sp)
1108020c:	df000204 	addi	fp,sp,8
   bool bSuccess = TRUE;
11080210:	00800044 	movi	r2,1
11080214:	e0bffe15 	stw	r2,-8(fp)
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init...\r\n"));
11080218:	01044274 	movhi	r4,4361
1108021c:	213ac904 	addi	r4,r4,-5340
11080220:	1081a180 	call	11081a18 <myprintf>

    if (bSuccess)
11080224:	e0bffe17 	ldw	r2,-8(fp)
11080228:	1005003a 	cmpeq	r2,r2,zero
1108022c:	1000041e 	bne	r2,zero,11080240 <AUDIO_Init+0x40>
        bSuccess = aduio_RegWrite(15, 0x0000);  // reset
11080230:	010003c4 	movi	r4,15
11080234:	000b883a 	mov	r5,zero
11080238:	1080e840 	call	11080e84 <aduio_RegWrite>
1108023c:	e0bffe15 	stw	r2,-8(fp)
        
    if (bSuccess)
11080240:	e0bffe17 	ldw	r2,-8(fp)
11080244:	1005003a 	cmpeq	r2,r2,zero
11080248:	1000041e 	bne	r2,zero,1108025c <AUDIO_Init+0x5c>
        bSuccess = aduio_RegWrite(9, 0x0000);  // inactive interface         
1108024c:	01000244 	movi	r4,9
11080250:	000b883a 	mov	r5,zero
11080254:	1080e840 	call	11080e84 <aduio_RegWrite>
11080258:	e0bffe15 	stw	r2,-8(fp)
       
    //usleep(20*1000);    
    if (bSuccess)
1108025c:	e0bffe17 	ldw	r2,-8(fp)
11080260:	1005003a 	cmpeq	r2,r2,zero
11080264:	1000041e 	bne	r2,zero,11080278 <AUDIO_Init+0x78>
        bSuccess = aduio_RegWrite(0, 0x0017);  // Left Line In: set left line in volume
11080268:	0009883a 	mov	r4,zero
1108026c:	014005c4 	movi	r5,23
11080270:	1080e840 	call	11080e84 <aduio_RegWrite>
11080274:	e0bffe15 	stw	r2,-8(fp)
        
    if (bSuccess)
11080278:	e0bffe17 	ldw	r2,-8(fp)
1108027c:	1005003a 	cmpeq	r2,r2,zero
11080280:	1000041e 	bne	r2,zero,11080294 <AUDIO_Init+0x94>
        bSuccess = aduio_RegWrite(1, 0x0017);  // Right Line In: set right line in volume
11080284:	01000044 	movi	r4,1
11080288:	014005c4 	movi	r5,23
1108028c:	1080e840 	call	11080e84 <aduio_RegWrite>
11080290:	e0bffe15 	stw	r2,-8(fp)
        
    if (bSuccess)
11080294:	e0bffe17 	ldw	r2,-8(fp)
11080298:	1005003a 	cmpeq	r2,r2,zero
1108029c:	1000041e 	bne	r2,zero,110802b0 <AUDIO_Init+0xb0>
        bSuccess = aduio_RegWrite(2, 0x005B);  // Left Headphone Out: set left line out volume
110802a0:	01000084 	movi	r4,2
110802a4:	014016c4 	movi	r5,91
110802a8:	1080e840 	call	11080e84 <aduio_RegWrite>
110802ac:	e0bffe15 	stw	r2,-8(fp)
        
    if (bSuccess)
110802b0:	e0bffe17 	ldw	r2,-8(fp)
110802b4:	1005003a 	cmpeq	r2,r2,zero
110802b8:	1000041e 	bne	r2,zero,110802cc <AUDIO_Init+0xcc>
        bSuccess = aduio_RegWrite(3, 0x005B);  // Right Headphone Out: set right line out volume
110802bc:	010000c4 	movi	r4,3
110802c0:	014016c4 	movi	r5,91
110802c4:	1080e840 	call	11080e84 <aduio_RegWrite>
110802c8:	e0bffe15 	stw	r2,-8(fp)
        
    if (bSuccess)      
110802cc:	e0bffe17 	ldw	r2,-8(fp)
110802d0:	1005003a 	cmpeq	r2,r2,zero
110802d4:	1000041e 	bne	r2,zero,110802e8 <AUDIO_Init+0xe8>
        bSuccess = aduio_RegWrite(4, 0x0014);  // Analogue Audio Path Control: set mic as input and enable dac
110802d8:	01000104 	movi	r4,4
110802dc:	01400504 	movi	r5,20
110802e0:	1080e840 	call	11080e84 <aduio_RegWrite>
110802e4:	e0bffe15 	stw	r2,-8(fp)
                
    if (bSuccess)
110802e8:	e0bffe17 	ldw	r2,-8(fp)
110802ec:	1005003a 	cmpeq	r2,r2,zero
110802f0:	1000041e 	bne	r2,zero,11080304 <AUDIO_Init+0x104>
        bSuccess = aduio_RegWrite(5, 0x0000);  // Digital Audio Path Control: disable soft mute         
110802f4:	01000144 	movi	r4,5
110802f8:	000b883a 	mov	r5,zero
110802fc:	1080e840 	call	11080e84 <aduio_RegWrite>
11080300:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
11080304:	e0bffe17 	ldw	r2,-8(fp)
11080308:	1005003a 	cmpeq	r2,r2,zero
1108030c:	1000041e 	bne	r2,zero,11080320 <AUDIO_Init+0x120>
        bSuccess = aduio_RegWrite(6, 0);  // power down control: power on all         
11080310:	01000184 	movi	r4,6
11080314:	000b883a 	mov	r5,zero
11080318:	1080e840 	call	11080e84 <aduio_RegWrite>
1108031c:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
11080320:	e0bffe17 	ldw	r2,-8(fp)
11080324:	1005003a 	cmpeq	r2,r2,zero
11080328:	1000041e 	bne	r2,zero,1108033c <AUDIO_Init+0x13c>
        bSuccess = aduio_RegWrite(7, 0x0042);  // I2S, iwl=16-bits, Enable Master Mode         
1108032c:	010001c4 	movi	r4,7
11080330:	01401084 	movi	r5,66
11080334:	1080e840 	call	11080e84 <aduio_RegWrite>
11080338:	e0bffe15 	stw	r2,-8(fp)
//        bSuccess = aduio_RegWrite(7, 0x0041);  // MSB-First, left justified, iwl=16-bits, Enable Master Mode         

    if (bSuccess)
1108033c:	e0bffe17 	ldw	r2,-8(fp)
11080340:	1005003a 	cmpeq	r2,r2,zero
11080344:	1000041e 	bne	r2,zero,11080358 <AUDIO_Init+0x158>
        bSuccess = aduio_RegWrite(8, 0x0002);  // Normal, Base OVer-Sampleing Rate 384 fs (BOSR=1)         
11080348:	01000204 	movi	r4,8
1108034c:	01400084 	movi	r5,2
11080350:	1080e840 	call	11080e84 <aduio_RegWrite>
11080354:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
11080358:	e0bffe17 	ldw	r2,-8(fp)
1108035c:	1005003a 	cmpeq	r2,r2,zero
11080360:	1000041e 	bne	r2,zero,11080374 <AUDIO_Init+0x174>
        bSuccess = aduio_RegWrite(16, 0x007B);//ALC CONTROL 1
11080364:	01000404 	movi	r4,16
11080368:	01401ec4 	movi	r5,123
1108036c:	1080e840 	call	11080e84 <aduio_RegWrite>
11080370:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
11080374:	e0bffe17 	ldw	r2,-8(fp)
11080378:	1005003a 	cmpeq	r2,r2,zero
1108037c:	1000041e 	bne	r2,zero,11080390 <AUDIO_Init+0x190>
        bSuccess = aduio_RegWrite(17, 0x0032);//ALC CONTROL 2
11080380:	01000444 	movi	r4,17
11080384:	01400c84 	movi	r5,50
11080388:	1080e840 	call	11080e84 <aduio_RegWrite>
1108038c:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
11080390:	e0bffe17 	ldw	r2,-8(fp)
11080394:	1005003a 	cmpeq	r2,r2,zero
11080398:	1000041e 	bne	r2,zero,110803ac <AUDIO_Init+0x1ac>
        bSuccess = aduio_RegWrite(18, 0x0000);//NOISE GATE
1108039c:	01000484 	movi	r4,18
110803a0:	000b883a 	mov	r5,zero
110803a4:	1080e840 	call	11080e84 <aduio_RegWrite>
110803a8:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
110803ac:	e0bffe17 	ldw	r2,-8(fp)
110803b0:	1005003a 	cmpeq	r2,r2,zero
110803b4:	1000041e 	bne	r2,zero,110803c8 <AUDIO_Init+0x1c8>
        bSuccess = aduio_RegWrite(9, 0x0001);  // active interface
110803b8:	01000244 	movi	r4,9
110803bc:	01400044 	movi	r5,1
110803c0:	1080e840 	call	11080e84 <aduio_RegWrite>
110803c4:	e0bffe15 	stw	r2,-8(fp)
        
        
         
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init %s\r\n", bSuccess?"success":"fail"));        
110803c8:	e0bffe17 	ldw	r2,-8(fp)
110803cc:	1005003a 	cmpeq	r2,r2,zero
110803d0:	1000041e 	bne	r2,zero,110803e4 <AUDIO_Init+0x1e4>
110803d4:	00844274 	movhi	r2,4361
110803d8:	10bacf04 	addi	r2,r2,-5316
110803dc:	e0bfff15 	stw	r2,-4(fp)
110803e0:	00000306 	br	110803f0 <AUDIO_Init+0x1f0>
110803e4:	00844274 	movhi	r2,4361
110803e8:	10bad104 	addi	r2,r2,-5308
110803ec:	e0bfff15 	stw	r2,-4(fp)
110803f0:	01044274 	movhi	r4,4361
110803f4:	213ad304 	addi	r4,r4,-5300
110803f8:	e17fff17 	ldw	r5,-4(fp)
110803fc:	1081a180 	call	11081a18 <myprintf>
    
    return bSuccess;
11080400:	e0bffe17 	ldw	r2,-8(fp)

}
11080404:	e037883a 	mov	sp,fp
11080408:	dfc00117 	ldw	ra,4(sp)
1108040c:	df000017 	ldw	fp,0(sp)
11080410:	dec00204 	addi	sp,sp,8
11080414:	f800283a 	ret

11080418 <AUDIO_REG_READ>:

bool AUDIO_REG_READ(void){
11080418:	defffc04 	addi	sp,sp,-16
1108041c:	dfc00315 	stw	ra,12(sp)
11080420:	df000215 	stw	fp,8(sp)
11080424:	df000204 	addi	fp,sp,8
   bool bSuccess = TRUE;
11080428:	00800044 	movi	r2,1
1108042c:	e0bffe15 	stw	r2,-8(fp)
    AUDIO_DEBUG(("[AUDIO] AUDIO_REG_READ...\r\n"));
11080430:	01044274 	movhi	r4,4361
11080434:	213ad904 	addi	r4,r4,-5276
11080438:	1081a180 	call	11081a18 <myprintf>

    if (bSuccess)
1108043c:	e0bffe17 	ldw	r2,-8(fp)
11080440:	1005003a 	cmpeq	r2,r2,zero
11080444:	1000031e 	bne	r2,zero,11080454 <AUDIO_REG_READ+0x3c>
        bSuccess = aduio_RegRead(0);
11080448:	0009883a 	mov	r4,zero
1108044c:	1080f7c0 	call	11080f7c <aduio_RegRead>
11080450:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
11080454:	e0bffe17 	ldw	r2,-8(fp)
11080458:	1005003a 	cmpeq	r2,r2,zero
1108045c:	1000031e 	bne	r2,zero,1108046c <AUDIO_REG_READ+0x54>
        bSuccess = aduio_RegRead(1);
11080460:	01000044 	movi	r4,1
11080464:	1080f7c0 	call	11080f7c <aduio_RegRead>
11080468:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
1108046c:	e0bffe17 	ldw	r2,-8(fp)
11080470:	1005003a 	cmpeq	r2,r2,zero
11080474:	1000031e 	bne	r2,zero,11080484 <AUDIO_REG_READ+0x6c>
        bSuccess = aduio_RegRead(2);
11080478:	01000084 	movi	r4,2
1108047c:	1080f7c0 	call	11080f7c <aduio_RegRead>
11080480:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
11080484:	e0bffe17 	ldw	r2,-8(fp)
11080488:	1005003a 	cmpeq	r2,r2,zero
1108048c:	1000031e 	bne	r2,zero,1108049c <AUDIO_REG_READ+0x84>
        bSuccess = aduio_RegRead(3);
11080490:	010000c4 	movi	r4,3
11080494:	1080f7c0 	call	11080f7c <aduio_RegRead>
11080498:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
1108049c:	e0bffe17 	ldw	r2,-8(fp)
110804a0:	1005003a 	cmpeq	r2,r2,zero
110804a4:	1000031e 	bne	r2,zero,110804b4 <AUDIO_REG_READ+0x9c>
        bSuccess = aduio_RegRead(4);
110804a8:	01000104 	movi	r4,4
110804ac:	1080f7c0 	call	11080f7c <aduio_RegRead>
110804b0:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
110804b4:	e0bffe17 	ldw	r2,-8(fp)
110804b8:	1005003a 	cmpeq	r2,r2,zero
110804bc:	1000031e 	bne	r2,zero,110804cc <AUDIO_REG_READ+0xb4>
        bSuccess = aduio_RegRead(5);
110804c0:	01000144 	movi	r4,5
110804c4:	1080f7c0 	call	11080f7c <aduio_RegRead>
110804c8:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
110804cc:	e0bffe17 	ldw	r2,-8(fp)
110804d0:	1005003a 	cmpeq	r2,r2,zero
110804d4:	1000031e 	bne	r2,zero,110804e4 <AUDIO_REG_READ+0xcc>
        bSuccess = aduio_RegRead(6);
110804d8:	01000184 	movi	r4,6
110804dc:	1080f7c0 	call	11080f7c <aduio_RegRead>
110804e0:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
110804e4:	e0bffe17 	ldw	r2,-8(fp)
110804e8:	1005003a 	cmpeq	r2,r2,zero
110804ec:	1000031e 	bne	r2,zero,110804fc <AUDIO_REG_READ+0xe4>
        bSuccess = aduio_RegRead(7);
110804f0:	010001c4 	movi	r4,7
110804f4:	1080f7c0 	call	11080f7c <aduio_RegRead>
110804f8:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
110804fc:	e0bffe17 	ldw	r2,-8(fp)
11080500:	1005003a 	cmpeq	r2,r2,zero
11080504:	1000031e 	bne	r2,zero,11080514 <AUDIO_REG_READ+0xfc>
        bSuccess = aduio_RegRead(8);
11080508:	01000204 	movi	r4,8
1108050c:	1080f7c0 	call	11080f7c <aduio_RegRead>
11080510:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
11080514:	e0bffe17 	ldw	r2,-8(fp)
11080518:	1005003a 	cmpeq	r2,r2,zero
1108051c:	1000031e 	bne	r2,zero,1108052c <AUDIO_REG_READ+0x114>
        bSuccess = aduio_RegRead(9);
11080520:	01000244 	movi	r4,9
11080524:	1080f7c0 	call	11080f7c <aduio_RegRead>
11080528:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
1108052c:	e0bffe17 	ldw	r2,-8(fp)
11080530:	1005003a 	cmpeq	r2,r2,zero
11080534:	1000031e 	bne	r2,zero,11080544 <AUDIO_REG_READ+0x12c>
        bSuccess = aduio_RegRead(15);
11080538:	010003c4 	movi	r4,15
1108053c:	1080f7c0 	call	11080f7c <aduio_RegRead>
11080540:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
11080544:	e0bffe17 	ldw	r2,-8(fp)
11080548:	1005003a 	cmpeq	r2,r2,zero
1108054c:	1000031e 	bne	r2,zero,1108055c <AUDIO_REG_READ+0x144>
        bSuccess = aduio_RegRead(16);
11080550:	01000404 	movi	r4,16
11080554:	1080f7c0 	call	11080f7c <aduio_RegRead>
11080558:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
1108055c:	e0bffe17 	ldw	r2,-8(fp)
11080560:	1005003a 	cmpeq	r2,r2,zero
11080564:	1000031e 	bne	r2,zero,11080574 <AUDIO_REG_READ+0x15c>
        bSuccess = aduio_RegRead(17);
11080568:	01000444 	movi	r4,17
1108056c:	1080f7c0 	call	11080f7c <aduio_RegRead>
11080570:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
11080574:	e0bffe17 	ldw	r2,-8(fp)
11080578:	1005003a 	cmpeq	r2,r2,zero
1108057c:	1000031e 	bne	r2,zero,1108058c <AUDIO_REG_READ+0x174>
        bSuccess =aduio_RegRead(18);
11080580:	01000484 	movi	r4,18
11080584:	1080f7c0 	call	11080f7c <aduio_RegRead>
11080588:	e0bffe15 	stw	r2,-8(fp)


    AUDIO_DEBUG(("[AUDIO] AUDIO_REG_READ %s\r\n", bSuccess?"success":"fail"));
1108058c:	e0bffe17 	ldw	r2,-8(fp)
11080590:	1005003a 	cmpeq	r2,r2,zero
11080594:	1000041e 	bne	r2,zero,110805a8 <AUDIO_REG_READ+0x190>
11080598:	00844274 	movhi	r2,4361
1108059c:	10bacf04 	addi	r2,r2,-5316
110805a0:	e0bfff15 	stw	r2,-4(fp)
110805a4:	00000306 	br	110805b4 <AUDIO_REG_READ+0x19c>
110805a8:	00844274 	movhi	r2,4361
110805ac:	10bad104 	addi	r2,r2,-5308
110805b0:	e0bfff15 	stw	r2,-4(fp)
110805b4:	01044274 	movhi	r4,4361
110805b8:	213ae004 	addi	r4,r4,-5248
110805bc:	e17fff17 	ldw	r5,-4(fp)
110805c0:	1081a180 	call	11081a18 <myprintf>

    return bSuccess;
110805c4:	e0bffe17 	ldw	r2,-8(fp)

    }
110805c8:	e037883a 	mov	sp,fp
110805cc:	dfc00117 	ldw	ra,4(sp)
110805d0:	df000017 	ldw	fp,0(sp)
110805d4:	dec00204 	addi	sp,sp,8
110805d8:	f800283a 	ret

110805dc <AUDIO_InterfaceActive>:

bool AUDIO_InterfaceActive(bool bActive){
110805dc:	defffc04 	addi	sp,sp,-16
110805e0:	dfc00315 	stw	ra,12(sp)
110805e4:	df000215 	stw	fp,8(sp)
110805e8:	df000204 	addi	fp,sp,8
110805ec:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    bSuccess = aduio_RegWrite(9, bActive?0x0001:0x0000); 
110805f0:	e0bfff17 	ldw	r2,-4(fp)
110805f4:	100ac03a 	cmpne	r5,r2,zero
110805f8:	01000244 	movi	r4,9
110805fc:	1080e840 	call	11080e84 <aduio_RegWrite>
11080600:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
11080604:	e0bffe17 	ldw	r2,-8(fp)
}
11080608:	e037883a 	mov	sp,fp
1108060c:	dfc00117 	ldw	ra,4(sp)
11080610:	df000017 	ldw	fp,0(sp)
11080614:	dec00204 	addi	sp,sp,8
11080618:	f800283a 	ret

1108061c <AUDIO_MicBoost>:

bool AUDIO_MicBoost(bool bBoost){
1108061c:	defffb04 	addi	sp,sp,-20
11080620:	dfc00415 	stw	ra,16(sp)
11080624:	df000315 	stw	fp,12(sp)
11080628:	df000304 	addi	fp,sp,12
1108062c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[4];
11080630:	00844274 	movhi	r2,4361
11080634:	108b7104 	addi	r2,r2,11716
11080638:	1080020b 	ldhu	r2,8(r2)
1108063c:	e0bffd0d 	sth	r2,-12(fp)
    if (bBoost)
11080640:	e0bfff17 	ldw	r2,-4(fp)
11080644:	1005003a 	cmpeq	r2,r2,zero
11080648:	1000041e 	bne	r2,zero,1108065c <AUDIO_MicBoost+0x40>
        control |= 0x0001;
1108064c:	e0bffd0b 	ldhu	r2,-12(fp)
11080650:	10800054 	ori	r2,r2,1
11080654:	e0bffd0d 	sth	r2,-12(fp)
11080658:	00000406 	br	1108066c <AUDIO_MicBoost+0x50>
    else        
        control &= 0xFFFE;
1108065c:	00bfff84 	movi	r2,-2
11080660:	e0fffd0b 	ldhu	r3,-12(fp)
11080664:	1884703a 	and	r2,r3,r2
11080668:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
1108066c:	e17ffd0b 	ldhu	r5,-12(fp)
11080670:	01000104 	movi	r4,4
11080674:	1080e840 	call	11080e84 <aduio_RegWrite>
11080678:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
1108067c:	e0bffe17 	ldw	r2,-8(fp)
}
11080680:	e037883a 	mov	sp,fp
11080684:	dfc00117 	ldw	ra,4(sp)
11080688:	df000017 	ldw	fp,0(sp)
1108068c:	dec00204 	addi	sp,sp,8
11080690:	f800283a 	ret

11080694 <AUDIO_AdcEnableHighPassFilter>:

bool AUDIO_AdcEnableHighPassFilter(bool bEnable){
11080694:	defffb04 	addi	sp,sp,-20
11080698:	dfc00415 	stw	ra,16(sp)
1108069c:	df000315 	stw	fp,12(sp)
110806a0:	df000304 	addi	fp,sp,12
110806a4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
110806a8:	00844274 	movhi	r2,4361
110806ac:	108b7104 	addi	r2,r2,11716
110806b0:	1080028b 	ldhu	r2,10(r2)
110806b4:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
110806b8:	e0bfff17 	ldw	r2,-4(fp)
110806bc:	1005003a 	cmpeq	r2,r2,zero
110806c0:	1000051e 	bne	r2,zero,110806d8 <AUDIO_AdcEnableHighPassFilter+0x44>
        control &= 0xFFFE;
110806c4:	00bfff84 	movi	r2,-2
110806c8:	e0fffd0b 	ldhu	r3,-12(fp)
110806cc:	1884703a 	and	r2,r3,r2
110806d0:	e0bffd0d 	sth	r2,-12(fp)
110806d4:	00000306 	br	110806e4 <AUDIO_AdcEnableHighPassFilter+0x50>
    else        
        control |= 0x0001;
110806d8:	e0bffd0b 	ldhu	r2,-12(fp)
110806dc:	10800054 	ori	r2,r2,1
110806e0:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
110806e4:	e17ffd0b 	ldhu	r5,-12(fp)
110806e8:	01000144 	movi	r4,5
110806ec:	1080e840 	call	11080e84 <aduio_RegWrite>
110806f0:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;    
110806f4:	e0bffe17 	ldw	r2,-8(fp)
}
110806f8:	e037883a 	mov	sp,fp
110806fc:	dfc00117 	ldw	ra,4(sp)
11080700:	df000017 	ldw	fp,0(sp)
11080704:	dec00204 	addi	sp,sp,8
11080708:	f800283a 	ret

1108070c <AUDIO_DacDeemphasisControl>:



bool AUDIO_DacDeemphasisControl(alt_u8 deemphasis_type){
1108070c:	defffa04 	addi	sp,sp,-24
11080710:	dfc00515 	stw	ra,20(sp)
11080714:	df000415 	stw	fp,16(sp)
11080718:	df000404 	addi	fp,sp,16
1108071c:	e13ffe05 	stb	r4,-8(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
11080720:	00844274 	movhi	r2,4361
11080724:	108b7104 	addi	r2,r2,11716
11080728:	1080028b 	ldhu	r2,10(r2)
1108072c:	e0bffc0d 	sth	r2,-16(fp)
    control &= 0xFFF9;
11080730:	00fffe44 	movi	r3,-7
11080734:	e0bffc0b 	ldhu	r2,-16(fp)
11080738:	10c4703a 	and	r2,r2,r3
1108073c:	e0bffc0d 	sth	r2,-16(fp)
    switch(deemphasis_type){
11080740:	e0bffe03 	ldbu	r2,-8(fp)
11080744:	e0bfff15 	stw	r2,-4(fp)
11080748:	e0ffff17 	ldw	r3,-4(fp)
1108074c:	188000a0 	cmpeqi	r2,r3,2
11080750:	10000b1e 	bne	r2,zero,11080780 <AUDIO_DacDeemphasisControl+0x74>
11080754:	e0ffff17 	ldw	r3,-4(fp)
11080758:	188000e0 	cmpeqi	r2,r3,3
1108075c:	10000c1e 	bne	r2,zero,11080790 <AUDIO_DacDeemphasisControl+0x84>
11080760:	e0ffff17 	ldw	r3,-4(fp)
11080764:	18800060 	cmpeqi	r2,r3,1
11080768:	1000011e 	bne	r2,zero,11080770 <AUDIO_DacDeemphasisControl+0x64>
1108076c:	00000b06 	br	1108079c <AUDIO_DacDeemphasisControl+0x90>
        case DEEMPHASIS_48K: control |= ((0x03) << 1); break;
11080770:	e0bffc0b 	ldhu	r2,-16(fp)
11080774:	10800194 	ori	r2,r2,6
11080778:	e0bffc0d 	sth	r2,-16(fp)
1108077c:	00000706 	br	1108079c <AUDIO_DacDeemphasisControl+0x90>
        case DEEMPHASIS_44K1: control |= ((0x02) << 1); break;
11080780:	e0bffc0b 	ldhu	r2,-16(fp)
11080784:	10800114 	ori	r2,r2,4
11080788:	e0bffc0d 	sth	r2,-16(fp)
1108078c:	00000306 	br	1108079c <AUDIO_DacDeemphasisControl+0x90>
        case DEEMPHASIS_32K: control |= ((0x01) << 1); break;
11080790:	e0bffc0b 	ldhu	r2,-16(fp)
11080794:	10800094 	ori	r2,r2,2
11080798:	e0bffc0d 	sth	r2,-16(fp)
    }
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
1108079c:	e17ffc0b 	ldhu	r5,-16(fp)
110807a0:	01000144 	movi	r4,5
110807a4:	1080e840 	call	11080e84 <aduio_RegWrite>
110807a8:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;       
110807ac:	e0bffd17 	ldw	r2,-12(fp)
}
110807b0:	e037883a 	mov	sp,fp
110807b4:	dfc00117 	ldw	ra,4(sp)
110807b8:	df000017 	ldw	fp,0(sp)
110807bc:	dec00204 	addi	sp,sp,8
110807c0:	f800283a 	ret

110807c4 <AUDIO_DacEnableSoftMute>:

bool AUDIO_DacEnableSoftMute(bool bEnable){
110807c4:	defffb04 	addi	sp,sp,-20
110807c8:	dfc00415 	stw	ra,16(sp)
110807cc:	df000315 	stw	fp,12(sp)
110807d0:	df000304 	addi	fp,sp,12
110807d4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[5];
110807d8:	00844274 	movhi	r2,4361
110807dc:	108b7104 	addi	r2,r2,11716
110807e0:	1080028b 	ldhu	r2,10(r2)
110807e4:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 3;
110807e8:	00800204 	movi	r2,8
110807ec:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
110807f0:	e0bfff17 	ldw	r2,-4(fp)
110807f4:	1005003a 	cmpeq	r2,r2,zero
110807f8:	1000051e 	bne	r2,zero,11080810 <AUDIO_DacEnableSoftMute+0x4c>
        control |= mask;
110807fc:	e0bffd8b 	ldhu	r2,-10(fp)
11080800:	e0fffd0b 	ldhu	r3,-12(fp)
11080804:	10c4b03a 	or	r2,r2,r3
11080808:	e0bffd8d 	sth	r2,-10(fp)
1108080c:	00000606 	br	11080828 <AUDIO_DacEnableSoftMute+0x64>
    else        
        control &= ~mask;
11080810:	e0bffd0b 	ldhu	r2,-12(fp)
11080814:	0084303a 	nor	r2,zero,r2
11080818:	1007883a 	mov	r3,r2
1108081c:	e0bffd8b 	ldhu	r2,-10(fp)
11080820:	1884703a 	and	r2,r3,r2
11080824:	e0bffd8d 	sth	r2,-10(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
11080828:	e17ffd8b 	ldhu	r5,-10(fp)
1108082c:	01000144 	movi	r4,5
11080830:	1080e840 	call	11080e84 <aduio_RegWrite>
11080834:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
11080838:	e0bffe17 	ldw	r2,-8(fp)
}
1108083c:	e037883a 	mov	sp,fp
11080840:	dfc00117 	ldw	ra,4(sp)
11080844:	df000017 	ldw	fp,0(sp)
11080848:	dec00204 	addi	sp,sp,8
1108084c:	f800283a 	ret

11080850 <AUDIO_MicMute>:

bool AUDIO_MicMute(bool bMute){
11080850:	defffb04 	addi	sp,sp,-20
11080854:	dfc00415 	stw	ra,16(sp)
11080858:	df000315 	stw	fp,12(sp)
1108085c:	df000304 	addi	fp,sp,12
11080860:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
11080864:	00844274 	movhi	r2,4361
11080868:	108b7104 	addi	r2,r2,11716
1108086c:	1080020b 	ldhu	r2,8(r2)
11080870:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 1;
11080874:	00800084 	movi	r2,2
11080878:	e0bffd0d 	sth	r2,-12(fp)
    if (bMute)
1108087c:	e0bfff17 	ldw	r2,-4(fp)
11080880:	1005003a 	cmpeq	r2,r2,zero
11080884:	1000051e 	bne	r2,zero,1108089c <AUDIO_MicMute+0x4c>
        control |= mask;
11080888:	e0bffd8b 	ldhu	r2,-10(fp)
1108088c:	e0fffd0b 	ldhu	r3,-12(fp)
11080890:	10c4b03a 	or	r2,r2,r3
11080894:	e0bffd8d 	sth	r2,-10(fp)
11080898:	00000606 	br	110808b4 <AUDIO_MicMute+0x64>
    else        
        control &= ~mask;
1108089c:	e0bffd0b 	ldhu	r2,-12(fp)
110808a0:	0084303a 	nor	r2,zero,r2
110808a4:	1007883a 	mov	r3,r2
110808a8:	e0bffd8b 	ldhu	r2,-10(fp)
110808ac:	1884703a 	and	r2,r3,r2
110808b0:	e0bffd8d 	sth	r2,-10(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
110808b4:	e17ffd8b 	ldhu	r5,-10(fp)
110808b8:	01000104 	movi	r4,4
110808bc:	1080e840 	call	11080e84 <aduio_RegWrite>
110808c0:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
110808c4:	e0bffe17 	ldw	r2,-8(fp)
}
110808c8:	e037883a 	mov	sp,fp
110808cc:	dfc00117 	ldw	ra,4(sp)
110808d0:	df000017 	ldw	fp,0(sp)
110808d4:	dec00204 	addi	sp,sp,8
110808d8:	f800283a 	ret

110808dc <AUDIO_LineInMute>:

bool AUDIO_LineInMute(bool bMute){
110808dc:	defffa04 	addi	sp,sp,-24
110808e0:	dfc00515 	stw	ra,20(sp)
110808e4:	df000415 	stw	fp,16(sp)
110808e8:	df000404 	addi	fp,sp,16
110808ec:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control_l, control_r;
    alt_u16 mask;
    control_l = reg_file[0];
110808f0:	00844274 	movhi	r2,4361
110808f4:	108b7104 	addi	r2,r2,11716
110808f8:	1080000b 	ldhu	r2,0(r2)
110808fc:	e0bffd0d 	sth	r2,-12(fp)
    control_r = reg_file[1];
11080900:	00844274 	movhi	r2,4361
11080904:	108b7104 	addi	r2,r2,11716
11080908:	1080008b 	ldhu	r2,2(r2)
1108090c:	e0bffc8d 	sth	r2,-14(fp)
    mask = 0x01 << 7;
11080910:	00802004 	movi	r2,128
11080914:	e0bffc0d 	sth	r2,-16(fp)
    if (bMute){
11080918:	e0bfff17 	ldw	r2,-4(fp)
1108091c:	1005003a 	cmpeq	r2,r2,zero
11080920:	1000091e 	bne	r2,zero,11080948 <AUDIO_LineInMute+0x6c>
        control_l |= mask;
11080924:	e0fffd0b 	ldhu	r3,-12(fp)
11080928:	e0bffc0b 	ldhu	r2,-16(fp)
1108092c:	1884b03a 	or	r2,r3,r2
11080930:	e0bffd0d 	sth	r2,-12(fp)
        control_r |= mask;
11080934:	e0fffc8b 	ldhu	r3,-14(fp)
11080938:	e0bffc0b 	ldhu	r2,-16(fp)
1108093c:	1884b03a 	or	r2,r3,r2
11080940:	e0bffc8d 	sth	r2,-14(fp)
11080944:	00000c06 	br	11080978 <AUDIO_LineInMute+0x9c>
    }else{        
        control_l &= ~mask;
11080948:	e0bffc0b 	ldhu	r2,-16(fp)
1108094c:	0084303a 	nor	r2,zero,r2
11080950:	1007883a 	mov	r3,r2
11080954:	e0bffd0b 	ldhu	r2,-12(fp)
11080958:	1884703a 	and	r2,r3,r2
1108095c:	e0bffd0d 	sth	r2,-12(fp)
        control_r &= ~mask;
11080960:	e0bffc0b 	ldhu	r2,-16(fp)
11080964:	0084303a 	nor	r2,zero,r2
11080968:	1007883a 	mov	r3,r2
1108096c:	e0bffc8b 	ldhu	r2,-14(fp)
11080970:	1884703a 	and	r2,r3,r2
11080974:	e0bffc8d 	sth	r2,-14(fp)
    }        
    bSuccess = aduio_RegWrite(0, control_l);  // Left Line In: set left line in volume
11080978:	e17ffd0b 	ldhu	r5,-12(fp)
1108097c:	0009883a 	mov	r4,zero
11080980:	1080e840 	call	11080e84 <aduio_RegWrite>
11080984:	e0bffe15 	stw	r2,-8(fp)
    if (bSuccess)
11080988:	e0bffe17 	ldw	r2,-8(fp)
1108098c:	1005003a 	cmpeq	r2,r2,zero
11080990:	1000041e 	bne	r2,zero,110809a4 <AUDIO_LineInMute+0xc8>
        bSuccess = aduio_RegWrite(1, control_r);  // Left Line In: set left line in volume
11080994:	e17ffc8b 	ldhu	r5,-14(fp)
11080998:	01000044 	movi	r4,1
1108099c:	1080e840 	call	11080e84 <aduio_RegWrite>
110809a0:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
110809a4:	e0bffe17 	ldw	r2,-8(fp)
}
110809a8:	e037883a 	mov	sp,fp
110809ac:	dfc00117 	ldw	ra,4(sp)
110809b0:	df000017 	ldw	fp,0(sp)
110809b4:	dec00204 	addi	sp,sp,8
110809b8:	f800283a 	ret

110809bc <AUDIO_SetInputSource>:


bool AUDIO_SetInputSource(alt_u8 InputSource){
110809bc:	defffb04 	addi	sp,sp,-20
110809c0:	dfc00415 	stw	ra,16(sp)
110809c4:	df000315 	stw	fp,12(sp)
110809c8:	df000304 	addi	fp,sp,12
110809cc:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
110809d0:	00844274 	movhi	r2,4361
110809d4:	108b7104 	addi	r2,r2,11716
110809d8:	1080020b 	ldhu	r2,8(r2)
110809dc:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 2;
110809e0:	00800104 	movi	r2,4
110809e4:	e0bffd0d 	sth	r2,-12(fp)
    if (InputSource == SOURCE_MIC)
110809e8:	e0bfff03 	ldbu	r2,-4(fp)
110809ec:	1004c03a 	cmpne	r2,r2,zero
110809f0:	1000051e 	bne	r2,zero,11080a08 <AUDIO_SetInputSource+0x4c>
        control |= mask;
110809f4:	e0bffd8b 	ldhu	r2,-10(fp)
110809f8:	e0fffd0b 	ldhu	r3,-12(fp)
110809fc:	10c4b03a 	or	r2,r2,r3
11080a00:	e0bffd8d 	sth	r2,-10(fp)
11080a04:	00000606 	br	11080a20 <AUDIO_SetInputSource+0x64>
    else        
        control &= ~mask;
11080a08:	e0bffd0b 	ldhu	r2,-12(fp)
11080a0c:	0084303a 	nor	r2,zero,r2
11080a10:	1007883a 	mov	r3,r2
11080a14:	e0bffd8b 	ldhu	r2,-10(fp)
11080a18:	1884703a 	and	r2,r3,r2
11080a1c:	e0bffd8d 	sth	r2,-10(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
11080a20:	e17ffd8b 	ldhu	r5,-10(fp)
11080a24:	01000104 	movi	r4,4
11080a28:	1080e840 	call	11080e84 <aduio_RegWrite>
11080a2c:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;       
11080a30:	e0bffe17 	ldw	r2,-8(fp)
}
11080a34:	e037883a 	mov	sp,fp
11080a38:	dfc00117 	ldw	ra,4(sp)
11080a3c:	df000017 	ldw	fp,0(sp)
11080a40:	dec00204 	addi	sp,sp,8
11080a44:	f800283a 	ret

11080a48 <AUDIO_SetSampleRate>:

// See datasheet page 39
bool AUDIO_SetSampleRate(alt_u8 SampleRate){
11080a48:	defffa04 	addi	sp,sp,-24
11080a4c:	dfc00515 	stw	ra,20(sp)
11080a50:	df000415 	stw	fp,16(sp)
11080a54:	df000404 	addi	fp,sp,16
11080a58:	e13ffe05 	stb	r4,-8(fp)
    bool bSuccess;
    alt_u16 control;
    control = 0;
11080a5c:	e03ffc0d 	sth	zero,-16(fp)

    switch(SampleRate){
11080a60:	e0bffe03 	ldbu	r2,-8(fp)
11080a64:	e0bfff15 	stw	r2,-4(fp)
11080a68:	e0ffff17 	ldw	r3,-4(fp)
11080a6c:	188001e8 	cmpgeui	r2,r3,7
11080a70:	1000231e 	bne	r2,zero,11080b00 <AUDIO_SetSampleRate+0xb8>
11080a74:	e13fff17 	ldw	r4,-4(fp)
11080a78:	e13fff17 	ldw	r4,-4(fp)
11080a7c:	2105883a 	add	r2,r4,r4
11080a80:	1087883a 	add	r3,r2,r2
11080a84:	00844234 	movhi	r2,4360
11080a88:	1082a604 	addi	r2,r2,2712
11080a8c:	1885883a 	add	r2,r3,r2
11080a90:	10800017 	ldw	r2,0(r2)
11080a94:	1000683a 	jmp	r2
11080a98:	11080ab4 	orhi	r4,r2,8234
11080a9c:	11080abc 	xorhi	r4,r2,8234
11080aa0:	11080ac8 	cmpgei	r4,r2,8235
11080aa4:	11080ad4 	ori	r4,r2,8235
11080aa8:	11080ae0 	cmpeqi	r4,r2,8235
11080aac:	11080aec 	andhi	r4,r2,8235
11080ab0:	11080af8 	rdprs	r4,r2,8235
         // MCLK = 18.432
        case RATE_ADC48K_DAC48K: control = (0x0) << 2; break;
11080ab4:	e03ffc0d 	sth	zero,-16(fp)
11080ab8:	00001106 	br	11080b00 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC48K_DAC8K: control = (0x1) << 2; break;
11080abc:	00800104 	movi	r2,4
11080ac0:	e0bffc0d 	sth	r2,-16(fp)
11080ac4:	00000e06 	br	11080b00 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC8K_DAC48K: control = (0x2) << 2; break;
11080ac8:	00800204 	movi	r2,8
11080acc:	e0bffc0d 	sth	r2,-16(fp)
11080ad0:	00000b06 	br	11080b00 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC8K_DAC8K: control = (0x3) << 2; break;
11080ad4:	00800304 	movi	r2,12
11080ad8:	e0bffc0d 	sth	r2,-16(fp)
11080adc:	00000806 	br	11080b00 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC32K_DAC32K: control = (0x6) << 2; break;
11080ae0:	00800604 	movi	r2,24
11080ae4:	e0bffc0d 	sth	r2,-16(fp)
11080ae8:	00000506 	br	11080b00 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC96K_DAC96K: control = (0x7) << 2; break;
11080aec:	00800704 	movi	r2,28
11080af0:	e0bffc0d 	sth	r2,-16(fp)
11080af4:	00000206 	br	11080b00 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC44K1_DAC44K1: control = (0x8) << 2; break;
11080af8:	00800804 	movi	r2,32
11080afc:	e0bffc0d 	sth	r2,-16(fp)
        // MCLK = 11.2896
      //  case RATE_ADC44K1_DAC8K: control = (0x9) << 2; break;
      //  case RATE_ADC8K_DAC44K1: control = (0xA) << 2; break;
    }
    control |= 0x02; // BOSR=1 (384fs = 384*48k = 18.432M)
11080b00:	e0bffc0b 	ldhu	r2,-16(fp)
11080b04:	10800094 	ori	r2,r2,2
11080b08:	e0bffc0d 	sth	r2,-16(fp)
        
    bSuccess = aduio_RegWrite(8, control);  // Left Line In: set left line in volume
11080b0c:	e17ffc0b 	ldhu	r5,-16(fp)
11080b10:	01000204 	movi	r4,8
11080b14:	1080e840 	call	11080e84 <aduio_RegWrite>
11080b18:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;      
11080b1c:	e0bffd17 	ldw	r2,-12(fp)
}
11080b20:	e037883a 	mov	sp,fp
11080b24:	dfc00117 	ldw	ra,4(sp)
11080b28:	df000017 	ldw	fp,0(sp)
11080b2c:	dec00204 	addi	sp,sp,8
11080b30:	f800283a 	ret

11080b34 <AUDIO_SetLineInVol>:





bool AUDIO_SetLineInVol(alt_u16 l_vol, alt_u16 r_vol){
11080b34:	defff704 	addi	sp,sp,-36
11080b38:	dfc00815 	stw	ra,32(sp)
11080b3c:	df000715 	stw	fp,28(sp)
11080b40:	df000704 	addi	fp,sp,28
11080b44:	e13ffb0d 	sth	r4,-20(fp)
11080b48:	e17ffc0d 	sth	r5,-16(fp)
    bool bSuccess;
    alt_u16 control;
    
    // left
    control = reg_file[0];
11080b4c:	00844274 	movhi	r2,4361
11080b50:	108b7104 	addi	r2,r2,11716
11080b54:	1080000b 	ldhu	r2,0(r2)
11080b58:	e0bff90d 	sth	r2,-28(fp)
    control &= 0xFFC0;
11080b5c:	00fff004 	movi	r3,-64
11080b60:	e0bff90b 	ldhu	r2,-28(fp)
11080b64:	10c4703a 	and	r2,r2,r3
11080b68:	e0bff90d 	sth	r2,-28(fp)
    control += l_vol & 0x3F;
11080b6c:	e0bffb0b 	ldhu	r2,-20(fp)
11080b70:	10800fcc 	andi	r2,r2,63
11080b74:	1007883a 	mov	r3,r2
11080b78:	e0bff90b 	ldhu	r2,-28(fp)
11080b7c:	10c5883a 	add	r2,r2,r3
11080b80:	e0bff90d 	sth	r2,-28(fp)
    bSuccess = aduio_RegWrite(0, control);
11080b84:	e17ff90b 	ldhu	r5,-28(fp)
11080b88:	0009883a 	mov	r4,zero
11080b8c:	1080e840 	call	11080e84 <aduio_RegWrite>
11080b90:	e0bffa15 	stw	r2,-24(fp)
    
    if (bSuccess){
11080b94:	e0bffa17 	ldw	r2,-24(fp)
11080b98:	1005003a 	cmpeq	r2,r2,zero
11080b9c:	1000121e 	bne	r2,zero,11080be8 <AUDIO_SetLineInVol+0xb4>
        // right
        control = reg_file[1];
11080ba0:	00844274 	movhi	r2,4361
11080ba4:	108b7104 	addi	r2,r2,11716
11080ba8:	1080008b 	ldhu	r2,2(r2)
11080bac:	e0bff90d 	sth	r2,-28(fp)
        control &= 0xFFC0;
11080bb0:	00fff004 	movi	r3,-64
11080bb4:	e0bff90b 	ldhu	r2,-28(fp)
11080bb8:	10c4703a 	and	r2,r2,r3
11080bbc:	e0bff90d 	sth	r2,-28(fp)
        control += r_vol & 0x3F;
11080bc0:	e0bffc0b 	ldhu	r2,-16(fp)
11080bc4:	10800fcc 	andi	r2,r2,63
11080bc8:	1007883a 	mov	r3,r2
11080bcc:	e0bff90b 	ldhu	r2,-28(fp)
11080bd0:	10c5883a 	add	r2,r2,r3
11080bd4:	e0bff90d 	sth	r2,-28(fp)
        bSuccess = aduio_RegWrite(1, control);        
11080bd8:	e17ff90b 	ldhu	r5,-28(fp)
11080bdc:	01000044 	movi	r4,1
11080be0:	1080e840 	call	11080e84 <aduio_RegWrite>
11080be4:	e0bffa15 	stw	r2,-24(fp)
    }
    
    AUDIO_DEBUG(("[AUDIO] set Line-In vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));        
11080be8:	e0bffb0b 	ldhu	r2,-20(fp)
11080bec:	e0bfff15 	stw	r2,-4(fp)
11080bf0:	e0bffc0b 	ldhu	r2,-16(fp)
11080bf4:	e0bffe15 	stw	r2,-8(fp)
11080bf8:	e0bffa17 	ldw	r2,-24(fp)
11080bfc:	1005003a 	cmpeq	r2,r2,zero
11080c00:	1000041e 	bne	r2,zero,11080c14 <AUDIO_SetLineInVol+0xe0>
11080c04:	00844274 	movhi	r2,4361
11080c08:	10bacf04 	addi	r2,r2,-5316
11080c0c:	e0bffd15 	stw	r2,-12(fp)
11080c10:	00000306 	br	11080c20 <AUDIO_SetLineInVol+0xec>
11080c14:	00844274 	movhi	r2,4361
11080c18:	10bad104 	addi	r2,r2,-5308
11080c1c:	e0bffd15 	stw	r2,-12(fp)
11080c20:	01044274 	movhi	r4,4361
11080c24:	213ae704 	addi	r4,r4,-5220
11080c28:	e17fff17 	ldw	r5,-4(fp)
11080c2c:	e1bffe17 	ldw	r6,-8(fp)
11080c30:	e1fffd17 	ldw	r7,-12(fp)
11080c34:	1081a180 	call	11081a18 <myprintf>
    return bSuccess;
11080c38:	e0bffa17 	ldw	r2,-24(fp)
}
11080c3c:	e037883a 	mov	sp,fp
11080c40:	dfc00117 	ldw	ra,4(sp)
11080c44:	df000017 	ldw	fp,0(sp)
11080c48:	dec00204 	addi	sp,sp,8
11080c4c:	f800283a 	ret

11080c50 <AUDIO_SetLineOutVol>:

bool AUDIO_SetLineOutVol(alt_u16 l_vol, alt_u16 r_vol){
11080c50:	defff704 	addi	sp,sp,-36
11080c54:	dfc00815 	stw	ra,32(sp)
11080c58:	df000715 	stw	fp,28(sp)
11080c5c:	df000704 	addi	fp,sp,28
11080c60:	e13ffb0d 	sth	r4,-20(fp)
11080c64:	e17ffc0d 	sth	r5,-16(fp)
    bool bSuccess;
    alt_u16 control;

 
    // left
    control = reg_file[2];
11080c68:	00844274 	movhi	r2,4361
11080c6c:	108b7104 	addi	r2,r2,11716
11080c70:	1080010b 	ldhu	r2,4(r2)
11080c74:	e0bff90d 	sth	r2,-28(fp)
    control &= 0xFF80;
11080c78:	00ffe004 	movi	r3,-128
11080c7c:	e0bff90b 	ldhu	r2,-28(fp)
11080c80:	10c4703a 	and	r2,r2,r3
11080c84:	e0bff90d 	sth	r2,-28(fp)
    control += l_vol & 0x7F;
11080c88:	e0bffb0b 	ldhu	r2,-20(fp)
11080c8c:	10801fcc 	andi	r2,r2,127
11080c90:	1007883a 	mov	r3,r2
11080c94:	e0bff90b 	ldhu	r2,-28(fp)
11080c98:	10c5883a 	add	r2,r2,r3
11080c9c:	e0bff90d 	sth	r2,-28(fp)
    bSuccess = aduio_RegWrite(2, control);
11080ca0:	e17ff90b 	ldhu	r5,-28(fp)
11080ca4:	01000084 	movi	r4,2
11080ca8:	1080e840 	call	11080e84 <aduio_RegWrite>
11080cac:	e0bffa15 	stw	r2,-24(fp)
    
    if (bSuccess){
11080cb0:	e0bffa17 	ldw	r2,-24(fp)
11080cb4:	1005003a 	cmpeq	r2,r2,zero
11080cb8:	1000121e 	bne	r2,zero,11080d04 <AUDIO_SetLineOutVol+0xb4>
        // right
        control = reg_file[3];
11080cbc:	00844274 	movhi	r2,4361
11080cc0:	108b7104 	addi	r2,r2,11716
11080cc4:	1080018b 	ldhu	r2,6(r2)
11080cc8:	e0bff90d 	sth	r2,-28(fp)
        control &= 0xFF80;
11080ccc:	00ffe004 	movi	r3,-128
11080cd0:	e0bff90b 	ldhu	r2,-28(fp)
11080cd4:	10c4703a 	and	r2,r2,r3
11080cd8:	e0bff90d 	sth	r2,-28(fp)
        control += r_vol & 0x7F;
11080cdc:	e0bffc0b 	ldhu	r2,-16(fp)
11080ce0:	10801fcc 	andi	r2,r2,127
11080ce4:	1007883a 	mov	r3,r2
11080ce8:	e0bff90b 	ldhu	r2,-28(fp)
11080cec:	10c5883a 	add	r2,r2,r3
11080cf0:	e0bff90d 	sth	r2,-28(fp)
        bSuccess = aduio_RegWrite(3, control);        
11080cf4:	e17ff90b 	ldhu	r5,-28(fp)
11080cf8:	010000c4 	movi	r4,3
11080cfc:	1080e840 	call	11080e84 <aduio_RegWrite>
11080d00:	e0bffa15 	stw	r2,-24(fp)
    }    
    
    AUDIO_DEBUG(("[AUDIO] set Line-Out vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));
11080d04:	e0bffb0b 	ldhu	r2,-20(fp)
11080d08:	e0bfff15 	stw	r2,-4(fp)
11080d0c:	e0bffc0b 	ldhu	r2,-16(fp)
11080d10:	e0bffe15 	stw	r2,-8(fp)
11080d14:	e0bffa17 	ldw	r2,-24(fp)
11080d18:	1005003a 	cmpeq	r2,r2,zero
11080d1c:	1000041e 	bne	r2,zero,11080d30 <AUDIO_SetLineOutVol+0xe0>
11080d20:	00844274 	movhi	r2,4361
11080d24:	10bacf04 	addi	r2,r2,-5316
11080d28:	e0bffd15 	stw	r2,-12(fp)
11080d2c:	00000306 	br	11080d3c <AUDIO_SetLineOutVol+0xec>
11080d30:	00844274 	movhi	r2,4361
11080d34:	10bad104 	addi	r2,r2,-5308
11080d38:	e0bffd15 	stw	r2,-12(fp)
11080d3c:	01044274 	movhi	r4,4361
11080d40:	213af004 	addi	r4,r4,-5184
11080d44:	e17fff17 	ldw	r5,-4(fp)
11080d48:	e1bffe17 	ldw	r6,-8(fp)
11080d4c:	e1fffd17 	ldw	r7,-12(fp)
11080d50:	1081a180 	call	11081a18 <myprintf>
    
    return bSuccess;
11080d54:	e0bffa17 	ldw	r2,-24(fp)
}
11080d58:	e037883a 	mov	sp,fp
11080d5c:	dfc00117 	ldw	ra,4(sp)
11080d60:	df000017 	ldw	fp,0(sp)
11080d64:	dec00204 	addi	sp,sp,8
11080d68:	f800283a 	ret

11080d6c <AUDIO_EnableByPass>:


bool AUDIO_EnableByPass(bool bEnable){
11080d6c:	defffb04 	addi	sp,sp,-20
11080d70:	dfc00415 	stw	ra,16(sp)
11080d74:	df000315 	stw	fp,12(sp)
11080d78:	df000304 	addi	fp,sp,12
11080d7c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
11080d80:	00844274 	movhi	r2,4361
11080d84:	108b7104 	addi	r2,r2,11716
11080d88:	1080020b 	ldhu	r2,8(r2)
11080d8c:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 3;
11080d90:	00800204 	movi	r2,8
11080d94:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
11080d98:	e0bfff17 	ldw	r2,-4(fp)
11080d9c:	1005003a 	cmpeq	r2,r2,zero
11080da0:	1000051e 	bne	r2,zero,11080db8 <AUDIO_EnableByPass+0x4c>
        control |= mask;
11080da4:	e0bffd8b 	ldhu	r2,-10(fp)
11080da8:	e0fffd0b 	ldhu	r3,-12(fp)
11080dac:	10c4b03a 	or	r2,r2,r3
11080db0:	e0bffd8d 	sth	r2,-10(fp)
11080db4:	00000606 	br	11080dd0 <AUDIO_EnableByPass+0x64>
    else        
        control &= ~mask;
11080db8:	e0bffd0b 	ldhu	r2,-12(fp)
11080dbc:	0084303a 	nor	r2,zero,r2
11080dc0:	1007883a 	mov	r3,r2
11080dc4:	e0bffd8b 	ldhu	r2,-10(fp)
11080dc8:	1884703a 	and	r2,r3,r2
11080dcc:	e0bffd8d 	sth	r2,-10(fp)
    bSuccess = aduio_RegWrite(4, control); 
11080dd0:	e17ffd8b 	ldhu	r5,-10(fp)
11080dd4:	01000104 	movi	r4,4
11080dd8:	1080e840 	call	11080e84 <aduio_RegWrite>
11080ddc:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;  	
11080de0:	e0bffe17 	ldw	r2,-8(fp)
}
11080de4:	e037883a 	mov	sp,fp
11080de8:	dfc00117 	ldw	ra,4(sp)
11080dec:	df000017 	ldw	fp,0(sp)
11080df0:	dec00204 	addi	sp,sp,8
11080df4:	f800283a 	ret

11080df8 <AUDIO_EnableSiteTone>:

bool AUDIO_EnableSiteTone(bool bEnable){
11080df8:	defffb04 	addi	sp,sp,-20
11080dfc:	dfc00415 	stw	ra,16(sp)
11080e00:	df000315 	stw	fp,12(sp)
11080e04:	df000304 	addi	fp,sp,12
11080e08:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
11080e0c:	00844274 	movhi	r2,4361
11080e10:	108b7104 	addi	r2,r2,11716
11080e14:	1080020b 	ldhu	r2,8(r2)
11080e18:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 5;
11080e1c:	00800804 	movi	r2,32
11080e20:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
11080e24:	e0bfff17 	ldw	r2,-4(fp)
11080e28:	1005003a 	cmpeq	r2,r2,zero
11080e2c:	1000051e 	bne	r2,zero,11080e44 <AUDIO_EnableSiteTone+0x4c>
        control |= mask;
11080e30:	e0bffd8b 	ldhu	r2,-10(fp)
11080e34:	e0fffd0b 	ldhu	r3,-12(fp)
11080e38:	10c4b03a 	or	r2,r2,r3
11080e3c:	e0bffd8d 	sth	r2,-10(fp)
11080e40:	00000606 	br	11080e5c <AUDIO_EnableSiteTone+0x64>
    else        
        control &= ~mask;
11080e44:	e0bffd0b 	ldhu	r2,-12(fp)
11080e48:	0084303a 	nor	r2,zero,r2
11080e4c:	1007883a 	mov	r3,r2
11080e50:	e0bffd8b 	ldhu	r2,-10(fp)
11080e54:	1884703a 	and	r2,r3,r2
11080e58:	e0bffd8d 	sth	r2,-10(fp)
    bSuccess = aduio_RegWrite(4, control); 
11080e5c:	e17ffd8b 	ldhu	r5,-10(fp)
11080e60:	01000104 	movi	r4,4
11080e64:	1080e840 	call	11080e84 <aduio_RegWrite>
11080e68:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
11080e6c:	e0bffe17 	ldw	r2,-8(fp)
}
11080e70:	e037883a 	mov	sp,fp
11080e74:	dfc00117 	ldw	ra,4(sp)
11080e78:	df000017 	ldw	fp,0(sp)
11080e7c:	dec00204 	addi	sp,sp,8
11080e80:	f800283a 	ret

11080e84 <aduio_RegWrite>:

/////////////////////////////////////////////////////////////////////////
///////////// Interla function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool aduio_RegWrite(alt_u8 reg_index, alt_u16 data16){
11080e84:	defff904 	addi	sp,sp,-28
11080e88:	dfc00615 	stw	ra,24(sp)
11080e8c:	df000515 	stw	fp,20(sp)
11080e90:	df000504 	addi	fp,sp,20
11080e94:	e13ffe05 	stb	r4,-8(fp)
11080e98:	e17fff0d 	sth	r5,-4(fp)
    bool bSuccess;
    alt_u8 data, control;
    if (reg_index <= 10)
11080e9c:	e0bffe03 	ldbu	r2,-8(fp)
11080ea0:	108002e8 	cmpgeui	r2,r2,11
11080ea4:	1000071e 	bne	r2,zero,11080ec4 <aduio_RegWrite+0x40>
        reg_file[reg_index] = data16;
11080ea8:	e0bffe03 	ldbu	r2,-8(fp)
11080eac:	00c44274 	movhi	r3,4361
11080eb0:	18cb7104 	addi	r3,r3,11716
11080eb4:	1085883a 	add	r2,r2,r2
11080eb8:	10c7883a 	add	r3,r2,r3
11080ebc:	e0bfff0b 	ldhu	r2,-4(fp)
11080ec0:	1880000d 	sth	r2,0(r3)
    data = data16 & 0xFF;
11080ec4:	e0bfff0b 	ldhu	r2,-4(fp)
11080ec8:	1007883a 	mov	r3,r2
11080ecc:	00bfffc4 	movi	r2,-1
11080ed0:	1884703a 	and	r2,r3,r2
11080ed4:	e0bffc45 	stb	r2,-15(fp)
    control = (reg_index << 1) & 0xFE;
11080ed8:	e0bffe03 	ldbu	r2,-8(fp)
11080edc:	1085883a 	add	r2,r2,r2
11080ee0:	1007883a 	mov	r3,r2
11080ee4:	00bfff84 	movi	r2,-2
11080ee8:	1884703a 	and	r2,r3,r2
11080eec:	e0bffc05 	stb	r2,-16(fp)
    control |= ((data16 >> 8) & 0x01);
11080ef0:	e0bfff0b 	ldhu	r2,-4(fp)
11080ef4:	1004d23a 	srli	r2,r2,8
11080ef8:	1080004c 	andi	r2,r2,1
11080efc:	1007883a 	mov	r3,r2
11080f00:	e0bffc03 	ldbu	r2,-16(fp)
11080f04:	1884b03a 	or	r2,r3,r2
11080f08:	e0bffc05 	stb	r2,-16(fp)
    AUDIO_DEBUG(("[AUDIO] set audio reg[%02d] = %04Xh\r\n", reg_index, data16));
11080f0c:	e17ffe03 	ldbu	r5,-8(fp)
11080f10:	e1bfff0b 	ldhu	r6,-4(fp)
11080f14:	01044274 	movhi	r4,4361
11080f18:	213afa04 	addi	r4,r4,-5144
11080f1c:	1081a180 	call	11081a18 <myprintf>
    bSuccess = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, I2C_AUDIO_ADDR, control, data);
11080f20:	e1fffc03 	ldbu	r7,-16(fp)
11080f24:	e0bffc43 	ldbu	r2,-15(fp)
11080f28:	d8800015 	stw	r2,0(sp)
11080f2c:	01040034 	movhi	r4,4096
11080f30:	21000404 	addi	r4,r4,16
11080f34:	01440034 	movhi	r5,4096
11080f38:	01800d04 	movi	r6,52
11080f3c:	10811700 	call	11081170 <I2C_Write>
11080f40:	e0bffd15 	stw	r2,-12(fp)
    if (!bSuccess) 
11080f44:	e0bffd17 	ldw	r2,-12(fp)
11080f48:	1004c03a 	cmpne	r2,r2,zero
11080f4c:	1000031e 	bne	r2,zero,11080f5c <aduio_RegWrite+0xd8>
        AUDIO_DEBUG(("[AUDIO] write reg fail!!!!\r\n"));
11080f50:	01044274 	movhi	r4,4361
11080f54:	213b0404 	addi	r4,r4,-5104
11080f58:	1081a180 	call	11081a18 <myprintf>
    usleep(50*1000);  // wait audio chip read        
11080f5c:	0130d414 	movui	r4,50000
11080f60:	108c9900 	call	1108c990 <usleep>
    return bSuccess;        
11080f64:	e0bffd17 	ldw	r2,-12(fp)
}
11080f68:	e037883a 	mov	sp,fp
11080f6c:	dfc00117 	ldw	ra,4(sp)
11080f70:	df000017 	ldw	fp,0(sp)
11080f74:	dec00204 	addi	sp,sp,8
11080f78:	f800283a 	ret

11080f7c <aduio_RegRead>:

bool  aduio_RegRead(alt_u8 reg_index){
11080f7c:	defff904 	addi	sp,sp,-28
11080f80:	dfc00615 	stw	ra,24(sp)
11080f84:	df000515 	stw	fp,20(sp)
11080f88:	df000504 	addi	fp,sp,20
11080f8c:	e13fff05 	stb	r4,-4(fp)
	bool bSuccess;
    alt_u8 control;
    alt_u16 *data;
    control = (reg_index << 1) & 0xFE;
11080f90:	e0bfff03 	ldbu	r2,-4(fp)
11080f94:	1085883a 	add	r2,r2,r2
11080f98:	1007883a 	mov	r3,r2
11080f9c:	00bfff84 	movi	r2,-2
11080fa0:	1884703a 	and	r2,r3,r2
11080fa4:	e0bffd05 	stb	r2,-12(fp)
    bSuccess = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, I2C_AUDIO_ADDR, control, data);
11080fa8:	e1fffd03 	ldbu	r7,-12(fp)
11080fac:	e0bffc17 	ldw	r2,-16(fp)
11080fb0:	d8800015 	stw	r2,0(sp)
11080fb4:	01040034 	movhi	r4,4096
11080fb8:	21000404 	addi	r4,r4,16
11080fbc:	01440034 	movhi	r5,4096
11080fc0:	01800d04 	movi	r6,52
11080fc4:	108126c0 	call	1108126c <I2C_Read>
11080fc8:	e0bffe15 	stw	r2,-8(fp)
    if (!bSuccess)
11080fcc:	e0bffe17 	ldw	r2,-8(fp)
11080fd0:	1004c03a 	cmpne	r2,r2,zero
11080fd4:	1000031e 	bne	r2,zero,11080fe4 <aduio_RegRead+0x68>
            AUDIO_DEBUG(("[AUDIO] read reg fail!!!!\r\n"));
11080fd8:	01044274 	movhi	r4,4361
11080fdc:	213b0c04 	addi	r4,r4,-5072
11080fe0:	1081a180 	call	11081a18 <myprintf>
    AUDIO_DEBUG(("[AUDIO] read audio reg[%02d] = %04Xh\r\n", reg_index, *data));
11080fe4:	e17fff03 	ldbu	r5,-4(fp)
11080fe8:	e0bffc17 	ldw	r2,-16(fp)
11080fec:	1080000b 	ldhu	r2,0(r2)
11080ff0:	11bfffcc 	andi	r6,r2,65535
11080ff4:	01044274 	movhi	r4,4361
11080ff8:	213b1304 	addi	r4,r4,-5044
11080ffc:	1081a180 	call	11081a18 <myprintf>
    usleep(50*1000);
11081000:	0130d414 	movui	r4,50000
11081004:	108c9900 	call	1108c990 <usleep>
    return bSuccess;
11081008:	e0bffe17 	ldw	r2,-8(fp)
}
1108100c:	e037883a 	mov	sp,fp
11081010:	dfc00117 	ldw	ra,4(sp)
11081014:	df000017 	ldw	fp,0(sp)
11081018:	dec00204 	addi	sp,sp,8
1108101c:	f800283a 	ret

11081020 <AUDIO_DacFifoNotFull>:

/////////////////////////////////////////////////////////////////////////
///////////// Audio Play & Recor ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// check whether the dac-fifo is full.
bool AUDIO_DacFifoNotFull(void){
11081020:	defffd04 	addi	sp,sp,-12
11081024:	df000215 	stw	fp,8(sp)
11081028:	df000204 	addi	fp,sp,8
    bool bReady;
    bReady = AUDIO_DAC_FULL()?FALSE:TRUE;
1108102c:	00844334 	movhi	r2,4364
11081030:	10840504 	addi	r2,r2,4116
11081034:	10800037 	ldwio	r2,0(r2)
11081038:	1080004c 	andi	r2,r2,1
1108103c:	10803fcc 	andi	r2,r2,255
11081040:	1005003a 	cmpeq	r2,r2,zero
11081044:	1000021e 	bne	r2,zero,11081050 <AUDIO_DacFifoNotFull+0x30>
11081048:	e03fff15 	stw	zero,-4(fp)
1108104c:	00000206 	br	11081058 <AUDIO_DacFifoNotFull+0x38>
11081050:	00800044 	movi	r2,1
11081054:	e0bfff15 	stw	r2,-4(fp)
11081058:	e0bfff17 	ldw	r2,-4(fp)
1108105c:	e0bffe15 	stw	r2,-8(fp)
    return bReady;
11081060:	e0bffe17 	ldw	r2,-8(fp)
}
11081064:	e037883a 	mov	sp,fp
11081068:	df000017 	ldw	fp,0(sp)
1108106c:	dec00104 	addi	sp,sp,4
11081070:	f800283a 	ret

11081074 <AUDIO_DacFifoSetData>:

// call AUDIO_PlayIsReady to make sure the fifo is not full before call this function 
void AUDIO_DacFifoSetData(short ch_left, short ch_right){
11081074:	defffd04 	addi	sp,sp,-12
11081078:	df000215 	stw	fp,8(sp)
1108107c:	df000204 	addi	fp,sp,8
11081080:	e13ffe0d 	sth	r4,-8(fp)
11081084:	e17fff0d 	sth	r5,-4(fp)
    AUDIO_DAC_WRITE_L(ch_left);
11081088:	e0fffe0f 	ldh	r3,-8(fp)
1108108c:	00844334 	movhi	r2,4364
11081090:	10840004 	addi	r2,r2,4096
11081094:	10c00035 	stwio	r3,0(r2)
    AUDIO_DAC_WRITE_R(ch_right);
11081098:	e0ffff0f 	ldh	r3,-4(fp)
1108109c:	00844334 	movhi	r2,4364
110810a0:	10840104 	addi	r2,r2,4100
110810a4:	10c00035 	stwio	r3,0(r2)
}
110810a8:	e037883a 	mov	sp,fp
110810ac:	df000017 	ldw	fp,0(sp)
110810b0:	dec00104 	addi	sp,sp,4
110810b4:	f800283a 	ret

110810b8 <AUDIO_AdcFifoNotEmpty>:

// wheck whether there is data available in adc-fifo
bool AUDIO_AdcFifoNotEmpty(void){
110810b8:	defffe04 	addi	sp,sp,-8
110810bc:	df000115 	stw	fp,4(sp)
110810c0:	df000104 	addi	fp,sp,4
    bool bReady;
    bReady = AUDIO_ADC_EMPTY()?FALSE:TRUE;
110810c4:	00844334 	movhi	r2,4364
110810c8:	10840504 	addi	r2,r2,4116
110810cc:	10800037 	ldwio	r2,0(r2)
110810d0:	1080008c 	andi	r2,r2,2
110810d4:	1005003a 	cmpeq	r2,r2,zero
110810d8:	e0bfff15 	stw	r2,-4(fp)
    return bReady;
110810dc:	e0bfff17 	ldw	r2,-4(fp)
}
110810e0:	e037883a 	mov	sp,fp
110810e4:	df000017 	ldw	fp,0(sp)
110810e8:	dec00104 	addi	sp,sp,4
110810ec:	f800283a 	ret

110810f0 <AUDIO_AdcFifoGetData>:


// make sure the data is available before call this fucntion
void AUDIO_AdcFifoGetData(short *pch_left, short *pch_right){
110810f0:	defffd04 	addi	sp,sp,-12
110810f4:	df000215 	stw	fp,8(sp)
110810f8:	df000204 	addi	fp,sp,8
110810fc:	e13ffe15 	stw	r4,-8(fp)
11081100:	e17fff15 	stw	r5,-4(fp)
    *pch_left = AUDIO_ADC_READ_L();
11081104:	00844334 	movhi	r2,4364
11081108:	10840204 	addi	r2,r2,4104
1108110c:	10800037 	ldwio	r2,0(r2)
11081110:	1007883a 	mov	r3,r2
11081114:	e0bffe17 	ldw	r2,-8(fp)
11081118:	10c0000d 	sth	r3,0(r2)
    *pch_right = AUDIO_ADC_READ_R();
1108111c:	00844334 	movhi	r2,4364
11081120:	10840304 	addi	r2,r2,4108
11081124:	10800037 	ldwio	r2,0(r2)
11081128:	1007883a 	mov	r3,r2
1108112c:	e0bfff17 	ldw	r2,-4(fp)
11081130:	10c0000d 	sth	r3,0(r2)
    
}
11081134:	e037883a 	mov	sp,fp
11081138:	df000017 	ldw	fp,0(sp)
1108113c:	dec00104 	addi	sp,sp,4
11081140:	f800283a 	ret

11081144 <AUDIO_FifoClear>:

void AUDIO_FifoClear(void){
11081144:	deffff04 	addi	sp,sp,-4
11081148:	df000015 	stw	fp,0(sp)
1108114c:	d839883a 	mov	fp,sp
    AUDIO_FIFO_CLEAR();
11081150:	00c44334 	movhi	r3,4364
11081154:	18c40404 	addi	r3,r3,4112
11081158:	00800044 	movi	r2,1
1108115c:	18800035 	stwio	r2,0(r3)
}
11081160:	e037883a 	mov	sp,fp
11081164:	df000017 	ldw	fp,0(sp)
11081168:	dec00104 	addi	sp,sp,4
1108116c:	f800283a 	ret

11081170 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
11081170:	defff804 	addi	sp,sp,-32
11081174:	dfc00715 	stw	ra,28(sp)
11081178:	df000615 	stw	fp,24(sp)
1108117c:	df000604 	addi	fp,sp,24
11081180:	e13ffb15 	stw	r4,-20(fp)
11081184:	e17ffc15 	stw	r5,-16(fp)
11081188:	e0800217 	ldw	r2,8(fp)
1108118c:	e1bffd05 	stb	r6,-12(fp)
11081190:	e1fffe05 	stb	r7,-8(fp)
11081194:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
11081198:	00800044 	movi	r2,1
1108119c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
110811a0:	e13ffb17 	ldw	r4,-20(fp)
110811a4:	e17ffc17 	ldw	r5,-16(fp)
110811a8:	108157c0 	call	1108157c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
110811ac:	e0bffd03 	ldbu	r2,-12(fp)
110811b0:	11803fcc 	andi	r6,r2,255
110811b4:	e13ffb17 	ldw	r4,-20(fp)
110811b8:	e17ffc17 	ldw	r5,-16(fp)
110811bc:	108167c0 	call	1108167c <i2c_write>
110811c0:	1004c03a 	cmpne	r2,r2,zero
110811c4:	1000041e 	bne	r2,zero,110811d8 <I2C_Write+0x68>
        bSuccess = FALSE;
110811c8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
110811cc:	01044274 	movhi	r4,4361
110811d0:	213b1d04 	addi	r4,r4,-5004
110811d4:	1081a180 	call	11081a18 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
110811d8:	e0bffa17 	ldw	r2,-24(fp)
110811dc:	1005003a 	cmpeq	r2,r2,zero
110811e0:	10000a1e 	bne	r2,zero,1108120c <I2C_Write+0x9c>
110811e4:	e1bffe03 	ldbu	r6,-8(fp)
110811e8:	e13ffb17 	ldw	r4,-20(fp)
110811ec:	e17ffc17 	ldw	r5,-16(fp)
110811f0:	108167c0 	call	1108167c <i2c_write>
110811f4:	1004c03a 	cmpne	r2,r2,zero
110811f8:	1000041e 	bne	r2,zero,1108120c <I2C_Write+0x9c>
        bSuccess = FALSE;
110811fc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
11081200:	01044274 	movhi	r4,4361
11081204:	213b2504 	addi	r4,r4,-4972
11081208:	1081a180 	call	11081a18 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
1108120c:	e0bffa17 	ldw	r2,-24(fp)
11081210:	1005003a 	cmpeq	r2,r2,zero
11081214:	10000a1e 	bne	r2,zero,11081240 <I2C_Write+0xd0>
11081218:	e1bfff03 	ldbu	r6,-4(fp)
1108121c:	e13ffb17 	ldw	r4,-20(fp)
11081220:	e17ffc17 	ldw	r5,-16(fp)
11081224:	108167c0 	call	1108167c <i2c_write>
11081228:	1004c03a 	cmpne	r2,r2,zero
1108122c:	1000041e 	bne	r2,zero,11081240 <I2C_Write+0xd0>
        bSuccess = FALSE;
11081230:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
11081234:	01044274 	movhi	r4,4361
11081238:	213b2e04 	addi	r4,r4,-4936
1108123c:	1081a180 	call	11081a18 <myprintf>
    }
    i2c_stop(clk_base, data_base);
11081240:	e13ffb17 	ldw	r4,-20(fp)
11081244:	e17ffc17 	ldw	r5,-16(fp)
11081248:	10816040 	call	11081604 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
1108124c:	0106d604 	movi	r4,7000
11081250:	108c9900 	call	1108c990 <usleep>
    
    return bSuccess;
11081254:	e0bffa17 	ldw	r2,-24(fp)

    
}
11081258:	e037883a 	mov	sp,fp
1108125c:	dfc00117 	ldw	ra,4(sp)
11081260:	df000017 	ldw	fp,0(sp)
11081264:	dec00204 	addi	sp,sp,8
11081268:	f800283a 	ret

1108126c <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
1108126c:	defff704 	addi	sp,sp,-36
11081270:	dfc00815 	stw	ra,32(sp)
11081274:	df000715 	stw	fp,28(sp)
11081278:	df000704 	addi	fp,sp,28
1108127c:	e13ffc15 	stw	r4,-16(fp)
11081280:	e17ffd15 	stw	r5,-12(fp)
11081284:	e1bffe05 	stb	r6,-8(fp)
11081288:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
1108128c:	00800044 	movi	r2,1
11081290:	e0bffb15 	stw	r2,-20(fp)


    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
11081294:	e13ffc17 	ldw	r4,-16(fp)
11081298:	e17ffd17 	ldw	r5,-12(fp)
1108129c:	108157c0 	call	1108157c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
110812a0:	e0bffe03 	ldbu	r2,-8(fp)
110812a4:	11803fcc 	andi	r6,r2,255
110812a8:	e13ffc17 	ldw	r4,-16(fp)
110812ac:	e17ffd17 	ldw	r5,-12(fp)
110812b0:	108167c0 	call	1108167c <i2c_write>
110812b4:	1004c03a 	cmpne	r2,r2,zero
110812b8:	1000041e 	bne	r2,zero,110812cc <I2C_Read+0x60>
        bSuccess = FALSE;
110812bc:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
110812c0:	01044274 	movhi	r4,4361
110812c4:	213b1d04 	addi	r4,r4,-5004
110812c8:	1081a180 	call	11081a18 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
110812cc:	e0bffb17 	ldw	r2,-20(fp)
110812d0:	1005003a 	cmpeq	r2,r2,zero
110812d4:	10000a1e 	bne	r2,zero,11081300 <I2C_Read+0x94>
110812d8:	e1bfff03 	ldbu	r6,-4(fp)
110812dc:	e13ffc17 	ldw	r4,-16(fp)
110812e0:	e17ffd17 	ldw	r5,-12(fp)
110812e4:	108167c0 	call	1108167c <i2c_write>
110812e8:	1004c03a 	cmpne	r2,r2,zero
110812ec:	1000041e 	bne	r2,zero,11081300 <I2C_Read+0x94>
        bSuccess = FALSE;
110812f0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
110812f4:	01044274 	movhi	r4,4361
110812f8:	213b2504 	addi	r4,r4,-4972
110812fc:	1081a180 	call	11081a18 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
11081300:	e13ffc17 	ldw	r4,-16(fp)
11081304:	e17ffd17 	ldw	r5,-12(fp)
11081308:	108157c0 	call	1108157c <i2c_start>
    DeviceAddr |= 1; // Read
1108130c:	e0bffe03 	ldbu	r2,-8(fp)
11081310:	10800054 	ori	r2,r2,1
11081314:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
11081318:	e0bffb17 	ldw	r2,-20(fp)
1108131c:	1005003a 	cmpeq	r2,r2,zero
11081320:	10000b1e 	bne	r2,zero,11081350 <I2C_Read+0xe4>
11081324:	e0bffe03 	ldbu	r2,-8(fp)
11081328:	11803fcc 	andi	r6,r2,255
1108132c:	e13ffc17 	ldw	r4,-16(fp)
11081330:	e17ffd17 	ldw	r5,-12(fp)
11081334:	108167c0 	call	1108167c <i2c_write>
11081338:	1004c03a 	cmpne	r2,r2,zero
1108133c:	1000041e 	bne	r2,zero,11081350 <I2C_Read+0xe4>
        bSuccess = FALSE;
11081340:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
11081344:	01044274 	movhi	r4,4361
11081348:	213b3604 	addi	r4,r4,-4904
1108134c:	1081a180 	call	11081a18 <myprintf>
    }
    
    if (bSuccess){
11081350:	e0bffb17 	ldw	r2,-20(fp)
11081354:	1005003a 	cmpeq	r2,r2,zero
11081358:	1000051e 	bne	r2,zero,11081370 <I2C_Read+0x104>
        i2c_read(clk_base, data_base, pControlDataL, TRUE);  // read
1108135c:	e13ffc17 	ldw	r4,-16(fp)
11081360:	e17ffd17 	ldw	r5,-12(fp)
11081364:	e1bffa17 	ldw	r6,-24(fp)
11081368:	01c00044 	movi	r7,1
1108136c:	10817a00 	call	110817a0 <i2c_read>
    }
    if (bSuccess){
11081370:	e0bffb17 	ldw	r2,-20(fp)
11081374:	1005003a 	cmpeq	r2,r2,zero
11081378:	1000051e 	bne	r2,zero,11081390 <I2C_Read+0x124>
            i2c_read(clk_base, data_base, pControlDataH, FALSE);  // read
1108137c:	e13ffc17 	ldw	r4,-16(fp)
11081380:	e17ffd17 	ldw	r5,-12(fp)
11081384:	e1bff917 	ldw	r6,-28(fp)
11081388:	000f883a 	mov	r7,zero
1108138c:	10817a00 	call	110817a0 <i2c_read>
        }
    i2c_stop(clk_base, data_base);
11081390:	e13ffc17 	ldw	r4,-16(fp)
11081394:	e17ffd17 	ldw	r5,-12(fp)
11081398:	10816040 	call	11081604 <i2c_stop>
    
    *pControlData=*pControlDataH;
1108139c:	e0bff917 	ldw	r2,-28(fp)
110813a0:	10800003 	ldbu	r2,0(r2)
110813a4:	10c03fcc 	andi	r3,r2,255
110813a8:	e0800217 	ldw	r2,8(fp)
110813ac:	10c0000d 	sth	r3,0(r2)
    *pControlData=(*pControlData<<8)|*pControlDataL;
110813b0:	e0800217 	ldw	r2,8(fp)
110813b4:	1080000b 	ldhu	r2,0(r2)
110813b8:	10bfffcc 	andi	r2,r2,65535
110813bc:	1004923a 	slli	r2,r2,8
110813c0:	1007883a 	mov	r3,r2
110813c4:	e0bffa17 	ldw	r2,-24(fp)
110813c8:	10800003 	ldbu	r2,0(r2)
110813cc:	10803fcc 	andi	r2,r2,255
110813d0:	1884b03a 	or	r2,r3,r2
110813d4:	1007883a 	mov	r3,r2
110813d8:	e0800217 	ldw	r2,8(fp)
110813dc:	10c0000d 	sth	r3,0(r2)

    return bSuccess;
110813e0:	e0bffb17 	ldw	r2,-20(fp)
}
110813e4:	e037883a 	mov	sp,fp
110813e8:	dfc00117 	ldw	ra,4(sp)
110813ec:	df000017 	ldw	fp,0(sp)
110813f0:	dec00204 	addi	sp,sp,8
110813f4:	f800283a 	ret

110813f8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
110813f8:	defff604 	addi	sp,sp,-40
110813fc:	dfc00915 	stw	ra,36(sp)
11081400:	df000815 	stw	fp,32(sp)
11081404:	df000804 	addi	fp,sp,32
11081408:	e13ffb15 	stw	r4,-20(fp)
1108140c:	e17ffc15 	stw	r5,-16(fp)
11081410:	e1fffe15 	stw	r7,-8(fp)
11081414:	e0800217 	ldw	r2,8(fp)
11081418:	e1bffd05 	stb	r6,-12(fp)
1108141c:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
11081420:	00800044 	movi	r2,1
11081424:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
11081428:	e03ff805 	stb	zero,-32(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
1108142c:	e13ffb17 	ldw	r4,-20(fp)
11081430:	e17ffc17 	ldw	r5,-16(fp)
11081434:	108157c0 	call	1108157c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
11081438:	e0bffd03 	ldbu	r2,-12(fp)
1108143c:	11803fcc 	andi	r6,r2,255
11081440:	e13ffb17 	ldw	r4,-20(fp)
11081444:	e17ffc17 	ldw	r5,-16(fp)
11081448:	108167c0 	call	1108167c <i2c_write>
1108144c:	1004c03a 	cmpne	r2,r2,zero
11081450:	1000041e 	bne	r2,zero,11081464 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
11081454:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
11081458:	01044274 	movhi	r4,4361
1108145c:	213b1d04 	addi	r4,r4,-5004
11081460:	1081a180 	call	11081a18 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
11081464:	e0bff917 	ldw	r2,-28(fp)
11081468:	1005003a 	cmpeq	r2,r2,zero
1108146c:	10000a1e 	bne	r2,zero,11081498 <I2C_MultipleRead+0xa0>
11081470:	e1bff803 	ldbu	r6,-32(fp)
11081474:	e13ffb17 	ldw	r4,-20(fp)
11081478:	e17ffc17 	ldw	r5,-16(fp)
1108147c:	108167c0 	call	1108167c <i2c_write>
11081480:	1004c03a 	cmpne	r2,r2,zero
11081484:	1000041e 	bne	r2,zero,11081498 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
11081488:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
1108148c:	01044274 	movhi	r4,4361
11081490:	213b2504 	addi	r4,r4,-4972
11081494:	1081a180 	call	11081a18 <myprintf>
    }    
    if (bSuccess)        
11081498:	e0bff917 	ldw	r2,-28(fp)
1108149c:	1005003a 	cmpeq	r2,r2,zero
110814a0:	1000031e 	bne	r2,zero,110814b0 <I2C_MultipleRead+0xb8>
        i2c_start(clk_base, data_base);  // restart
110814a4:	e13ffb17 	ldw	r4,-20(fp)
110814a8:	e17ffc17 	ldw	r5,-16(fp)
110814ac:	108157c0 	call	1108157c <i2c_start>
    DeviceAddr |= 1; // Read
110814b0:	e0bffd03 	ldbu	r2,-12(fp)
110814b4:	10800054 	ori	r2,r2,1
110814b8:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
110814bc:	e0bff917 	ldw	r2,-28(fp)
110814c0:	1005003a 	cmpeq	r2,r2,zero
110814c4:	10000b1e 	bne	r2,zero,110814f4 <I2C_MultipleRead+0xfc>
110814c8:	e0bffd03 	ldbu	r2,-12(fp)
110814cc:	11803fcc 	andi	r6,r2,255
110814d0:	e13ffb17 	ldw	r4,-20(fp)
110814d4:	e17ffc17 	ldw	r5,-16(fp)
110814d8:	108167c0 	call	1108167c <i2c_write>
110814dc:	1004c03a 	cmpne	r2,r2,zero
110814e0:	1000041e 	bne	r2,zero,110814f4 <I2C_MultipleRead+0xfc>
        bSuccess = FALSE;
110814e4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
110814e8:	01044274 	movhi	r4,4361
110814ec:	213b3604 	addi	r4,r4,-4904
110814f0:	1081a180 	call	11081a18 <myprintf>
    }
    
    if (bSuccess){
110814f4:	e0bff917 	ldw	r2,-28(fp)
110814f8:	1005003a 	cmpeq	r2,r2,zero
110814fc:	1000161e 	bne	r2,zero,11081558 <I2C_MultipleRead+0x160>
        for(i=0;i<len && bSuccess;i++){
11081500:	e03ffa15 	stw	zero,-24(fp)
11081504:	00000e06 	br	11081540 <I2C_MultipleRead+0x148>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
11081508:	e0bffa17 	ldw	r2,-24(fp)
1108150c:	1007883a 	mov	r3,r2
11081510:	e0bffe17 	ldw	r2,-8(fp)
11081514:	188d883a 	add	r6,r3,r2
11081518:	e0bfff0b 	ldhu	r2,-4(fp)
1108151c:	10ffffc4 	addi	r3,r2,-1
11081520:	e0bffa17 	ldw	r2,-24(fp)
11081524:	188ec03a 	cmpne	r7,r3,r2
11081528:	e13ffb17 	ldw	r4,-20(fp)
1108152c:	e17ffc17 	ldw	r5,-16(fp)
11081530:	10817a00 	call	110817a0 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
11081534:	e0bffa17 	ldw	r2,-24(fp)
11081538:	10800044 	addi	r2,r2,1
1108153c:	e0bffa15 	stw	r2,-24(fp)
11081540:	e0ffff0b 	ldhu	r3,-4(fp)
11081544:	e0bffa17 	ldw	r2,-24(fp)
11081548:	10c0030e 	bge	r2,r3,11081558 <I2C_MultipleRead+0x160>
1108154c:	e0bff917 	ldw	r2,-28(fp)
11081550:	1004c03a 	cmpne	r2,r2,zero
11081554:	103fec1e 	bne	r2,zero,11081508 <I2C_MultipleRead+0x110>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
11081558:	e13ffb17 	ldw	r4,-20(fp)
1108155c:	e17ffc17 	ldw	r5,-16(fp)
11081560:	10816040 	call	11081604 <i2c_stop>
    
    return bSuccess;    
11081564:	e0bff917 	ldw	r2,-28(fp)
    
}
11081568:	e037883a 	mov	sp,fp
1108156c:	dfc00117 	ldw	ra,4(sp)
11081570:	df000017 	ldw	fp,0(sp)
11081574:	dec00204 	addi	sp,sp,8
11081578:	f800283a 	ret

1108157c <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
1108157c:	defffc04 	addi	sp,sp,-16
11081580:	dfc00315 	stw	ra,12(sp)
11081584:	df000215 	stw	fp,8(sp)
11081588:	df000204 	addi	fp,sp,8
1108158c:	e13ffe15 	stw	r4,-8(fp)
11081590:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
11081594:	e0bfff17 	ldw	r2,-4(fp)
11081598:	10800104 	addi	r2,r2,4
1108159c:	1007883a 	mov	r3,r2
110815a0:	00800044 	movi	r2,1
110815a4:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition 
    SDA_HIGH(data_base); // data high
110815a8:	e0bfff17 	ldw	r2,-4(fp)
110815ac:	1007883a 	mov	r3,r2
110815b0:	00800044 	movi	r2,1
110815b4:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
110815b8:	e0bffe17 	ldw	r2,-8(fp)
110815bc:	1007883a 	mov	r3,r2
110815c0:	00800044 	movi	r2,1
110815c4:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
110815c8:	01000044 	movi	r4,1
110815cc:	108c9900 	call	1108c990 <usleep>
     
    SDA_LOW(data_base); // data low
110815d0:	e0bfff17 	ldw	r2,-4(fp)
110815d4:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
110815d8:	01000044 	movi	r4,1
110815dc:	108c9900 	call	1108c990 <usleep>
    SCL_LOW(clk_base); // clock low
110815e0:	e0bffe17 	ldw	r2,-8(fp)
110815e4:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
110815e8:	01000044 	movi	r4,1
110815ec:	108c9900 	call	1108c990 <usleep>
}
110815f0:	e037883a 	mov	sp,fp
110815f4:	dfc00117 	ldw	ra,4(sp)
110815f8:	df000017 	ldw	fp,0(sp)
110815fc:	dec00204 	addi	sp,sp,8
11081600:	f800283a 	ret

11081604 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
11081604:	defffc04 	addi	sp,sp,-16
11081608:	dfc00315 	stw	ra,12(sp)
1108160c:	df000215 	stw	fp,8(sp)
11081610:	df000204 	addi	fp,sp,8
11081614:	e13ffe15 	stw	r4,-8(fp)
11081618:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
1108161c:	e0bfff17 	ldw	r2,-4(fp)
11081620:	10800104 	addi	r2,r2,4
11081624:	1007883a 	mov	r3,r2
11081628:	00800044 	movi	r2,1
1108162c:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
11081630:	e0bfff17 	ldw	r2,-4(fp)
11081634:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
11081638:	e0bffe17 	ldw	r2,-8(fp)
1108163c:	1007883a 	mov	r3,r2
11081640:	00800044 	movi	r2,1
11081644:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
11081648:	01000044 	movi	r4,1
1108164c:	108c9900 	call	1108c990 <usleep>
    SDA_HIGH(data_base); // data high
11081650:	e0bfff17 	ldw	r2,-4(fp)
11081654:	1007883a 	mov	r3,r2
11081658:	00800044 	movi	r2,1
1108165c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
11081660:	01000044 	movi	r4,1
11081664:	108c9900 	call	1108c990 <usleep>
}
11081668:	e037883a 	mov	sp,fp
1108166c:	dfc00117 	ldw	ra,4(sp)
11081670:	df000017 	ldw	fp,0(sp)
11081674:	dec00204 	addi	sp,sp,8
11081678:	f800283a 	ret

1108167c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
1108167c:	defff804 	addi	sp,sp,-32
11081680:	dfc00715 	stw	ra,28(sp)
11081684:	df000615 	stw	fp,24(sp)
11081688:	df000604 	addi	fp,sp,24
1108168c:	e13ffd15 	stw	r4,-12(fp)
11081690:	e17ffe15 	stw	r5,-8(fp)
11081694:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
11081698:	00bfe004 	movi	r2,-128
1108169c:	e0bffc05 	stb	r2,-16(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
110816a0:	e0bffe17 	ldw	r2,-8(fp)
110816a4:	10800104 	addi	r2,r2,4
110816a8:	1007883a 	mov	r3,r2
110816ac:	00800044 	movi	r2,1
110816b0:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
110816b4:	e03ffa15 	stw	zero,-24(fp)
110816b8:	00001f06 	br	11081738 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
110816bc:	e0bffd17 	ldw	r2,-12(fp)
110816c0:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
110816c4:	e0ffff03 	ldbu	r3,-4(fp)
110816c8:	e0bffc03 	ldbu	r2,-16(fp)
110816cc:	1884703a 	and	r2,r3,r2
110816d0:	10803fcc 	andi	r2,r2,255
110816d4:	1005003a 	cmpeq	r2,r2,zero
110816d8:	1000051e 	bne	r2,zero,110816f0 <i2c_write+0x74>
            SDA_HIGH(data_base);
110816dc:	e0bffe17 	ldw	r2,-8(fp)
110816e0:	1007883a 	mov	r3,r2
110816e4:	00800044 	movi	r2,1
110816e8:	18800035 	stwio	r2,0(r3)
110816ec:	00000206 	br	110816f8 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
110816f0:	e0bffe17 	ldw	r2,-8(fp)
110816f4:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
110816f8:	e0bffc03 	ldbu	r2,-16(fp)
110816fc:	1004d07a 	srli	r2,r2,1
11081700:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_HIGH(clk_base);
11081704:	e0bffd17 	ldw	r2,-12(fp)
11081708:	1007883a 	mov	r3,r2
1108170c:	00800044 	movi	r2,1
11081710:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
11081714:	01000044 	movi	r4,1
11081718:	108c9900 	call	1108c990 <usleep>
        SCL_LOW(clk_base);
1108171c:	e0bffd17 	ldw	r2,-12(fp)
11081720:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
11081724:	01000044 	movi	r4,1
11081728:	108c9900 	call	1108c990 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
1108172c:	e0bffa17 	ldw	r2,-24(fp)
11081730:	10800044 	addi	r2,r2,1
11081734:	e0bffa15 	stw	r2,-24(fp)
11081738:	e0bffa17 	ldw	r2,-24(fp)
1108173c:	10800210 	cmplti	r2,r2,8
11081740:	103fde1e 	bne	r2,zero,110816bc <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
11081744:	e0bffe17 	ldw	r2,-8(fp)
11081748:	10800104 	addi	r2,r2,4
1108174c:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
11081750:	e0bffd17 	ldw	r2,-12(fp)
11081754:	1007883a 	mov	r3,r2
11081758:	00800044 	movi	r2,1
1108175c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
11081760:	01000044 	movi	r4,1
11081764:	108c9900 	call	1108c990 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
11081768:	e0bffe17 	ldw	r2,-8(fp)
1108176c:	10800037 	ldwio	r2,0(r2)
11081770:	1005003a 	cmpeq	r2,r2,zero
11081774:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
11081778:	e0bffd17 	ldw	r2,-12(fp)
1108177c:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
11081780:	01000044 	movi	r4,1
11081784:	108c9900 	call	1108c990 <usleep>
    return bAck;
11081788:	e0bffb17 	ldw	r2,-20(fp)
}    
1108178c:	e037883a 	mov	sp,fp
11081790:	dfc00117 	ldw	ra,4(sp)
11081794:	df000017 	ldw	fp,0(sp)
11081798:	dec00204 	addi	sp,sp,8
1108179c:	f800283a 	ret

110817a0 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
110817a0:	defff804 	addi	sp,sp,-32
110817a4:	dfc00715 	stw	ra,28(sp)
110817a8:	df000615 	stw	fp,24(sp)
110817ac:	df000604 	addi	fp,sp,24
110817b0:	e13ffc15 	stw	r4,-16(fp)
110817b4:	e17ffd15 	stw	r5,-12(fp)
110817b8:	e1bffe15 	stw	r6,-8(fp)
110817bc:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
110817c0:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
110817c4:	e0bffd17 	ldw	r2,-12(fp)
110817c8:	10800104 	addi	r2,r2,4
110817cc:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
110817d0:	e0bffc17 	ldw	r2,-16(fp)
110817d4:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
110817d8:	01000044 	movi	r4,1
110817dc:	108c9900 	call	1108c990 <usleep>

    for(i=0;i<8;i++){
110817e0:	e03ffa15 	stw	zero,-24(fp)
110817e4:	00001706 	br	11081844 <i2c_read+0xa4>
        Data <<= 1;
110817e8:	e0bffb03 	ldbu	r2,-20(fp)
110817ec:	1085883a 	add	r2,r2,r2
110817f0:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
110817f4:	e0bffc17 	ldw	r2,-16(fp)
110817f8:	1007883a 	mov	r3,r2
110817fc:	00800044 	movi	r2,1
11081800:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
11081804:	01000044 	movi	r4,1
11081808:	108c9900 	call	1108c990 <usleep>
        if (SDA_READ(data_base))  // read data   
1108180c:	e0bffd17 	ldw	r2,-12(fp)
11081810:	10800037 	ldwio	r2,0(r2)
11081814:	1005003a 	cmpeq	r2,r2,zero
11081818:	1000031e 	bne	r2,zero,11081828 <i2c_read+0x88>
            Data |= 0x01;
1108181c:	e0bffb03 	ldbu	r2,-20(fp)
11081820:	10800054 	ori	r2,r2,1
11081824:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
11081828:	e0bffc17 	ldw	r2,-16(fp)
1108182c:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
11081830:	01000044 	movi	r4,1
11081834:	108c9900 	call	1108c990 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
11081838:	e0bffa17 	ldw	r2,-24(fp)
1108183c:	10800044 	addi	r2,r2,1
11081840:	e0bffa15 	stw	r2,-24(fp)
11081844:	e0bffa17 	ldw	r2,-24(fp)
11081848:	10800210 	cmplti	r2,r2,8
1108184c:	103fe61e 	bne	r2,zero,110817e8 <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
11081850:	e0bffc17 	ldw	r2,-16(fp)
11081854:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
11081858:	e0bffd17 	ldw	r2,-12(fp)
1108185c:	10800104 	addi	r2,r2,4
11081860:	1007883a 	mov	r3,r2
11081864:	00800044 	movi	r2,1
11081868:	18800035 	stwio	r2,0(r3)
    if (bAck)
1108186c:	e0bfff17 	ldw	r2,-4(fp)
11081870:	1005003a 	cmpeq	r2,r2,zero
11081874:	1000031e 	bne	r2,zero,11081884 <i2c_read+0xe4>
        SDA_LOW(data_base);
11081878:	e0bffd17 	ldw	r2,-12(fp)
1108187c:	10000035 	stwio	zero,0(r2)
11081880:	00000406 	br	11081894 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
11081884:	e0bffd17 	ldw	r2,-12(fp)
11081888:	1007883a 	mov	r3,r2
1108188c:	00800044 	movi	r2,1
11081890:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
11081894:	e0bffc17 	ldw	r2,-16(fp)
11081898:	1007883a 	mov	r3,r2
1108189c:	00800044 	movi	r2,1
110818a0:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
110818a4:	01000044 	movi	r4,1
110818a8:	108c9900 	call	1108c990 <usleep>
    SCL_LOW(clk_base); // clock low
110818ac:	e0bffc17 	ldw	r2,-16(fp)
110818b0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
110818b4:	01000044 	movi	r4,1
110818b8:	108c9900 	call	1108c990 <usleep>
    SDA_LOW(data_base);  // data low
110818bc:	e0bffd17 	ldw	r2,-12(fp)
110818c0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
110818c4:	01000044 	movi	r4,1
110818c8:	108c9900 	call	1108c990 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
110818cc:	e0fffe17 	ldw	r3,-8(fp)
110818d0:	e0bffb03 	ldbu	r2,-20(fp)
110818d4:	18800005 	stb	r2,0(r3)
}
110818d8:	e037883a 	mov	sp,fp
110818dc:	dfc00117 	ldw	ra,4(sp)
110818e0:	df000017 	ldw	fp,0(sp)
110818e4:	dec00204 	addi	sp,sp,8
110818e8:	f800283a 	ret

110818ec <LED_Display>:
#define LED_INIT_MASK   (0x01 << 3)

#define LED_SET(mask)   IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, mask)


void LED_Display(alt_u8 Mask){ // 1: light, 0:unlight
110818ec:	defffd04 	addi	sp,sp,-12
110818f0:	df000215 	stw	fp,8(sp)
110818f4:	df000204 	addi	fp,sp,8
110818f8:	e13fff05 	stb	r4,-4(fp)
	alt_u8 ThisMask;
    ThisMask = Mask;//
110818fc:	e0bfff03 	ldbu	r2,-4(fp)
11081900:	e0bffe05 	stb	r2,-8(fp)
    LED_SET(ThisMask);  //0:ligh, 1:unlight
11081904:	e0fffe03 	ldbu	r3,-8(fp)
11081908:	00840034 	movhi	r2,4096
1108190c:	10800c04 	addi	r2,r2,48
11081910:	10c00035 	stwio	r3,0(r2)
    
}
11081914:	e037883a 	mov	sp,fp
11081918:	df000017 	ldw	fp,0(sp)
1108191c:	dec00104 	addi	sp,sp,4
11081920:	f800283a 	ret

11081924 <LED_AllOn>:


void LED_AllOn(void){
11081924:	defffe04 	addi	sp,sp,-8
11081928:	dfc00115 	stw	ra,4(sp)
1108192c:	df000015 	stw	fp,0(sp)
11081930:	d839883a 	mov	fp,sp
    LED_Display(0xFF);
11081934:	01003fc4 	movi	r4,255
11081938:	10818ec0 	call	110818ec <LED_Display>
}
1108193c:	e037883a 	mov	sp,fp
11081940:	dfc00117 	ldw	ra,4(sp)
11081944:	df000017 	ldw	fp,0(sp)
11081948:	dec00204 	addi	sp,sp,8
1108194c:	f800283a 	ret

11081950 <LED_AllOff>:

void LED_AllOff(void){
11081950:	defffe04 	addi	sp,sp,-8
11081954:	dfc00115 	stw	ra,4(sp)
11081958:	df000015 	stw	fp,0(sp)
1108195c:	d839883a 	mov	fp,sp
    LED_Display(0x00);       
11081960:	0009883a 	mov	r4,zero
11081964:	10818ec0 	call	110818ec <LED_Display>
}
11081968:	e037883a 	mov	sp,fp
1108196c:	dfc00117 	ldw	ra,4(sp)
11081970:	df000017 	ldw	fp,0(sp)
11081974:	dec00204 	addi	sp,sp,8
11081978:	f800283a 	ret

1108197c <LED_LightCount>:


void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
1108197c:	defffb04 	addi	sp,sp,-20
11081980:	dfc00415 	stw	ra,16(sp)
11081984:	df000315 	stw	fp,12(sp)
11081988:	df000304 	addi	fp,sp,12
1108198c:	e13fff05 	stb	r4,-4(fp)
	alt_u8 Mask = 0;
11081990:	e03ffe05 	stb	zero,-8(fp)
    int i;
    for(i=0;i<LightCount;i++){
11081994:	e03ffd15 	stw	zero,-12(fp)
11081998:	00000906 	br	110819c0 <LED_LightCount+0x44>
        Mask <<= 1;
1108199c:	e0bffe03 	ldbu	r2,-8(fp)
110819a0:	1085883a 	add	r2,r2,r2
110819a4:	e0bffe05 	stb	r2,-8(fp)
        Mask |= 0x01;
110819a8:	e0bffe03 	ldbu	r2,-8(fp)
110819ac:	10800054 	ori	r2,r2,1
110819b0:	e0bffe05 	stb	r2,-8(fp)


void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
	alt_u8 Mask = 0;
    int i;
    for(i=0;i<LightCount;i++){
110819b4:	e0bffd17 	ldw	r2,-12(fp)
110819b8:	10800044 	addi	r2,r2,1
110819bc:	e0bffd15 	stw	r2,-12(fp)
110819c0:	e0ffff03 	ldbu	r3,-4(fp)
110819c4:	e0bffd17 	ldw	r2,-12(fp)
110819c8:	10fff416 	blt	r2,r3,1108199c <LED_LightCount+0x20>
        Mask <<= 1;
        Mask |= 0x01;
    }
    LED_Display(Mask);  //0:ligh, 1:unlight
110819cc:	e13ffe03 	ldbu	r4,-8(fp)
110819d0:	10818ec0 	call	110818ec <LED_Display>
    
}
110819d4:	e037883a 	mov	sp,fp
110819d8:	dfc00117 	ldw	ra,4(sp)
110819dc:	df000017 	ldw	fp,0(sp)
110819e0:	dec00204 	addi	sp,sp,8
110819e4:	f800283a 	ret

110819e8 <debug_output>:
    if (!UART_IsOpened())
        UART_Open();
    UART_WriteString(pMessage);  // UART debug
}
#else
void debug_output(char *pMessage){
110819e8:	defffd04 	addi	sp,sp,-12
110819ec:	dfc00215 	stw	ra,8(sp)
110819f0:	df000115 	stw	fp,4(sp)
110819f4:	df000104 	addi	fp,sp,4
110819f8:	e13fff15 	stw	r4,-4(fp)
    printf(pMessage);
110819fc:	e13fff17 	ldw	r4,-4(fp)
11081a00:	10826b00 	call	110826b0 <printf>
}
11081a04:	e037883a 	mov	sp,fp
11081a08:	dfc00117 	ldw	ra,4(sp)
11081a0c:	df000017 	ldw	fp,0(sp)
11081a10:	dec00204 	addi	sp,sp,8
11081a14:	f800283a 	ret

11081a18 <myprintf>:

#endif


int myprintf(char *format, ...){
11081a18:	deff7804 	addi	sp,sp,-544
11081a1c:	dfc08415 	stw	ra,528(sp)
11081a20:	df008315 	stw	fp,524(sp)
11081a24:	df008304 	addi	fp,sp,524
11081a28:	e1400215 	stw	r5,8(fp)
11081a2c:	e1800315 	stw	r6,12(fp)
11081a30:	e1c00415 	stw	r7,16(fp)
11081a34:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
11081a38:	e0800204 	addi	r2,fp,8
11081a3c:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
11081a40:	e1fffe17 	ldw	r7,-8(fp)
11081a44:	e13f7e04 	addi	r4,fp,-520
11081a48:	01408004 	movi	r5,512
11081a4c:	e1bfff17 	ldw	r6,-4(fp)
11081a50:	10849000 	call	11084900 <vsnprintf>
11081a54:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
11081a58:	e13f7e04 	addi	r4,fp,-520
11081a5c:	10819e80 	call	110819e8 <debug_output>

    return rc;    
11081a60:	e0bf7d17 	ldw	r2,-524(fp)
}
11081a64:	e037883a 	mov	sp,fp
11081a68:	dfc00117 	ldw	ra,4(sp)
11081a6c:	df000017 	ldw	fp,0(sp)
11081a70:	dec00504 	addi	sp,sp,20
11081a74:	f800283a 	ret

11081a78 <myprintf_hex_array>:


int myprintf_hex_array(unsigned char *pHex, int len){
11081a78:	defff704 	addi	sp,sp,-36
11081a7c:	dfc00815 	stw	ra,32(sp)
11081a80:	df000715 	stw	fp,28(sp)
11081a84:	df000704 	addi	fp,sp,28
11081a88:	e13ffe15 	stw	r4,-8(fp)
11081a8c:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
11081a90:	e03ff915 	stw	zero,-28(fp)
11081a94:	00000f06 	br	11081ad4 <myprintf_hex_array+0x5c>
        sprintf(szText, "[%02X]", *(pHex+i));
11081a98:	e13ffa04 	addi	r4,fp,-24
11081a9c:	e0bff917 	ldw	r2,-28(fp)
11081aa0:	1007883a 	mov	r3,r2
11081aa4:	e0bffe17 	ldw	r2,-8(fp)
11081aa8:	1885883a 	add	r2,r3,r2
11081aac:	10800003 	ldbu	r2,0(r2)
11081ab0:	11803fcc 	andi	r6,r2,255
11081ab4:	01444274 	movhi	r5,4361
11081ab8:	297b3f04 	addi	r5,r5,-4868
11081abc:	10827dc0 	call	110827dc <sprintf>
        DEBUG((szText));
11081ac0:	e13ffa04 	addi	r4,fp,-24
11081ac4:	1081a180 	call	11081a18 <myprintf>


int myprintf_hex_array(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
11081ac8:	e0bff917 	ldw	r2,-28(fp)
11081acc:	10800044 	addi	r2,r2,1
11081ad0:	e0bff915 	stw	r2,-28(fp)
11081ad4:	e0fff917 	ldw	r3,-28(fp)
11081ad8:	e0bfff17 	ldw	r2,-4(fp)
11081adc:	18bfee16 	blt	r3,r2,11081a98 <myprintf_hex_array+0x20>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
11081ae0:	e0bfff17 	ldw	r2,-4(fp)
}
11081ae4:	e037883a 	mov	sp,fp
11081ae8:	dfc00117 	ldw	ra,4(sp)
11081aec:	df000017 	ldw	fp,0(sp)
11081af0:	dec00204 	addi	sp,sp,8
11081af4:	f800283a 	ret

11081af8 <myprintf_dword_array>:

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
11081af8:	defff704 	addi	sp,sp,-36
11081afc:	dfc00815 	stw	ra,32(sp)
11081b00:	df000715 	stw	fp,28(sp)
11081b04:	df000704 	addi	fp,sp,28
11081b08:	e13ffe15 	stw	r4,-8(fp)
11081b0c:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
11081b10:	e03ff915 	stw	zero,-28(fp)
11081b14:	00001006 	br	11081b58 <myprintf_dword_array+0x60>
        sprintf(szText, "[%08X]", *(pArray+i));
11081b18:	e0bff917 	ldw	r2,-28(fp)
11081b1c:	1085883a 	add	r2,r2,r2
11081b20:	1085883a 	add	r2,r2,r2
11081b24:	1007883a 	mov	r3,r2
11081b28:	e0bffe17 	ldw	r2,-8(fp)
11081b2c:	1885883a 	add	r2,r3,r2
11081b30:	11800017 	ldw	r6,0(r2)
11081b34:	e13ffa04 	addi	r4,fp,-24
11081b38:	01444274 	movhi	r5,4361
11081b3c:	297b4104 	addi	r5,r5,-4860
11081b40:	10827dc0 	call	110827dc <sprintf>
        DEBUG((szText));
11081b44:	e13ffa04 	addi	r4,fp,-24
11081b48:	1081a180 	call	11081a18 <myprintf>
}

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
11081b4c:	e0bff917 	ldw	r2,-28(fp)
11081b50:	10800044 	addi	r2,r2,1
11081b54:	e0bff915 	stw	r2,-28(fp)
11081b58:	e0fff917 	ldw	r3,-28(fp)
11081b5c:	e0bfff17 	ldw	r2,-4(fp)
11081b60:	18bfed16 	blt	r3,r2,11081b18 <myprintf_dword_array+0x20>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
11081b64:	e0bfff17 	ldw	r2,-4(fp)
}
11081b68:	e037883a 	mov	sp,fp
11081b6c:	dfc00117 	ldw	ra,4(sp)
11081b70:	df000017 	ldw	fp,0(sp)
11081b74:	dec00204 	addi	sp,sp,8
11081b78:	f800283a 	ret

11081b7c <ui_is_mic_record>:
int record_sample_rate;

///////////////////////////////////////////////////////////////////////////////
//////////// Internal function implement(body) ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool ui_is_mic_record(void){
11081b7c:	defffd04 	addi	sp,sp,-12
11081b80:	df000215 	stw	fp,8(sp)
11081b84:	df000204 	addi	fp,sp,8
    bool bMicRecord;
    bMicRecord = (IORD(SW_BASE, 0) & 0x01)?FALSE:TRUE;
11081b88:	00840034 	movhi	r2,4096
11081b8c:	10800804 	addi	r2,r2,32
11081b90:	10800037 	ldwio	r2,0(r2)
11081b94:	1080004c 	andi	r2,r2,1
11081b98:	10803fcc 	andi	r2,r2,255
11081b9c:	1005003a 	cmpeq	r2,r2,zero
11081ba0:	1000021e 	bne	r2,zero,11081bac <ui_is_mic_record+0x30>
11081ba4:	e03fff15 	stw	zero,-4(fp)
11081ba8:	00000206 	br	11081bb4 <ui_is_mic_record+0x38>
11081bac:	00800044 	movi	r2,1
11081bb0:	e0bfff15 	stw	r2,-4(fp)
11081bb4:	e0bfff17 	ldw	r2,-4(fp)
11081bb8:	e0bffe15 	stw	r2,-8(fp)
    return bMicRecord;    
11081bbc:	e0bffe17 	ldw	r2,-8(fp)
}
11081bc0:	e037883a 	mov	sp,fp
11081bc4:	df000017 	ldw	fp,0(sp)
11081bc8:	dec00104 	addi	sp,sp,4
11081bcc:	f800283a 	ret

11081bd0 <ui_get_sample_rate>:

int ui_get_sample_rate(void){
11081bd0:	defffd04 	addi	sp,sp,-12
11081bd4:	df000215 	stw	fp,8(sp)
11081bd8:	df000204 	addi	fp,sp,8
    int sample_rate = 96000;
11081bdc:	00800074 	movhi	r2,1
11081be0:	109dc004 	addi	r2,r2,30464
11081be4:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 mask;
    mask = IORD(SW_BASE, 0);
11081be8:	00840034 	movhi	r2,4096
11081bec:	10800804 	addi	r2,r2,32
11081bf0:	10800037 	ldwio	r2,0(r2)
11081bf4:	e0bffe15 	stw	r2,-8(fp)
    mask = (mask >> 1) & 0x07;
11081bf8:	e0bffe17 	ldw	r2,-8(fp)
11081bfc:	1004d07a 	srli	r2,r2,1
11081c00:	108001cc 	andi	r2,r2,7
11081c04:	e0bffe15 	stw	r2,-8(fp)
    if (mask == 1)
11081c08:	e0bffe17 	ldw	r2,-8(fp)
11081c0c:	10800058 	cmpnei	r2,r2,1
11081c10:	1000031e 	bne	r2,zero,11081c20 <ui_get_sample_rate+0x50>
        sample_rate = 48000;
11081c14:	00aee014 	movui	r2,48000
11081c18:	e0bfff15 	stw	r2,-4(fp)
11081c1c:	00001106 	br	11081c64 <ui_get_sample_rate+0x94>
    else if (mask == 2)
11081c20:	e0bffe17 	ldw	r2,-8(fp)
11081c24:	10800098 	cmpnei	r2,r2,2
11081c28:	1000031e 	bne	r2,zero,11081c38 <ui_get_sample_rate+0x68>
        sample_rate = 44100;
11081c2c:	00ab1114 	movui	r2,44100
11081c30:	e0bfff15 	stw	r2,-4(fp)
11081c34:	00000b06 	br	11081c64 <ui_get_sample_rate+0x94>
    else if (mask == 3)
11081c38:	e0bffe17 	ldw	r2,-8(fp)
11081c3c:	108000d8 	cmpnei	r2,r2,3
11081c40:	1000031e 	bne	r2,zero,11081c50 <ui_get_sample_rate+0x80>
        sample_rate = 32000;
11081c44:	009f4004 	movi	r2,32000
11081c48:	e0bfff15 	stw	r2,-4(fp)
11081c4c:	00000506 	br	11081c64 <ui_get_sample_rate+0x94>
    else if (mask == 4)
11081c50:	e0bffe17 	ldw	r2,-8(fp)
11081c54:	10800118 	cmpnei	r2,r2,4
11081c58:	1000021e 	bne	r2,zero,11081c64 <ui_get_sample_rate+0x94>
        sample_rate = 8000;
11081c5c:	0087d004 	movi	r2,8000
11081c60:	e0bfff15 	stw	r2,-4(fp)
    return sample_rate;      
11081c64:	e0bfff17 	ldw	r2,-4(fp)
} 
11081c68:	e037883a 	mov	sp,fp
11081c6c:	df000017 	ldw	fp,0(sp)
11081c70:	dec00104 	addi	sp,sp,4
11081c74:	f800283a 	ret

11081c78 <button_monitor_isr>:

void button_monitor_isr(void* context, alt_u32 id){
11081c78:	defffc04 	addi	sp,sp,-16
11081c7c:	df000315 	stw	fp,12(sp)
11081c80:	df000304 	addi	fp,sp,12
11081c84:	e13ffe15 	stw	r4,-8(fp)
11081c88:	e17fff15 	stw	r5,-4(fp)
    volatile alt_u32* pPressedMask = (volatile alt_u32*)context;
11081c8c:	e0bffe17 	ldw	r2,-8(fp)
11081c90:	e0bffd15 	stw	r2,-12(fp)
    *pPressedMask |= IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE) & 0x0F;  // 4-button 
11081c94:	e0bffd17 	ldw	r2,-12(fp)
11081c98:	10c00017 	ldw	r3,0(r2)
11081c9c:	00840034 	movhi	r2,4096
11081ca0:	10801304 	addi	r2,r2,76
11081ca4:	10800037 	ldwio	r2,0(r2)
11081ca8:	108003cc 	andi	r2,r2,15
11081cac:	1886b03a 	or	r3,r3,r2
11081cb0:	e0bffd17 	ldw	r2,-12(fp)
11081cb4:	10c00015 	stw	r3,0(r2)
    
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0); 
11081cb8:	00840034 	movhi	r2,4096
11081cbc:	10801304 	addi	r2,r2,76
11081cc0:	10000035 	stwio	zero,0(r2)
}
11081cc4:	e037883a 	mov	sp,fp
11081cc8:	df000017 	ldw	fp,0(sp)
11081ccc:	dec00104 	addi	sp,sp,4
11081cd0:	f800283a 	ret

11081cd4 <button_monitor_start>:

bool button_monitor_start(volatile alt_u32 *pPressedMask){
11081cd4:	defffc04 	addi	sp,sp,-16
11081cd8:	dfc00315 	stw	ra,12(sp)
11081cdc:	df000215 	stw	fp,8(sp)
11081ce0:	df000204 	addi	fp,sp,8
11081ce4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
11081ce8:	00800044 	movi	r2,1
11081cec:	e0bffe15 	stw	r2,-8(fp)
    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0x0F); // 4-button
11081cf0:	00c40034 	movhi	r3,4096
11081cf4:	18c01204 	addi	r3,r3,72
11081cf8:	008003c4 	movi	r2,15
11081cfc:	18800035 	stwio	r2,0(r3)
    
    // Reset the edge catpure register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0); 
11081d00:	00840034 	movhi	r2,4096
11081d04:	10801304 	addi	r2,r2,76
11081d08:	10000035 	stwio	zero,0(r2)
    
    // register IRQ
    if (bSuccess && (alt_irq_register(KEY_IRQ, (void *)pPressedMask, button_monitor_isr) != 0)){
11081d0c:	e0bffe17 	ldw	r2,-8(fp)
11081d10:	1005003a 	cmpeq	r2,r2,zero
11081d14:	10000b1e 	bne	r2,zero,11081d44 <button_monitor_start+0x70>
11081d18:	01000044 	movi	r4,1
11081d1c:	e17fff17 	ldw	r5,-4(fp)
11081d20:	01844234 	movhi	r6,4360
11081d24:	31871e04 	addi	r6,r6,7288
11081d28:	108c12c0 	call	1108c12c <alt_irq_register>
11081d2c:	1005003a 	cmpeq	r2,r2,zero
11081d30:	1000041e 	bne	r2,zero,11081d44 <button_monitor_start+0x70>
        printf("[SW-MONITOR]register button IRQ fail\r\n");
11081d34:	01044274 	movhi	r4,4361
11081d38:	213b4304 	addi	r4,r4,-4852
11081d3c:	10827c80 	call	110827c8 <puts>
        bSuccess = FALSE;
11081d40:	e03ffe15 	stw	zero,-8(fp)
    }
    
    return bSuccess;        
11081d44:	e0bffe17 	ldw	r2,-8(fp)
}
11081d48:	e037883a 	mov	sp,fp
11081d4c:	dfc00117 	ldw	ra,4(sp)
11081d50:	df000017 	ldw	fp,0(sp)
11081d54:	dec00204 	addi	sp,sp,8
11081d58:	f800283a 	ret

11081d5c <init_audio>:


bool init_audio(AUDIO_FUNC audio_func){
11081d5c:	defffc04 	addi	sp,sp,-16
11081d60:	dfc00315 	stw	ra,12(sp)
11081d64:	df000215 	stw	fp,8(sp)
11081d68:	df000204 	addi	fp,sp,8
11081d6c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
11081d70:	00800044 	movi	r2,1
11081d74:	e0bffe15 	stw	r2,-8(fp)
    AUDIO_InterfaceActive(FALSE);
11081d78:	0009883a 	mov	r4,zero
11081d7c:	10805dc0 	call	110805dc <AUDIO_InterfaceActive>
    //
    if (audio_func == MIC_RECORD){
11081d80:	e0bfff17 	ldw	r2,-4(fp)
11081d84:	1004c03a 	cmpne	r2,r2,zero
11081d88:	10000b1e 	bne	r2,zero,11081db8 <init_audio+0x5c>
        AUDIO_SetInputSource(SOURCE_MIC);
11081d8c:	0009883a 	mov	r4,zero
11081d90:	10809bc0 	call	110809bc <AUDIO_SetInputSource>
        AUDIO_DacEnableSoftMute(TRUE);
11081d94:	01000044 	movi	r4,1
11081d98:	10807c40 	call	110807c4 <AUDIO_DacEnableSoftMute>
        AUDIO_AdcEnableHighPassFilter(FALSE);
11081d9c:	0009883a 	mov	r4,zero
11081da0:	10806940 	call	11080694 <AUDIO_AdcEnableHighPassFilter>
        AUDIO_MicMute(FALSE);
11081da4:	0009883a 	mov	r4,zero
11081da8:	10808500 	call	11080850 <AUDIO_MicMute>
        AUDIO_LineInMute(TRUE);
11081dac:	01000044 	movi	r4,1
11081db0:	10808dc0 	call	110808dc <AUDIO_LineInMute>
11081db4:	00002106 	br	11081e3c <init_audio+0xe0>
    }else if (audio_func == LINEIN_RECORD){
11081db8:	e0bfff17 	ldw	r2,-4(fp)
11081dbc:	10800058 	cmpnei	r2,r2,1
11081dc0:	10000e1e 	bne	r2,zero,11081dfc <init_audio+0xa0>
        AUDIO_SetInputSource(SOURCE_LINEIN);
11081dc4:	01000044 	movi	r4,1
11081dc8:	10809bc0 	call	110809bc <AUDIO_SetInputSource>
        AUDIO_DacEnableSoftMute(TRUE);
11081dcc:	01000044 	movi	r4,1
11081dd0:	10807c40 	call	110807c4 <AUDIO_DacEnableSoftMute>
        AUDIO_AdcEnableHighPassFilter(FALSE);
11081dd4:	0009883a 	mov	r4,zero
11081dd8:	10806940 	call	11080694 <AUDIO_AdcEnableHighPassFilter>
        AUDIO_MicMute(TRUE);
11081ddc:	01000044 	movi	r4,1
11081de0:	10808500 	call	11080850 <AUDIO_MicMute>
        AUDIO_LineInMute(FALSE);
11081de4:	0009883a 	mov	r4,zero
11081de8:	10808dc0 	call	110808dc <AUDIO_LineInMute>
        AUDIO_SetLineInVol(0x17, 0x17);  // max 0x1F, min:0; 0x17: 0dB (assume max input is 2.0v rms)
11081dec:	010005c4 	movi	r4,23
11081df0:	014005c4 	movi	r5,23
11081df4:	1080b340 	call	11080b34 <AUDIO_SetLineInVol>
11081df8:	00001006 	br	11081e3c <init_audio+0xe0>
    }else if (audio_func == LINEOUT_PLAY){
11081dfc:	e0bfff17 	ldw	r2,-4(fp)
11081e00:	10800098 	cmpnei	r2,r2,2
11081e04:	10000d1e 	bne	r2,zero,11081e3c <init_audio+0xe0>
        AUDIO_DacEnableSoftMute(TRUE);
11081e08:	01000044 	movi	r4,1
11081e0c:	10807c40 	call	110807c4 <AUDIO_DacEnableSoftMute>
        AUDIO_MicMute(TRUE);
11081e10:	01000044 	movi	r4,1
11081e14:	10808500 	call	11080850 <AUDIO_MicMute>
        AUDIO_LineInMute(FALSE);
11081e18:	0009883a 	mov	r4,zero
11081e1c:	10808dc0 	call	110808dc <AUDIO_LineInMute>
        AUDIO_DacEnableSoftMute(FALSE);
11081e20:	0009883a 	mov	r4,zero
11081e24:	10807c40 	call	110807c4 <AUDIO_DacEnableSoftMute>
        //AUDIO_DacDeemphasisControl(DEEMPHASIS_48K);
        AUDIO_SetLineOutVol(LINEOUT_DEFUALT_VOL, LINEOUT_DEFUALT_VOL); // max 7F, min: 30, 0x79: 0 db
11081e28:	01001e44 	movi	r4,121
11081e2c:	01401e44 	movi	r5,121
11081e30:	1080c500 	call	11080c50 <AUDIO_SetLineOutVol>
        AUDIO_DacEnableSoftMute(FALSE);
11081e34:	0009883a 	mov	r4,zero
11081e38:	10807c40 	call	110807c4 <AUDIO_DacEnableSoftMute>
    }
    
    if (record_sample_rate == 8000)
11081e3c:	d0a6a717 	ldw	r2,-25956(gp)
11081e40:	1087d018 	cmpnei	r2,r2,8000
11081e44:	1000031e 	bne	r2,zero,11081e54 <init_audio+0xf8>
        AUDIO_SetSampleRate(RATE_ADC8K_DAC8K);
11081e48:	010000c4 	movi	r4,3
11081e4c:	1080a480 	call	11080a48 <AUDIO_SetSampleRate>
11081e50:	00001406 	br	11081ea4 <init_audio+0x148>
    else if (record_sample_rate == 32000)
11081e54:	d0a6a717 	ldw	r2,-25956(gp)
11081e58:	109f4018 	cmpnei	r2,r2,32000
11081e5c:	1000031e 	bne	r2,zero,11081e6c <init_audio+0x110>
        AUDIO_SetSampleRate(RATE_ADC32K_DAC32K);
11081e60:	01000104 	movi	r4,4
11081e64:	1080a480 	call	11080a48 <AUDIO_SetSampleRate>
11081e68:	00000e06 	br	11081ea4 <init_audio+0x148>
    else if (record_sample_rate == 48000)
11081e6c:	d0e6a717 	ldw	r3,-25956(gp)
11081e70:	00aee014 	movui	r2,48000
11081e74:	1880031e 	bne	r3,r2,11081e84 <init_audio+0x128>
        AUDIO_SetSampleRate(RATE_ADC48K_DAC48K);
11081e78:	0009883a 	mov	r4,zero
11081e7c:	1080a480 	call	11080a48 <AUDIO_SetSampleRate>
11081e80:	00000806 	br	11081ea4 <init_audio+0x148>
    else if (record_sample_rate == 44100)
11081e84:	d0e6a717 	ldw	r3,-25956(gp)
11081e88:	00ab1114 	movui	r2,44100
11081e8c:	1880031e 	bne	r3,r2,11081e9c <init_audio+0x140>
        AUDIO_SetSampleRate(RATE_ADC44K1_DAC44K1);
11081e90:	01000184 	movi	r4,6
11081e94:	1080a480 	call	11080a48 <AUDIO_SetSampleRate>
11081e98:	00000206 	br	11081ea4 <init_audio+0x148>
    else    
        AUDIO_SetSampleRate(RATE_ADC96K_DAC96K);
11081e9c:	01000144 	movi	r4,5
11081ea0:	1080a480 	call	11080a48 <AUDIO_SetSampleRate>
    //
    AUDIO_InterfaceActive(TRUE);
11081ea4:	01000044 	movi	r4,1
11081ea8:	10805dc0 	call	110805dc <AUDIO_InterfaceActive>
    
    return bSuccess;             
11081eac:	e0bffe17 	ldw	r2,-8(fp)
}
11081eb0:	e037883a 	mov	sp,fp
11081eb4:	dfc00117 	ldw	ra,4(sp)
11081eb8:	df000017 	ldw	fp,0(sp)
11081ebc:	dec00204 	addi	sp,sp,8
11081ec0:	f800283a 	ret

11081ec4 <display_time_elapsed>:


alt_u32 display_time_elapsed(alt_u32 sample_num){
11081ec4:	defffc04 	addi	sp,sp,-16
11081ec8:	dfc00315 	stw	ra,12(sp)
11081ecc:	df000215 	stw	fp,8(sp)
11081ed0:	df000204 	addi	fp,sp,8
11081ed4:	e13fff15 	stw	r4,-4(fp)
    // assume sample rate is 48K
    alt_u32 time;
    time = sample_num * 100 / record_sample_rate;
11081ed8:	e0bfff17 	ldw	r2,-4(fp)
11081edc:	11001924 	muli	r4,r2,100
11081ee0:	d0a6a717 	ldw	r2,-25956(gp)
11081ee4:	100b883a 	mov	r5,r2
11081ee8:	10826a00 	call	110826a0 <__udivsi3>
11081eec:	e0bffe15 	stw	r2,-8(fp)
    return time;
11081ef0:	e0bffe17 	ldw	r2,-8(fp)
}
11081ef4:	e037883a 	mov	sp,fp
11081ef8:	dfc00117 	ldw	ra,4(sp)
11081efc:	df000017 	ldw	fp,0(sp)
11081f00:	dec00204 	addi	sp,sp,8
11081f04:	f800283a 	ret

11081f08 <init>:


bool init(void){
11081f08:	defffd04 	addi	sp,sp,-12
11081f0c:	dfc00215 	stw	ra,8(sp)
11081f10:	df000115 	stw	fp,4(sp)
11081f14:	df000104 	addi	fp,sp,4
    bool bSuccess = TRUE;
11081f18:	00800044 	movi	r2,1
11081f1c:	e0bfff15 	stw	r2,-4(fp)

    LED_AllOff();
11081f20:	10819500 	call	11081950 <LED_AllOff>
    printf("Welcome Audio Demo\n");
11081f24:	01044274 	movhi	r4,4361
11081f28:	213b4d04 	addi	r4,r4,-4812
11081f2c:	10827c80 	call	110827c8 <puts>

    // prepare    
    if (!AUDIO_Init()){
11081f30:	10802000 	call	11080200 <AUDIO_Init>
11081f34:	1004c03a 	cmpne	r2,r2,zero
11081f38:	1000041e 	bne	r2,zero,11081f4c <init+0x44>
        printf("Audio Init Error\r\n");
11081f3c:	01044274 	movhi	r4,4361
11081f40:	213b5204 	addi	r4,r4,-4792
11081f44:	10827c80 	call	110827c8 <puts>
        bSuccess = FALSE;
11081f48:	e03fff15 	stw	zero,-4(fp)
    }
    if (!AUDIO_REG_READ()){
11081f4c:	10804180 	call	11080418 <AUDIO_REG_READ>
11081f50:	1004c03a 	cmpne	r2,r2,zero
11081f54:	1000041e 	bne	r2,zero,11081f68 <init+0x60>
         printf("AUDIO REG READ Error\r\n");
11081f58:	01044274 	movhi	r4,4361
11081f5c:	213b5704 	addi	r4,r4,-4772
11081f60:	10827c80 	call	110827c8 <puts>
         bSuccess = FALSE;
11081f64:	e03fff15 	stw	zero,-4(fp)
       }

        return bSuccess;
11081f68:	e0bfff17 	ldw	r2,-4(fp)
}
11081f6c:	e037883a 	mov	sp,fp
11081f70:	dfc00117 	ldw	ra,4(sp)
11081f74:	df000017 	ldw	fp,0(sp)
11081f78:	dec00204 	addi	sp,sp,8
11081f7c:	f800283a 	ret

11081f80 <dump_record_data>:

void dump_record_data(alt_u32 *pData, alt_u32 len){
11081f80:	defff804 	addi	sp,sp,-32
11081f84:	dfc00715 	stw	ra,28(sp)
11081f88:	df000615 	stw	fp,24(sp)
11081f8c:	df000604 	addi	fp,sp,24
11081f90:	e13ffe15 	stw	r4,-8(fp)
11081f94:	e17fff15 	stw	r5,-4(fp)
    short sample_l, sample_r, sample_max = 0;
11081f98:	e03ffc0d 	sth	zero,-16(fp)
    alt_u32 data;
    int i;
    //return ;
    for(i=0;i<len;i++){
11081f9c:	e03ffa15 	stw	zero,-24(fp)
11081fa0:	00003206 	br	1108206c <dump_record_data+0xec>
        data = *pData++;
11081fa4:	e0bffe17 	ldw	r2,-8(fp)
11081fa8:	10800017 	ldw	r2,0(r2)
11081fac:	e0bffb15 	stw	r2,-20(fp)
11081fb0:	e0bffe17 	ldw	r2,-8(fp)
11081fb4:	10800104 	addi	r2,r2,4
11081fb8:	e0bffe15 	stw	r2,-8(fp)
        sample_l = (short)((data >> 16) & 0xFFFF); 
11081fbc:	e0bffb17 	ldw	r2,-20(fp)
11081fc0:	1004d43a 	srli	r2,r2,16
11081fc4:	e0bffd0d 	sth	r2,-12(fp)
        sample_r = (short)(data & 0xFFFF);
11081fc8:	e0bffb17 	ldw	r2,-20(fp)
11081fcc:	e0bffc8d 	sth	r2,-14(fp)
        //printf("[%d]%d/%d\n", i, sample_l, sample_r);
        if (sample_l > 0 && sample_max <  sample_l)
11081fd0:	e0bffd0f 	ldh	r2,-12(fp)
11081fd4:	10800050 	cmplti	r2,r2,1
11081fd8:	1000051e 	bne	r2,zero,11081ff0 <dump_record_data+0x70>
11081fdc:	e0fffc0f 	ldh	r3,-16(fp)
11081fe0:	e0bffd0f 	ldh	r2,-12(fp)
11081fe4:	1880020e 	bge	r3,r2,11081ff0 <dump_record_data+0x70>
            sample_max = sample_l;
11081fe8:	e0bffd0b 	ldhu	r2,-12(fp)
11081fec:	e0bffc0d 	sth	r2,-16(fp)
        if (sample_l < 0 && sample_max <  -sample_l)
11081ff0:	e0bffd0f 	ldh	r2,-12(fp)
11081ff4:	1004403a 	cmpge	r2,r2,zero
11081ff8:	1000071e 	bne	r2,zero,11082018 <dump_record_data+0x98>
11081ffc:	e0bffc0f 	ldh	r2,-16(fp)
11082000:	e0fffd0f 	ldh	r3,-12(fp)
11082004:	00c7c83a 	sub	r3,zero,r3
11082008:	10c0030e 	bge	r2,r3,11082018 <dump_record_data+0x98>
            sample_max = -sample_l;
1108200c:	e0bffd0b 	ldhu	r2,-12(fp)
11082010:	0085c83a 	sub	r2,zero,r2
11082014:	e0bffc0d 	sth	r2,-16(fp)
        if (sample_r > 0 && sample_max <  sample_r)
11082018:	e0bffc8f 	ldh	r2,-14(fp)
1108201c:	10800050 	cmplti	r2,r2,1
11082020:	1000051e 	bne	r2,zero,11082038 <dump_record_data+0xb8>
11082024:	e0fffc0f 	ldh	r3,-16(fp)
11082028:	e0bffc8f 	ldh	r2,-14(fp)
1108202c:	1880020e 	bge	r3,r2,11082038 <dump_record_data+0xb8>
            sample_max = sample_r;
11082030:	e0bffc8b 	ldhu	r2,-14(fp)
11082034:	e0bffc0d 	sth	r2,-16(fp)
        if (sample_r < 0 && sample_max <  -sample_r)
11082038:	e0bffc8f 	ldh	r2,-14(fp)
1108203c:	1004403a 	cmpge	r2,r2,zero
11082040:	1000071e 	bne	r2,zero,11082060 <dump_record_data+0xe0>
11082044:	e0bffc0f 	ldh	r2,-16(fp)
11082048:	e0fffc8f 	ldh	r3,-14(fp)
1108204c:	00c7c83a 	sub	r3,zero,r3
11082050:	10c0030e 	bge	r2,r3,11082060 <dump_record_data+0xe0>
            sample_max = -sample_r;
11082054:	e0bffc8b 	ldhu	r2,-14(fp)
11082058:	0085c83a 	sub	r2,zero,r2
1108205c:	e0bffc0d 	sth	r2,-16(fp)
void dump_record_data(alt_u32 *pData, alt_u32 len){
    short sample_l, sample_r, sample_max = 0;
    alt_u32 data;
    int i;
    //return ;
    for(i=0;i<len;i++){
11082060:	e0bffa17 	ldw	r2,-24(fp)
11082064:	10800044 	addi	r2,r2,1
11082068:	e0bffa15 	stw	r2,-24(fp)
1108206c:	e0fffa17 	ldw	r3,-24(fp)
11082070:	e0bfff17 	ldw	r2,-4(fp)
11082074:	18bfcb36 	bltu	r3,r2,11081fa4 <dump_record_data+0x24>
        if (sample_r > 0 && sample_max <  sample_r)
            sample_max = sample_r;
        if (sample_r < 0 && sample_max <  -sample_r)
            sample_max = -sample_r;
    }
    printf("max=%d\n\n", sample_max);
11082078:	e17ffc0f 	ldh	r5,-16(fp)
1108207c:	01044274 	movhi	r4,4361
11082080:	213b5d04 	addi	r4,r4,-4748
11082084:	10826b00 	call	110826b0 <printf>
}
11082088:	e037883a 	mov	sp,fp
1108208c:	dfc00117 	ldw	ra,4(sp)
11082090:	df000017 	ldw	fp,0(sp)
11082094:	dec00204 	addi	sp,sp,8
11082098:	f800283a 	ret

1108209c <show_menu>:
    "               DOWN/UP/UP------>32K\n",
    "               UP/DOWN/DOWN---->8K\n",
    "\n\n"
};

void show_menu(void){
1108209c:	defffd04 	addi	sp,sp,-12
110820a0:	dfc00215 	stw	ra,8(sp)
110820a4:	df000115 	stw	fp,4(sp)
110820a8:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
110820ac:	e03fff15 	stw	zero,-4(fp)
110820b0:	00000b06 	br	110820e0 <show_menu+0x44>
        printf(szMenu[i]);
110820b4:	e0bfff17 	ldw	r2,-4(fp)
110820b8:	100491fa 	slli	r2,r2,7
110820bc:	1007883a 	mov	r3,r2
110820c0:	00844274 	movhi	r2,4361
110820c4:	10bb6004 	addi	r2,r2,-4736
110820c8:	1885883a 	add	r2,r3,r2
110820cc:	1009883a 	mov	r4,r2
110820d0:	10826b00 	call	110826b0 <printf>
    "\n\n"
};

void show_menu(void){
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
110820d4:	e0bfff17 	ldw	r2,-4(fp)
110820d8:	10800044 	addi	r2,r2,1
110820dc:	e0bfff15 	stw	r2,-4(fp)
110820e0:	e0bfff17 	ldw	r2,-4(fp)
110820e4:	108003b0 	cmpltui	r2,r2,14
110820e8:	103ff21e 	bne	r2,zero,110820b4 <show_menu+0x18>
        printf(szMenu[i]);
}
110820ec:	e037883a 	mov	sp,fp
110820f0:	dfc00117 	ldw	ra,4(sp)
110820f4:	df000017 	ldw	fp,0(sp)
110820f8:	dec00204 	addi	sp,sp,8
110820fc:	f800283a 	ret

11082100 <main>:

int main()
{
11082100:	deffeb04 	addi	sp,sp,-84
11082104:	dfc01415 	stw	ra,80(sp)
11082108:	df001315 	stw	fp,76(sp)
1108210c:	df001304 	addi	fp,sp,76
    typedef enum{
        ST_STANDY,
        ST_RECODING,
        ST_PLAYING
    }STATE;
    STATE state = ST_STANDY;
11082110:	e03ffb15 	stw	zero,-20(fp)
    volatile alt_u32 button_mask=0;
11082114:	e03ffc15 	stw	zero,-16(fp)
    bool bRecordPressed, bPlayPressed, bError = FALSE;
11082118:	e03ff815 	stw	zero,-32(fp)
    alt_u32 *pBuf, *pPlaying, *pRecording, RecordLen, PlayLen, data, try_cnt, buf_sample_size;
    alt_u16 ch_right, ch_left;

    printf("Hello World\n");
1108211c:	01044274 	movhi	r4,4361
11082120:	213d2004 	addi	r4,r4,-2944
11082124:	10827c80 	call	110827c8 <puts>
    
    show_menu();
11082128:	108209c0 	call	1108209c <show_menu>
    if (!init())
1108212c:	1081f080 	call	11081f08 <init>
11082130:	1004c03a 	cmpne	r2,r2,zero
11082134:	1000031e 	bne	r2,zero,11082144 <main+0x44>
        return 0;
11082138:	0005883a 	mov	r2,zero
1108213c:	e0bfff15 	stw	r2,-4(fp)
11082140:	00010206 	br	1108254c <main+0x44c>

 #ifdef USE_DDR3_FOR_DATA
    pBuf = (alt_u32 *)DDR3_BASE;
11082144:	e03ff715 	stw	zero,-36(fp)
    buf_sample_size = DDR3_SPAN/sizeof(alt_u32);
11082148:	00810034 	movhi	r2,1024
1108214c:	e0bff015 	stw	r2,-64(fp)
    if (!pBuf){
        printf("malloc fail\r\n");
        return 0;
    }
#endif
    button_monitor_start(&button_mask);  // button IRQ
11082150:	e13ffc04 	addi	r4,fp,-16
11082154:	1081cd40 	call	11081cd4 <button_monitor_start>
    printf("ready\n\n");
11082158:	01044274 	movhi	r4,4361
1108215c:	213d2304 	addi	r4,r4,-2932
11082160:	10827c80 	call	110827c8 <puts>
    
    
    // test
    record_sample_rate = ui_get_sample_rate(); 
11082164:	1081bd00 	call	11081bd0 <ui_get_sample_rate>
11082168:	d0a6a715 	stw	r2,-25956(gp)
    RecordLen = buf_sample_size;
1108216c:	e0bff017 	ldw	r2,-64(fp)
11082170:	e0bff415 	stw	r2,-48(fp)
11082174:	00000006 	br	11082178 <main+0x78>
    //
    
    // infinite loop
    while(1){
        // 
        bRecordPressed = (button_mask & RECORD_BUTTON)?TRUE:FALSE;
11082178:	e0bffc17 	ldw	r2,-16(fp)
1108217c:	1080020c 	andi	r2,r2,8
11082180:	1004c03a 	cmpne	r2,r2,zero
11082184:	e0bffa15 	stw	r2,-24(fp)
        bPlayPressed = (button_mask & PLAY_BUTTON)?TRUE:FALSE;
11082188:	e0bffc17 	ldw	r2,-16(fp)
1108218c:	1080010c 	andi	r2,r2,4
11082190:	1004c03a 	cmpne	r2,r2,zero
11082194:	e0bff915 	stw	r2,-28(fp)
        if (bPlayPressed || bRecordPressed) 
11082198:	e0bff917 	ldw	r2,-28(fp)
1108219c:	1004c03a 	cmpne	r2,r2,zero
110821a0:	1000031e 	bne	r2,zero,110821b0 <main+0xb0>
110821a4:	e0bffa17 	ldw	r2,-24(fp)
110821a8:	1005003a 	cmpeq	r2,r2,zero
110821ac:	1000011e 	bne	r2,zero,110821b4 <main+0xb4>
            button_mask = 0;
110821b0:	e03ffc15 	stw	zero,-16(fp)
        if (state == ST_STANDY){
110821b4:	e0bffb17 	ldw	r2,-20(fp)
110821b8:	1004c03a 	cmpne	r2,r2,zero
110821bc:	10003a1e 	bne	r2,zero,110822a8 <main+0x1a8>
            if (bRecordPressed){
110821c0:	e0bffa17 	ldw	r2,-24(fp)
110821c4:	1005003a 	cmpeq	r2,r2,zero
110821c8:	10001d1e 	bne	r2,zero,11082240 <main+0x140>
            	LED_Display(0x08);
110821cc:	01000204 	movi	r4,8
110821d0:	10818ec0 	call	110818ec <LED_Display>
                bool bMicRecord;
                record_sample_rate = ui_get_sample_rate();
110821d4:	1081bd00 	call	11081bd0 <ui_get_sample_rate>
110821d8:	d0a6a715 	stw	r2,-25956(gp)
                bMicRecord = ui_is_mic_record();
110821dc:	1081b7c0 	call	11081b7c <ui_is_mic_record>
110821e0:	e0bfef15 	stw	r2,-68(fp)
                AUDIO_FifoClear();
110821e4:	10811440 	call	11081144 <AUDIO_FifoClear>
                init_audio(bMicRecord?MIC_RECORD:LINEIN_RECORD);
110821e8:	e0bfef17 	ldw	r2,-68(fp)
110821ec:	1009003a 	cmpeq	r4,r2,zero
110821f0:	1081d5c0 	call	11081d5c <init_audio>
                AUDIO_FifoClear();
110821f4:	10811440 	call	11081144 <AUDIO_FifoClear>
                state = ST_RECODING;
110821f8:	00800044 	movi	r2,1
110821fc:	e0bffb15 	stw	r2,-20(fp)
                if (bMicRecord){
11082200:	e0bfef17 	ldw	r2,-68(fp)
11082204:	1005003a 	cmpeq	r2,r2,zero
11082208:	1000051e 	bne	r2,zero,11082220 <main+0x120>
                    printf("MIC recording (sample rate = %d)...\r\n", record_sample_rate);
1108220c:	d166a717 	ldw	r5,-25956(gp)
11082210:	01044274 	movhi	r4,4361
11082214:	213d2504 	addi	r4,r4,-2924
11082218:	10826b00 	call	110826b0 <printf>
1108221c:	00000406 	br	11082230 <main+0x130>
                }else{
                    printf("LINE-IN recording (sample rate = %d)...\r\n", record_sample_rate);
11082220:	d166a717 	ldw	r5,-25956(gp)
11082224:	01044274 	movhi	r4,4361
11082228:	213d2f04 	addi	r4,r4,-2884
1108222c:	10826b00 	call	110826b0 <printf>
                }                    
                pRecording = pBuf;
11082230:	e0bff717 	ldw	r2,-36(fp)
11082234:	e0bff515 	stw	r2,-44(fp)
                RecordLen = 0;
11082238:	e03ff415 	stw	zero,-48(fp)
1108223c:	00001806 	br	110822a0 <main+0x1a0>
            }else if (bPlayPressed){
11082240:	e0bff917 	ldw	r2,-28(fp)
11082244:	1005003a 	cmpeq	r2,r2,zero
11082248:	1000151e 	bne	r2,zero,110822a0 <main+0x1a0>
                if (RecordLen == 0){
1108224c:	e0bff417 	ldw	r2,-48(fp)
11082250:	1004c03a 	cmpne	r2,r2,zero
11082254:	1000041e 	bne	r2,zero,11082268 <main+0x168>
                    printf("Please record before play audio\r\n");
11082258:	01044274 	movhi	r4,4361
1108225c:	213d3a04 	addi	r4,r4,-2840
11082260:	10827c80 	call	110827c8 <puts>
11082264:	00000e06 	br	110822a0 <main+0x1a0>
                }else{
                	LED_Display(0x04);
11082268:	01000104 	movi	r4,4
1108226c:	10818ec0 	call	110818ec <LED_Display>
                    AUDIO_FifoClear();
11082270:	10811440 	call	11081144 <AUDIO_FifoClear>
                    init_audio(LINEOUT_PLAY);
11082274:	01000084 	movi	r4,2
11082278:	1081d5c0 	call	11081d5c <init_audio>
                    state = ST_PLAYING;
1108227c:	00800084 	movi	r2,2
11082280:	e0bffb15 	stw	r2,-20(fp)
                    printf("playing (sample rate = %d)...\r\n", record_sample_rate);
11082284:	d166a717 	ldw	r5,-25956(gp)
11082288:	01044274 	movhi	r4,4361
1108228c:	213d4304 	addi	r4,r4,-2804
11082290:	10826b00 	call	110826b0 <printf>
                    pPlaying = pBuf;
11082294:	e0bff717 	ldw	r2,-36(fp)
11082298:	e0bff615 	stw	r2,-40(fp)
                    PlayLen = 0;
1108229c:	e03ff315 	stw	zero,-52(fp)
                }  
            }
            bError = FALSE;
110822a0:	e03ff815 	stw	zero,-32(fp)
110822a4:	003fb406 	br	11082178 <main+0x78>
        }else if (state == ST_RECODING){
110822a8:	e0bffb17 	ldw	r2,-20(fp)
110822ac:	10800058 	cmpnei	r2,r2,1
110822b0:	10004c1e 	bne	r2,zero,110823e4 <main+0x2e4>
            if (bRecordPressed || (RecordLen >= buf_sample_size) || bError){
110822b4:	e0bffa17 	ldw	r2,-24(fp)
110822b8:	1004c03a 	cmpne	r2,r2,zero
110822bc:	1000061e 	bne	r2,zero,110822d8 <main+0x1d8>
110822c0:	e0fff417 	ldw	r3,-48(fp)
110822c4:	e0bff017 	ldw	r2,-64(fp)
110822c8:	1880032e 	bgeu	r3,r2,110822d8 <main+0x1d8>
110822cc:	e0bff817 	ldw	r2,-32(fp)
110822d0:	1005003a 	cmpeq	r2,r2,zero
110822d4:	1000131e 	bne	r2,zero,11082324 <main+0x224>
                // stop record
            	LED_AllOff();
110822d8:	10819500 	call	11081950 <LED_AllOff>
            	printf("record stop\n");
110822dc:	01044274 	movhi	r4,4361
110822e0:	213d4b04 	addi	r4,r4,-2772
110822e4:	10827c80 	call	110827c8 <puts>
            	printf("record %d samples\n", (int)RecordLen);
110822e8:	e17ff417 	ldw	r5,-48(fp)
110822ec:	01044274 	movhi	r4,4361
110822f0:	213d4e04 	addi	r4,r4,-2760
110822f4:	10826b00 	call	110826b0 <printf>
                printf("record time=%lu\n", display_time_elapsed(RecordLen));
110822f8:	e13ff417 	ldw	r4,-48(fp)
110822fc:	1081ec40 	call	11081ec4 <display_time_elapsed>
11082300:	100b883a 	mov	r5,r2
11082304:	01044274 	movhi	r4,4361
11082308:	213d5304 	addi	r4,r4,-2740
1108230c:	10826b00 	call	110826b0 <printf>
                state = ST_STANDY;
11082310:	e03ffb15 	stw	zero,-20(fp)
                dump_record_data(pBuf, RecordLen);
11082314:	e13ff717 	ldw	r4,-36(fp)
11082318:	e17ff417 	ldw	r5,-48(fp)
1108231c:	1081f800 	call	11081f80 <dump_record_data>
                    PlayLen = 0;
                }  
            }
            bError = FALSE;
        }else if (state == ST_RECODING){
            if (bRecordPressed || (RecordLen >= buf_sample_size) || bError){
11082320:	003f9506 	br	11082178 <main+0x78>
                printf("record time=%lu\n", display_time_elapsed(RecordLen));
                state = ST_STANDY;
                dump_record_data(pBuf, RecordLen);
            }else{
                // continue recoding
                int i = 0;
11082324:	e03fee15 	stw	zero,-72(fp)
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
11082328:	00002706 	br	110823c8 <main+0x2c8>
                    try_cnt = 0;
1108232c:	e03ff115 	stw	zero,-60(fp)
                    while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT){ // wait while empty
11082330:	00000306 	br	11082340 <main+0x240>
                        try_cnt++;    
11082334:	e0bff117 	ldw	r2,-60(fp)
11082338:	10800044 	addi	r2,r2,1
1108233c:	e0bff115 	stw	r2,-60(fp)
            }else{
                // continue recoding
                int i = 0;
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
                    try_cnt = 0;
                    while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT){ // wait while empty
11082340:	10810b80 	call	110810b8 <AUDIO_AdcFifoNotEmpty>
11082344:	1004c03a 	cmpne	r2,r2,zero
11082348:	1000031e 	bne	r2,zero,11082358 <main+0x258>
1108234c:	e0bff117 	ldw	r2,-60(fp)
11082350:	10810030 	cmpltui	r2,r2,1024
11082354:	103ff71e 	bne	r2,zero,11082334 <main+0x234>
                        try_cnt++;    
                    }    
                    if (try_cnt >= MAX_TRY_CNT){
11082358:	e0bff117 	ldw	r2,-60(fp)
1108235c:	10810030 	cmpltui	r2,r2,1024
11082360:	1000031e 	bne	r2,zero,11082370 <main+0x270>
                        bError = TRUE;
11082364:	00800044 	movi	r2,1
11082368:	e0bff815 	stw	r2,-32(fp)
                        break;
1108236c:	003f8206 	br	11082178 <main+0x78>
                    }    
                    AUDIO_AdcFifoGetData(&ch_left, &ch_right);
11082370:	e13ffd84 	addi	r4,fp,-10
11082374:	e17ffd04 	addi	r5,fp,-12
11082378:	10810f00 	call	110810f0 <AUDIO_AdcFifoGetData>
                    data = (ch_left << 16) | ch_right;
1108237c:	e0bffd8b 	ldhu	r2,-10(fp)
11082380:	10bfffcc 	andi	r2,r2,65535
11082384:	1006943a 	slli	r3,r2,16
11082388:	e0bffd0b 	ldhu	r2,-12(fp)
1108238c:	10bfffcc 	andi	r2,r2,65535
11082390:	1884b03a 	or	r2,r3,r2
11082394:	e0bff215 	stw	r2,-56(fp)
                    *pRecording++ = data;
11082398:	e0fff517 	ldw	r3,-44(fp)
1108239c:	e0bff217 	ldw	r2,-56(fp)
110823a0:	18800015 	stw	r2,0(r3)
110823a4:	e0bff517 	ldw	r2,-44(fp)
110823a8:	10800104 	addi	r2,r2,4
110823ac:	e0bff515 	stw	r2,-44(fp)
                    RecordLen++;
110823b0:	e0bff417 	ldw	r2,-48(fp)
110823b4:	10800044 	addi	r2,r2,1
110823b8:	e0bff415 	stw	r2,-48(fp)
                    i++;
110823bc:	e0bfee17 	ldw	r2,-72(fp)
110823c0:	10800044 	addi	r2,r2,1
110823c4:	e0bfee15 	stw	r2,-72(fp)
                state = ST_STANDY;
                dump_record_data(pBuf, RecordLen);
            }else{
                // continue recoding
                int i = 0;
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
110823c8:	e0bfee17 	ldw	r2,-72(fp)
110823cc:	10803e88 	cmpgei	r2,r2,250
110823d0:	103f691e 	bne	r2,zero,11082178 <main+0x78>
110823d4:	e0fff417 	ldw	r3,-48(fp)
110823d8:	e0bff017 	ldw	r2,-64(fp)
110823dc:	18bfd336 	bltu	r3,r2,1108232c <main+0x22c>
110823e0:	003f6506 	br	11082178 <main+0x78>
                    RecordLen++;
                    i++;

                }  // while
            }     
        }else if (state == ST_PLAYING){
110823e4:	e0bffb17 	ldw	r2,-20(fp)
110823e8:	10800098 	cmpnei	r2,r2,2
110823ec:	103f621e 	bne	r2,zero,11082178 <main+0x78>
            if (bPlayPressed || (PlayLen >= RecordLen) || bError){
110823f0:	e0bff917 	ldw	r2,-28(fp)
110823f4:	1004c03a 	cmpne	r2,r2,zero
110823f8:	1000061e 	bne	r2,zero,11082414 <main+0x314>
110823fc:	e0fff317 	ldw	r3,-52(fp)
11082400:	e0bff417 	ldw	r2,-48(fp)
11082404:	1880032e 	bgeu	r3,r2,11082414 <main+0x314>
11082408:	e0bff817 	ldw	r2,-32(fp)
1108240c:	1005003a 	cmpeq	r2,r2,zero
11082410:	10001a1e 	bne	r2,zero,1108247c <main+0x37c>
                // stop playing
            	LED_AllOff();
11082414:	10819500 	call	11081950 <LED_AllOff>
                printf("Play Stop %s\r\n", bError?"(Error)":"");
11082418:	e0bff817 	ldw	r2,-32(fp)
1108241c:	1005003a 	cmpeq	r2,r2,zero
11082420:	1000041e 	bne	r2,zero,11082434 <main+0x334>
11082424:	00844274 	movhi	r2,4361
11082428:	10bd5804 	addi	r2,r2,-2720
1108242c:	e0bffe15 	stw	r2,-8(fp)
11082430:	00000306 	br	11082440 <main+0x340>
11082434:	00844274 	movhi	r2,4361
11082438:	10bd5a04 	addi	r2,r2,-2712
1108243c:	e0bffe15 	stw	r2,-8(fp)
11082440:	01044274 	movhi	r4,4361
11082444:	213d5b04 	addi	r4,r4,-2708
11082448:	e17ffe17 	ldw	r5,-8(fp)
1108244c:	10826b00 	call	110826b0 <printf>
                printf("play time=%lu\n", display_time_elapsed(PlayLen));
11082450:	e13ff317 	ldw	r4,-52(fp)
11082454:	1081ec40 	call	11081ec4 <display_time_elapsed>
11082458:	100b883a 	mov	r5,r2
1108245c:	01044274 	movhi	r4,4361
11082460:	213d5f04 	addi	r4,r4,-2692
11082464:	10826b00 	call	110826b0 <printf>
                printf("Standby\n\n");
11082468:	01044274 	movhi	r4,4361
1108246c:	213d6304 	addi	r4,r4,-2676
11082470:	10827c80 	call	110827c8 <puts>
                state = ST_STANDY;
11082474:	e03ffb15 	stw	zero,-20(fp)
                    i++;

                }  // while
            }     
        }else if (state == ST_PLAYING){
            if (bPlayPressed || (PlayLen >= RecordLen) || bError){
11082478:	003f3f06 	br	11082178 <main+0x78>
                printf("play time=%lu\n", display_time_elapsed(PlayLen));
                printf("Standby\n\n");
                state = ST_STANDY;
            }else{
                // continue playing
                int i = 0;
1108247c:	e03fed15 	stw	zero,-76(fp)
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
11082480:	00002b06 	br	11082530 <main+0x430>
                    try_cnt = 0;                
11082484:	e03ff115 	stw	zero,-60(fp)
                    while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT){  // wait while full
11082488:	00000306 	br	11082498 <main+0x398>
                        try_cnt++;
1108248c:	e0bff117 	ldw	r2,-60(fp)
11082490:	10800044 	addi	r2,r2,1
11082494:	e0bff115 	stw	r2,-60(fp)
            }else{
                // continue playing
                int i = 0;
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
                    try_cnt = 0;                
                    while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT){  // wait while full
11082498:	10810200 	call	11081020 <AUDIO_DacFifoNotFull>
1108249c:	1004c03a 	cmpne	r2,r2,zero
110824a0:	1000031e 	bne	r2,zero,110824b0 <main+0x3b0>
110824a4:	e0bff117 	ldw	r2,-60(fp)
110824a8:	10810030 	cmpltui	r2,r2,1024
110824ac:	103ff71e 	bne	r2,zero,1108248c <main+0x38c>
                        try_cnt++;
                    }    
                    if (try_cnt >= MAX_TRY_CNT){
110824b0:	e0bff117 	ldw	r2,-60(fp)
110824b4:	10810030 	cmpltui	r2,r2,1024
110824b8:	1000031e 	bne	r2,zero,110824c8 <main+0x3c8>
                        bError = TRUE;
110824bc:	00800044 	movi	r2,1
110824c0:	e0bff815 	stw	r2,-32(fp)
                        break;
110824c4:	003f2c06 	br	11082178 <main+0x78>
                    }    
                    data = *pPlaying++;
110824c8:	e0bff617 	ldw	r2,-40(fp)
110824cc:	10800017 	ldw	r2,0(r2)
110824d0:	e0bff215 	stw	r2,-56(fp)
110824d4:	e0bff617 	ldw	r2,-40(fp)
110824d8:	10800104 	addi	r2,r2,4
110824dc:	e0bff615 	stw	r2,-40(fp)
                   
                    //data = 0;
                    ch_left = data >> 16;
110824e0:	e0bff217 	ldw	r2,-56(fp)
110824e4:	1004d43a 	srli	r2,r2,16
110824e8:	e0bffd8d 	sth	r2,-10(fp)
                    ch_right = data & 0xFFFF;
110824ec:	e0bff217 	ldw	r2,-56(fp)
110824f0:	e0bffd0d 	sth	r2,-12(fp)
                    AUDIO_DacFifoSetData(ch_left, ch_right);  
110824f4:	e0bffd8b 	ldhu	r2,-10(fp)
110824f8:	113fffcc 	andi	r4,r2,65535
110824fc:	2120001c 	xori	r4,r4,32768
11082500:	21200004 	addi	r4,r4,-32768
11082504:	e0bffd0b 	ldhu	r2,-12(fp)
11082508:	117fffcc 	andi	r5,r2,65535
1108250c:	2960001c 	xori	r5,r5,32768
11082510:	29600004 	addi	r5,r5,-32768
11082514:	10810740 	call	11081074 <AUDIO_DacFifoSetData>
                    i++;
11082518:	e0bfed17 	ldw	r2,-76(fp)
1108251c:	10800044 	addi	r2,r2,1
11082520:	e0bfed15 	stw	r2,-76(fp)
                    PlayLen++;
11082524:	e0bff317 	ldw	r2,-52(fp)
11082528:	10800044 	addi	r2,r2,1
1108252c:	e0bff315 	stw	r2,-52(fp)
                printf("Standby\n\n");
                state = ST_STANDY;
            }else{
                // continue playing
                int i = 0;
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
11082530:	e0bfed17 	ldw	r2,-76(fp)
11082534:	10803e88 	cmpgei	r2,r2,250
11082538:	103f0f1e 	bne	r2,zero,11082178 <main+0x78>
1108253c:	e0fff317 	ldw	r3,-52(fp)
11082540:	e0bff417 	ldw	r2,-48(fp)
11082544:	18bfcf36 	bltu	r3,r2,11082484 <main+0x384>
                    PlayLen++;
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
            }
        }        
    }
11082548:	003f0b06 	br	11082178 <main+0x78>
    
}
1108254c:	e0bfff17 	ldw	r2,-4(fp)
11082550:	e037883a 	mov	sp,fp
11082554:	dfc00117 	ldw	ra,4(sp)
11082558:	df000017 	ldw	fp,0(sp)
1108255c:	dec00204 	addi	sp,sp,8
11082560:	f800283a 	ret

11082564 <udivmodsi4>:
11082564:	29001b2e 	bgeu	r5,r4,110825d4 <udivmodsi4+0x70>
11082568:	28001a16 	blt	r5,zero,110825d4 <udivmodsi4+0x70>
1108256c:	00800044 	movi	r2,1
11082570:	0007883a 	mov	r3,zero
11082574:	01c007c4 	movi	r7,31
11082578:	00000306 	br	11082588 <udivmodsi4+0x24>
1108257c:	19c01326 	beq	r3,r7,110825cc <udivmodsi4+0x68>
11082580:	18c00044 	addi	r3,r3,1
11082584:	28000416 	blt	r5,zero,11082598 <udivmodsi4+0x34>
11082588:	294b883a 	add	r5,r5,r5
1108258c:	1085883a 	add	r2,r2,r2
11082590:	293ffa36 	bltu	r5,r4,1108257c <udivmodsi4+0x18>
11082594:	10000d26 	beq	r2,zero,110825cc <udivmodsi4+0x68>
11082598:	0007883a 	mov	r3,zero
1108259c:	21400236 	bltu	r4,r5,110825a8 <udivmodsi4+0x44>
110825a0:	2149c83a 	sub	r4,r4,r5
110825a4:	1886b03a 	or	r3,r3,r2
110825a8:	1004d07a 	srli	r2,r2,1
110825ac:	280ad07a 	srli	r5,r5,1
110825b0:	103ffa1e 	bne	r2,zero,1108259c <udivmodsi4+0x38>
110825b4:	30000226 	beq	r6,zero,110825c0 <udivmodsi4+0x5c>
110825b8:	2005883a 	mov	r2,r4
110825bc:	f800283a 	ret
110825c0:	1809883a 	mov	r4,r3
110825c4:	2005883a 	mov	r2,r4
110825c8:	f800283a 	ret
110825cc:	0007883a 	mov	r3,zero
110825d0:	003ff806 	br	110825b4 <udivmodsi4+0x50>
110825d4:	00800044 	movi	r2,1
110825d8:	0007883a 	mov	r3,zero
110825dc:	003fef06 	br	1108259c <udivmodsi4+0x38>

110825e0 <__divsi3>:
110825e0:	defffe04 	addi	sp,sp,-8
110825e4:	dc000015 	stw	r16,0(sp)
110825e8:	dfc00115 	stw	ra,4(sp)
110825ec:	0021883a 	mov	r16,zero
110825f0:	20000c16 	blt	r4,zero,11082624 <__divsi3+0x44>
110825f4:	000d883a 	mov	r6,zero
110825f8:	28000e16 	blt	r5,zero,11082634 <__divsi3+0x54>
110825fc:	10825640 	call	11082564 <udivmodsi4>
11082600:	1007883a 	mov	r3,r2
11082604:	8005003a 	cmpeq	r2,r16,zero
11082608:	1000011e 	bne	r2,zero,11082610 <__divsi3+0x30>
1108260c:	00c7c83a 	sub	r3,zero,r3
11082610:	1805883a 	mov	r2,r3
11082614:	dfc00117 	ldw	ra,4(sp)
11082618:	dc000017 	ldw	r16,0(sp)
1108261c:	dec00204 	addi	sp,sp,8
11082620:	f800283a 	ret
11082624:	0109c83a 	sub	r4,zero,r4
11082628:	04000044 	movi	r16,1
1108262c:	000d883a 	mov	r6,zero
11082630:	283ff20e 	bge	r5,zero,110825fc <__divsi3+0x1c>
11082634:	014bc83a 	sub	r5,zero,r5
11082638:	8021003a 	cmpeq	r16,r16,zero
1108263c:	003fef06 	br	110825fc <__divsi3+0x1c>

11082640 <__modsi3>:
11082640:	deffff04 	addi	sp,sp,-4
11082644:	dfc00015 	stw	ra,0(sp)
11082648:	01800044 	movi	r6,1
1108264c:	2807883a 	mov	r3,r5
11082650:	20000416 	blt	r4,zero,11082664 <__modsi3+0x24>
11082654:	28000c16 	blt	r5,zero,11082688 <__modsi3+0x48>
11082658:	dfc00017 	ldw	ra,0(sp)
1108265c:	dec00104 	addi	sp,sp,4
11082660:	10825641 	jmpi	11082564 <udivmodsi4>
11082664:	0109c83a 	sub	r4,zero,r4
11082668:	28000b16 	blt	r5,zero,11082698 <__modsi3+0x58>
1108266c:	180b883a 	mov	r5,r3
11082670:	01800044 	movi	r6,1
11082674:	10825640 	call	11082564 <udivmodsi4>
11082678:	0085c83a 	sub	r2,zero,r2
1108267c:	dfc00017 	ldw	ra,0(sp)
11082680:	dec00104 	addi	sp,sp,4
11082684:	f800283a 	ret
11082688:	014bc83a 	sub	r5,zero,r5
1108268c:	dfc00017 	ldw	ra,0(sp)
11082690:	dec00104 	addi	sp,sp,4
11082694:	10825641 	jmpi	11082564 <udivmodsi4>
11082698:	0147c83a 	sub	r3,zero,r5
1108269c:	003ff306 	br	1108266c <__modsi3+0x2c>

110826a0 <__udivsi3>:
110826a0:	000d883a 	mov	r6,zero
110826a4:	10825641 	jmpi	11082564 <udivmodsi4>

110826a8 <__umodsi3>:
110826a8:	01800044 	movi	r6,1
110826ac:	10825641 	jmpi	11082564 <udivmodsi4>

110826b0 <printf>:
110826b0:	defffb04 	addi	sp,sp,-20
110826b4:	dfc00115 	stw	ra,4(sp)
110826b8:	d9400215 	stw	r5,8(sp)
110826bc:	d9800315 	stw	r6,12(sp)
110826c0:	d9c00415 	stw	r7,16(sp)
110826c4:	00844274 	movhi	r2,4361
110826c8:	1084bc04 	addi	r2,r2,4848
110826cc:	10c00017 	ldw	r3,0(r2)
110826d0:	200b883a 	mov	r5,r4
110826d4:	d8800204 	addi	r2,sp,8
110826d8:	19000217 	ldw	r4,8(r3)
110826dc:	100d883a 	mov	r6,r2
110826e0:	d8800015 	stw	r2,0(sp)
110826e4:	10848280 	call	11084828 <__vfprintf_internal>
110826e8:	dfc00117 	ldw	ra,4(sp)
110826ec:	dec00504 	addi	sp,sp,20
110826f0:	f800283a 	ret

110826f4 <_printf_r>:
110826f4:	defffc04 	addi	sp,sp,-16
110826f8:	dfc00115 	stw	ra,4(sp)
110826fc:	d9800215 	stw	r6,8(sp)
11082700:	d9c00315 	stw	r7,12(sp)
11082704:	280d883a 	mov	r6,r5
11082708:	21400217 	ldw	r5,8(r4)
1108270c:	d8c00204 	addi	r3,sp,8
11082710:	180f883a 	mov	r7,r3
11082714:	d8c00015 	stw	r3,0(sp)
11082718:	108297c0 	call	1108297c <___vfprintf_internal_r>
1108271c:	dfc00117 	ldw	ra,4(sp)
11082720:	dec00404 	addi	sp,sp,16
11082724:	f800283a 	ret

11082728 <_puts_r>:
11082728:	defff604 	addi	sp,sp,-40
1108272c:	dc400715 	stw	r17,28(sp)
11082730:	2023883a 	mov	r17,r4
11082734:	2809883a 	mov	r4,r5
11082738:	dfc00915 	stw	ra,36(sp)
1108273c:	dcc00815 	stw	r19,32(sp)
11082740:	2827883a 	mov	r19,r5
11082744:	10828b00 	call	110828b0 <strlen>
11082748:	89400217 	ldw	r5,8(r17)
1108274c:	00c44274 	movhi	r3,4361
11082750:	18fd6604 	addi	r3,r3,-2664
11082754:	01c00044 	movi	r7,1
11082758:	12000044 	addi	r8,r2,1
1108275c:	d8c00515 	stw	r3,20(sp)
11082760:	d9c00615 	stw	r7,24(sp)
11082764:	d8c00304 	addi	r3,sp,12
11082768:	01c00084 	movi	r7,2
1108276c:	8809883a 	mov	r4,r17
11082770:	d80d883a 	mov	r6,sp
11082774:	d8c00015 	stw	r3,0(sp)
11082778:	dcc00315 	stw	r19,12(sp)
1108277c:	da000215 	stw	r8,8(sp)
11082780:	d9c00115 	stw	r7,4(sp)
11082784:	d8800415 	stw	r2,16(sp)
11082788:	1086b780 	call	11086b78 <__sfvwrite_r>
1108278c:	00ffffc4 	movi	r3,-1
11082790:	10000626 	beq	r2,zero,110827ac <_puts_r+0x84>
11082794:	1805883a 	mov	r2,r3
11082798:	dfc00917 	ldw	ra,36(sp)
1108279c:	dcc00817 	ldw	r19,32(sp)
110827a0:	dc400717 	ldw	r17,28(sp)
110827a4:	dec00a04 	addi	sp,sp,40
110827a8:	f800283a 	ret
110827ac:	00c00284 	movi	r3,10
110827b0:	1805883a 	mov	r2,r3
110827b4:	dfc00917 	ldw	ra,36(sp)
110827b8:	dcc00817 	ldw	r19,32(sp)
110827bc:	dc400717 	ldw	r17,28(sp)
110827c0:	dec00a04 	addi	sp,sp,40
110827c4:	f800283a 	ret

110827c8 <puts>:
110827c8:	00844274 	movhi	r2,4361
110827cc:	1084bc04 	addi	r2,r2,4848
110827d0:	200b883a 	mov	r5,r4
110827d4:	11000017 	ldw	r4,0(r2)
110827d8:	10827281 	jmpi	11082728 <_puts_r>

110827dc <sprintf>:
110827dc:	deffe504 	addi	sp,sp,-108
110827e0:	2013883a 	mov	r9,r4
110827e4:	dfc01815 	stw	ra,96(sp)
110827e8:	d9801915 	stw	r6,100(sp)
110827ec:	d9c01a15 	stw	r7,104(sp)
110827f0:	d8801904 	addi	r2,sp,100
110827f4:	d8800015 	stw	r2,0(sp)
110827f8:	00844274 	movhi	r2,4361
110827fc:	1084bc04 	addi	r2,r2,4848
11082800:	11000017 	ldw	r4,0(r2)
11082804:	d9c00017 	ldw	r7,0(sp)
11082808:	00808204 	movi	r2,520
1108280c:	00e00034 	movhi	r3,32768
11082810:	18ffffc4 	addi	r3,r3,-1
11082814:	280d883a 	mov	r6,r5
11082818:	d880040d 	sth	r2,16(sp)
1108281c:	d9400104 	addi	r5,sp,4
11082820:	00bfffc4 	movi	r2,-1
11082824:	d8c00615 	stw	r3,24(sp)
11082828:	d8c00315 	stw	r3,12(sp)
1108282c:	da400515 	stw	r9,20(sp)
11082830:	d880048d 	sth	r2,18(sp)
11082834:	da400115 	stw	r9,4(sp)
11082838:	108297c0 	call	1108297c <___vfprintf_internal_r>
1108283c:	d8c00117 	ldw	r3,4(sp)
11082840:	18000005 	stb	zero,0(r3)
11082844:	dfc01817 	ldw	ra,96(sp)
11082848:	dec01b04 	addi	sp,sp,108
1108284c:	f800283a 	ret

11082850 <_sprintf_r>:
11082850:	deffe604 	addi	sp,sp,-104
11082854:	2813883a 	mov	r9,r5
11082858:	dfc01815 	stw	ra,96(sp)
1108285c:	d9c01915 	stw	r7,100(sp)
11082860:	d8801904 	addi	r2,sp,100
11082864:	d8800015 	stw	r2,0(sp)
11082868:	100f883a 	mov	r7,r2
1108286c:	00808204 	movi	r2,520
11082870:	00e00034 	movhi	r3,32768
11082874:	18ffffc4 	addi	r3,r3,-1
11082878:	d880040d 	sth	r2,16(sp)
1108287c:	d9400104 	addi	r5,sp,4
11082880:	00bfffc4 	movi	r2,-1
11082884:	d8c00615 	stw	r3,24(sp)
11082888:	d8c00315 	stw	r3,12(sp)
1108288c:	da400515 	stw	r9,20(sp)
11082890:	d880048d 	sth	r2,18(sp)
11082894:	da400115 	stw	r9,4(sp)
11082898:	108297c0 	call	1108297c <___vfprintf_internal_r>
1108289c:	d8c00117 	ldw	r3,4(sp)
110828a0:	18000005 	stb	zero,0(r3)
110828a4:	dfc01817 	ldw	ra,96(sp)
110828a8:	dec01a04 	addi	sp,sp,104
110828ac:	f800283a 	ret

110828b0 <strlen>:
110828b0:	208000cc 	andi	r2,r4,3
110828b4:	2011883a 	mov	r8,r4
110828b8:	1000161e 	bne	r2,zero,11082914 <strlen+0x64>
110828bc:	20c00017 	ldw	r3,0(r4)
110828c0:	017fbff4 	movhi	r5,65279
110828c4:	297fbfc4 	addi	r5,r5,-257
110828c8:	01e02074 	movhi	r7,32897
110828cc:	39e02004 	addi	r7,r7,-32640
110828d0:	1945883a 	add	r2,r3,r5
110828d4:	11c4703a 	and	r2,r2,r7
110828d8:	00c6303a 	nor	r3,zero,r3
110828dc:	1886703a 	and	r3,r3,r2
110828e0:	18000c1e 	bne	r3,zero,11082914 <strlen+0x64>
110828e4:	280d883a 	mov	r6,r5
110828e8:	380b883a 	mov	r5,r7
110828ec:	21000104 	addi	r4,r4,4
110828f0:	20800017 	ldw	r2,0(r4)
110828f4:	1187883a 	add	r3,r2,r6
110828f8:	1946703a 	and	r3,r3,r5
110828fc:	0084303a 	nor	r2,zero,r2
11082900:	10c4703a 	and	r2,r2,r3
11082904:	103ff926 	beq	r2,zero,110828ec <strlen+0x3c>
11082908:	20800007 	ldb	r2,0(r4)
1108290c:	10000326 	beq	r2,zero,1108291c <strlen+0x6c>
11082910:	21000044 	addi	r4,r4,1
11082914:	20800007 	ldb	r2,0(r4)
11082918:	103ffd1e 	bne	r2,zero,11082910 <strlen+0x60>
1108291c:	2205c83a 	sub	r2,r4,r8
11082920:	f800283a 	ret

11082924 <__sprint_r>:
11082924:	30800217 	ldw	r2,8(r6)
11082928:	defffe04 	addi	sp,sp,-8
1108292c:	dc000015 	stw	r16,0(sp)
11082930:	dfc00115 	stw	ra,4(sp)
11082934:	3021883a 	mov	r16,r6
11082938:	0007883a 	mov	r3,zero
1108293c:	1000061e 	bne	r2,zero,11082958 <__sprint_r+0x34>
11082940:	1805883a 	mov	r2,r3
11082944:	30000115 	stw	zero,4(r6)
11082948:	dfc00117 	ldw	ra,4(sp)
1108294c:	dc000017 	ldw	r16,0(sp)
11082950:	dec00204 	addi	sp,sp,8
11082954:	f800283a 	ret
11082958:	1086b780 	call	11086b78 <__sfvwrite_r>
1108295c:	1007883a 	mov	r3,r2
11082960:	1805883a 	mov	r2,r3
11082964:	80000115 	stw	zero,4(r16)
11082968:	80000215 	stw	zero,8(r16)
1108296c:	dfc00117 	ldw	ra,4(sp)
11082970:	dc000017 	ldw	r16,0(sp)
11082974:	dec00204 	addi	sp,sp,8
11082978:	f800283a 	ret

1108297c <___vfprintf_internal_r>:
1108297c:	defea304 	addi	sp,sp,-1396
11082980:	dd815915 	stw	r22,1380(sp)
11082984:	dc015315 	stw	r16,1356(sp)
11082988:	d9c15215 	stw	r7,1352(sp)
1108298c:	dfc15c15 	stw	ra,1392(sp)
11082990:	df015b15 	stw	fp,1388(sp)
11082994:	ddc15a15 	stw	r23,1384(sp)
11082998:	dd415815 	stw	r21,1376(sp)
1108299c:	dd015715 	stw	r20,1372(sp)
110829a0:	dcc15615 	stw	r19,1368(sp)
110829a4:	dc815515 	stw	r18,1364(sp)
110829a8:	dc415415 	stw	r17,1360(sp)
110829ac:	282d883a 	mov	r22,r5
110829b0:	3021883a 	mov	r16,r6
110829b4:	d9015015 	stw	r4,1344(sp)
110829b8:	108719c0 	call	1108719c <_localeconv_r>
110829bc:	10800017 	ldw	r2,0(r2)
110829c0:	d9c15217 	ldw	r7,1352(sp)
110829c4:	d8814a15 	stw	r2,1320(sp)
110829c8:	d8815017 	ldw	r2,1344(sp)
110829cc:	10000226 	beq	r2,zero,110829d8 <___vfprintf_internal_r+0x5c>
110829d0:	10800e17 	ldw	r2,56(r2)
110829d4:	10020d26 	beq	r2,zero,1108320c <___vfprintf_internal_r+0x890>
110829d8:	b080030b 	ldhu	r2,12(r22)
110829dc:	1080020c 	andi	r2,r2,8
110829e0:	10020e26 	beq	r2,zero,1108321c <___vfprintf_internal_r+0x8a0>
110829e4:	b0800417 	ldw	r2,16(r22)
110829e8:	10020c26 	beq	r2,zero,1108321c <___vfprintf_internal_r+0x8a0>
110829ec:	b200030b 	ldhu	r8,12(r22)
110829f0:	00800284 	movi	r2,10
110829f4:	40c0068c 	andi	r3,r8,26
110829f8:	18802f1e 	bne	r3,r2,11082ab8 <___vfprintf_internal_r+0x13c>
110829fc:	b080038f 	ldh	r2,14(r22)
11082a00:	10002d16 	blt	r2,zero,11082ab8 <___vfprintf_internal_r+0x13c>
11082a04:	b240038b 	ldhu	r9,14(r22)
11082a08:	b2800717 	ldw	r10,28(r22)
11082a0c:	b2c00917 	ldw	r11,36(r22)
11082a10:	d9015017 	ldw	r4,1344(sp)
11082a14:	dc402a04 	addi	r17,sp,168
11082a18:	d8804104 	addi	r2,sp,260
11082a1c:	00c10004 	movi	r3,1024
11082a20:	423fff4c 	andi	r8,r8,65533
11082a24:	800d883a 	mov	r6,r16
11082a28:	880b883a 	mov	r5,r17
11082a2c:	da002d0d 	sth	r8,180(sp)
11082a30:	da402d8d 	sth	r9,182(sp)
11082a34:	da803115 	stw	r10,196(sp)
11082a38:	dac03315 	stw	r11,204(sp)
11082a3c:	d8802e15 	stw	r2,184(sp)
11082a40:	d8c02f15 	stw	r3,188(sp)
11082a44:	d8802a15 	stw	r2,168(sp)
11082a48:	d8c02c15 	stw	r3,176(sp)
11082a4c:	d8003015 	stw	zero,192(sp)
11082a50:	108297c0 	call	1108297c <___vfprintf_internal_r>
11082a54:	d8814c15 	stw	r2,1328(sp)
11082a58:	10000416 	blt	r2,zero,11082a6c <___vfprintf_internal_r+0xf0>
11082a5c:	d9015017 	ldw	r4,1344(sp)
11082a60:	880b883a 	mov	r5,r17
11082a64:	10862480 	call	11086248 <_fflush_r>
11082a68:	1002321e 	bne	r2,zero,11083334 <___vfprintf_internal_r+0x9b8>
11082a6c:	d8802d0b 	ldhu	r2,180(sp)
11082a70:	1080100c 	andi	r2,r2,64
11082a74:	10000326 	beq	r2,zero,11082a84 <___vfprintf_internal_r+0x108>
11082a78:	b080030b 	ldhu	r2,12(r22)
11082a7c:	10801014 	ori	r2,r2,64
11082a80:	b080030d 	sth	r2,12(r22)
11082a84:	d8814c17 	ldw	r2,1328(sp)
11082a88:	dfc15c17 	ldw	ra,1392(sp)
11082a8c:	df015b17 	ldw	fp,1388(sp)
11082a90:	ddc15a17 	ldw	r23,1384(sp)
11082a94:	dd815917 	ldw	r22,1380(sp)
11082a98:	dd415817 	ldw	r21,1376(sp)
11082a9c:	dd015717 	ldw	r20,1372(sp)
11082aa0:	dcc15617 	ldw	r19,1368(sp)
11082aa4:	dc815517 	ldw	r18,1364(sp)
11082aa8:	dc415417 	ldw	r17,1360(sp)
11082aac:	dc015317 	ldw	r16,1356(sp)
11082ab0:	dec15d04 	addi	sp,sp,1396
11082ab4:	f800283a 	ret
11082ab8:	0005883a 	mov	r2,zero
11082abc:	0007883a 	mov	r3,zero
11082ac0:	dd401a04 	addi	r21,sp,104
11082ac4:	d8814315 	stw	r2,1292(sp)
11082ac8:	802f883a 	mov	r23,r16
11082acc:	d8c14415 	stw	r3,1296(sp)
11082ad0:	d8014c15 	stw	zero,1328(sp)
11082ad4:	d8014915 	stw	zero,1316(sp)
11082ad8:	d8014515 	stw	zero,1300(sp)
11082adc:	d8014815 	stw	zero,1312(sp)
11082ae0:	dd400d15 	stw	r21,52(sp)
11082ae4:	d8000f15 	stw	zero,60(sp)
11082ae8:	d8000e15 	stw	zero,56(sp)
11082aec:	b8800007 	ldb	r2,0(r23)
11082af0:	10001926 	beq	r2,zero,11082b58 <___vfprintf_internal_r+0x1dc>
11082af4:	00c00944 	movi	r3,37
11082af8:	10c01726 	beq	r2,r3,11082b58 <___vfprintf_internal_r+0x1dc>
11082afc:	b821883a 	mov	r16,r23
11082b00:	00000106 	br	11082b08 <___vfprintf_internal_r+0x18c>
11082b04:	10c00326 	beq	r2,r3,11082b14 <___vfprintf_internal_r+0x198>
11082b08:	84000044 	addi	r16,r16,1
11082b0c:	80800007 	ldb	r2,0(r16)
11082b10:	103ffc1e 	bne	r2,zero,11082b04 <___vfprintf_internal_r+0x188>
11082b14:	85e7c83a 	sub	r19,r16,r23
11082b18:	98000e26 	beq	r19,zero,11082b54 <___vfprintf_internal_r+0x1d8>
11082b1c:	dc800f17 	ldw	r18,60(sp)
11082b20:	dc400e17 	ldw	r17,56(sp)
11082b24:	008001c4 	movi	r2,7
11082b28:	94e5883a 	add	r18,r18,r19
11082b2c:	8c400044 	addi	r17,r17,1
11082b30:	adc00015 	stw	r23,0(r21)
11082b34:	dc800f15 	stw	r18,60(sp)
11082b38:	acc00115 	stw	r19,4(r21)
11082b3c:	dc400e15 	stw	r17,56(sp)
11082b40:	14428b16 	blt	r2,r17,11083570 <___vfprintf_internal_r+0xbf4>
11082b44:	ad400204 	addi	r21,r21,8
11082b48:	d9014c17 	ldw	r4,1328(sp)
11082b4c:	24c9883a 	add	r4,r4,r19
11082b50:	d9014c15 	stw	r4,1328(sp)
11082b54:	802f883a 	mov	r23,r16
11082b58:	b8800007 	ldb	r2,0(r23)
11082b5c:	10013c26 	beq	r2,zero,11083050 <___vfprintf_internal_r+0x6d4>
11082b60:	bdc00044 	addi	r23,r23,1
11082b64:	d8000405 	stb	zero,16(sp)
11082b68:	b8c00007 	ldb	r3,0(r23)
11082b6c:	04ffffc4 	movi	r19,-1
11082b70:	d8014d15 	stw	zero,1332(sp)
11082b74:	d8014b15 	stw	zero,1324(sp)
11082b78:	d8c14e15 	stw	r3,1336(sp)
11082b7c:	bdc00044 	addi	r23,r23,1
11082b80:	d9414e17 	ldw	r5,1336(sp)
11082b84:	00801604 	movi	r2,88
11082b88:	28fff804 	addi	r3,r5,-32
11082b8c:	10c06036 	bltu	r2,r3,11082d10 <___vfprintf_internal_r+0x394>
11082b90:	18c5883a 	add	r2,r3,r3
11082b94:	1085883a 	add	r2,r2,r2
11082b98:	00c44234 	movhi	r3,4360
11082b9c:	18caeb04 	addi	r3,r3,11180
11082ba0:	10c5883a 	add	r2,r2,r3
11082ba4:	11000017 	ldw	r4,0(r2)
11082ba8:	2000683a 	jmp	r4
11082bac:	11083b20 	cmpeqi	r4,r2,8428
11082bb0:	11082d10 	cmplti	r4,r2,8372
11082bb4:	11082d10 	cmplti	r4,r2,8372
11082bb8:	11083b0c 	andi	r4,r2,8428
11082bbc:	11082d10 	cmplti	r4,r2,8372
11082bc0:	11082d10 	cmplti	r4,r2,8372
11082bc4:	11082d10 	cmplti	r4,r2,8372
11082bc8:	11082d10 	cmplti	r4,r2,8372
11082bcc:	11082d10 	cmplti	r4,r2,8372
11082bd0:	11082d10 	cmplti	r4,r2,8372
11082bd4:	110838ec 	andhi	r4,r2,8419
11082bd8:	11083afc 	xorhi	r4,r2,8427
11082bdc:	11082d10 	cmplti	r4,r2,8372
11082be0:	11083904 	addi	r4,r2,8420
11082be4:	11083b98 	cmpnei	r4,r2,8430
11082be8:	11082d10 	cmplti	r4,r2,8372
11082bec:	11083b84 	addi	r4,r2,8430
11082bf0:	11083b4c 	andi	r4,r2,8429
11082bf4:	11083b4c 	andi	r4,r2,8429
11082bf8:	11083b4c 	andi	r4,r2,8429
11082bfc:	11083b4c 	andi	r4,r2,8429
11082c00:	11083b4c 	andi	r4,r2,8429
11082c04:	11083b4c 	andi	r4,r2,8429
11082c08:	11083b4c 	andi	r4,r2,8429
11082c0c:	11083b4c 	andi	r4,r2,8429
11082c10:	11083b4c 	andi	r4,r2,8429
11082c14:	11082d10 	cmplti	r4,r2,8372
11082c18:	11082d10 	cmplti	r4,r2,8372
11082c1c:	11082d10 	cmplti	r4,r2,8372
11082c20:	11082d10 	cmplti	r4,r2,8372
11082c24:	11082d10 	cmplti	r4,r2,8372
11082c28:	11082d10 	cmplti	r4,r2,8372
11082c2c:	11082d10 	cmplti	r4,r2,8372
11082c30:	11082d10 	cmplti	r4,r2,8372
11082c34:	11082d10 	cmplti	r4,r2,8372
11082c38:	11082d10 	cmplti	r4,r2,8372
11082c3c:	11083368 	cmpgeui	r4,r2,8397
11082c40:	110839d4 	ori	r4,r2,8423
11082c44:	11082d10 	cmplti	r4,r2,8372
11082c48:	110839d4 	ori	r4,r2,8423
11082c4c:	11082d10 	cmplti	r4,r2,8372
11082c50:	11082d10 	cmplti	r4,r2,8372
11082c54:	11082d10 	cmplti	r4,r2,8372
11082c58:	11082d10 	cmplti	r4,r2,8372
11082c5c:	11083b38 	rdprs	r4,r2,8428
11082c60:	11082d10 	cmplti	r4,r2,8372
11082c64:	11082d10 	cmplti	r4,r2,8372
11082c68:	1108341c 	xori	r4,r2,8400
11082c6c:	11082d10 	cmplti	r4,r2,8372
11082c70:	11082d10 	cmplti	r4,r2,8372
11082c74:	11082d10 	cmplti	r4,r2,8372
11082c78:	11082d10 	cmplti	r4,r2,8372
11082c7c:	11082d10 	cmplti	r4,r2,8372
11082c80:	11083468 	cmpgeui	r4,r2,8401
11082c84:	11082d10 	cmplti	r4,r2,8372
11082c88:	11082d10 	cmplti	r4,r2,8372
11082c8c:	11083a88 	cmpgei	r4,r2,8426
11082c90:	11082d10 	cmplti	r4,r2,8372
11082c94:	11082d10 	cmplti	r4,r2,8372
11082c98:	11082d10 	cmplti	r4,r2,8372
11082c9c:	11082d10 	cmplti	r4,r2,8372
11082ca0:	11082d10 	cmplti	r4,r2,8372
11082ca4:	11082d10 	cmplti	r4,r2,8372
11082ca8:	11082d10 	cmplti	r4,r2,8372
11082cac:	11082d10 	cmplti	r4,r2,8372
11082cb0:	11082d10 	cmplti	r4,r2,8372
11082cb4:	11082d10 	cmplti	r4,r2,8372
11082cb8:	11083a5c 	xori	r4,r2,8425
11082cbc:	11083374 	orhi	r4,r2,8397
11082cc0:	110839d4 	ori	r4,r2,8423
11082cc4:	110839d4 	ori	r4,r2,8423
11082cc8:	110839d4 	ori	r4,r2,8423
11082ccc:	110839c0 	call	1110839c <__alt_data_end+0x5639c>
11082cd0:	11083374 	orhi	r4,r2,8397
11082cd4:	11082d10 	cmplti	r4,r2,8372
11082cd8:	11082d10 	cmplti	r4,r2,8372
11082cdc:	11083948 	cmpgei	r4,r2,8421
11082ce0:	11082d10 	cmplti	r4,r2,8372
11082ce4:	11083918 	cmpnei	r4,r2,8420
11082ce8:	11083428 	cmpgeui	r4,r2,8400
11082cec:	11083978 	rdprs	r4,r2,8421
11082cf0:	11083964 	muli	r4,r2,8421
11082cf4:	11082d10 	cmplti	r4,r2,8372
11082cf8:	11083bf4 	orhi	r4,r2,8431
11082cfc:	11082d10 	cmplti	r4,r2,8372
11082d00:	11083474 	orhi	r4,r2,8401
11082d04:	11082d10 	cmplti	r4,r2,8372
11082d08:	11082d10 	cmplti	r4,r2,8372
11082d0c:	11083aec 	andhi	r4,r2,8427
11082d10:	d9014e17 	ldw	r4,1336(sp)
11082d14:	2000ce26 	beq	r4,zero,11083050 <___vfprintf_internal_r+0x6d4>
11082d18:	01400044 	movi	r5,1
11082d1c:	d9801004 	addi	r6,sp,64
11082d20:	d9c14115 	stw	r7,1284(sp)
11082d24:	d9414615 	stw	r5,1304(sp)
11082d28:	d9814215 	stw	r6,1288(sp)
11082d2c:	280f883a 	mov	r7,r5
11082d30:	d9001005 	stb	r4,64(sp)
11082d34:	d8000405 	stb	zero,16(sp)
11082d38:	d8014715 	stw	zero,1308(sp)
11082d3c:	d8c14d17 	ldw	r3,1332(sp)
11082d40:	1880008c 	andi	r2,r3,2
11082d44:	1005003a 	cmpeq	r2,r2,zero
11082d48:	d8815115 	stw	r2,1348(sp)
11082d4c:	1000031e 	bne	r2,zero,11082d5c <___vfprintf_internal_r+0x3e0>
11082d50:	d9014617 	ldw	r4,1304(sp)
11082d54:	21000084 	addi	r4,r4,2
11082d58:	d9014615 	stw	r4,1304(sp)
11082d5c:	d9414d17 	ldw	r5,1332(sp)
11082d60:	2940210c 	andi	r5,r5,132
11082d64:	d9414f15 	stw	r5,1340(sp)
11082d68:	28002d1e 	bne	r5,zero,11082e20 <___vfprintf_internal_r+0x4a4>
11082d6c:	d9814b17 	ldw	r6,1324(sp)
11082d70:	d8814617 	ldw	r2,1304(sp)
11082d74:	30a1c83a 	sub	r16,r6,r2
11082d78:	0400290e 	bge	zero,r16,11082e20 <___vfprintf_internal_r+0x4a4>
11082d7c:	00800404 	movi	r2,16
11082d80:	1404580e 	bge	r2,r16,11083ee4 <___vfprintf_internal_r+0x1568>
11082d84:	dc800f17 	ldw	r18,60(sp)
11082d88:	dc400e17 	ldw	r17,56(sp)
11082d8c:	1027883a 	mov	r19,r2
11082d90:	07044274 	movhi	fp,4361
11082d94:	e73d8304 	addi	fp,fp,-2548
11082d98:	050001c4 	movi	r20,7
11082d9c:	00000306 	br	11082dac <___vfprintf_internal_r+0x430>
11082da0:	843ffc04 	addi	r16,r16,-16
11082da4:	ad400204 	addi	r21,r21,8
11082da8:	9c00130e 	bge	r19,r16,11082df8 <___vfprintf_internal_r+0x47c>
11082dac:	94800404 	addi	r18,r18,16
11082db0:	8c400044 	addi	r17,r17,1
11082db4:	af000015 	stw	fp,0(r21)
11082db8:	acc00115 	stw	r19,4(r21)
11082dbc:	dc800f15 	stw	r18,60(sp)
11082dc0:	dc400e15 	stw	r17,56(sp)
11082dc4:	a47ff60e 	bge	r20,r17,11082da0 <___vfprintf_internal_r+0x424>
11082dc8:	d9015017 	ldw	r4,1344(sp)
11082dcc:	b00b883a 	mov	r5,r22
11082dd0:	d9800d04 	addi	r6,sp,52
11082dd4:	d9c15215 	stw	r7,1352(sp)
11082dd8:	10829240 	call	11082924 <__sprint_r>
11082ddc:	d9c15217 	ldw	r7,1352(sp)
11082de0:	10009e1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11082de4:	843ffc04 	addi	r16,r16,-16
11082de8:	dc800f17 	ldw	r18,60(sp)
11082dec:	dc400e17 	ldw	r17,56(sp)
11082df0:	dd401a04 	addi	r21,sp,104
11082df4:	9c3fed16 	blt	r19,r16,11082dac <___vfprintf_internal_r+0x430>
11082df8:	9425883a 	add	r18,r18,r16
11082dfc:	8c400044 	addi	r17,r17,1
11082e00:	008001c4 	movi	r2,7
11082e04:	af000015 	stw	fp,0(r21)
11082e08:	ac000115 	stw	r16,4(r21)
11082e0c:	dc800f15 	stw	r18,60(sp)
11082e10:	dc400e15 	stw	r17,56(sp)
11082e14:	1441f516 	blt	r2,r17,110835ec <___vfprintf_internal_r+0xc70>
11082e18:	ad400204 	addi	r21,r21,8
11082e1c:	00000206 	br	11082e28 <___vfprintf_internal_r+0x4ac>
11082e20:	dc800f17 	ldw	r18,60(sp)
11082e24:	dc400e17 	ldw	r17,56(sp)
11082e28:	d8800407 	ldb	r2,16(sp)
11082e2c:	10000b26 	beq	r2,zero,11082e5c <___vfprintf_internal_r+0x4e0>
11082e30:	00800044 	movi	r2,1
11082e34:	94800044 	addi	r18,r18,1
11082e38:	8c400044 	addi	r17,r17,1
11082e3c:	a8800115 	stw	r2,4(r21)
11082e40:	d8c00404 	addi	r3,sp,16
11082e44:	008001c4 	movi	r2,7
11082e48:	a8c00015 	stw	r3,0(r21)
11082e4c:	dc800f15 	stw	r18,60(sp)
11082e50:	dc400e15 	stw	r17,56(sp)
11082e54:	1441da16 	blt	r2,r17,110835c0 <___vfprintf_internal_r+0xc44>
11082e58:	ad400204 	addi	r21,r21,8
11082e5c:	d9015117 	ldw	r4,1348(sp)
11082e60:	20000b1e 	bne	r4,zero,11082e90 <___vfprintf_internal_r+0x514>
11082e64:	d8800504 	addi	r2,sp,20
11082e68:	94800084 	addi	r18,r18,2
11082e6c:	8c400044 	addi	r17,r17,1
11082e70:	a8800015 	stw	r2,0(r21)
11082e74:	00c00084 	movi	r3,2
11082e78:	008001c4 	movi	r2,7
11082e7c:	a8c00115 	stw	r3,4(r21)
11082e80:	dc800f15 	stw	r18,60(sp)
11082e84:	dc400e15 	stw	r17,56(sp)
11082e88:	1441c216 	blt	r2,r17,11083594 <___vfprintf_internal_r+0xc18>
11082e8c:	ad400204 	addi	r21,r21,8
11082e90:	d9414f17 	ldw	r5,1340(sp)
11082e94:	00802004 	movi	r2,128
11082e98:	2880b126 	beq	r5,r2,11083160 <___vfprintf_internal_r+0x7e4>
11082e9c:	d8c14717 	ldw	r3,1308(sp)
11082ea0:	19e1c83a 	sub	r16,r3,r7
11082ea4:	0400260e 	bge	zero,r16,11082f40 <___vfprintf_internal_r+0x5c4>
11082ea8:	00800404 	movi	r2,16
11082eac:	1403c90e 	bge	r2,r16,11083dd4 <___vfprintf_internal_r+0x1458>
11082eb0:	1027883a 	mov	r19,r2
11082eb4:	07044274 	movhi	fp,4361
11082eb8:	e73d7f04 	addi	fp,fp,-2564
11082ebc:	050001c4 	movi	r20,7
11082ec0:	00000306 	br	11082ed0 <___vfprintf_internal_r+0x554>
11082ec4:	843ffc04 	addi	r16,r16,-16
11082ec8:	ad400204 	addi	r21,r21,8
11082ecc:	9c00130e 	bge	r19,r16,11082f1c <___vfprintf_internal_r+0x5a0>
11082ed0:	94800404 	addi	r18,r18,16
11082ed4:	8c400044 	addi	r17,r17,1
11082ed8:	af000015 	stw	fp,0(r21)
11082edc:	acc00115 	stw	r19,4(r21)
11082ee0:	dc800f15 	stw	r18,60(sp)
11082ee4:	dc400e15 	stw	r17,56(sp)
11082ee8:	a47ff60e 	bge	r20,r17,11082ec4 <___vfprintf_internal_r+0x548>
11082eec:	d9015017 	ldw	r4,1344(sp)
11082ef0:	b00b883a 	mov	r5,r22
11082ef4:	d9800d04 	addi	r6,sp,52
11082ef8:	d9c15215 	stw	r7,1352(sp)
11082efc:	10829240 	call	11082924 <__sprint_r>
11082f00:	d9c15217 	ldw	r7,1352(sp)
11082f04:	1000551e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11082f08:	843ffc04 	addi	r16,r16,-16
11082f0c:	dc800f17 	ldw	r18,60(sp)
11082f10:	dc400e17 	ldw	r17,56(sp)
11082f14:	dd401a04 	addi	r21,sp,104
11082f18:	9c3fed16 	blt	r19,r16,11082ed0 <___vfprintf_internal_r+0x554>
11082f1c:	9425883a 	add	r18,r18,r16
11082f20:	8c400044 	addi	r17,r17,1
11082f24:	008001c4 	movi	r2,7
11082f28:	af000015 	stw	fp,0(r21)
11082f2c:	ac000115 	stw	r16,4(r21)
11082f30:	dc800f15 	stw	r18,60(sp)
11082f34:	dc400e15 	stw	r17,56(sp)
11082f38:	14418216 	blt	r2,r17,11083544 <___vfprintf_internal_r+0xbc8>
11082f3c:	ad400204 	addi	r21,r21,8
11082f40:	d9014d17 	ldw	r4,1332(sp)
11082f44:	2080400c 	andi	r2,r4,256
11082f48:	10004a1e 	bne	r2,zero,11083074 <___vfprintf_internal_r+0x6f8>
11082f4c:	d9414217 	ldw	r5,1288(sp)
11082f50:	91e5883a 	add	r18,r18,r7
11082f54:	8c400044 	addi	r17,r17,1
11082f58:	008001c4 	movi	r2,7
11082f5c:	a9400015 	stw	r5,0(r21)
11082f60:	a9c00115 	stw	r7,4(r21)
11082f64:	dc800f15 	stw	r18,60(sp)
11082f68:	dc400e15 	stw	r17,56(sp)
11082f6c:	14416716 	blt	r2,r17,1108350c <___vfprintf_internal_r+0xb90>
11082f70:	a8c00204 	addi	r3,r21,8
11082f74:	d9814d17 	ldw	r6,1332(sp)
11082f78:	3080010c 	andi	r2,r6,4
11082f7c:	10002826 	beq	r2,zero,11083020 <___vfprintf_internal_r+0x6a4>
11082f80:	d8814b17 	ldw	r2,1324(sp)
11082f84:	d9014617 	ldw	r4,1304(sp)
11082f88:	1121c83a 	sub	r16,r2,r4
11082f8c:	0400240e 	bge	zero,r16,11083020 <___vfprintf_internal_r+0x6a4>
11082f90:	00800404 	movi	r2,16
11082f94:	14044f0e 	bge	r2,r16,110840d4 <___vfprintf_internal_r+0x1758>
11082f98:	dc400e17 	ldw	r17,56(sp)
11082f9c:	1027883a 	mov	r19,r2
11082fa0:	07044274 	movhi	fp,4361
11082fa4:	e73d8304 	addi	fp,fp,-2548
11082fa8:	050001c4 	movi	r20,7
11082fac:	00000306 	br	11082fbc <___vfprintf_internal_r+0x640>
11082fb0:	843ffc04 	addi	r16,r16,-16
11082fb4:	18c00204 	addi	r3,r3,8
11082fb8:	9c00110e 	bge	r19,r16,11083000 <___vfprintf_internal_r+0x684>
11082fbc:	94800404 	addi	r18,r18,16
11082fc0:	8c400044 	addi	r17,r17,1
11082fc4:	1f000015 	stw	fp,0(r3)
11082fc8:	1cc00115 	stw	r19,4(r3)
11082fcc:	dc800f15 	stw	r18,60(sp)
11082fd0:	dc400e15 	stw	r17,56(sp)
11082fd4:	a47ff60e 	bge	r20,r17,11082fb0 <___vfprintf_internal_r+0x634>
11082fd8:	d9015017 	ldw	r4,1344(sp)
11082fdc:	b00b883a 	mov	r5,r22
11082fe0:	d9800d04 	addi	r6,sp,52
11082fe4:	10829240 	call	11082924 <__sprint_r>
11082fe8:	10001c1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11082fec:	843ffc04 	addi	r16,r16,-16
11082ff0:	dc800f17 	ldw	r18,60(sp)
11082ff4:	dc400e17 	ldw	r17,56(sp)
11082ff8:	d8c01a04 	addi	r3,sp,104
11082ffc:	9c3fef16 	blt	r19,r16,11082fbc <___vfprintf_internal_r+0x640>
11083000:	9425883a 	add	r18,r18,r16
11083004:	8c400044 	addi	r17,r17,1
11083008:	008001c4 	movi	r2,7
1108300c:	1f000015 	stw	fp,0(r3)
11083010:	1c000115 	stw	r16,4(r3)
11083014:	dc800f15 	stw	r18,60(sp)
11083018:	dc400e15 	stw	r17,56(sp)
1108301c:	1440cb16 	blt	r2,r17,1108334c <___vfprintf_internal_r+0x9d0>
11083020:	d8814b17 	ldw	r2,1324(sp)
11083024:	d9414617 	ldw	r5,1304(sp)
11083028:	1140010e 	bge	r2,r5,11083030 <___vfprintf_internal_r+0x6b4>
1108302c:	2805883a 	mov	r2,r5
11083030:	d9814c17 	ldw	r6,1328(sp)
11083034:	308d883a 	add	r6,r6,r2
11083038:	d9814c15 	stw	r6,1328(sp)
1108303c:	90013b1e 	bne	r18,zero,1108352c <___vfprintf_internal_r+0xbb0>
11083040:	d9c14117 	ldw	r7,1284(sp)
11083044:	dd401a04 	addi	r21,sp,104
11083048:	d8000e15 	stw	zero,56(sp)
1108304c:	003ea706 	br	11082aec <___vfprintf_internal_r+0x170>
11083050:	d8800f17 	ldw	r2,60(sp)
11083054:	10053f1e 	bne	r2,zero,11084554 <___vfprintf_internal_r+0x1bd8>
11083058:	d8000e15 	stw	zero,56(sp)
1108305c:	b080030b 	ldhu	r2,12(r22)
11083060:	1080100c 	andi	r2,r2,64
11083064:	103e8726 	beq	r2,zero,11082a84 <___vfprintf_internal_r+0x108>
11083068:	00bfffc4 	movi	r2,-1
1108306c:	d8814c15 	stw	r2,1328(sp)
11083070:	003e8406 	br	11082a84 <___vfprintf_internal_r+0x108>
11083074:	d9814e17 	ldw	r6,1336(sp)
11083078:	00801944 	movi	r2,101
1108307c:	11806e16 	blt	r2,r6,11083238 <___vfprintf_internal_r+0x8bc>
11083080:	d9414817 	ldw	r5,1312(sp)
11083084:	00c00044 	movi	r3,1
11083088:	1943430e 	bge	r3,r5,11083d98 <___vfprintf_internal_r+0x141c>
1108308c:	d8814217 	ldw	r2,1288(sp)
11083090:	94800044 	addi	r18,r18,1
11083094:	8c400044 	addi	r17,r17,1
11083098:	a8800015 	stw	r2,0(r21)
1108309c:	008001c4 	movi	r2,7
110830a0:	a8c00115 	stw	r3,4(r21)
110830a4:	dc800f15 	stw	r18,60(sp)
110830a8:	dc400e15 	stw	r17,56(sp)
110830ac:	1441ca16 	blt	r2,r17,110837d8 <___vfprintf_internal_r+0xe5c>
110830b0:	a8c00204 	addi	r3,r21,8
110830b4:	d9014a17 	ldw	r4,1320(sp)
110830b8:	00800044 	movi	r2,1
110830bc:	94800044 	addi	r18,r18,1
110830c0:	8c400044 	addi	r17,r17,1
110830c4:	18800115 	stw	r2,4(r3)
110830c8:	008001c4 	movi	r2,7
110830cc:	19000015 	stw	r4,0(r3)
110830d0:	dc800f15 	stw	r18,60(sp)
110830d4:	dc400e15 	stw	r17,56(sp)
110830d8:	1441b616 	blt	r2,r17,110837b4 <___vfprintf_internal_r+0xe38>
110830dc:	1cc00204 	addi	r19,r3,8
110830e0:	d9014317 	ldw	r4,1292(sp)
110830e4:	d9414417 	ldw	r5,1296(sp)
110830e8:	000d883a 	mov	r6,zero
110830ec:	000f883a 	mov	r7,zero
110830f0:	108b2c00 	call	1108b2c0 <__nedf2>
110830f4:	10017426 	beq	r2,zero,110836c8 <___vfprintf_internal_r+0xd4c>
110830f8:	d9414817 	ldw	r5,1312(sp)
110830fc:	d9814217 	ldw	r6,1288(sp)
11083100:	8c400044 	addi	r17,r17,1
11083104:	2c85883a 	add	r2,r5,r18
11083108:	14bfffc4 	addi	r18,r2,-1
1108310c:	28bfffc4 	addi	r2,r5,-1
11083110:	30c00044 	addi	r3,r6,1
11083114:	98800115 	stw	r2,4(r19)
11083118:	008001c4 	movi	r2,7
1108311c:	98c00015 	stw	r3,0(r19)
11083120:	dc800f15 	stw	r18,60(sp)
11083124:	dc400e15 	stw	r17,56(sp)
11083128:	14418e16 	blt	r2,r17,11083764 <___vfprintf_internal_r+0xde8>
1108312c:	9cc00204 	addi	r19,r19,8
11083130:	d9414917 	ldw	r5,1316(sp)
11083134:	d8800904 	addi	r2,sp,36
11083138:	8c400044 	addi	r17,r17,1
1108313c:	9165883a 	add	r18,r18,r5
11083140:	98800015 	stw	r2,0(r19)
11083144:	008001c4 	movi	r2,7
11083148:	99400115 	stw	r5,4(r19)
1108314c:	dc800f15 	stw	r18,60(sp)
11083150:	dc400e15 	stw	r17,56(sp)
11083154:	1440ed16 	blt	r2,r17,1108350c <___vfprintf_internal_r+0xb90>
11083158:	98c00204 	addi	r3,r19,8
1108315c:	003f8506 	br	11082f74 <___vfprintf_internal_r+0x5f8>
11083160:	d9814b17 	ldw	r6,1324(sp)
11083164:	d8814617 	ldw	r2,1304(sp)
11083168:	30a1c83a 	sub	r16,r6,r2
1108316c:	043f4b0e 	bge	zero,r16,11082e9c <___vfprintf_internal_r+0x520>
11083170:	00800404 	movi	r2,16
11083174:	1404340e 	bge	r2,r16,11084248 <___vfprintf_internal_r+0x18cc>
11083178:	1027883a 	mov	r19,r2
1108317c:	07044274 	movhi	fp,4361
11083180:	e73d7f04 	addi	fp,fp,-2564
11083184:	050001c4 	movi	r20,7
11083188:	00000306 	br	11083198 <___vfprintf_internal_r+0x81c>
1108318c:	843ffc04 	addi	r16,r16,-16
11083190:	ad400204 	addi	r21,r21,8
11083194:	9c00130e 	bge	r19,r16,110831e4 <___vfprintf_internal_r+0x868>
11083198:	94800404 	addi	r18,r18,16
1108319c:	8c400044 	addi	r17,r17,1
110831a0:	af000015 	stw	fp,0(r21)
110831a4:	acc00115 	stw	r19,4(r21)
110831a8:	dc800f15 	stw	r18,60(sp)
110831ac:	dc400e15 	stw	r17,56(sp)
110831b0:	a47ff60e 	bge	r20,r17,1108318c <___vfprintf_internal_r+0x810>
110831b4:	d9015017 	ldw	r4,1344(sp)
110831b8:	b00b883a 	mov	r5,r22
110831bc:	d9800d04 	addi	r6,sp,52
110831c0:	d9c15215 	stw	r7,1352(sp)
110831c4:	10829240 	call	11082924 <__sprint_r>
110831c8:	d9c15217 	ldw	r7,1352(sp)
110831cc:	103fa31e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110831d0:	843ffc04 	addi	r16,r16,-16
110831d4:	dc800f17 	ldw	r18,60(sp)
110831d8:	dc400e17 	ldw	r17,56(sp)
110831dc:	dd401a04 	addi	r21,sp,104
110831e0:	9c3fed16 	blt	r19,r16,11083198 <___vfprintf_internal_r+0x81c>
110831e4:	9425883a 	add	r18,r18,r16
110831e8:	8c400044 	addi	r17,r17,1
110831ec:	008001c4 	movi	r2,7
110831f0:	af000015 	stw	fp,0(r21)
110831f4:	ac000115 	stw	r16,4(r21)
110831f8:	dc800f15 	stw	r18,60(sp)
110831fc:	dc400e15 	stw	r17,56(sp)
11083200:	14416116 	blt	r2,r17,11083788 <___vfprintf_internal_r+0xe0c>
11083204:	ad400204 	addi	r21,r21,8
11083208:	003f2406 	br	11082e9c <___vfprintf_internal_r+0x520>
1108320c:	d9015017 	ldw	r4,1344(sp)
11083210:	10864e00 	call	110864e0 <__sinit>
11083214:	d9c15217 	ldw	r7,1352(sp)
11083218:	003def06 	br	110829d8 <___vfprintf_internal_r+0x5c>
1108321c:	d9015017 	ldw	r4,1344(sp)
11083220:	b00b883a 	mov	r5,r22
11083224:	d9c15215 	stw	r7,1352(sp)
11083228:	10849400 	call	11084940 <__swsetup_r>
1108322c:	d9c15217 	ldw	r7,1352(sp)
11083230:	103dee26 	beq	r2,zero,110829ec <___vfprintf_internal_r+0x70>
11083234:	003f8c06 	br	11083068 <___vfprintf_internal_r+0x6ec>
11083238:	d9014317 	ldw	r4,1292(sp)
1108323c:	d9414417 	ldw	r5,1296(sp)
11083240:	000d883a 	mov	r6,zero
11083244:	000f883a 	mov	r7,zero
11083248:	108b2380 	call	1108b238 <__eqdf2>
1108324c:	1000f21e 	bne	r2,zero,11083618 <___vfprintf_internal_r+0xc9c>
11083250:	00844274 	movhi	r2,4361
11083254:	10bd7e04 	addi	r2,r2,-2568
11083258:	94800044 	addi	r18,r18,1
1108325c:	8c400044 	addi	r17,r17,1
11083260:	a8800015 	stw	r2,0(r21)
11083264:	00c00044 	movi	r3,1
11083268:	008001c4 	movi	r2,7
1108326c:	a8c00115 	stw	r3,4(r21)
11083270:	dc800f15 	stw	r18,60(sp)
11083274:	dc400e15 	stw	r17,56(sp)
11083278:	1442fa16 	blt	r2,r17,11083e64 <___vfprintf_internal_r+0x14e8>
1108327c:	a8c00204 	addi	r3,r21,8
11083280:	d8800617 	ldw	r2,24(sp)
11083284:	d9014817 	ldw	r4,1312(sp)
11083288:	11015c0e 	bge	r2,r4,110837fc <___vfprintf_internal_r+0xe80>
1108328c:	dc400e17 	ldw	r17,56(sp)
11083290:	d9814a17 	ldw	r6,1320(sp)
11083294:	00800044 	movi	r2,1
11083298:	94800044 	addi	r18,r18,1
1108329c:	8c400044 	addi	r17,r17,1
110832a0:	18800115 	stw	r2,4(r3)
110832a4:	008001c4 	movi	r2,7
110832a8:	19800015 	stw	r6,0(r3)
110832ac:	dc800f15 	stw	r18,60(sp)
110832b0:	dc400e15 	stw	r17,56(sp)
110832b4:	14431016 	blt	r2,r17,11083ef8 <___vfprintf_internal_r+0x157c>
110832b8:	18c00204 	addi	r3,r3,8
110832bc:	d8814817 	ldw	r2,1312(sp)
110832c0:	143fffc4 	addi	r16,r2,-1
110832c4:	043f2b0e 	bge	zero,r16,11082f74 <___vfprintf_internal_r+0x5f8>
110832c8:	00800404 	movi	r2,16
110832cc:	1402a20e 	bge	r2,r16,11083d58 <___vfprintf_internal_r+0x13dc>
110832d0:	dc400e17 	ldw	r17,56(sp)
110832d4:	1027883a 	mov	r19,r2
110832d8:	07044274 	movhi	fp,4361
110832dc:	e73d7f04 	addi	fp,fp,-2564
110832e0:	050001c4 	movi	r20,7
110832e4:	00000306 	br	110832f4 <___vfprintf_internal_r+0x978>
110832e8:	18c00204 	addi	r3,r3,8
110832ec:	843ffc04 	addi	r16,r16,-16
110832f0:	9c029c0e 	bge	r19,r16,11083d64 <___vfprintf_internal_r+0x13e8>
110832f4:	94800404 	addi	r18,r18,16
110832f8:	8c400044 	addi	r17,r17,1
110832fc:	1f000015 	stw	fp,0(r3)
11083300:	1cc00115 	stw	r19,4(r3)
11083304:	dc800f15 	stw	r18,60(sp)
11083308:	dc400e15 	stw	r17,56(sp)
1108330c:	a47ff60e 	bge	r20,r17,110832e8 <___vfprintf_internal_r+0x96c>
11083310:	d9015017 	ldw	r4,1344(sp)
11083314:	b00b883a 	mov	r5,r22
11083318:	d9800d04 	addi	r6,sp,52
1108331c:	10829240 	call	11082924 <__sprint_r>
11083320:	103f4e1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11083324:	dc800f17 	ldw	r18,60(sp)
11083328:	dc400e17 	ldw	r17,56(sp)
1108332c:	d8c01a04 	addi	r3,sp,104
11083330:	003fee06 	br	110832ec <___vfprintf_internal_r+0x970>
11083334:	d8802d0b 	ldhu	r2,180(sp)
11083338:	00ffffc4 	movi	r3,-1
1108333c:	d8c14c15 	stw	r3,1328(sp)
11083340:	1080100c 	andi	r2,r2,64
11083344:	103dcc1e 	bne	r2,zero,11082a78 <___vfprintf_internal_r+0xfc>
11083348:	003dce06 	br	11082a84 <___vfprintf_internal_r+0x108>
1108334c:	d9015017 	ldw	r4,1344(sp)
11083350:	b00b883a 	mov	r5,r22
11083354:	d9800d04 	addi	r6,sp,52
11083358:	10829240 	call	11082924 <__sprint_r>
1108335c:	103f3f1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11083360:	dc800f17 	ldw	r18,60(sp)
11083364:	003f2e06 	br	11083020 <___vfprintf_internal_r+0x6a4>
11083368:	d9414d17 	ldw	r5,1332(sp)
1108336c:	29400414 	ori	r5,r5,16
11083370:	d9414d15 	stw	r5,1332(sp)
11083374:	d9814d17 	ldw	r6,1332(sp)
11083378:	3080080c 	andi	r2,r6,32
1108337c:	10014f1e 	bne	r2,zero,110838bc <___vfprintf_internal_r+0xf40>
11083380:	d8c14d17 	ldw	r3,1332(sp)
11083384:	1880040c 	andi	r2,r3,16
11083388:	1002ea1e 	bne	r2,zero,11083f34 <___vfprintf_internal_r+0x15b8>
1108338c:	d9014d17 	ldw	r4,1332(sp)
11083390:	2080100c 	andi	r2,r4,64
11083394:	1002e726 	beq	r2,zero,11083f34 <___vfprintf_internal_r+0x15b8>
11083398:	3880000f 	ldh	r2,0(r7)
1108339c:	39c00104 	addi	r7,r7,4
110833a0:	d9c14115 	stw	r7,1284(sp)
110833a4:	1023d7fa 	srai	r17,r2,31
110833a8:	1021883a 	mov	r16,r2
110833ac:	88037216 	blt	r17,zero,11084178 <___vfprintf_internal_r+0x17fc>
110833b0:	01000044 	movi	r4,1
110833b4:	98000416 	blt	r19,zero,110833c8 <___vfprintf_internal_r+0xa4c>
110833b8:	d8c14d17 	ldw	r3,1332(sp)
110833bc:	00bfdfc4 	movi	r2,-129
110833c0:	1886703a 	and	r3,r3,r2
110833c4:	d8c14d15 	stw	r3,1332(sp)
110833c8:	8444b03a 	or	r2,r16,r17
110833cc:	1002261e 	bne	r2,zero,11083c68 <___vfprintf_internal_r+0x12ec>
110833d0:	9802251e 	bne	r19,zero,11083c68 <___vfprintf_internal_r+0x12ec>
110833d4:	20803fcc 	andi	r2,r4,255
110833d8:	10029b26 	beq	r2,zero,11083e48 <___vfprintf_internal_r+0x14cc>
110833dc:	d8c01a04 	addi	r3,sp,104
110833e0:	dd001004 	addi	r20,sp,64
110833e4:	d8c14215 	stw	r3,1288(sp)
110833e8:	d8c14217 	ldw	r3,1288(sp)
110833ec:	dcc14615 	stw	r19,1304(sp)
110833f0:	a0c5c83a 	sub	r2,r20,r3
110833f4:	11c00a04 	addi	r7,r2,40
110833f8:	99c0010e 	bge	r19,r7,11083400 <___vfprintf_internal_r+0xa84>
110833fc:	d9c14615 	stw	r7,1304(sp)
11083400:	dcc14715 	stw	r19,1308(sp)
11083404:	d8800407 	ldb	r2,16(sp)
11083408:	103e4c26 	beq	r2,zero,11082d3c <___vfprintf_internal_r+0x3c0>
1108340c:	d8814617 	ldw	r2,1304(sp)
11083410:	10800044 	addi	r2,r2,1
11083414:	d8814615 	stw	r2,1304(sp)
11083418:	003e4806 	br	11082d3c <___vfprintf_internal_r+0x3c0>
1108341c:	d9814d17 	ldw	r6,1332(sp)
11083420:	31800414 	ori	r6,r6,16
11083424:	d9814d15 	stw	r6,1332(sp)
11083428:	d8c14d17 	ldw	r3,1332(sp)
1108342c:	1880080c 	andi	r2,r3,32
11083430:	1001271e 	bne	r2,zero,110838d0 <___vfprintf_internal_r+0xf54>
11083434:	d9414d17 	ldw	r5,1332(sp)
11083438:	2880040c 	andi	r2,r5,16
1108343c:	1002b61e 	bne	r2,zero,11083f18 <___vfprintf_internal_r+0x159c>
11083440:	d9814d17 	ldw	r6,1332(sp)
11083444:	3080100c 	andi	r2,r6,64
11083448:	1002b326 	beq	r2,zero,11083f18 <___vfprintf_internal_r+0x159c>
1108344c:	3c00000b 	ldhu	r16,0(r7)
11083450:	0009883a 	mov	r4,zero
11083454:	39c00104 	addi	r7,r7,4
11083458:	0023883a 	mov	r17,zero
1108345c:	d9c14115 	stw	r7,1284(sp)
11083460:	d8000405 	stb	zero,16(sp)
11083464:	003fd306 	br	110833b4 <___vfprintf_internal_r+0xa38>
11083468:	d9014d17 	ldw	r4,1332(sp)
1108346c:	21000414 	ori	r4,r4,16
11083470:	d9014d15 	stw	r4,1332(sp)
11083474:	d9414d17 	ldw	r5,1332(sp)
11083478:	2880080c 	andi	r2,r5,32
1108347c:	1001081e 	bne	r2,zero,110838a0 <___vfprintf_internal_r+0xf24>
11083480:	d8c14d17 	ldw	r3,1332(sp)
11083484:	1880040c 	andi	r2,r3,16
11083488:	1002b01e 	bne	r2,zero,11083f4c <___vfprintf_internal_r+0x15d0>
1108348c:	d9014d17 	ldw	r4,1332(sp)
11083490:	2080100c 	andi	r2,r4,64
11083494:	1002ad26 	beq	r2,zero,11083f4c <___vfprintf_internal_r+0x15d0>
11083498:	3c00000b 	ldhu	r16,0(r7)
1108349c:	01000044 	movi	r4,1
110834a0:	39c00104 	addi	r7,r7,4
110834a4:	0023883a 	mov	r17,zero
110834a8:	d9c14115 	stw	r7,1284(sp)
110834ac:	d8000405 	stb	zero,16(sp)
110834b0:	003fc006 	br	110833b4 <___vfprintf_internal_r+0xa38>
110834b4:	d9015017 	ldw	r4,1344(sp)
110834b8:	b00b883a 	mov	r5,r22
110834bc:	d9800d04 	addi	r6,sp,52
110834c0:	10829240 	call	11082924 <__sprint_r>
110834c4:	103ee51e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110834c8:	dc800f17 	ldw	r18,60(sp)
110834cc:	d8c01a04 	addi	r3,sp,104
110834d0:	d9814d17 	ldw	r6,1332(sp)
110834d4:	3080004c 	andi	r2,r6,1
110834d8:	1005003a 	cmpeq	r2,r2,zero
110834dc:	103ea51e 	bne	r2,zero,11082f74 <___vfprintf_internal_r+0x5f8>
110834e0:	00800044 	movi	r2,1
110834e4:	dc400e17 	ldw	r17,56(sp)
110834e8:	18800115 	stw	r2,4(r3)
110834ec:	d8814a17 	ldw	r2,1320(sp)
110834f0:	94800044 	addi	r18,r18,1
110834f4:	8c400044 	addi	r17,r17,1
110834f8:	18800015 	stw	r2,0(r3)
110834fc:	008001c4 	movi	r2,7
11083500:	dc800f15 	stw	r18,60(sp)
11083504:	dc400e15 	stw	r17,56(sp)
11083508:	14421e0e 	bge	r2,r17,11083d84 <___vfprintf_internal_r+0x1408>
1108350c:	d9015017 	ldw	r4,1344(sp)
11083510:	b00b883a 	mov	r5,r22
11083514:	d9800d04 	addi	r6,sp,52
11083518:	10829240 	call	11082924 <__sprint_r>
1108351c:	103ecf1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11083520:	dc800f17 	ldw	r18,60(sp)
11083524:	d8c01a04 	addi	r3,sp,104
11083528:	003e9206 	br	11082f74 <___vfprintf_internal_r+0x5f8>
1108352c:	d9015017 	ldw	r4,1344(sp)
11083530:	b00b883a 	mov	r5,r22
11083534:	d9800d04 	addi	r6,sp,52
11083538:	10829240 	call	11082924 <__sprint_r>
1108353c:	103ec026 	beq	r2,zero,11083040 <___vfprintf_internal_r+0x6c4>
11083540:	003ec606 	br	1108305c <___vfprintf_internal_r+0x6e0>
11083544:	d9015017 	ldw	r4,1344(sp)
11083548:	b00b883a 	mov	r5,r22
1108354c:	d9800d04 	addi	r6,sp,52
11083550:	d9c15215 	stw	r7,1352(sp)
11083554:	10829240 	call	11082924 <__sprint_r>
11083558:	d9c15217 	ldw	r7,1352(sp)
1108355c:	103ebf1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11083560:	dc800f17 	ldw	r18,60(sp)
11083564:	dc400e17 	ldw	r17,56(sp)
11083568:	dd401a04 	addi	r21,sp,104
1108356c:	003e7406 	br	11082f40 <___vfprintf_internal_r+0x5c4>
11083570:	d9015017 	ldw	r4,1344(sp)
11083574:	b00b883a 	mov	r5,r22
11083578:	d9800d04 	addi	r6,sp,52
1108357c:	d9c15215 	stw	r7,1352(sp)
11083580:	10829240 	call	11082924 <__sprint_r>
11083584:	d9c15217 	ldw	r7,1352(sp)
11083588:	103eb41e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
1108358c:	dd401a04 	addi	r21,sp,104
11083590:	003d6d06 	br	11082b48 <___vfprintf_internal_r+0x1cc>
11083594:	d9015017 	ldw	r4,1344(sp)
11083598:	b00b883a 	mov	r5,r22
1108359c:	d9800d04 	addi	r6,sp,52
110835a0:	d9c15215 	stw	r7,1352(sp)
110835a4:	10829240 	call	11082924 <__sprint_r>
110835a8:	d9c15217 	ldw	r7,1352(sp)
110835ac:	103eab1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110835b0:	dc800f17 	ldw	r18,60(sp)
110835b4:	dc400e17 	ldw	r17,56(sp)
110835b8:	dd401a04 	addi	r21,sp,104
110835bc:	003e3406 	br	11082e90 <___vfprintf_internal_r+0x514>
110835c0:	d9015017 	ldw	r4,1344(sp)
110835c4:	b00b883a 	mov	r5,r22
110835c8:	d9800d04 	addi	r6,sp,52
110835cc:	d9c15215 	stw	r7,1352(sp)
110835d0:	10829240 	call	11082924 <__sprint_r>
110835d4:	d9c15217 	ldw	r7,1352(sp)
110835d8:	103ea01e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110835dc:	dc800f17 	ldw	r18,60(sp)
110835e0:	dc400e17 	ldw	r17,56(sp)
110835e4:	dd401a04 	addi	r21,sp,104
110835e8:	003e1c06 	br	11082e5c <___vfprintf_internal_r+0x4e0>
110835ec:	d9015017 	ldw	r4,1344(sp)
110835f0:	b00b883a 	mov	r5,r22
110835f4:	d9800d04 	addi	r6,sp,52
110835f8:	d9c15215 	stw	r7,1352(sp)
110835fc:	10829240 	call	11082924 <__sprint_r>
11083600:	d9c15217 	ldw	r7,1352(sp)
11083604:	103e951e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11083608:	dc800f17 	ldw	r18,60(sp)
1108360c:	dc400e17 	ldw	r17,56(sp)
11083610:	dd401a04 	addi	r21,sp,104
11083614:	003e0406 	br	11082e28 <___vfprintf_internal_r+0x4ac>
11083618:	d9000617 	ldw	r4,24(sp)
1108361c:	0102520e 	bge	zero,r4,11083f68 <___vfprintf_internal_r+0x15ec>
11083620:	d9814817 	ldw	r6,1312(sp)
11083624:	21807a16 	blt	r4,r6,11083810 <___vfprintf_internal_r+0xe94>
11083628:	d8814217 	ldw	r2,1288(sp)
1108362c:	91a5883a 	add	r18,r18,r6
11083630:	8c400044 	addi	r17,r17,1
11083634:	a8800015 	stw	r2,0(r21)
11083638:	008001c4 	movi	r2,7
1108363c:	a9800115 	stw	r6,4(r21)
11083640:	dc800f15 	stw	r18,60(sp)
11083644:	dc400e15 	stw	r17,56(sp)
11083648:	1442f616 	blt	r2,r17,11084224 <___vfprintf_internal_r+0x18a8>
1108364c:	a8c00204 	addi	r3,r21,8
11083650:	d9414817 	ldw	r5,1312(sp)
11083654:	2161c83a 	sub	r16,r4,r5
11083658:	043f9d0e 	bge	zero,r16,110834d0 <___vfprintf_internal_r+0xb54>
1108365c:	00800404 	movi	r2,16
11083660:	1402130e 	bge	r2,r16,11083eb0 <___vfprintf_internal_r+0x1534>
11083664:	dc400e17 	ldw	r17,56(sp)
11083668:	1027883a 	mov	r19,r2
1108366c:	07044274 	movhi	fp,4361
11083670:	e73d7f04 	addi	fp,fp,-2564
11083674:	050001c4 	movi	r20,7
11083678:	00000306 	br	11083688 <___vfprintf_internal_r+0xd0c>
1108367c:	18c00204 	addi	r3,r3,8
11083680:	843ffc04 	addi	r16,r16,-16
11083684:	9c020d0e 	bge	r19,r16,11083ebc <___vfprintf_internal_r+0x1540>
11083688:	94800404 	addi	r18,r18,16
1108368c:	8c400044 	addi	r17,r17,1
11083690:	1f000015 	stw	fp,0(r3)
11083694:	1cc00115 	stw	r19,4(r3)
11083698:	dc800f15 	stw	r18,60(sp)
1108369c:	dc400e15 	stw	r17,56(sp)
110836a0:	a47ff60e 	bge	r20,r17,1108367c <___vfprintf_internal_r+0xd00>
110836a4:	d9015017 	ldw	r4,1344(sp)
110836a8:	b00b883a 	mov	r5,r22
110836ac:	d9800d04 	addi	r6,sp,52
110836b0:	10829240 	call	11082924 <__sprint_r>
110836b4:	103e691e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110836b8:	dc800f17 	ldw	r18,60(sp)
110836bc:	dc400e17 	ldw	r17,56(sp)
110836c0:	d8c01a04 	addi	r3,sp,104
110836c4:	003fee06 	br	11083680 <___vfprintf_internal_r+0xd04>
110836c8:	d8814817 	ldw	r2,1312(sp)
110836cc:	143fffc4 	addi	r16,r2,-1
110836d0:	043e970e 	bge	zero,r16,11083130 <___vfprintf_internal_r+0x7b4>
110836d4:	00800404 	movi	r2,16
110836d8:	1400180e 	bge	r2,r16,1108373c <___vfprintf_internal_r+0xdc0>
110836dc:	1029883a 	mov	r20,r2
110836e0:	07044274 	movhi	fp,4361
110836e4:	e73d7f04 	addi	fp,fp,-2564
110836e8:	054001c4 	movi	r21,7
110836ec:	00000306 	br	110836fc <___vfprintf_internal_r+0xd80>
110836f0:	9cc00204 	addi	r19,r19,8
110836f4:	843ffc04 	addi	r16,r16,-16
110836f8:	a400120e 	bge	r20,r16,11083744 <___vfprintf_internal_r+0xdc8>
110836fc:	94800404 	addi	r18,r18,16
11083700:	8c400044 	addi	r17,r17,1
11083704:	9f000015 	stw	fp,0(r19)
11083708:	9d000115 	stw	r20,4(r19)
1108370c:	dc800f15 	stw	r18,60(sp)
11083710:	dc400e15 	stw	r17,56(sp)
11083714:	ac7ff60e 	bge	r21,r17,110836f0 <___vfprintf_internal_r+0xd74>
11083718:	d9015017 	ldw	r4,1344(sp)
1108371c:	b00b883a 	mov	r5,r22
11083720:	d9800d04 	addi	r6,sp,52
11083724:	10829240 	call	11082924 <__sprint_r>
11083728:	103e4c1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
1108372c:	dc800f17 	ldw	r18,60(sp)
11083730:	dc400e17 	ldw	r17,56(sp)
11083734:	dcc01a04 	addi	r19,sp,104
11083738:	003fee06 	br	110836f4 <___vfprintf_internal_r+0xd78>
1108373c:	07044274 	movhi	fp,4361
11083740:	e73d7f04 	addi	fp,fp,-2564
11083744:	9425883a 	add	r18,r18,r16
11083748:	8c400044 	addi	r17,r17,1
1108374c:	008001c4 	movi	r2,7
11083750:	9f000015 	stw	fp,0(r19)
11083754:	9c000115 	stw	r16,4(r19)
11083758:	dc800f15 	stw	r18,60(sp)
1108375c:	dc400e15 	stw	r17,56(sp)
11083760:	147e720e 	bge	r2,r17,1108312c <___vfprintf_internal_r+0x7b0>
11083764:	d9015017 	ldw	r4,1344(sp)
11083768:	b00b883a 	mov	r5,r22
1108376c:	d9800d04 	addi	r6,sp,52
11083770:	10829240 	call	11082924 <__sprint_r>
11083774:	103e391e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11083778:	dc800f17 	ldw	r18,60(sp)
1108377c:	dc400e17 	ldw	r17,56(sp)
11083780:	dcc01a04 	addi	r19,sp,104
11083784:	003e6a06 	br	11083130 <___vfprintf_internal_r+0x7b4>
11083788:	d9015017 	ldw	r4,1344(sp)
1108378c:	b00b883a 	mov	r5,r22
11083790:	d9800d04 	addi	r6,sp,52
11083794:	d9c15215 	stw	r7,1352(sp)
11083798:	10829240 	call	11082924 <__sprint_r>
1108379c:	d9c15217 	ldw	r7,1352(sp)
110837a0:	103e2e1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110837a4:	dc800f17 	ldw	r18,60(sp)
110837a8:	dc400e17 	ldw	r17,56(sp)
110837ac:	dd401a04 	addi	r21,sp,104
110837b0:	003dba06 	br	11082e9c <___vfprintf_internal_r+0x520>
110837b4:	d9015017 	ldw	r4,1344(sp)
110837b8:	b00b883a 	mov	r5,r22
110837bc:	d9800d04 	addi	r6,sp,52
110837c0:	10829240 	call	11082924 <__sprint_r>
110837c4:	103e251e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110837c8:	dc800f17 	ldw	r18,60(sp)
110837cc:	dc400e17 	ldw	r17,56(sp)
110837d0:	dcc01a04 	addi	r19,sp,104
110837d4:	003e4206 	br	110830e0 <___vfprintf_internal_r+0x764>
110837d8:	d9015017 	ldw	r4,1344(sp)
110837dc:	b00b883a 	mov	r5,r22
110837e0:	d9800d04 	addi	r6,sp,52
110837e4:	10829240 	call	11082924 <__sprint_r>
110837e8:	103e1c1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110837ec:	dc800f17 	ldw	r18,60(sp)
110837f0:	dc400e17 	ldw	r17,56(sp)
110837f4:	d8c01a04 	addi	r3,sp,104
110837f8:	003e2e06 	br	110830b4 <___vfprintf_internal_r+0x738>
110837fc:	d9414d17 	ldw	r5,1332(sp)
11083800:	2880004c 	andi	r2,r5,1
11083804:	1005003a 	cmpeq	r2,r2,zero
11083808:	103dda1e 	bne	r2,zero,11082f74 <___vfprintf_internal_r+0x5f8>
1108380c:	003e9f06 	br	1108328c <___vfprintf_internal_r+0x910>
11083810:	d8c14217 	ldw	r3,1288(sp)
11083814:	9125883a 	add	r18,r18,r4
11083818:	8c400044 	addi	r17,r17,1
1108381c:	008001c4 	movi	r2,7
11083820:	a8c00015 	stw	r3,0(r21)
11083824:	a9000115 	stw	r4,4(r21)
11083828:	dc800f15 	stw	r18,60(sp)
1108382c:	dc400e15 	stw	r17,56(sp)
11083830:	14426616 	blt	r2,r17,110841cc <___vfprintf_internal_r+0x1850>
11083834:	a8c00204 	addi	r3,r21,8
11083838:	d9414a17 	ldw	r5,1320(sp)
1108383c:	00800044 	movi	r2,1
11083840:	94800044 	addi	r18,r18,1
11083844:	8c400044 	addi	r17,r17,1
11083848:	18800115 	stw	r2,4(r3)
1108384c:	008001c4 	movi	r2,7
11083850:	19400015 	stw	r5,0(r3)
11083854:	dc800f15 	stw	r18,60(sp)
11083858:	dc400e15 	stw	r17,56(sp)
1108385c:	2021883a 	mov	r16,r4
11083860:	14425016 	blt	r2,r17,110841a4 <___vfprintf_internal_r+0x1828>
11083864:	19400204 	addi	r5,r3,8
11083868:	d9814817 	ldw	r6,1312(sp)
1108386c:	8c400044 	addi	r17,r17,1
11083870:	dc400e15 	stw	r17,56(sp)
11083874:	3107c83a 	sub	r3,r6,r4
11083878:	d9014217 	ldw	r4,1288(sp)
1108387c:	90e5883a 	add	r18,r18,r3
11083880:	28c00115 	stw	r3,4(r5)
11083884:	8105883a 	add	r2,r16,r4
11083888:	28800015 	stw	r2,0(r5)
1108388c:	008001c4 	movi	r2,7
11083890:	dc800f15 	stw	r18,60(sp)
11083894:	147f1d16 	blt	r2,r17,1108350c <___vfprintf_internal_r+0xb90>
11083898:	28c00204 	addi	r3,r5,8
1108389c:	003db506 	br	11082f74 <___vfprintf_internal_r+0x5f8>
110838a0:	3c000017 	ldw	r16,0(r7)
110838a4:	3c400117 	ldw	r17,4(r7)
110838a8:	39800204 	addi	r6,r7,8
110838ac:	01000044 	movi	r4,1
110838b0:	d9814115 	stw	r6,1284(sp)
110838b4:	d8000405 	stb	zero,16(sp)
110838b8:	003ebe06 	br	110833b4 <___vfprintf_internal_r+0xa38>
110838bc:	3c000017 	ldw	r16,0(r7)
110838c0:	3c400117 	ldw	r17,4(r7)
110838c4:	38800204 	addi	r2,r7,8
110838c8:	d8814115 	stw	r2,1284(sp)
110838cc:	003eb706 	br	110833ac <___vfprintf_internal_r+0xa30>
110838d0:	3c000017 	ldw	r16,0(r7)
110838d4:	3c400117 	ldw	r17,4(r7)
110838d8:	39000204 	addi	r4,r7,8
110838dc:	d9014115 	stw	r4,1284(sp)
110838e0:	0009883a 	mov	r4,zero
110838e4:	d8000405 	stb	zero,16(sp)
110838e8:	003eb206 	br	110833b4 <___vfprintf_internal_r+0xa38>
110838ec:	38c00017 	ldw	r3,0(r7)
110838f0:	39c00104 	addi	r7,r7,4
110838f4:	d8c14b15 	stw	r3,1324(sp)
110838f8:	1800d10e 	bge	r3,zero,11083c40 <___vfprintf_internal_r+0x12c4>
110838fc:	00c7c83a 	sub	r3,zero,r3
11083900:	d8c14b15 	stw	r3,1324(sp)
11083904:	d9014d17 	ldw	r4,1332(sp)
11083908:	b8c00007 	ldb	r3,0(r23)
1108390c:	21000114 	ori	r4,r4,4
11083910:	d9014d15 	stw	r4,1332(sp)
11083914:	003c9806 	br	11082b78 <___vfprintf_internal_r+0x1fc>
11083918:	d9814d17 	ldw	r6,1332(sp)
1108391c:	3080080c 	andi	r2,r6,32
11083920:	1001f026 	beq	r2,zero,110840e4 <___vfprintf_internal_r+0x1768>
11083924:	d9014c17 	ldw	r4,1328(sp)
11083928:	38800017 	ldw	r2,0(r7)
1108392c:	39c00104 	addi	r7,r7,4
11083930:	d9c14115 	stw	r7,1284(sp)
11083934:	2007d7fa 	srai	r3,r4,31
11083938:	d9c14117 	ldw	r7,1284(sp)
1108393c:	11000015 	stw	r4,0(r2)
11083940:	10c00115 	stw	r3,4(r2)
11083944:	003c6906 	br	11082aec <___vfprintf_internal_r+0x170>
11083948:	b8c00007 	ldb	r3,0(r23)
1108394c:	00801b04 	movi	r2,108
11083950:	18824f26 	beq	r3,r2,11084290 <___vfprintf_internal_r+0x1914>
11083954:	d9414d17 	ldw	r5,1332(sp)
11083958:	29400414 	ori	r5,r5,16
1108395c:	d9414d15 	stw	r5,1332(sp)
11083960:	003c8506 	br	11082b78 <___vfprintf_internal_r+0x1fc>
11083964:	d9814d17 	ldw	r6,1332(sp)
11083968:	b8c00007 	ldb	r3,0(r23)
1108396c:	31800814 	ori	r6,r6,32
11083970:	d9814d15 	stw	r6,1332(sp)
11083974:	003c8006 	br	11082b78 <___vfprintf_internal_r+0x1fc>
11083978:	d8814d17 	ldw	r2,1332(sp)
1108397c:	3c000017 	ldw	r16,0(r7)
11083980:	00c01e04 	movi	r3,120
11083984:	10800094 	ori	r2,r2,2
11083988:	d8814d15 	stw	r2,1332(sp)
1108398c:	39c00104 	addi	r7,r7,4
11083990:	01444274 	movhi	r5,4361
11083994:	297d6704 	addi	r5,r5,-2660
11083998:	00800c04 	movi	r2,48
1108399c:	0023883a 	mov	r17,zero
110839a0:	01000084 	movi	r4,2
110839a4:	d9c14115 	stw	r7,1284(sp)
110839a8:	d8c14e15 	stw	r3,1336(sp)
110839ac:	d9414515 	stw	r5,1300(sp)
110839b0:	d8800505 	stb	r2,20(sp)
110839b4:	d8c00545 	stb	r3,21(sp)
110839b8:	d8000405 	stb	zero,16(sp)
110839bc:	003e7d06 	br	110833b4 <___vfprintf_internal_r+0xa38>
110839c0:	d8814d17 	ldw	r2,1332(sp)
110839c4:	b8c00007 	ldb	r3,0(r23)
110839c8:	10801014 	ori	r2,r2,64
110839cc:	d8814d15 	stw	r2,1332(sp)
110839d0:	003c6906 	br	11082b78 <___vfprintf_internal_r+0x1fc>
110839d4:	d9414d17 	ldw	r5,1332(sp)
110839d8:	2880020c 	andi	r2,r5,8
110839dc:	1001df26 	beq	r2,zero,1108415c <___vfprintf_internal_r+0x17e0>
110839e0:	39800017 	ldw	r6,0(r7)
110839e4:	38800204 	addi	r2,r7,8
110839e8:	d8814115 	stw	r2,1284(sp)
110839ec:	d9814315 	stw	r6,1292(sp)
110839f0:	39c00117 	ldw	r7,4(r7)
110839f4:	d9c14415 	stw	r7,1296(sp)
110839f8:	d9014317 	ldw	r4,1292(sp)
110839fc:	d9414417 	ldw	r5,1296(sp)
11083a00:	10894100 	call	11089410 <__isinfd>
11083a04:	10021726 	beq	r2,zero,11084264 <___vfprintf_internal_r+0x18e8>
11083a08:	d9014317 	ldw	r4,1292(sp)
11083a0c:	d9414417 	ldw	r5,1296(sp)
11083a10:	000d883a 	mov	r6,zero
11083a14:	000f883a 	mov	r7,zero
11083a18:	108b4580 	call	1108b458 <__ltdf2>
11083a1c:	1002ca16 	blt	r2,zero,11084548 <___vfprintf_internal_r+0x1bcc>
11083a20:	d9414e17 	ldw	r5,1336(sp)
11083a24:	008011c4 	movi	r2,71
11083a28:	11420a16 	blt	r2,r5,11084254 <___vfprintf_internal_r+0x18d8>
11083a2c:	01844274 	movhi	r6,4361
11083a30:	31bd6c04 	addi	r6,r6,-2640
11083a34:	d9814215 	stw	r6,1288(sp)
11083a38:	d9014d17 	ldw	r4,1332(sp)
11083a3c:	00c000c4 	movi	r3,3
11083a40:	00bfdfc4 	movi	r2,-129
11083a44:	2088703a 	and	r4,r4,r2
11083a48:	180f883a 	mov	r7,r3
11083a4c:	d8c14615 	stw	r3,1304(sp)
11083a50:	d9014d15 	stw	r4,1332(sp)
11083a54:	d8014715 	stw	zero,1308(sp)
11083a58:	003e6a06 	br	11083404 <___vfprintf_internal_r+0xa88>
11083a5c:	38800017 	ldw	r2,0(r7)
11083a60:	00c00044 	movi	r3,1
11083a64:	39c00104 	addi	r7,r7,4
11083a68:	d9c14115 	stw	r7,1284(sp)
11083a6c:	d9001004 	addi	r4,sp,64
11083a70:	180f883a 	mov	r7,r3
11083a74:	d8c14615 	stw	r3,1304(sp)
11083a78:	d9014215 	stw	r4,1288(sp)
11083a7c:	d8801005 	stb	r2,64(sp)
11083a80:	d8000405 	stb	zero,16(sp)
11083a84:	003cac06 	br	11082d38 <___vfprintf_internal_r+0x3bc>
11083a88:	01444274 	movhi	r5,4361
11083a8c:	297d7204 	addi	r5,r5,-2616
11083a90:	d9414515 	stw	r5,1300(sp)
11083a94:	d9814d17 	ldw	r6,1332(sp)
11083a98:	3080080c 	andi	r2,r6,32
11083a9c:	1000f926 	beq	r2,zero,11083e84 <___vfprintf_internal_r+0x1508>
11083aa0:	3c000017 	ldw	r16,0(r7)
11083aa4:	3c400117 	ldw	r17,4(r7)
11083aa8:	38800204 	addi	r2,r7,8
11083aac:	d8814115 	stw	r2,1284(sp)
11083ab0:	d9414d17 	ldw	r5,1332(sp)
11083ab4:	2880004c 	andi	r2,r5,1
11083ab8:	1005003a 	cmpeq	r2,r2,zero
11083abc:	1000b31e 	bne	r2,zero,11083d8c <___vfprintf_internal_r+0x1410>
11083ac0:	8444b03a 	or	r2,r16,r17
11083ac4:	1000b126 	beq	r2,zero,11083d8c <___vfprintf_internal_r+0x1410>
11083ac8:	d9814e17 	ldw	r6,1336(sp)
11083acc:	29400094 	ori	r5,r5,2
11083ad0:	00800c04 	movi	r2,48
11083ad4:	01000084 	movi	r4,2
11083ad8:	d9414d15 	stw	r5,1332(sp)
11083adc:	d8800505 	stb	r2,20(sp)
11083ae0:	d9800545 	stb	r6,21(sp)
11083ae4:	d8000405 	stb	zero,16(sp)
11083ae8:	003e3206 	br	110833b4 <___vfprintf_internal_r+0xa38>
11083aec:	01844274 	movhi	r6,4361
11083af0:	31bd6704 	addi	r6,r6,-2660
11083af4:	d9814515 	stw	r6,1300(sp)
11083af8:	003fe606 	br	11083a94 <___vfprintf_internal_r+0x1118>
11083afc:	00800ac4 	movi	r2,43
11083b00:	d8800405 	stb	r2,16(sp)
11083b04:	b8c00007 	ldb	r3,0(r23)
11083b08:	003c1b06 	br	11082b78 <___vfprintf_internal_r+0x1fc>
11083b0c:	d8814d17 	ldw	r2,1332(sp)
11083b10:	b8c00007 	ldb	r3,0(r23)
11083b14:	10800054 	ori	r2,r2,1
11083b18:	d8814d15 	stw	r2,1332(sp)
11083b1c:	003c1606 	br	11082b78 <___vfprintf_internal_r+0x1fc>
11083b20:	d8800407 	ldb	r2,16(sp)
11083b24:	1000461e 	bne	r2,zero,11083c40 <___vfprintf_internal_r+0x12c4>
11083b28:	00800804 	movi	r2,32
11083b2c:	d8800405 	stb	r2,16(sp)
11083b30:	b8c00007 	ldb	r3,0(r23)
11083b34:	003c1006 	br	11082b78 <___vfprintf_internal_r+0x1fc>
11083b38:	d9814d17 	ldw	r6,1332(sp)
11083b3c:	b8c00007 	ldb	r3,0(r23)
11083b40:	31800214 	ori	r6,r6,8
11083b44:	d9814d15 	stw	r6,1332(sp)
11083b48:	003c0b06 	br	11082b78 <___vfprintf_internal_r+0x1fc>
11083b4c:	0007883a 	mov	r3,zero
11083b50:	01000244 	movi	r4,9
11083b54:	188002a4 	muli	r2,r3,10
11083b58:	b8c00007 	ldb	r3,0(r23)
11083b5c:	d9814e17 	ldw	r6,1336(sp)
11083b60:	bdc00044 	addi	r23,r23,1
11083b64:	d8c14e15 	stw	r3,1336(sp)
11083b68:	d9414e17 	ldw	r5,1336(sp)
11083b6c:	3085883a 	add	r2,r6,r2
11083b70:	10fff404 	addi	r3,r2,-48
11083b74:	28bff404 	addi	r2,r5,-48
11083b78:	20bff62e 	bgeu	r4,r2,11083b54 <___vfprintf_internal_r+0x11d8>
11083b7c:	d8c14b15 	stw	r3,1324(sp)
11083b80:	003bff06 	br	11082b80 <___vfprintf_internal_r+0x204>
11083b84:	d9414d17 	ldw	r5,1332(sp)
11083b88:	b8c00007 	ldb	r3,0(r23)
11083b8c:	29402014 	ori	r5,r5,128
11083b90:	d9414d15 	stw	r5,1332(sp)
11083b94:	003bf806 	br	11082b78 <___vfprintf_internal_r+0x1fc>
11083b98:	b8c00007 	ldb	r3,0(r23)
11083b9c:	00800a84 	movi	r2,42
11083ba0:	bdc00044 	addi	r23,r23,1
11083ba4:	18831526 	beq	r3,r2,110847fc <___vfprintf_internal_r+0x1e80>
11083ba8:	d8c14e15 	stw	r3,1336(sp)
11083bac:	18bff404 	addi	r2,r3,-48
11083bb0:	00c00244 	movi	r3,9
11083bb4:	18827836 	bltu	r3,r2,11084598 <___vfprintf_internal_r+0x1c1c>
11083bb8:	000d883a 	mov	r6,zero
11083bbc:	308002a4 	muli	r2,r6,10
11083bc0:	b9800007 	ldb	r6,0(r23)
11083bc4:	d9414e17 	ldw	r5,1336(sp)
11083bc8:	bdc00044 	addi	r23,r23,1
11083bcc:	d9814e15 	stw	r6,1336(sp)
11083bd0:	d9014e17 	ldw	r4,1336(sp)
11083bd4:	1145883a 	add	r2,r2,r5
11083bd8:	11bff404 	addi	r6,r2,-48
11083bdc:	20bff404 	addi	r2,r4,-48
11083be0:	18bff62e 	bgeu	r3,r2,11083bbc <___vfprintf_internal_r+0x1240>
11083be4:	3027883a 	mov	r19,r6
11083be8:	303be50e 	bge	r6,zero,11082b80 <___vfprintf_internal_r+0x204>
11083bec:	04ffffc4 	movi	r19,-1
11083bf0:	003be306 	br	11082b80 <___vfprintf_internal_r+0x204>
11083bf4:	d8000405 	stb	zero,16(sp)
11083bf8:	39800017 	ldw	r6,0(r7)
11083bfc:	39c00104 	addi	r7,r7,4
11083c00:	d9c14115 	stw	r7,1284(sp)
11083c04:	d9814215 	stw	r6,1288(sp)
11083c08:	3001c926 	beq	r6,zero,11084330 <___vfprintf_internal_r+0x19b4>
11083c0c:	98000e16 	blt	r19,zero,11083c48 <___vfprintf_internal_r+0x12cc>
11083c10:	d9014217 	ldw	r4,1288(sp)
11083c14:	000b883a 	mov	r5,zero
11083c18:	980d883a 	mov	r6,r19
11083c1c:	1087b2c0 	call	11087b2c <memchr>
11083c20:	10025926 	beq	r2,zero,11084588 <___vfprintf_internal_r+0x1c0c>
11083c24:	d8c14217 	ldw	r3,1288(sp)
11083c28:	10cfc83a 	sub	r7,r2,r3
11083c2c:	99c19e16 	blt	r19,r7,110842a8 <___vfprintf_internal_r+0x192c>
11083c30:	d9c14615 	stw	r7,1304(sp)
11083c34:	38000916 	blt	r7,zero,11083c5c <___vfprintf_internal_r+0x12e0>
11083c38:	d8014715 	stw	zero,1308(sp)
11083c3c:	003df106 	br	11083404 <___vfprintf_internal_r+0xa88>
11083c40:	b8c00007 	ldb	r3,0(r23)
11083c44:	003bcc06 	br	11082b78 <___vfprintf_internal_r+0x1fc>
11083c48:	d9014217 	ldw	r4,1288(sp)
11083c4c:	10828b00 	call	110828b0 <strlen>
11083c50:	d8814615 	stw	r2,1304(sp)
11083c54:	100f883a 	mov	r7,r2
11083c58:	103ff70e 	bge	r2,zero,11083c38 <___vfprintf_internal_r+0x12bc>
11083c5c:	d8014615 	stw	zero,1304(sp)
11083c60:	d8014715 	stw	zero,1308(sp)
11083c64:	003de706 	br	11083404 <___vfprintf_internal_r+0xa88>
11083c68:	20c03fcc 	andi	r3,r4,255
11083c6c:	00800044 	movi	r2,1
11083c70:	18802d26 	beq	r3,r2,11083d28 <___vfprintf_internal_r+0x13ac>
11083c74:	18800e36 	bltu	r3,r2,11083cb0 <___vfprintf_internal_r+0x1334>
11083c78:	00800084 	movi	r2,2
11083c7c:	1880fa26 	beq	r3,r2,11084068 <___vfprintf_internal_r+0x16ec>
11083c80:	01044274 	movhi	r4,4361
11083c84:	213d7704 	addi	r4,r4,-2596
11083c88:	10828b00 	call	110828b0 <strlen>
11083c8c:	100f883a 	mov	r7,r2
11083c90:	dcc14615 	stw	r19,1304(sp)
11083c94:	9880010e 	bge	r19,r2,11083c9c <___vfprintf_internal_r+0x1320>
11083c98:	d8814615 	stw	r2,1304(sp)
11083c9c:	00844274 	movhi	r2,4361
11083ca0:	10bd7704 	addi	r2,r2,-2596
11083ca4:	dcc14715 	stw	r19,1308(sp)
11083ca8:	d8814215 	stw	r2,1288(sp)
11083cac:	003dd506 	br	11083404 <___vfprintf_internal_r+0xa88>
11083cb0:	d9401a04 	addi	r5,sp,104
11083cb4:	dd001004 	addi	r20,sp,64
11083cb8:	d9414215 	stw	r5,1288(sp)
11083cbc:	880a977a 	slli	r5,r17,29
11083cc0:	d9814217 	ldw	r6,1288(sp)
11083cc4:	8004d0fa 	srli	r2,r16,3
11083cc8:	8806d0fa 	srli	r3,r17,3
11083ccc:	810001cc 	andi	r4,r16,7
11083cd0:	2884b03a 	or	r2,r5,r2
11083cd4:	31bfffc4 	addi	r6,r6,-1
11083cd8:	21000c04 	addi	r4,r4,48
11083cdc:	d9814215 	stw	r6,1288(sp)
11083ce0:	10cab03a 	or	r5,r2,r3
11083ce4:	31000005 	stb	r4,0(r6)
11083ce8:	1021883a 	mov	r16,r2
11083cec:	1823883a 	mov	r17,r3
11083cf0:	283ff21e 	bne	r5,zero,11083cbc <___vfprintf_internal_r+0x1340>
11083cf4:	d8c14d17 	ldw	r3,1332(sp)
11083cf8:	1880004c 	andi	r2,r3,1
11083cfc:	1005003a 	cmpeq	r2,r2,zero
11083d00:	103db91e 	bne	r2,zero,110833e8 <___vfprintf_internal_r+0xa6c>
11083d04:	20803fcc 	andi	r2,r4,255
11083d08:	1080201c 	xori	r2,r2,128
11083d0c:	10bfe004 	addi	r2,r2,-128
11083d10:	00c00c04 	movi	r3,48
11083d14:	10fdb426 	beq	r2,r3,110833e8 <___vfprintf_internal_r+0xa6c>
11083d18:	31bfffc4 	addi	r6,r6,-1
11083d1c:	d9814215 	stw	r6,1288(sp)
11083d20:	30c00005 	stb	r3,0(r6)
11083d24:	003db006 	br	110833e8 <___vfprintf_internal_r+0xa6c>
11083d28:	88800068 	cmpgeui	r2,r17,1
11083d2c:	10002c1e 	bne	r2,zero,11083de0 <___vfprintf_internal_r+0x1464>
11083d30:	8800021e 	bne	r17,zero,11083d3c <___vfprintf_internal_r+0x13c0>
11083d34:	00800244 	movi	r2,9
11083d38:	14002936 	bltu	r2,r16,11083de0 <___vfprintf_internal_r+0x1464>
11083d3c:	d90019c4 	addi	r4,sp,103
11083d40:	dd001004 	addi	r20,sp,64
11083d44:	d9014215 	stw	r4,1288(sp)
11083d48:	d9014217 	ldw	r4,1288(sp)
11083d4c:	80800c04 	addi	r2,r16,48
11083d50:	20800005 	stb	r2,0(r4)
11083d54:	003da406 	br	110833e8 <___vfprintf_internal_r+0xa6c>
11083d58:	dc400e17 	ldw	r17,56(sp)
11083d5c:	07044274 	movhi	fp,4361
11083d60:	e73d7f04 	addi	fp,fp,-2564
11083d64:	9425883a 	add	r18,r18,r16
11083d68:	8c400044 	addi	r17,r17,1
11083d6c:	008001c4 	movi	r2,7
11083d70:	1f000015 	stw	fp,0(r3)
11083d74:	1c000115 	stw	r16,4(r3)
11083d78:	dc800f15 	stw	r18,60(sp)
11083d7c:	dc400e15 	stw	r17,56(sp)
11083d80:	147de216 	blt	r2,r17,1108350c <___vfprintf_internal_r+0xb90>
11083d84:	18c00204 	addi	r3,r3,8
11083d88:	003c7a06 	br	11082f74 <___vfprintf_internal_r+0x5f8>
11083d8c:	01000084 	movi	r4,2
11083d90:	d8000405 	stb	zero,16(sp)
11083d94:	003d8706 	br	110833b4 <___vfprintf_internal_r+0xa38>
11083d98:	d9814d17 	ldw	r6,1332(sp)
11083d9c:	30c4703a 	and	r2,r6,r3
11083da0:	1005003a 	cmpeq	r2,r2,zero
11083da4:	103cb926 	beq	r2,zero,1108308c <___vfprintf_internal_r+0x710>
11083da8:	d9014217 	ldw	r4,1288(sp)
11083dac:	94800044 	addi	r18,r18,1
11083db0:	8c400044 	addi	r17,r17,1
11083db4:	008001c4 	movi	r2,7
11083db8:	a9000015 	stw	r4,0(r21)
11083dbc:	a8c00115 	stw	r3,4(r21)
11083dc0:	dc800f15 	stw	r18,60(sp)
11083dc4:	dc400e15 	stw	r17,56(sp)
11083dc8:	147e6616 	blt	r2,r17,11083764 <___vfprintf_internal_r+0xde8>
11083dcc:	acc00204 	addi	r19,r21,8
11083dd0:	003cd706 	br	11083130 <___vfprintf_internal_r+0x7b4>
11083dd4:	07044274 	movhi	fp,4361
11083dd8:	e73d7f04 	addi	fp,fp,-2564
11083ddc:	003c4f06 	br	11082f1c <___vfprintf_internal_r+0x5a0>
11083de0:	dd001004 	addi	r20,sp,64
11083de4:	dc801a04 	addi	r18,sp,104
11083de8:	8009883a 	mov	r4,r16
11083dec:	880b883a 	mov	r5,r17
11083df0:	01800284 	movi	r6,10
11083df4:	000f883a 	mov	r7,zero
11083df8:	108a1680 	call	1108a168 <__umoddi3>
11083dfc:	12000c04 	addi	r8,r2,48
11083e00:	94bfffc4 	addi	r18,r18,-1
11083e04:	8009883a 	mov	r4,r16
11083e08:	880b883a 	mov	r5,r17
11083e0c:	01800284 	movi	r6,10
11083e10:	000f883a 	mov	r7,zero
11083e14:	92000005 	stb	r8,0(r18)
11083e18:	1089b8c0 	call	11089b8c <__udivdi3>
11083e1c:	1009883a 	mov	r4,r2
11083e20:	1021883a 	mov	r16,r2
11083e24:	18800068 	cmpgeui	r2,r3,1
11083e28:	1823883a 	mov	r17,r3
11083e2c:	103fee1e 	bne	r2,zero,11083de8 <___vfprintf_internal_r+0x146c>
11083e30:	1800021e 	bne	r3,zero,11083e3c <___vfprintf_internal_r+0x14c0>
11083e34:	00800244 	movi	r2,9
11083e38:	113feb36 	bltu	r2,r4,11083de8 <___vfprintf_internal_r+0x146c>
11083e3c:	94bfffc4 	addi	r18,r18,-1
11083e40:	dc814215 	stw	r18,1288(sp)
11083e44:	003fc006 	br	11083d48 <___vfprintf_internal_r+0x13cc>
11083e48:	d9014d17 	ldw	r4,1332(sp)
11083e4c:	2080004c 	andi	r2,r4,1
11083e50:	10009a1e 	bne	r2,zero,110840bc <___vfprintf_internal_r+0x1740>
11083e54:	d9401a04 	addi	r5,sp,104
11083e58:	dd001004 	addi	r20,sp,64
11083e5c:	d9414215 	stw	r5,1288(sp)
11083e60:	003d6106 	br	110833e8 <___vfprintf_internal_r+0xa6c>
11083e64:	d9015017 	ldw	r4,1344(sp)
11083e68:	b00b883a 	mov	r5,r22
11083e6c:	d9800d04 	addi	r6,sp,52
11083e70:	10829240 	call	11082924 <__sprint_r>
11083e74:	103c791e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11083e78:	dc800f17 	ldw	r18,60(sp)
11083e7c:	d8c01a04 	addi	r3,sp,104
11083e80:	003cff06 	br	11083280 <___vfprintf_internal_r+0x904>
11083e84:	d8c14d17 	ldw	r3,1332(sp)
11083e88:	1880040c 	andi	r2,r3,16
11083e8c:	1000711e 	bne	r2,zero,11084054 <___vfprintf_internal_r+0x16d8>
11083e90:	d9014d17 	ldw	r4,1332(sp)
11083e94:	2080100c 	andi	r2,r4,64
11083e98:	10006e26 	beq	r2,zero,11084054 <___vfprintf_internal_r+0x16d8>
11083e9c:	3c00000b 	ldhu	r16,0(r7)
11083ea0:	0023883a 	mov	r17,zero
11083ea4:	39c00104 	addi	r7,r7,4
11083ea8:	d9c14115 	stw	r7,1284(sp)
11083eac:	003f0006 	br	11083ab0 <___vfprintf_internal_r+0x1134>
11083eb0:	dc400e17 	ldw	r17,56(sp)
11083eb4:	07044274 	movhi	fp,4361
11083eb8:	e73d7f04 	addi	fp,fp,-2564
11083ebc:	9425883a 	add	r18,r18,r16
11083ec0:	8c400044 	addi	r17,r17,1
11083ec4:	008001c4 	movi	r2,7
11083ec8:	1f000015 	stw	fp,0(r3)
11083ecc:	1c000115 	stw	r16,4(r3)
11083ed0:	dc800f15 	stw	r18,60(sp)
11083ed4:	dc400e15 	stw	r17,56(sp)
11083ed8:	147d7616 	blt	r2,r17,110834b4 <___vfprintf_internal_r+0xb38>
11083edc:	18c00204 	addi	r3,r3,8
11083ee0:	003d7b06 	br	110834d0 <___vfprintf_internal_r+0xb54>
11083ee4:	dc800f17 	ldw	r18,60(sp)
11083ee8:	dc400e17 	ldw	r17,56(sp)
11083eec:	07044274 	movhi	fp,4361
11083ef0:	e73d8304 	addi	fp,fp,-2548
11083ef4:	003bc006 	br	11082df8 <___vfprintf_internal_r+0x47c>
11083ef8:	d9015017 	ldw	r4,1344(sp)
11083efc:	b00b883a 	mov	r5,r22
11083f00:	d9800d04 	addi	r6,sp,52
11083f04:	10829240 	call	11082924 <__sprint_r>
11083f08:	103c541e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11083f0c:	dc800f17 	ldw	r18,60(sp)
11083f10:	d8c01a04 	addi	r3,sp,104
11083f14:	003ce906 	br	110832bc <___vfprintf_internal_r+0x940>
11083f18:	3c000017 	ldw	r16,0(r7)
11083f1c:	0009883a 	mov	r4,zero
11083f20:	39c00104 	addi	r7,r7,4
11083f24:	0023883a 	mov	r17,zero
11083f28:	d9c14115 	stw	r7,1284(sp)
11083f2c:	d8000405 	stb	zero,16(sp)
11083f30:	003d2006 	br	110833b4 <___vfprintf_internal_r+0xa38>
11083f34:	38800017 	ldw	r2,0(r7)
11083f38:	39c00104 	addi	r7,r7,4
11083f3c:	d9c14115 	stw	r7,1284(sp)
11083f40:	1023d7fa 	srai	r17,r2,31
11083f44:	1021883a 	mov	r16,r2
11083f48:	003d1806 	br	110833ac <___vfprintf_internal_r+0xa30>
11083f4c:	3c000017 	ldw	r16,0(r7)
11083f50:	01000044 	movi	r4,1
11083f54:	39c00104 	addi	r7,r7,4
11083f58:	0023883a 	mov	r17,zero
11083f5c:	d9c14115 	stw	r7,1284(sp)
11083f60:	d8000405 	stb	zero,16(sp)
11083f64:	003d1306 	br	110833b4 <___vfprintf_internal_r+0xa38>
11083f68:	00844274 	movhi	r2,4361
11083f6c:	10bd7e04 	addi	r2,r2,-2568
11083f70:	94800044 	addi	r18,r18,1
11083f74:	8c400044 	addi	r17,r17,1
11083f78:	a8800015 	stw	r2,0(r21)
11083f7c:	00c00044 	movi	r3,1
11083f80:	008001c4 	movi	r2,7
11083f84:	a8c00115 	stw	r3,4(r21)
11083f88:	dc800f15 	stw	r18,60(sp)
11083f8c:	dc400e15 	stw	r17,56(sp)
11083f90:	1440ca16 	blt	r2,r17,110842bc <___vfprintf_internal_r+0x1940>
11083f94:	a8c00204 	addi	r3,r21,8
11083f98:	2000061e 	bne	r4,zero,11083fb4 <___vfprintf_internal_r+0x1638>
11083f9c:	d9414817 	ldw	r5,1312(sp)
11083fa0:	2800041e 	bne	r5,zero,11083fb4 <___vfprintf_internal_r+0x1638>
11083fa4:	d9814d17 	ldw	r6,1332(sp)
11083fa8:	3080004c 	andi	r2,r6,1
11083fac:	1005003a 	cmpeq	r2,r2,zero
11083fb0:	103bf01e 	bne	r2,zero,11082f74 <___vfprintf_internal_r+0x5f8>
11083fb4:	00800044 	movi	r2,1
11083fb8:	dc400e17 	ldw	r17,56(sp)
11083fbc:	18800115 	stw	r2,4(r3)
11083fc0:	d8814a17 	ldw	r2,1320(sp)
11083fc4:	94800044 	addi	r18,r18,1
11083fc8:	8c400044 	addi	r17,r17,1
11083fcc:	18800015 	stw	r2,0(r3)
11083fd0:	008001c4 	movi	r2,7
11083fd4:	dc800f15 	stw	r18,60(sp)
11083fd8:	dc400e15 	stw	r17,56(sp)
11083fdc:	1440ca16 	blt	r2,r17,11084308 <___vfprintf_internal_r+0x198c>
11083fe0:	18c00204 	addi	r3,r3,8
11083fe4:	0121c83a 	sub	r16,zero,r4
11083fe8:	0400500e 	bge	zero,r16,1108412c <___vfprintf_internal_r+0x17b0>
11083fec:	00800404 	movi	r2,16
11083ff0:	1400800e 	bge	r2,r16,110841f4 <___vfprintf_internal_r+0x1878>
11083ff4:	1027883a 	mov	r19,r2
11083ff8:	07044274 	movhi	fp,4361
11083ffc:	e73d7f04 	addi	fp,fp,-2564
11084000:	050001c4 	movi	r20,7
11084004:	00000306 	br	11084014 <___vfprintf_internal_r+0x1698>
11084008:	18c00204 	addi	r3,r3,8
1108400c:	843ffc04 	addi	r16,r16,-16
11084010:	9c007a0e 	bge	r19,r16,110841fc <___vfprintf_internal_r+0x1880>
11084014:	94800404 	addi	r18,r18,16
11084018:	8c400044 	addi	r17,r17,1
1108401c:	1f000015 	stw	fp,0(r3)
11084020:	1cc00115 	stw	r19,4(r3)
11084024:	dc800f15 	stw	r18,60(sp)
11084028:	dc400e15 	stw	r17,56(sp)
1108402c:	a47ff60e 	bge	r20,r17,11084008 <___vfprintf_internal_r+0x168c>
11084030:	d9015017 	ldw	r4,1344(sp)
11084034:	b00b883a 	mov	r5,r22
11084038:	d9800d04 	addi	r6,sp,52
1108403c:	10829240 	call	11082924 <__sprint_r>
11084040:	103c061e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11084044:	dc800f17 	ldw	r18,60(sp)
11084048:	dc400e17 	ldw	r17,56(sp)
1108404c:	d8c01a04 	addi	r3,sp,104
11084050:	003fee06 	br	1108400c <___vfprintf_internal_r+0x1690>
11084054:	3c000017 	ldw	r16,0(r7)
11084058:	0023883a 	mov	r17,zero
1108405c:	39c00104 	addi	r7,r7,4
11084060:	d9c14115 	stw	r7,1284(sp)
11084064:	003e9206 	br	11083ab0 <___vfprintf_internal_r+0x1134>
11084068:	d9401a04 	addi	r5,sp,104
1108406c:	dd001004 	addi	r20,sp,64
11084070:	d9414215 	stw	r5,1288(sp)
11084074:	d9814517 	ldw	r6,1300(sp)
11084078:	880a973a 	slli	r5,r17,28
1108407c:	8004d13a 	srli	r2,r16,4
11084080:	810003cc 	andi	r4,r16,15
11084084:	3109883a 	add	r4,r6,r4
11084088:	2884b03a 	or	r2,r5,r2
1108408c:	21400003 	ldbu	r5,0(r4)
11084090:	d9014217 	ldw	r4,1288(sp)
11084094:	8806d13a 	srli	r3,r17,4
11084098:	1021883a 	mov	r16,r2
1108409c:	213fffc4 	addi	r4,r4,-1
110840a0:	d9014215 	stw	r4,1288(sp)
110840a4:	d9814217 	ldw	r6,1288(sp)
110840a8:	10c8b03a 	or	r4,r2,r3
110840ac:	1823883a 	mov	r17,r3
110840b0:	31400005 	stb	r5,0(r6)
110840b4:	203fef1e 	bne	r4,zero,11084074 <___vfprintf_internal_r+0x16f8>
110840b8:	003ccb06 	br	110833e8 <___vfprintf_internal_r+0xa6c>
110840bc:	00800c04 	movi	r2,48
110840c0:	d98019c4 	addi	r6,sp,103
110840c4:	dd001004 	addi	r20,sp,64
110840c8:	d88019c5 	stb	r2,103(sp)
110840cc:	d9814215 	stw	r6,1288(sp)
110840d0:	003cc506 	br	110833e8 <___vfprintf_internal_r+0xa6c>
110840d4:	dc400e17 	ldw	r17,56(sp)
110840d8:	07044274 	movhi	fp,4361
110840dc:	e73d8304 	addi	fp,fp,-2548
110840e0:	003bc706 	br	11083000 <___vfprintf_internal_r+0x684>
110840e4:	d9414d17 	ldw	r5,1332(sp)
110840e8:	2880040c 	andi	r2,r5,16
110840ec:	10007c26 	beq	r2,zero,110842e0 <___vfprintf_internal_r+0x1964>
110840f0:	38800017 	ldw	r2,0(r7)
110840f4:	39c00104 	addi	r7,r7,4
110840f8:	d9c14115 	stw	r7,1284(sp)
110840fc:	d9814c17 	ldw	r6,1328(sp)
11084100:	d9c14117 	ldw	r7,1284(sp)
11084104:	11800015 	stw	r6,0(r2)
11084108:	003a7806 	br	11082aec <___vfprintf_internal_r+0x170>
1108410c:	d9015017 	ldw	r4,1344(sp)
11084110:	b00b883a 	mov	r5,r22
11084114:	d9800d04 	addi	r6,sp,52
11084118:	10829240 	call	11082924 <__sprint_r>
1108411c:	103bcf1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11084120:	dc800f17 	ldw	r18,60(sp)
11084124:	dc400e17 	ldw	r17,56(sp)
11084128:	d8c01a04 	addi	r3,sp,104
1108412c:	d9014817 	ldw	r4,1312(sp)
11084130:	d9414217 	ldw	r5,1288(sp)
11084134:	8c400044 	addi	r17,r17,1
11084138:	9125883a 	add	r18,r18,r4
1108413c:	008001c4 	movi	r2,7
11084140:	19400015 	stw	r5,0(r3)
11084144:	19000115 	stw	r4,4(r3)
11084148:	dc800f15 	stw	r18,60(sp)
1108414c:	dc400e15 	stw	r17,56(sp)
11084150:	147cee16 	blt	r2,r17,1108350c <___vfprintf_internal_r+0xb90>
11084154:	18c00204 	addi	r3,r3,8
11084158:	003b8606 	br	11082f74 <___vfprintf_internal_r+0x5f8>
1108415c:	38c00017 	ldw	r3,0(r7)
11084160:	39000204 	addi	r4,r7,8
11084164:	d9014115 	stw	r4,1284(sp)
11084168:	d8c14315 	stw	r3,1292(sp)
1108416c:	39c00117 	ldw	r7,4(r7)
11084170:	d9c14415 	stw	r7,1296(sp)
11084174:	003e2006 	br	110839f8 <___vfprintf_internal_r+0x107c>
11084178:	0005883a 	mov	r2,zero
1108417c:	1409c83a 	sub	r4,r2,r16
11084180:	1105803a 	cmpltu	r2,r2,r4
11084184:	044bc83a 	sub	r5,zero,r17
11084188:	2885c83a 	sub	r2,r5,r2
1108418c:	2021883a 	mov	r16,r4
11084190:	1023883a 	mov	r17,r2
11084194:	01000044 	movi	r4,1
11084198:	00800b44 	movi	r2,45
1108419c:	d8800405 	stb	r2,16(sp)
110841a0:	003c8406 	br	110833b4 <___vfprintf_internal_r+0xa38>
110841a4:	d9015017 	ldw	r4,1344(sp)
110841a8:	b00b883a 	mov	r5,r22
110841ac:	d9800d04 	addi	r6,sp,52
110841b0:	10829240 	call	11082924 <__sprint_r>
110841b4:	103ba91e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110841b8:	dc800f17 	ldw	r18,60(sp)
110841bc:	dc400e17 	ldw	r17,56(sp)
110841c0:	d9000617 	ldw	r4,24(sp)
110841c4:	d9401a04 	addi	r5,sp,104
110841c8:	003da706 	br	11083868 <___vfprintf_internal_r+0xeec>
110841cc:	d9015017 	ldw	r4,1344(sp)
110841d0:	b00b883a 	mov	r5,r22
110841d4:	d9800d04 	addi	r6,sp,52
110841d8:	10829240 	call	11082924 <__sprint_r>
110841dc:	103b9f1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110841e0:	dc800f17 	ldw	r18,60(sp)
110841e4:	dc400e17 	ldw	r17,56(sp)
110841e8:	d9000617 	ldw	r4,24(sp)
110841ec:	d8c01a04 	addi	r3,sp,104
110841f0:	003d9106 	br	11083838 <___vfprintf_internal_r+0xebc>
110841f4:	07044274 	movhi	fp,4361
110841f8:	e73d7f04 	addi	fp,fp,-2564
110841fc:	9425883a 	add	r18,r18,r16
11084200:	8c400044 	addi	r17,r17,1
11084204:	008001c4 	movi	r2,7
11084208:	1f000015 	stw	fp,0(r3)
1108420c:	1c000115 	stw	r16,4(r3)
11084210:	dc800f15 	stw	r18,60(sp)
11084214:	dc400e15 	stw	r17,56(sp)
11084218:	147fbc16 	blt	r2,r17,1108410c <___vfprintf_internal_r+0x1790>
1108421c:	18c00204 	addi	r3,r3,8
11084220:	003fc206 	br	1108412c <___vfprintf_internal_r+0x17b0>
11084224:	d9015017 	ldw	r4,1344(sp)
11084228:	b00b883a 	mov	r5,r22
1108422c:	d9800d04 	addi	r6,sp,52
11084230:	10829240 	call	11082924 <__sprint_r>
11084234:	103b891e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11084238:	dc800f17 	ldw	r18,60(sp)
1108423c:	d9000617 	ldw	r4,24(sp)
11084240:	d8c01a04 	addi	r3,sp,104
11084244:	003d0206 	br	11083650 <___vfprintf_internal_r+0xcd4>
11084248:	07044274 	movhi	fp,4361
1108424c:	e73d7f04 	addi	fp,fp,-2564
11084250:	003be406 	br	110831e4 <___vfprintf_internal_r+0x868>
11084254:	00844274 	movhi	r2,4361
11084258:	10bd6d04 	addi	r2,r2,-2636
1108425c:	d8814215 	stw	r2,1288(sp)
11084260:	003df506 	br	11083a38 <___vfprintf_internal_r+0x10bc>
11084264:	d9014317 	ldw	r4,1292(sp)
11084268:	d9414417 	ldw	r5,1296(sp)
1108426c:	10894500 	call	11089450 <__isnand>
11084270:	10003926 	beq	r2,zero,11084358 <___vfprintf_internal_r+0x19dc>
11084274:	d9414e17 	ldw	r5,1336(sp)
11084278:	008011c4 	movi	r2,71
1108427c:	1140ce16 	blt	r2,r5,110845b8 <___vfprintf_internal_r+0x1c3c>
11084280:	01844274 	movhi	r6,4361
11084284:	31bd6e04 	addi	r6,r6,-2632
11084288:	d9814215 	stw	r6,1288(sp)
1108428c:	003dea06 	br	11083a38 <___vfprintf_internal_r+0x10bc>
11084290:	d9014d17 	ldw	r4,1332(sp)
11084294:	bdc00044 	addi	r23,r23,1
11084298:	b8c00007 	ldb	r3,0(r23)
1108429c:	21000814 	ori	r4,r4,32
110842a0:	d9014d15 	stw	r4,1332(sp)
110842a4:	003a3406 	br	11082b78 <___vfprintf_internal_r+0x1fc>
110842a8:	dcc14615 	stw	r19,1304(sp)
110842ac:	98011016 	blt	r19,zero,110846f0 <___vfprintf_internal_r+0x1d74>
110842b0:	980f883a 	mov	r7,r19
110842b4:	d8014715 	stw	zero,1308(sp)
110842b8:	003c5206 	br	11083404 <___vfprintf_internal_r+0xa88>
110842bc:	d9015017 	ldw	r4,1344(sp)
110842c0:	b00b883a 	mov	r5,r22
110842c4:	d9800d04 	addi	r6,sp,52
110842c8:	10829240 	call	11082924 <__sprint_r>
110842cc:	103b631e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
110842d0:	dc800f17 	ldw	r18,60(sp)
110842d4:	d9000617 	ldw	r4,24(sp)
110842d8:	d8c01a04 	addi	r3,sp,104
110842dc:	003f2e06 	br	11083f98 <___vfprintf_internal_r+0x161c>
110842e0:	d8c14d17 	ldw	r3,1332(sp)
110842e4:	1880100c 	andi	r2,r3,64
110842e8:	1000a026 	beq	r2,zero,1108456c <___vfprintf_internal_r+0x1bf0>
110842ec:	38800017 	ldw	r2,0(r7)
110842f0:	39c00104 	addi	r7,r7,4
110842f4:	d9c14115 	stw	r7,1284(sp)
110842f8:	d9014c17 	ldw	r4,1328(sp)
110842fc:	d9c14117 	ldw	r7,1284(sp)
11084300:	1100000d 	sth	r4,0(r2)
11084304:	0039f906 	br	11082aec <___vfprintf_internal_r+0x170>
11084308:	d9015017 	ldw	r4,1344(sp)
1108430c:	b00b883a 	mov	r5,r22
11084310:	d9800d04 	addi	r6,sp,52
11084314:	10829240 	call	11082924 <__sprint_r>
11084318:	103b501e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
1108431c:	dc800f17 	ldw	r18,60(sp)
11084320:	dc400e17 	ldw	r17,56(sp)
11084324:	d9000617 	ldw	r4,24(sp)
11084328:	d8c01a04 	addi	r3,sp,104
1108432c:	003f2d06 	br	11083fe4 <___vfprintf_internal_r+0x1668>
11084330:	00800184 	movi	r2,6
11084334:	14c09a36 	bltu	r2,r19,110845a0 <___vfprintf_internal_r+0x1c24>
11084338:	dcc14615 	stw	r19,1304(sp)
1108433c:	9800010e 	bge	r19,zero,11084344 <___vfprintf_internal_r+0x19c8>
11084340:	d8014615 	stw	zero,1304(sp)
11084344:	00844274 	movhi	r2,4361
11084348:	10bd7004 	addi	r2,r2,-2624
1108434c:	980f883a 	mov	r7,r19
11084350:	d8814215 	stw	r2,1288(sp)
11084354:	003a7806 	br	11082d38 <___vfprintf_internal_r+0x3bc>
11084358:	00bfffc4 	movi	r2,-1
1108435c:	9880e226 	beq	r19,r2,110846e8 <___vfprintf_internal_r+0x1d6c>
11084360:	d9414e17 	ldw	r5,1336(sp)
11084364:	008019c4 	movi	r2,103
11084368:	2880dc26 	beq	r5,r2,110846dc <___vfprintf_internal_r+0x1d60>
1108436c:	008011c4 	movi	r2,71
11084370:	2880da26 	beq	r5,r2,110846dc <___vfprintf_internal_r+0x1d60>
11084374:	d9414d17 	ldw	r5,1332(sp)
11084378:	d9014417 	ldw	r4,1296(sp)
1108437c:	d9814317 	ldw	r6,1292(sp)
11084380:	29404014 	ori	r5,r5,256
11084384:	d9414d15 	stw	r5,1332(sp)
11084388:	2000cc16 	blt	r4,zero,110846bc <___vfprintf_internal_r+0x1d40>
1108438c:	3021883a 	mov	r16,r6
11084390:	2023883a 	mov	r17,r4
11084394:	0039883a 	mov	fp,zero
11084398:	d9414e17 	ldw	r5,1336(sp)
1108439c:	00801984 	movi	r2,102
110843a0:	2880b726 	beq	r5,r2,11084680 <___vfprintf_internal_r+0x1d04>
110843a4:	00801184 	movi	r2,70
110843a8:	2880b526 	beq	r5,r2,11084680 <___vfprintf_internal_r+0x1d04>
110843ac:	00801944 	movi	r2,101
110843b0:	2880c826 	beq	r5,r2,110846d4 <___vfprintf_internal_r+0x1d58>
110843b4:	00801144 	movi	r2,69
110843b8:	2880c626 	beq	r5,r2,110846d4 <___vfprintf_internal_r+0x1d58>
110843bc:	9829883a 	mov	r20,r19
110843c0:	d9015017 	ldw	r4,1344(sp)
110843c4:	d8800604 	addi	r2,sp,24
110843c8:	880d883a 	mov	r6,r17
110843cc:	d8800115 	stw	r2,4(sp)
110843d0:	d8c00704 	addi	r3,sp,28
110843d4:	d8800804 	addi	r2,sp,32
110843d8:	800b883a 	mov	r5,r16
110843dc:	01c00084 	movi	r7,2
110843e0:	d8c00215 	stw	r3,8(sp)
110843e4:	d8800315 	stw	r2,12(sp)
110843e8:	dd000015 	stw	r20,0(sp)
110843ec:	1084c940 	call	11084c94 <_dtoa_r>
110843f0:	d9814e17 	ldw	r6,1336(sp)
110843f4:	d8814215 	stw	r2,1288(sp)
110843f8:	008019c4 	movi	r2,103
110843fc:	30809526 	beq	r6,r2,11084654 <___vfprintf_internal_r+0x1cd8>
11084400:	d8c14e17 	ldw	r3,1336(sp)
11084404:	008011c4 	movi	r2,71
11084408:	18809226 	beq	r3,r2,11084654 <___vfprintf_internal_r+0x1cd8>
1108440c:	d9414217 	ldw	r5,1288(sp)
11084410:	d9814e17 	ldw	r6,1336(sp)
11084414:	00801984 	movi	r2,102
11084418:	2d25883a 	add	r18,r5,r20
1108441c:	30808626 	beq	r6,r2,11084638 <___vfprintf_internal_r+0x1cbc>
11084420:	00801184 	movi	r2,70
11084424:	30808426 	beq	r6,r2,11084638 <___vfprintf_internal_r+0x1cbc>
11084428:	000d883a 	mov	r6,zero
1108442c:	000f883a 	mov	r7,zero
11084430:	880b883a 	mov	r5,r17
11084434:	8009883a 	mov	r4,r16
11084438:	108b2380 	call	1108b238 <__eqdf2>
1108443c:	1000751e 	bne	r2,zero,11084614 <___vfprintf_internal_r+0x1c98>
11084440:	9005883a 	mov	r2,r18
11084444:	dc800815 	stw	r18,32(sp)
11084448:	d9014217 	ldw	r4,1288(sp)
1108444c:	d9414e17 	ldw	r5,1336(sp)
11084450:	00c019c4 	movi	r3,103
11084454:	1125c83a 	sub	r18,r2,r4
11084458:	28c06826 	beq	r5,r3,110845fc <___vfprintf_internal_r+0x1c80>
1108445c:	008011c4 	movi	r2,71
11084460:	28806626 	beq	r5,r2,110845fc <___vfprintf_internal_r+0x1c80>
11084464:	d9000617 	ldw	r4,24(sp)
11084468:	d8c14e17 	ldw	r3,1336(sp)
1108446c:	00801944 	movi	r2,101
11084470:	10c05516 	blt	r2,r3,110845c8 <___vfprintf_internal_r+0x1c4c>
11084474:	213fffc4 	addi	r4,r4,-1
11084478:	d9000615 	stw	r4,24(sp)
1108447c:	d8c00905 	stb	r3,36(sp)
11084480:	2021883a 	mov	r16,r4
11084484:	2000c116 	blt	r4,zero,1108478c <___vfprintf_internal_r+0x1e10>
11084488:	00800ac4 	movi	r2,43
1108448c:	d8800945 	stb	r2,37(sp)
11084490:	00800244 	movi	r2,9
11084494:	1400af0e 	bge	r2,r16,11084754 <___vfprintf_internal_r+0x1dd8>
11084498:	1027883a 	mov	r19,r2
1108449c:	dc400cc4 	addi	r17,sp,51
110844a0:	8009883a 	mov	r4,r16
110844a4:	01400284 	movi	r5,10
110844a8:	10826400 	call	11082640 <__modsi3>
110844ac:	10800c04 	addi	r2,r2,48
110844b0:	8c7fffc4 	addi	r17,r17,-1
110844b4:	8009883a 	mov	r4,r16
110844b8:	01400284 	movi	r5,10
110844bc:	88800005 	stb	r2,0(r17)
110844c0:	10825e00 	call	110825e0 <__divsi3>
110844c4:	1021883a 	mov	r16,r2
110844c8:	98bff516 	blt	r19,r2,110844a0 <___vfprintf_internal_r+0x1b24>
110844cc:	10c00c04 	addi	r3,r2,48
110844d0:	d8800b04 	addi	r2,sp,44
110844d4:	108001c4 	addi	r2,r2,7
110844d8:	897fffc4 	addi	r5,r17,-1
110844dc:	88ffffc5 	stb	r3,-1(r17)
110844e0:	2880a72e 	bgeu	r5,r2,11084780 <___vfprintf_internal_r+0x1e04>
110844e4:	1009883a 	mov	r4,r2
110844e8:	d9800904 	addi	r6,sp,36
110844ec:	d8c00984 	addi	r3,sp,38
110844f0:	28800003 	ldbu	r2,0(r5)
110844f4:	29400044 	addi	r5,r5,1
110844f8:	18800005 	stb	r2,0(r3)
110844fc:	18c00044 	addi	r3,r3,1
11084500:	293ffb36 	bltu	r5,r4,110844f0 <___vfprintf_internal_r+0x1b74>
11084504:	1987c83a 	sub	r3,r3,r6
11084508:	00800044 	movi	r2,1
1108450c:	d8c14915 	stw	r3,1316(sp)
11084510:	90cf883a 	add	r7,r18,r3
11084514:	1480960e 	bge	r2,r18,11084770 <___vfprintf_internal_r+0x1df4>
11084518:	39c00044 	addi	r7,r7,1
1108451c:	d9c14615 	stw	r7,1304(sp)
11084520:	38003416 	blt	r7,zero,110845f4 <___vfprintf_internal_r+0x1c78>
11084524:	e0803fcc 	andi	r2,fp,255
11084528:	1080201c 	xori	r2,r2,128
1108452c:	10bfe004 	addi	r2,r2,-128
11084530:	10004e26 	beq	r2,zero,1108466c <___vfprintf_internal_r+0x1cf0>
11084534:	00800b44 	movi	r2,45
11084538:	dc814815 	stw	r18,1312(sp)
1108453c:	d8014715 	stw	zero,1308(sp)
11084540:	d8800405 	stb	r2,16(sp)
11084544:	003bb106 	br	1108340c <___vfprintf_internal_r+0xa90>
11084548:	00800b44 	movi	r2,45
1108454c:	d8800405 	stb	r2,16(sp)
11084550:	003d3306 	br	11083a20 <___vfprintf_internal_r+0x10a4>
11084554:	d9015017 	ldw	r4,1344(sp)
11084558:	b00b883a 	mov	r5,r22
1108455c:	d9800d04 	addi	r6,sp,52
11084560:	10829240 	call	11082924 <__sprint_r>
11084564:	103abd1e 	bne	r2,zero,1108305c <___vfprintf_internal_r+0x6e0>
11084568:	003abb06 	br	11083058 <___vfprintf_internal_r+0x6dc>
1108456c:	38800017 	ldw	r2,0(r7)
11084570:	39c00104 	addi	r7,r7,4
11084574:	d9c14115 	stw	r7,1284(sp)
11084578:	d9414c17 	ldw	r5,1328(sp)
1108457c:	d9c14117 	ldw	r7,1284(sp)
11084580:	11400015 	stw	r5,0(r2)
11084584:	00395906 	br	11082aec <___vfprintf_internal_r+0x170>
11084588:	980f883a 	mov	r7,r19
1108458c:	dcc14615 	stw	r19,1304(sp)
11084590:	d8014715 	stw	zero,1308(sp)
11084594:	003b9b06 	br	11083404 <___vfprintf_internal_r+0xa88>
11084598:	0027883a 	mov	r19,zero
1108459c:	00397806 	br	11082b80 <___vfprintf_internal_r+0x204>
110845a0:	00c44274 	movhi	r3,4361
110845a4:	18fd7004 	addi	r3,r3,-2624
110845a8:	100f883a 	mov	r7,r2
110845ac:	d8814615 	stw	r2,1304(sp)
110845b0:	d8c14215 	stw	r3,1288(sp)
110845b4:	0039e006 	br	11082d38 <___vfprintf_internal_r+0x3bc>
110845b8:	00844274 	movhi	r2,4361
110845bc:	10bd6f04 	addi	r2,r2,-2628
110845c0:	d8814215 	stw	r2,1288(sp)
110845c4:	003d1c06 	br	11083a38 <___vfprintf_internal_r+0x10bc>
110845c8:	d9414e17 	ldw	r5,1336(sp)
110845cc:	00801984 	movi	r2,102
110845d0:	28804926 	beq	r5,r2,110846f8 <___vfprintf_internal_r+0x1d7c>
110845d4:	200f883a 	mov	r7,r4
110845d8:	24805716 	blt	r4,r18,11084738 <___vfprintf_internal_r+0x1dbc>
110845dc:	d9414d17 	ldw	r5,1332(sp)
110845e0:	2880004c 	andi	r2,r5,1
110845e4:	10000126 	beq	r2,zero,110845ec <___vfprintf_internal_r+0x1c70>
110845e8:	21c00044 	addi	r7,r4,1
110845ec:	d9c14615 	stw	r7,1304(sp)
110845f0:	383fcc0e 	bge	r7,zero,11084524 <___vfprintf_internal_r+0x1ba8>
110845f4:	d8014615 	stw	zero,1304(sp)
110845f8:	003fca06 	br	11084524 <___vfprintf_internal_r+0x1ba8>
110845fc:	d9000617 	ldw	r4,24(sp)
11084600:	00bfff04 	movi	r2,-4
11084604:	1100480e 	bge	r2,r4,11084728 <___vfprintf_internal_r+0x1dac>
11084608:	99004716 	blt	r19,r4,11084728 <___vfprintf_internal_r+0x1dac>
1108460c:	d8c14e15 	stw	r3,1336(sp)
11084610:	003ff006 	br	110845d4 <___vfprintf_internal_r+0x1c58>
11084614:	d8800817 	ldw	r2,32(sp)
11084618:	14bf8b2e 	bgeu	r2,r18,11084448 <___vfprintf_internal_r+0x1acc>
1108461c:	9007883a 	mov	r3,r18
11084620:	01000c04 	movi	r4,48
11084624:	11000005 	stb	r4,0(r2)
11084628:	10800044 	addi	r2,r2,1
1108462c:	d8800815 	stw	r2,32(sp)
11084630:	18bffc1e 	bne	r3,r2,11084624 <___vfprintf_internal_r+0x1ca8>
11084634:	003f8406 	br	11084448 <___vfprintf_internal_r+0x1acc>
11084638:	d8814217 	ldw	r2,1288(sp)
1108463c:	10c00007 	ldb	r3,0(r2)
11084640:	00800c04 	movi	r2,48
11084644:	18805b26 	beq	r3,r2,110847b4 <___vfprintf_internal_r+0x1e38>
11084648:	d9000617 	ldw	r4,24(sp)
1108464c:	9125883a 	add	r18,r18,r4
11084650:	003f7506 	br	11084428 <___vfprintf_internal_r+0x1aac>
11084654:	d9014d17 	ldw	r4,1332(sp)
11084658:	2080004c 	andi	r2,r4,1
1108465c:	1005003a 	cmpeq	r2,r2,zero
11084660:	103f6a26 	beq	r2,zero,1108440c <___vfprintf_internal_r+0x1a90>
11084664:	d8800817 	ldw	r2,32(sp)
11084668:	003f7706 	br	11084448 <___vfprintf_internal_r+0x1acc>
1108466c:	d9c14615 	stw	r7,1304(sp)
11084670:	38004d16 	blt	r7,zero,110847a8 <___vfprintf_internal_r+0x1e2c>
11084674:	dc814815 	stw	r18,1312(sp)
11084678:	d8014715 	stw	zero,1308(sp)
1108467c:	003b6106 	br	11083404 <___vfprintf_internal_r+0xa88>
11084680:	d9015017 	ldw	r4,1344(sp)
11084684:	d8800604 	addi	r2,sp,24
11084688:	d8800115 	stw	r2,4(sp)
1108468c:	d8c00704 	addi	r3,sp,28
11084690:	d8800804 	addi	r2,sp,32
11084694:	800b883a 	mov	r5,r16
11084698:	880d883a 	mov	r6,r17
1108469c:	01c000c4 	movi	r7,3
110846a0:	d8c00215 	stw	r3,8(sp)
110846a4:	d8800315 	stw	r2,12(sp)
110846a8:	dcc00015 	stw	r19,0(sp)
110846ac:	9829883a 	mov	r20,r19
110846b0:	1084c940 	call	11084c94 <_dtoa_r>
110846b4:	d8814215 	stw	r2,1288(sp)
110846b8:	003f5106 	br	11084400 <___vfprintf_internal_r+0x1a84>
110846bc:	d8c14317 	ldw	r3,1292(sp)
110846c0:	d9014417 	ldw	r4,1296(sp)
110846c4:	07000b44 	movi	fp,45
110846c8:	1821883a 	mov	r16,r3
110846cc:	2460003c 	xorhi	r17,r4,32768
110846d0:	003f3106 	br	11084398 <___vfprintf_internal_r+0x1a1c>
110846d4:	9d000044 	addi	r20,r19,1
110846d8:	003f3906 	br	110843c0 <___vfprintf_internal_r+0x1a44>
110846dc:	983f251e 	bne	r19,zero,11084374 <___vfprintf_internal_r+0x19f8>
110846e0:	04c00044 	movi	r19,1
110846e4:	003f2306 	br	11084374 <___vfprintf_internal_r+0x19f8>
110846e8:	04c00184 	movi	r19,6
110846ec:	003f2106 	br	11084374 <___vfprintf_internal_r+0x19f8>
110846f0:	d8014615 	stw	zero,1304(sp)
110846f4:	003eee06 	br	110842b0 <___vfprintf_internal_r+0x1934>
110846f8:	200f883a 	mov	r7,r4
110846fc:	0100370e 	bge	zero,r4,110847dc <___vfprintf_internal_r+0x1e60>
11084700:	9800031e 	bne	r19,zero,11084710 <___vfprintf_internal_r+0x1d94>
11084704:	d9814d17 	ldw	r6,1332(sp)
11084708:	3080004c 	andi	r2,r6,1
1108470c:	103fb726 	beq	r2,zero,110845ec <___vfprintf_internal_r+0x1c70>
11084710:	20800044 	addi	r2,r4,1
11084714:	98a7883a 	add	r19,r19,r2
11084718:	dcc14615 	stw	r19,1304(sp)
1108471c:	980f883a 	mov	r7,r19
11084720:	983f800e 	bge	r19,zero,11084524 <___vfprintf_internal_r+0x1ba8>
11084724:	003fb306 	br	110845f4 <___vfprintf_internal_r+0x1c78>
11084728:	d9814e17 	ldw	r6,1336(sp)
1108472c:	31bfff84 	addi	r6,r6,-2
11084730:	d9814e15 	stw	r6,1336(sp)
11084734:	003f4c06 	br	11084468 <___vfprintf_internal_r+0x1aec>
11084738:	0100180e 	bge	zero,r4,1108479c <___vfprintf_internal_r+0x1e20>
1108473c:	00800044 	movi	r2,1
11084740:	1485883a 	add	r2,r2,r18
11084744:	d8814615 	stw	r2,1304(sp)
11084748:	100f883a 	mov	r7,r2
1108474c:	103f750e 	bge	r2,zero,11084524 <___vfprintf_internal_r+0x1ba8>
11084750:	003fa806 	br	110845f4 <___vfprintf_internal_r+0x1c78>
11084754:	80c00c04 	addi	r3,r16,48
11084758:	00800c04 	movi	r2,48
1108475c:	d8c009c5 	stb	r3,39(sp)
11084760:	d9800904 	addi	r6,sp,36
11084764:	d8c00a04 	addi	r3,sp,40
11084768:	d8800985 	stb	r2,38(sp)
1108476c:	003f6506 	br	11084504 <___vfprintf_internal_r+0x1b88>
11084770:	d9014d17 	ldw	r4,1332(sp)
11084774:	2084703a 	and	r2,r4,r2
11084778:	103f9c26 	beq	r2,zero,110845ec <___vfprintf_internal_r+0x1c70>
1108477c:	003f6606 	br	11084518 <___vfprintf_internal_r+0x1b9c>
11084780:	d9800904 	addi	r6,sp,36
11084784:	d8c00984 	addi	r3,sp,38
11084788:	003f5e06 	br	11084504 <___vfprintf_internal_r+0x1b88>
1108478c:	00800b44 	movi	r2,45
11084790:	0121c83a 	sub	r16,zero,r4
11084794:	d8800945 	stb	r2,37(sp)
11084798:	003f3d06 	br	11084490 <___vfprintf_internal_r+0x1b14>
1108479c:	00800084 	movi	r2,2
110847a0:	1105c83a 	sub	r2,r2,r4
110847a4:	003fe606 	br	11084740 <___vfprintf_internal_r+0x1dc4>
110847a8:	d8014615 	stw	zero,1304(sp)
110847ac:	dc814815 	stw	r18,1312(sp)
110847b0:	003fb106 	br	11084678 <___vfprintf_internal_r+0x1cfc>
110847b4:	000d883a 	mov	r6,zero
110847b8:	000f883a 	mov	r7,zero
110847bc:	8009883a 	mov	r4,r16
110847c0:	880b883a 	mov	r5,r17
110847c4:	108b2c00 	call	1108b2c0 <__nedf2>
110847c8:	103f9f26 	beq	r2,zero,11084648 <___vfprintf_internal_r+0x1ccc>
110847cc:	00800044 	movi	r2,1
110847d0:	1509c83a 	sub	r4,r2,r20
110847d4:	d9000615 	stw	r4,24(sp)
110847d8:	003f9b06 	br	11084648 <___vfprintf_internal_r+0x1ccc>
110847dc:	98000d1e 	bne	r19,zero,11084814 <___vfprintf_internal_r+0x1e98>
110847e0:	d8c14d17 	ldw	r3,1332(sp)
110847e4:	1880004c 	andi	r2,r3,1
110847e8:	10000a1e 	bne	r2,zero,11084814 <___vfprintf_internal_r+0x1e98>
110847ec:	01000044 	movi	r4,1
110847f0:	200f883a 	mov	r7,r4
110847f4:	d9014615 	stw	r4,1304(sp)
110847f8:	003f4a06 	br	11084524 <___vfprintf_internal_r+0x1ba8>
110847fc:	3cc00017 	ldw	r19,0(r7)
11084800:	39c00104 	addi	r7,r7,4
11084804:	983d0e0e 	bge	r19,zero,11083c40 <___vfprintf_internal_r+0x12c4>
11084808:	b8c00007 	ldb	r3,0(r23)
1108480c:	04ffffc4 	movi	r19,-1
11084810:	0038d906 	br	11082b78 <___vfprintf_internal_r+0x1fc>
11084814:	9cc00084 	addi	r19,r19,2
11084818:	dcc14615 	stw	r19,1304(sp)
1108481c:	980f883a 	mov	r7,r19
11084820:	983f400e 	bge	r19,zero,11084524 <___vfprintf_internal_r+0x1ba8>
11084824:	003f7306 	br	110845f4 <___vfprintf_internal_r+0x1c78>

11084828 <__vfprintf_internal>:
11084828:	00844274 	movhi	r2,4361
1108482c:	1084bc04 	addi	r2,r2,4848
11084830:	2013883a 	mov	r9,r4
11084834:	11000017 	ldw	r4,0(r2)
11084838:	2805883a 	mov	r2,r5
1108483c:	300f883a 	mov	r7,r6
11084840:	480b883a 	mov	r5,r9
11084844:	100d883a 	mov	r6,r2
11084848:	108297c1 	jmpi	1108297c <___vfprintf_internal_r>

1108484c <_vsnprintf_r>:
1108484c:	deffe604 	addi	sp,sp,-104
11084850:	dc401815 	stw	r17,96(sp)
11084854:	dc001715 	stw	r16,92(sp)
11084858:	dfc01915 	stw	ra,100(sp)
1108485c:	3021883a 	mov	r16,r6
11084860:	00ffffc4 	movi	r3,-1
11084864:	2023883a 	mov	r17,r4
11084868:	2811883a 	mov	r8,r5
1108486c:	30002116 	blt	r6,zero,110848f4 <_vsnprintf_r+0xa8>
11084870:	0007883a 	mov	r3,zero
11084874:	30000126 	beq	r6,zero,1108487c <_vsnprintf_r+0x30>
11084878:	30ffffc4 	addi	r3,r6,-1
1108487c:	00844274 	movhi	r2,4361
11084880:	1084bc04 	addi	r2,r2,4848
11084884:	380d883a 	mov	r6,r7
11084888:	11000017 	ldw	r4,0(r2)
1108488c:	d9c01a17 	ldw	r7,104(sp)
11084890:	00808204 	movi	r2,520
11084894:	d880030d 	sth	r2,12(sp)
11084898:	d80b883a 	mov	r5,sp
1108489c:	00bfffc4 	movi	r2,-1
110848a0:	d8c00515 	stw	r3,20(sp)
110848a4:	d8c00215 	stw	r3,8(sp)
110848a8:	da000415 	stw	r8,16(sp)
110848ac:	d880038d 	sth	r2,14(sp)
110848b0:	da000015 	stw	r8,0(sp)
110848b4:	108297c0 	call	1108297c <___vfprintf_internal_r>
110848b8:	1007883a 	mov	r3,r2
110848bc:	00bfffc4 	movi	r2,-1
110848c0:	18800916 	blt	r3,r2,110848e8 <_vsnprintf_r+0x9c>
110848c4:	80000226 	beq	r16,zero,110848d0 <_vsnprintf_r+0x84>
110848c8:	d8800017 	ldw	r2,0(sp)
110848cc:	10000005 	stb	zero,0(r2)
110848d0:	1805883a 	mov	r2,r3
110848d4:	dfc01917 	ldw	ra,100(sp)
110848d8:	dc401817 	ldw	r17,96(sp)
110848dc:	dc001717 	ldw	r16,92(sp)
110848e0:	dec01a04 	addi	sp,sp,104
110848e4:	f800283a 	ret
110848e8:	008022c4 	movi	r2,139
110848ec:	88800015 	stw	r2,0(r17)
110848f0:	003ff406 	br	110848c4 <_vsnprintf_r+0x78>
110848f4:	008022c4 	movi	r2,139
110848f8:	20800015 	stw	r2,0(r4)
110848fc:	003ff406 	br	110848d0 <_vsnprintf_r+0x84>

11084900 <vsnprintf>:
11084900:	00844274 	movhi	r2,4361
11084904:	1084bc04 	addi	r2,r2,4848
11084908:	2017883a 	mov	r11,r4
1108490c:	11000017 	ldw	r4,0(r2)
11084910:	defffe04 	addi	sp,sp,-8
11084914:	3013883a 	mov	r9,r6
11084918:	2805883a 	mov	r2,r5
1108491c:	d9c00015 	stw	r7,0(sp)
11084920:	580b883a 	mov	r5,r11
11084924:	100d883a 	mov	r6,r2
11084928:	480f883a 	mov	r7,r9
1108492c:	dfc00115 	stw	ra,4(sp)
11084930:	108484c0 	call	1108484c <_vsnprintf_r>
11084934:	dfc00117 	ldw	ra,4(sp)
11084938:	dec00204 	addi	sp,sp,8
1108493c:	f800283a 	ret

11084940 <__swsetup_r>:
11084940:	00844274 	movhi	r2,4361
11084944:	1084bc04 	addi	r2,r2,4848
11084948:	10c00017 	ldw	r3,0(r2)
1108494c:	defffd04 	addi	sp,sp,-12
11084950:	dc400115 	stw	r17,4(sp)
11084954:	dc000015 	stw	r16,0(sp)
11084958:	dfc00215 	stw	ra,8(sp)
1108495c:	2023883a 	mov	r17,r4
11084960:	2821883a 	mov	r16,r5
11084964:	18000226 	beq	r3,zero,11084970 <__swsetup_r+0x30>
11084968:	18800e17 	ldw	r2,56(r3)
1108496c:	10001f26 	beq	r2,zero,110849ec <__swsetup_r+0xac>
11084970:	8100030b 	ldhu	r4,12(r16)
11084974:	2080020c 	andi	r2,r4,8
11084978:	10002826 	beq	r2,zero,11084a1c <__swsetup_r+0xdc>
1108497c:	81400417 	ldw	r5,16(r16)
11084980:	28001d26 	beq	r5,zero,110849f8 <__swsetup_r+0xb8>
11084984:	2080004c 	andi	r2,r4,1
11084988:	1005003a 	cmpeq	r2,r2,zero
1108498c:	10000b26 	beq	r2,zero,110849bc <__swsetup_r+0x7c>
11084990:	2080008c 	andi	r2,r4,2
11084994:	10001226 	beq	r2,zero,110849e0 <__swsetup_r+0xa0>
11084998:	0005883a 	mov	r2,zero
1108499c:	80800215 	stw	r2,8(r16)
110849a0:	28000b26 	beq	r5,zero,110849d0 <__swsetup_r+0x90>
110849a4:	0005883a 	mov	r2,zero
110849a8:	dfc00217 	ldw	ra,8(sp)
110849ac:	dc400117 	ldw	r17,4(sp)
110849b0:	dc000017 	ldw	r16,0(sp)
110849b4:	dec00304 	addi	sp,sp,12
110849b8:	f800283a 	ret
110849bc:	80800517 	ldw	r2,20(r16)
110849c0:	80000215 	stw	zero,8(r16)
110849c4:	0085c83a 	sub	r2,zero,r2
110849c8:	80800615 	stw	r2,24(r16)
110849cc:	283ff51e 	bne	r5,zero,110849a4 <__swsetup_r+0x64>
110849d0:	2080200c 	andi	r2,r4,128
110849d4:	103ff326 	beq	r2,zero,110849a4 <__swsetup_r+0x64>
110849d8:	00bfffc4 	movi	r2,-1
110849dc:	003ff206 	br	110849a8 <__swsetup_r+0x68>
110849e0:	80800517 	ldw	r2,20(r16)
110849e4:	80800215 	stw	r2,8(r16)
110849e8:	003fed06 	br	110849a0 <__swsetup_r+0x60>
110849ec:	1809883a 	mov	r4,r3
110849f0:	10864e00 	call	110864e0 <__sinit>
110849f4:	003fde06 	br	11084970 <__swsetup_r+0x30>
110849f8:	20c0a00c 	andi	r3,r4,640
110849fc:	00808004 	movi	r2,512
11084a00:	18bfe026 	beq	r3,r2,11084984 <__swsetup_r+0x44>
11084a04:	8809883a 	mov	r4,r17
11084a08:	800b883a 	mov	r5,r16
11084a0c:	10872580 	call	11087258 <__smakebuf_r>
11084a10:	8100030b 	ldhu	r4,12(r16)
11084a14:	81400417 	ldw	r5,16(r16)
11084a18:	003fda06 	br	11084984 <__swsetup_r+0x44>
11084a1c:	2080040c 	andi	r2,r4,16
11084a20:	103fed26 	beq	r2,zero,110849d8 <__swsetup_r+0x98>
11084a24:	2080010c 	andi	r2,r4,4
11084a28:	10001226 	beq	r2,zero,11084a74 <__swsetup_r+0x134>
11084a2c:	81400c17 	ldw	r5,48(r16)
11084a30:	28000526 	beq	r5,zero,11084a48 <__swsetup_r+0x108>
11084a34:	80801004 	addi	r2,r16,64
11084a38:	28800226 	beq	r5,r2,11084a44 <__swsetup_r+0x104>
11084a3c:	8809883a 	mov	r4,r17
11084a40:	10868640 	call	11086864 <_free_r>
11084a44:	80000c15 	stw	zero,48(r16)
11084a48:	8080030b 	ldhu	r2,12(r16)
11084a4c:	81400417 	ldw	r5,16(r16)
11084a50:	80000115 	stw	zero,4(r16)
11084a54:	10bff6cc 	andi	r2,r2,65499
11084a58:	8080030d 	sth	r2,12(r16)
11084a5c:	81400015 	stw	r5,0(r16)
11084a60:	8080030b 	ldhu	r2,12(r16)
11084a64:	10800214 	ori	r2,r2,8
11084a68:	113fffcc 	andi	r4,r2,65535
11084a6c:	8080030d 	sth	r2,12(r16)
11084a70:	003fc306 	br	11084980 <__swsetup_r+0x40>
11084a74:	81400417 	ldw	r5,16(r16)
11084a78:	003ff906 	br	11084a60 <__swsetup_r+0x120>

11084a7c <quorem>:
11084a7c:	28c00417 	ldw	r3,16(r5)
11084a80:	20800417 	ldw	r2,16(r4)
11084a84:	defff604 	addi	sp,sp,-40
11084a88:	ddc00715 	stw	r23,28(sp)
11084a8c:	dd400515 	stw	r21,20(sp)
11084a90:	dfc00915 	stw	ra,36(sp)
11084a94:	df000815 	stw	fp,32(sp)
11084a98:	dd800615 	stw	r22,24(sp)
11084a9c:	dd000415 	stw	r20,16(sp)
11084aa0:	dcc00315 	stw	r19,12(sp)
11084aa4:	dc800215 	stw	r18,8(sp)
11084aa8:	dc400115 	stw	r17,4(sp)
11084aac:	dc000015 	stw	r16,0(sp)
11084ab0:	202f883a 	mov	r23,r4
11084ab4:	282b883a 	mov	r21,r5
11084ab8:	10c07416 	blt	r2,r3,11084c8c <quorem+0x210>
11084abc:	1c7fffc4 	addi	r17,r3,-1
11084ac0:	8c45883a 	add	r2,r17,r17
11084ac4:	1085883a 	add	r2,r2,r2
11084ac8:	2c000504 	addi	r16,r5,20
11084acc:	24c00504 	addi	r19,r4,20
11084ad0:	14ed883a 	add	r22,r2,r19
11084ad4:	80a5883a 	add	r18,r16,r2
11084ad8:	b7000017 	ldw	fp,0(r22)
11084adc:	91400017 	ldw	r5,0(r18)
11084ae0:	e009883a 	mov	r4,fp
11084ae4:	29400044 	addi	r5,r5,1
11084ae8:	10826a00 	call	110826a0 <__udivsi3>
11084aec:	1029883a 	mov	r20,r2
11084af0:	10003c1e 	bne	r2,zero,11084be4 <quorem+0x168>
11084af4:	a80b883a 	mov	r5,r21
11084af8:	b809883a 	mov	r4,r23
11084afc:	1087f840 	call	11087f84 <__mcmp>
11084b00:	10002b16 	blt	r2,zero,11084bb0 <quorem+0x134>
11084b04:	a5000044 	addi	r20,r20,1
11084b08:	980f883a 	mov	r7,r19
11084b0c:	0011883a 	mov	r8,zero
11084b10:	0009883a 	mov	r4,zero
11084b14:	81400017 	ldw	r5,0(r16)
11084b18:	38c00017 	ldw	r3,0(r7)
11084b1c:	84000104 	addi	r16,r16,4
11084b20:	28bfffcc 	andi	r2,r5,65535
11084b24:	2085883a 	add	r2,r4,r2
11084b28:	11bfffcc 	andi	r6,r2,65535
11084b2c:	193fffcc 	andi	r4,r3,65535
11084b30:	1004d43a 	srli	r2,r2,16
11084b34:	280ad43a 	srli	r5,r5,16
11084b38:	2189c83a 	sub	r4,r4,r6
11084b3c:	2209883a 	add	r4,r4,r8
11084b40:	1806d43a 	srli	r3,r3,16
11084b44:	288b883a 	add	r5,r5,r2
11084b48:	200dd43a 	srai	r6,r4,16
11084b4c:	28bfffcc 	andi	r2,r5,65535
11084b50:	1887c83a 	sub	r3,r3,r2
11084b54:	1987883a 	add	r3,r3,r6
11084b58:	3900000d 	sth	r4,0(r7)
11084b5c:	38c0008d 	sth	r3,2(r7)
11084b60:	2808d43a 	srli	r4,r5,16
11084b64:	39c00104 	addi	r7,r7,4
11084b68:	1811d43a 	srai	r8,r3,16
11084b6c:	943fe92e 	bgeu	r18,r16,11084b14 <quorem+0x98>
11084b70:	8c45883a 	add	r2,r17,r17
11084b74:	1085883a 	add	r2,r2,r2
11084b78:	9885883a 	add	r2,r19,r2
11084b7c:	10c00017 	ldw	r3,0(r2)
11084b80:	18000b1e 	bne	r3,zero,11084bb0 <quorem+0x134>
11084b84:	113fff04 	addi	r4,r2,-4
11084b88:	9900082e 	bgeu	r19,r4,11084bac <quorem+0x130>
11084b8c:	10bfff17 	ldw	r2,-4(r2)
11084b90:	10000326 	beq	r2,zero,11084ba0 <quorem+0x124>
11084b94:	00000506 	br	11084bac <quorem+0x130>
11084b98:	20800017 	ldw	r2,0(r4)
11084b9c:	1000031e 	bne	r2,zero,11084bac <quorem+0x130>
11084ba0:	213fff04 	addi	r4,r4,-4
11084ba4:	8c7fffc4 	addi	r17,r17,-1
11084ba8:	993ffb36 	bltu	r19,r4,11084b98 <quorem+0x11c>
11084bac:	bc400415 	stw	r17,16(r23)
11084bb0:	a005883a 	mov	r2,r20
11084bb4:	dfc00917 	ldw	ra,36(sp)
11084bb8:	df000817 	ldw	fp,32(sp)
11084bbc:	ddc00717 	ldw	r23,28(sp)
11084bc0:	dd800617 	ldw	r22,24(sp)
11084bc4:	dd400517 	ldw	r21,20(sp)
11084bc8:	dd000417 	ldw	r20,16(sp)
11084bcc:	dcc00317 	ldw	r19,12(sp)
11084bd0:	dc800217 	ldw	r18,8(sp)
11084bd4:	dc400117 	ldw	r17,4(sp)
11084bd8:	dc000017 	ldw	r16,0(sp)
11084bdc:	dec00a04 	addi	sp,sp,40
11084be0:	f800283a 	ret
11084be4:	980f883a 	mov	r7,r19
11084be8:	8011883a 	mov	r8,r16
11084bec:	0013883a 	mov	r9,zero
11084bf0:	000d883a 	mov	r6,zero
11084bf4:	40c00017 	ldw	r3,0(r8)
11084bf8:	39000017 	ldw	r4,0(r7)
11084bfc:	42000104 	addi	r8,r8,4
11084c00:	18bfffcc 	andi	r2,r3,65535
11084c04:	a085383a 	mul	r2,r20,r2
11084c08:	1806d43a 	srli	r3,r3,16
11084c0c:	217fffcc 	andi	r5,r4,65535
11084c10:	3085883a 	add	r2,r6,r2
11084c14:	11bfffcc 	andi	r6,r2,65535
11084c18:	a0c7383a 	mul	r3,r20,r3
11084c1c:	1004d43a 	srli	r2,r2,16
11084c20:	298bc83a 	sub	r5,r5,r6
11084c24:	2a4b883a 	add	r5,r5,r9
11084c28:	2008d43a 	srli	r4,r4,16
11084c2c:	1887883a 	add	r3,r3,r2
11084c30:	280dd43a 	srai	r6,r5,16
11084c34:	18bfffcc 	andi	r2,r3,65535
11084c38:	2089c83a 	sub	r4,r4,r2
11084c3c:	2189883a 	add	r4,r4,r6
11084c40:	3900008d 	sth	r4,2(r7)
11084c44:	3940000d 	sth	r5,0(r7)
11084c48:	180cd43a 	srli	r6,r3,16
11084c4c:	39c00104 	addi	r7,r7,4
11084c50:	2013d43a 	srai	r9,r4,16
11084c54:	923fe72e 	bgeu	r18,r8,11084bf4 <quorem+0x178>
11084c58:	e03fa61e 	bne	fp,zero,11084af4 <quorem+0x78>
11084c5c:	b0ffff04 	addi	r3,r22,-4
11084c60:	98c0082e 	bgeu	r19,r3,11084c84 <quorem+0x208>
11084c64:	b0bfff17 	ldw	r2,-4(r22)
11084c68:	10000326 	beq	r2,zero,11084c78 <quorem+0x1fc>
11084c6c:	00000506 	br	11084c84 <quorem+0x208>
11084c70:	18800017 	ldw	r2,0(r3)
11084c74:	1000031e 	bne	r2,zero,11084c84 <quorem+0x208>
11084c78:	18ffff04 	addi	r3,r3,-4
11084c7c:	8c7fffc4 	addi	r17,r17,-1
11084c80:	98fffb36 	bltu	r19,r3,11084c70 <quorem+0x1f4>
11084c84:	bc400415 	stw	r17,16(r23)
11084c88:	003f9a06 	br	11084af4 <quorem+0x78>
11084c8c:	0005883a 	mov	r2,zero
11084c90:	003fc806 	br	11084bb4 <quorem+0x138>

11084c94 <_dtoa_r>:
11084c94:	22001017 	ldw	r8,64(r4)
11084c98:	deffda04 	addi	sp,sp,-152
11084c9c:	dd402115 	stw	r21,132(sp)
11084ca0:	dd002015 	stw	r20,128(sp)
11084ca4:	dc801e15 	stw	r18,120(sp)
11084ca8:	dc401d15 	stw	r17,116(sp)
11084cac:	dfc02515 	stw	ra,148(sp)
11084cb0:	df002415 	stw	fp,144(sp)
11084cb4:	ddc02315 	stw	r23,140(sp)
11084cb8:	dd802215 	stw	r22,136(sp)
11084cbc:	dcc01f15 	stw	r19,124(sp)
11084cc0:	dc001c15 	stw	r16,112(sp)
11084cc4:	d9001615 	stw	r4,88(sp)
11084cc8:	3023883a 	mov	r17,r6
11084ccc:	2829883a 	mov	r20,r5
11084cd0:	d9c01715 	stw	r7,92(sp)
11084cd4:	dc802817 	ldw	r18,160(sp)
11084cd8:	302b883a 	mov	r21,r6
11084cdc:	40000a26 	beq	r8,zero,11084d08 <_dtoa_r+0x74>
11084ce0:	20801117 	ldw	r2,68(r4)
11084ce4:	400b883a 	mov	r5,r8
11084ce8:	40800115 	stw	r2,4(r8)
11084cec:	20c01117 	ldw	r3,68(r4)
11084cf0:	00800044 	movi	r2,1
11084cf4:	10c4983a 	sll	r2,r2,r3
11084cf8:	40800215 	stw	r2,8(r8)
11084cfc:	1087e280 	call	11087e28 <_Bfree>
11084d00:	d8c01617 	ldw	r3,88(sp)
11084d04:	18001015 	stw	zero,64(r3)
11084d08:	8800a316 	blt	r17,zero,11084f98 <_dtoa_r+0x304>
11084d0c:	90000015 	stw	zero,0(r18)
11084d10:	a8dffc2c 	andhi	r3,r21,32752
11084d14:	009ffc34 	movhi	r2,32752
11084d18:	18809126 	beq	r3,r2,11084f60 <_dtoa_r+0x2cc>
11084d1c:	000d883a 	mov	r6,zero
11084d20:	000f883a 	mov	r7,zero
11084d24:	a009883a 	mov	r4,r20
11084d28:	a80b883a 	mov	r5,r21
11084d2c:	dd001215 	stw	r20,72(sp)
11084d30:	dd401315 	stw	r21,76(sp)
11084d34:	108b2c00 	call	1108b2c0 <__nedf2>
11084d38:	1000171e 	bne	r2,zero,11084d98 <_dtoa_r+0x104>
11084d3c:	d9802717 	ldw	r6,156(sp)
11084d40:	00800044 	movi	r2,1
11084d44:	30800015 	stw	r2,0(r6)
11084d48:	d8802917 	ldw	r2,164(sp)
11084d4c:	10029b26 	beq	r2,zero,110857bc <_dtoa_r+0xb28>
11084d50:	d9002917 	ldw	r4,164(sp)
11084d54:	00844274 	movhi	r2,4361
11084d58:	10bd7e44 	addi	r2,r2,-2567
11084d5c:	10ffffc4 	addi	r3,r2,-1
11084d60:	20800015 	stw	r2,0(r4)
11084d64:	1805883a 	mov	r2,r3
11084d68:	dfc02517 	ldw	ra,148(sp)
11084d6c:	df002417 	ldw	fp,144(sp)
11084d70:	ddc02317 	ldw	r23,140(sp)
11084d74:	dd802217 	ldw	r22,136(sp)
11084d78:	dd402117 	ldw	r21,132(sp)
11084d7c:	dd002017 	ldw	r20,128(sp)
11084d80:	dcc01f17 	ldw	r19,124(sp)
11084d84:	dc801e17 	ldw	r18,120(sp)
11084d88:	dc401d17 	ldw	r17,116(sp)
11084d8c:	dc001c17 	ldw	r16,112(sp)
11084d90:	dec02604 	addi	sp,sp,152
11084d94:	f800283a 	ret
11084d98:	d9001617 	ldw	r4,88(sp)
11084d9c:	d9401217 	ldw	r5,72(sp)
11084da0:	d8800104 	addi	r2,sp,4
11084da4:	a80d883a 	mov	r6,r21
11084da8:	d9c00204 	addi	r7,sp,8
11084dac:	d8800015 	stw	r2,0(sp)
11084db0:	10884640 	call	11088464 <__d2b>
11084db4:	d8800715 	stw	r2,28(sp)
11084db8:	a804d53a 	srli	r2,r21,20
11084dbc:	1101ffcc 	andi	r4,r2,2047
11084dc0:	20008626 	beq	r4,zero,11084fdc <_dtoa_r+0x348>
11084dc4:	d8c01217 	ldw	r3,72(sp)
11084dc8:	00800434 	movhi	r2,16
11084dcc:	10bfffc4 	addi	r2,r2,-1
11084dd0:	ddc00117 	ldw	r23,4(sp)
11084dd4:	a884703a 	and	r2,r21,r2
11084dd8:	1811883a 	mov	r8,r3
11084ddc:	124ffc34 	orhi	r9,r2,16368
11084de0:	25bf0044 	addi	r22,r4,-1023
11084de4:	d8000815 	stw	zero,32(sp)
11084de8:	0005883a 	mov	r2,zero
11084dec:	00cffe34 	movhi	r3,16376
11084df0:	480b883a 	mov	r5,r9
11084df4:	4009883a 	mov	r4,r8
11084df8:	180f883a 	mov	r7,r3
11084dfc:	100d883a 	mov	r6,r2
11084e00:	108ab280 	call	1108ab28 <__subdf3>
11084e04:	0218dbf4 	movhi	r8,25455
11084e08:	4210d844 	addi	r8,r8,17249
11084e0c:	024ff4f4 	movhi	r9,16339
11084e10:	4a61e9c4 	addi	r9,r9,-30809
11084e14:	480f883a 	mov	r7,r9
11084e18:	400d883a 	mov	r6,r8
11084e1c:	180b883a 	mov	r5,r3
11084e20:	1009883a 	mov	r4,r2
11084e24:	108ac1c0 	call	1108ac1c <__muldf3>
11084e28:	0222d874 	movhi	r8,35681
11084e2c:	42322cc4 	addi	r8,r8,-14157
11084e30:	024ff1f4 	movhi	r9,16327
11084e34:	4a628a04 	addi	r9,r9,-30168
11084e38:	480f883a 	mov	r7,r9
11084e3c:	400d883a 	mov	r6,r8
11084e40:	180b883a 	mov	r5,r3
11084e44:	1009883a 	mov	r4,r2
11084e48:	108aba80 	call	1108aba8 <__adddf3>
11084e4c:	b009883a 	mov	r4,r22
11084e50:	1021883a 	mov	r16,r2
11084e54:	1823883a 	mov	r17,r3
11084e58:	108b4e00 	call	1108b4e0 <__floatsidf>
11084e5c:	021427f4 	movhi	r8,20639
11084e60:	421e7ec4 	addi	r8,r8,31227
11084e64:	024ff4f4 	movhi	r9,16339
11084e68:	4a5104c4 	addi	r9,r9,17427
11084e6c:	480f883a 	mov	r7,r9
11084e70:	400d883a 	mov	r6,r8
11084e74:	180b883a 	mov	r5,r3
11084e78:	1009883a 	mov	r4,r2
11084e7c:	108ac1c0 	call	1108ac1c <__muldf3>
11084e80:	180f883a 	mov	r7,r3
11084e84:	880b883a 	mov	r5,r17
11084e88:	100d883a 	mov	r6,r2
11084e8c:	8009883a 	mov	r4,r16
11084e90:	108aba80 	call	1108aba8 <__adddf3>
11084e94:	1009883a 	mov	r4,r2
11084e98:	180b883a 	mov	r5,r3
11084e9c:	1021883a 	mov	r16,r2
11084ea0:	1823883a 	mov	r17,r3
11084ea4:	108b5d80 	call	1108b5d8 <__fixdfsi>
11084ea8:	000d883a 	mov	r6,zero
11084eac:	000f883a 	mov	r7,zero
11084eb0:	8009883a 	mov	r4,r16
11084eb4:	880b883a 	mov	r5,r17
11084eb8:	d8800d15 	stw	r2,52(sp)
11084ebc:	108b4580 	call	1108b458 <__ltdf2>
11084ec0:	10031716 	blt	r2,zero,11085b20 <_dtoa_r+0xe8c>
11084ec4:	d8c00d17 	ldw	r3,52(sp)
11084ec8:	00800584 	movi	r2,22
11084ecc:	10c1482e 	bgeu	r2,r3,110853f0 <_dtoa_r+0x75c>
11084ed0:	01000044 	movi	r4,1
11084ed4:	d9000c15 	stw	r4,48(sp)
11084ed8:	bd85c83a 	sub	r2,r23,r22
11084edc:	11bfffc4 	addi	r6,r2,-1
11084ee0:	30030b16 	blt	r6,zero,11085b10 <_dtoa_r+0xe7c>
11084ee4:	d9800a15 	stw	r6,40(sp)
11084ee8:	d8001115 	stw	zero,68(sp)
11084eec:	d8c00d17 	ldw	r3,52(sp)
11084ef0:	1802ff16 	blt	r3,zero,11085af0 <_dtoa_r+0xe5c>
11084ef4:	d9000a17 	ldw	r4,40(sp)
11084ef8:	d8c00915 	stw	r3,36(sp)
11084efc:	d8001015 	stw	zero,64(sp)
11084f00:	20c9883a 	add	r4,r4,r3
11084f04:	d9000a15 	stw	r4,40(sp)
11084f08:	d9001717 	ldw	r4,92(sp)
11084f0c:	00800244 	movi	r2,9
11084f10:	11004636 	bltu	r2,r4,1108502c <_dtoa_r+0x398>
11084f14:	00800144 	movi	r2,5
11084f18:	11020416 	blt	r2,r4,1108572c <_dtoa_r+0xa98>
11084f1c:	04400044 	movi	r17,1
11084f20:	d8c01717 	ldw	r3,92(sp)
11084f24:	00800144 	movi	r2,5
11084f28:	10c1ed36 	bltu	r2,r3,110856e0 <_dtoa_r+0xa4c>
11084f2c:	18c5883a 	add	r2,r3,r3
11084f30:	1085883a 	add	r2,r2,r2
11084f34:	00c44234 	movhi	r3,4360
11084f38:	18d3d204 	addi	r3,r3,20296
11084f3c:	10c5883a 	add	r2,r2,r3
11084f40:	11000017 	ldw	r4,0(r2)
11084f44:	2000683a 	jmp	r4
11084f48:	11085034 	orhi	r4,r2,8512
11084f4c:	11085034 	orhi	r4,r2,8512
11084f50:	11085a34 	orhi	r4,r2,8552
11084f54:	11085a0c 	andi	r4,r2,8552
11084f58:	11085a50 	cmplti	r4,r2,8553
11084f5c:	11085a5c 	xori	r4,r2,8553
11084f60:	d9002717 	ldw	r4,156(sp)
11084f64:	0089c3c4 	movi	r2,9999
11084f68:	20800015 	stw	r2,0(r4)
11084f6c:	a0001026 	beq	r20,zero,11084fb0 <_dtoa_r+0x31c>
11084f70:	00c44274 	movhi	r3,4361
11084f74:	18fd8a04 	addi	r3,r3,-2520
11084f78:	d9802917 	ldw	r6,164(sp)
11084f7c:	303f7926 	beq	r6,zero,11084d64 <_dtoa_r+0xd0>
11084f80:	188000c7 	ldb	r2,3(r3)
11084f84:	190000c4 	addi	r4,r3,3
11084f88:	1000101e 	bne	r2,zero,11084fcc <_dtoa_r+0x338>
11084f8c:	d8802917 	ldw	r2,164(sp)
11084f90:	11000015 	stw	r4,0(r2)
11084f94:	003f7306 	br	11084d64 <_dtoa_r+0xd0>
11084f98:	00a00034 	movhi	r2,32768
11084f9c:	10bfffc4 	addi	r2,r2,-1
11084fa0:	00c00044 	movi	r3,1
11084fa4:	88aa703a 	and	r21,r17,r2
11084fa8:	90c00015 	stw	r3,0(r18)
11084fac:	003f5806 	br	11084d10 <_dtoa_r+0x7c>
11084fb0:	00800434 	movhi	r2,16
11084fb4:	10bfffc4 	addi	r2,r2,-1
11084fb8:	a884703a 	and	r2,r21,r2
11084fbc:	103fec1e 	bne	r2,zero,11084f70 <_dtoa_r+0x2dc>
11084fc0:	00c44274 	movhi	r3,4361
11084fc4:	18fd8704 	addi	r3,r3,-2532
11084fc8:	003feb06 	br	11084f78 <_dtoa_r+0x2e4>
11084fcc:	d8802917 	ldw	r2,164(sp)
11084fd0:	19000204 	addi	r4,r3,8
11084fd4:	11000015 	stw	r4,0(r2)
11084fd8:	003f6206 	br	11084d64 <_dtoa_r+0xd0>
11084fdc:	ddc00117 	ldw	r23,4(sp)
11084fe0:	d8800217 	ldw	r2,8(sp)
11084fe4:	01000804 	movi	r4,32
11084fe8:	b8c10c84 	addi	r3,r23,1074
11084fec:	18a3883a 	add	r17,r3,r2
11084ff0:	2441b80e 	bge	r4,r17,110856d4 <_dtoa_r+0xa40>
11084ff4:	00c01004 	movi	r3,64
11084ff8:	1c47c83a 	sub	r3,r3,r17
11084ffc:	88bff804 	addi	r2,r17,-32
11085000:	a8c6983a 	sll	r3,r21,r3
11085004:	a084d83a 	srl	r2,r20,r2
11085008:	1888b03a 	or	r4,r3,r2
1108500c:	108b6b00 	call	1108b6b0 <__floatunsidf>
11085010:	1011883a 	mov	r8,r2
11085014:	00bf8434 	movhi	r2,65040
11085018:	01000044 	movi	r4,1
1108501c:	10d3883a 	add	r9,r2,r3
11085020:	8dbef344 	addi	r22,r17,-1075
11085024:	d9000815 	stw	r4,32(sp)
11085028:	003f6f06 	br	11084de8 <_dtoa_r+0x154>
1108502c:	d8001715 	stw	zero,92(sp)
11085030:	04400044 	movi	r17,1
11085034:	00bfffc4 	movi	r2,-1
11085038:	00c00044 	movi	r3,1
1108503c:	d8800e15 	stw	r2,56(sp)
11085040:	d8002615 	stw	zero,152(sp)
11085044:	d8800f15 	stw	r2,60(sp)
11085048:	d8c00b15 	stw	r3,44(sp)
1108504c:	1021883a 	mov	r16,r2
11085050:	d8801617 	ldw	r2,88(sp)
11085054:	10001115 	stw	zero,68(r2)
11085058:	d8801617 	ldw	r2,88(sp)
1108505c:	11401117 	ldw	r5,68(r2)
11085060:	1009883a 	mov	r4,r2
11085064:	10883a80 	call	110883a8 <_Balloc>
11085068:	d8c01617 	ldw	r3,88(sp)
1108506c:	d8800515 	stw	r2,20(sp)
11085070:	18801015 	stw	r2,64(r3)
11085074:	00800384 	movi	r2,14
11085078:	14006836 	bltu	r2,r16,1108521c <_dtoa_r+0x588>
1108507c:	8805003a 	cmpeq	r2,r17,zero
11085080:	1000661e 	bne	r2,zero,1108521c <_dtoa_r+0x588>
11085084:	d9000d17 	ldw	r4,52(sp)
11085088:	0102300e 	bge	zero,r4,1108594c <_dtoa_r+0xcb8>
1108508c:	208003cc 	andi	r2,r4,15
11085090:	100490fa 	slli	r2,r2,3
11085094:	2025d13a 	srai	r18,r4,4
11085098:	00c44274 	movhi	r3,4361
1108509c:	18fd9c04 	addi	r3,r3,-2448
110850a0:	10c5883a 	add	r2,r2,r3
110850a4:	90c0040c 	andi	r3,r18,16
110850a8:	14000017 	ldw	r16,0(r2)
110850ac:	14400117 	ldw	r17,4(r2)
110850b0:	18036a1e 	bne	r3,zero,11085e5c <_dtoa_r+0x11c8>
110850b4:	05800084 	movi	r22,2
110850b8:	90001026 	beq	r18,zero,110850fc <_dtoa_r+0x468>
110850bc:	04c44274 	movhi	r19,4361
110850c0:	9cfdce04 	addi	r19,r19,-2248
110850c4:	9080004c 	andi	r2,r18,1
110850c8:	1005003a 	cmpeq	r2,r2,zero
110850cc:	1000081e 	bne	r2,zero,110850f0 <_dtoa_r+0x45c>
110850d0:	99800017 	ldw	r6,0(r19)
110850d4:	99c00117 	ldw	r7,4(r19)
110850d8:	880b883a 	mov	r5,r17
110850dc:	8009883a 	mov	r4,r16
110850e0:	108ac1c0 	call	1108ac1c <__muldf3>
110850e4:	1021883a 	mov	r16,r2
110850e8:	b5800044 	addi	r22,r22,1
110850ec:	1823883a 	mov	r17,r3
110850f0:	9025d07a 	srai	r18,r18,1
110850f4:	9cc00204 	addi	r19,r19,8
110850f8:	903ff21e 	bne	r18,zero,110850c4 <_dtoa_r+0x430>
110850fc:	a80b883a 	mov	r5,r21
11085100:	a009883a 	mov	r4,r20
11085104:	880f883a 	mov	r7,r17
11085108:	800d883a 	mov	r6,r16
1108510c:	108afe00 	call	1108afe0 <__divdf3>
11085110:	1029883a 	mov	r20,r2
11085114:	182b883a 	mov	r21,r3
11085118:	d8c00c17 	ldw	r3,48(sp)
1108511c:	1805003a 	cmpeq	r2,r3,zero
11085120:	1000081e 	bne	r2,zero,11085144 <_dtoa_r+0x4b0>
11085124:	0005883a 	mov	r2,zero
11085128:	00cffc34 	movhi	r3,16368
1108512c:	180f883a 	mov	r7,r3
11085130:	a009883a 	mov	r4,r20
11085134:	a80b883a 	mov	r5,r21
11085138:	100d883a 	mov	r6,r2
1108513c:	108b4580 	call	1108b458 <__ltdf2>
11085140:	1003fe16 	blt	r2,zero,1108613c <_dtoa_r+0x14a8>
11085144:	b009883a 	mov	r4,r22
11085148:	108b4e00 	call	1108b4e0 <__floatsidf>
1108514c:	180b883a 	mov	r5,r3
11085150:	1009883a 	mov	r4,r2
11085154:	a00d883a 	mov	r6,r20
11085158:	a80f883a 	mov	r7,r21
1108515c:	108ac1c0 	call	1108ac1c <__muldf3>
11085160:	0011883a 	mov	r8,zero
11085164:	02500734 	movhi	r9,16412
11085168:	1009883a 	mov	r4,r2
1108516c:	180b883a 	mov	r5,r3
11085170:	480f883a 	mov	r7,r9
11085174:	400d883a 	mov	r6,r8
11085178:	108aba80 	call	1108aba8 <__adddf3>
1108517c:	d9000f17 	ldw	r4,60(sp)
11085180:	102d883a 	mov	r22,r2
11085184:	00bf3034 	movhi	r2,64704
11085188:	18b9883a 	add	fp,r3,r2
1108518c:	e02f883a 	mov	r23,fp
11085190:	20028f1e 	bne	r4,zero,11085bd0 <_dtoa_r+0xf3c>
11085194:	0005883a 	mov	r2,zero
11085198:	00d00534 	movhi	r3,16404
1108519c:	a009883a 	mov	r4,r20
110851a0:	a80b883a 	mov	r5,r21
110851a4:	180f883a 	mov	r7,r3
110851a8:	100d883a 	mov	r6,r2
110851ac:	108ab280 	call	1108ab28 <__subdf3>
110851b0:	1009883a 	mov	r4,r2
110851b4:	e00f883a 	mov	r7,fp
110851b8:	180b883a 	mov	r5,r3
110851bc:	b00d883a 	mov	r6,r22
110851c0:	1025883a 	mov	r18,r2
110851c4:	1827883a 	mov	r19,r3
110851c8:	108b3480 	call	1108b348 <__gtdf2>
110851cc:	00834f16 	blt	zero,r2,11085f0c <_dtoa_r+0x1278>
110851d0:	e0e0003c 	xorhi	r3,fp,32768
110851d4:	9009883a 	mov	r4,r18
110851d8:	980b883a 	mov	r5,r19
110851dc:	180f883a 	mov	r7,r3
110851e0:	b00d883a 	mov	r6,r22
110851e4:	108b4580 	call	1108b458 <__ltdf2>
110851e8:	1000080e 	bge	r2,zero,1108520c <_dtoa_r+0x578>
110851ec:	0027883a 	mov	r19,zero
110851f0:	0025883a 	mov	r18,zero
110851f4:	d8802617 	ldw	r2,152(sp)
110851f8:	df000517 	ldw	fp,20(sp)
110851fc:	d8000615 	stw	zero,24(sp)
11085200:	0084303a 	nor	r2,zero,r2
11085204:	d8800d15 	stw	r2,52(sp)
11085208:	00019b06 	br	11085878 <_dtoa_r+0xbe4>
1108520c:	d9801217 	ldw	r6,72(sp)
11085210:	d8801317 	ldw	r2,76(sp)
11085214:	3029883a 	mov	r20,r6
11085218:	102b883a 	mov	r21,r2
1108521c:	d8c00217 	ldw	r3,8(sp)
11085220:	18008516 	blt	r3,zero,11085438 <_dtoa_r+0x7a4>
11085224:	d9000d17 	ldw	r4,52(sp)
11085228:	00800384 	movi	r2,14
1108522c:	11008216 	blt	r2,r4,11085438 <_dtoa_r+0x7a4>
11085230:	200490fa 	slli	r2,r4,3
11085234:	d9802617 	ldw	r6,152(sp)
11085238:	00c44274 	movhi	r3,4361
1108523c:	18fd9c04 	addi	r3,r3,-2448
11085240:	10c5883a 	add	r2,r2,r3
11085244:	14800017 	ldw	r18,0(r2)
11085248:	14c00117 	ldw	r19,4(r2)
1108524c:	30031e16 	blt	r6,zero,11085ec8 <_dtoa_r+0x1234>
11085250:	d9000517 	ldw	r4,20(sp)
11085254:	d8c00f17 	ldw	r3,60(sp)
11085258:	a823883a 	mov	r17,r21
1108525c:	a021883a 	mov	r16,r20
11085260:	192b883a 	add	r21,r3,r4
11085264:	2039883a 	mov	fp,r4
11085268:	00000f06 	br	110852a8 <_dtoa_r+0x614>
1108526c:	0005883a 	mov	r2,zero
11085270:	00d00934 	movhi	r3,16420
11085274:	5009883a 	mov	r4,r10
11085278:	580b883a 	mov	r5,r11
1108527c:	180f883a 	mov	r7,r3
11085280:	100d883a 	mov	r6,r2
11085284:	108ac1c0 	call	1108ac1c <__muldf3>
11085288:	180b883a 	mov	r5,r3
1108528c:	000d883a 	mov	r6,zero
11085290:	000f883a 	mov	r7,zero
11085294:	1009883a 	mov	r4,r2
11085298:	1021883a 	mov	r16,r2
1108529c:	1823883a 	mov	r17,r3
110852a0:	108b2c00 	call	1108b2c0 <__nedf2>
110852a4:	10004526 	beq	r2,zero,110853bc <_dtoa_r+0x728>
110852a8:	900d883a 	mov	r6,r18
110852ac:	980f883a 	mov	r7,r19
110852b0:	8009883a 	mov	r4,r16
110852b4:	880b883a 	mov	r5,r17
110852b8:	108afe00 	call	1108afe0 <__divdf3>
110852bc:	180b883a 	mov	r5,r3
110852c0:	1009883a 	mov	r4,r2
110852c4:	108b5d80 	call	1108b5d8 <__fixdfsi>
110852c8:	1009883a 	mov	r4,r2
110852cc:	1029883a 	mov	r20,r2
110852d0:	108b4e00 	call	1108b4e0 <__floatsidf>
110852d4:	180f883a 	mov	r7,r3
110852d8:	9009883a 	mov	r4,r18
110852dc:	980b883a 	mov	r5,r19
110852e0:	100d883a 	mov	r6,r2
110852e4:	108ac1c0 	call	1108ac1c <__muldf3>
110852e8:	180f883a 	mov	r7,r3
110852ec:	880b883a 	mov	r5,r17
110852f0:	8009883a 	mov	r4,r16
110852f4:	100d883a 	mov	r6,r2
110852f8:	108ab280 	call	1108ab28 <__subdf3>
110852fc:	1015883a 	mov	r10,r2
11085300:	a0800c04 	addi	r2,r20,48
11085304:	e0800005 	stb	r2,0(fp)
11085308:	e7000044 	addi	fp,fp,1
1108530c:	1817883a 	mov	r11,r3
11085310:	e57fd61e 	bne	fp,r21,1108526c <_dtoa_r+0x5d8>
11085314:	500d883a 	mov	r6,r10
11085318:	180f883a 	mov	r7,r3
1108531c:	5009883a 	mov	r4,r10
11085320:	180b883a 	mov	r5,r3
11085324:	108aba80 	call	1108aba8 <__adddf3>
11085328:	100d883a 	mov	r6,r2
1108532c:	9009883a 	mov	r4,r18
11085330:	980b883a 	mov	r5,r19
11085334:	180f883a 	mov	r7,r3
11085338:	1021883a 	mov	r16,r2
1108533c:	1823883a 	mov	r17,r3
11085340:	108b4580 	call	1108b458 <__ltdf2>
11085344:	10000816 	blt	r2,zero,11085368 <_dtoa_r+0x6d4>
11085348:	980b883a 	mov	r5,r19
1108534c:	800d883a 	mov	r6,r16
11085350:	880f883a 	mov	r7,r17
11085354:	9009883a 	mov	r4,r18
11085358:	108b2380 	call	1108b238 <__eqdf2>
1108535c:	1000171e 	bne	r2,zero,110853bc <_dtoa_r+0x728>
11085360:	a080004c 	andi	r2,r20,1
11085364:	10001526 	beq	r2,zero,110853bc <_dtoa_r+0x728>
11085368:	d8800d17 	ldw	r2,52(sp)
1108536c:	d8800415 	stw	r2,16(sp)
11085370:	e009883a 	mov	r4,fp
11085374:	213fffc4 	addi	r4,r4,-1
11085378:	20c00007 	ldb	r3,0(r4)
1108537c:	00800e44 	movi	r2,57
11085380:	1880081e 	bne	r3,r2,110853a4 <_dtoa_r+0x710>
11085384:	d8800517 	ldw	r2,20(sp)
11085388:	113ffa1e 	bne	r2,r4,11085374 <_dtoa_r+0x6e0>
1108538c:	d8c00417 	ldw	r3,16(sp)
11085390:	d9800517 	ldw	r6,20(sp)
11085394:	00800c04 	movi	r2,48
11085398:	18c00044 	addi	r3,r3,1
1108539c:	d8c00415 	stw	r3,16(sp)
110853a0:	30800005 	stb	r2,0(r6)
110853a4:	20800003 	ldbu	r2,0(r4)
110853a8:	d8c00417 	ldw	r3,16(sp)
110853ac:	27000044 	addi	fp,r4,1
110853b0:	10800044 	addi	r2,r2,1
110853b4:	d8c00d15 	stw	r3,52(sp)
110853b8:	20800005 	stb	r2,0(r4)
110853bc:	d9001617 	ldw	r4,88(sp)
110853c0:	d9400717 	ldw	r5,28(sp)
110853c4:	1087e280 	call	11087e28 <_Bfree>
110853c8:	e0000005 	stb	zero,0(fp)
110853cc:	d9800d17 	ldw	r6,52(sp)
110853d0:	d8c02717 	ldw	r3,156(sp)
110853d4:	d9002917 	ldw	r4,164(sp)
110853d8:	30800044 	addi	r2,r6,1
110853dc:	18800015 	stw	r2,0(r3)
110853e0:	20029c26 	beq	r4,zero,11085e54 <_dtoa_r+0x11c0>
110853e4:	d8c00517 	ldw	r3,20(sp)
110853e8:	27000015 	stw	fp,0(r4)
110853ec:	003e5d06 	br	11084d64 <_dtoa_r+0xd0>
110853f0:	d9800d17 	ldw	r6,52(sp)
110853f4:	00c44274 	movhi	r3,4361
110853f8:	18fd9c04 	addi	r3,r3,-2448
110853fc:	d9001217 	ldw	r4,72(sp)
11085400:	300490fa 	slli	r2,r6,3
11085404:	d9401317 	ldw	r5,76(sp)
11085408:	10c5883a 	add	r2,r2,r3
1108540c:	12000017 	ldw	r8,0(r2)
11085410:	12400117 	ldw	r9,4(r2)
11085414:	400d883a 	mov	r6,r8
11085418:	480f883a 	mov	r7,r9
1108541c:	108b4580 	call	1108b458 <__ltdf2>
11085420:	1000030e 	bge	r2,zero,11085430 <_dtoa_r+0x79c>
11085424:	d8800d17 	ldw	r2,52(sp)
11085428:	10bfffc4 	addi	r2,r2,-1
1108542c:	d8800d15 	stw	r2,52(sp)
11085430:	d8000c15 	stw	zero,48(sp)
11085434:	003ea806 	br	11084ed8 <_dtoa_r+0x244>
11085438:	d9000b17 	ldw	r4,44(sp)
1108543c:	202cc03a 	cmpne	r22,r4,zero
11085440:	b000c71e 	bne	r22,zero,11085760 <_dtoa_r+0xacc>
11085444:	dc001117 	ldw	r16,68(sp)
11085448:	dc801017 	ldw	r18,64(sp)
1108544c:	0027883a 	mov	r19,zero
11085450:	04000b0e 	bge	zero,r16,11085480 <_dtoa_r+0x7ec>
11085454:	d8c00a17 	ldw	r3,40(sp)
11085458:	00c0090e 	bge	zero,r3,11085480 <_dtoa_r+0x7ec>
1108545c:	8005883a 	mov	r2,r16
11085460:	1c011316 	blt	r3,r16,110858b0 <_dtoa_r+0xc1c>
11085464:	d9000a17 	ldw	r4,40(sp)
11085468:	d9801117 	ldw	r6,68(sp)
1108546c:	80a1c83a 	sub	r16,r16,r2
11085470:	2089c83a 	sub	r4,r4,r2
11085474:	308dc83a 	sub	r6,r6,r2
11085478:	d9000a15 	stw	r4,40(sp)
1108547c:	d9801115 	stw	r6,68(sp)
11085480:	d8801017 	ldw	r2,64(sp)
11085484:	0080150e 	bge	zero,r2,110854dc <_dtoa_r+0x848>
11085488:	d8c00b17 	ldw	r3,44(sp)
1108548c:	1805003a 	cmpeq	r2,r3,zero
11085490:	1001c91e 	bne	r2,zero,11085bb8 <_dtoa_r+0xf24>
11085494:	04800e0e 	bge	zero,r18,110854d0 <_dtoa_r+0x83c>
11085498:	d9001617 	ldw	r4,88(sp)
1108549c:	980b883a 	mov	r5,r19
110854a0:	900d883a 	mov	r6,r18
110854a4:	1088bdc0 	call	11088bdc <__pow5mult>
110854a8:	d9001617 	ldw	r4,88(sp)
110854ac:	d9800717 	ldw	r6,28(sp)
110854b0:	100b883a 	mov	r5,r2
110854b4:	1027883a 	mov	r19,r2
110854b8:	10888b80 	call	110888b8 <__multiply>
110854bc:	d9001617 	ldw	r4,88(sp)
110854c0:	d9400717 	ldw	r5,28(sp)
110854c4:	1023883a 	mov	r17,r2
110854c8:	1087e280 	call	11087e28 <_Bfree>
110854cc:	dc400715 	stw	r17,28(sp)
110854d0:	d9001017 	ldw	r4,64(sp)
110854d4:	248dc83a 	sub	r6,r4,r18
110854d8:	30010e1e 	bne	r6,zero,11085914 <_dtoa_r+0xc80>
110854dc:	d9001617 	ldw	r4,88(sp)
110854e0:	04400044 	movi	r17,1
110854e4:	880b883a 	mov	r5,r17
110854e8:	1088aa00 	call	11088aa0 <__i2b>
110854ec:	d9800917 	ldw	r6,36(sp)
110854f0:	1025883a 	mov	r18,r2
110854f4:	0180040e 	bge	zero,r6,11085508 <_dtoa_r+0x874>
110854f8:	d9001617 	ldw	r4,88(sp)
110854fc:	100b883a 	mov	r5,r2
11085500:	1088bdc0 	call	11088bdc <__pow5mult>
11085504:	1025883a 	mov	r18,r2
11085508:	d8801717 	ldw	r2,92(sp)
1108550c:	8880f30e 	bge	r17,r2,110858dc <_dtoa_r+0xc48>
11085510:	0023883a 	mov	r17,zero
11085514:	d9800917 	ldw	r6,36(sp)
11085518:	30019e1e 	bne	r6,zero,11085b94 <_dtoa_r+0xf00>
1108551c:	00c00044 	movi	r3,1
11085520:	d9000a17 	ldw	r4,40(sp)
11085524:	20c5883a 	add	r2,r4,r3
11085528:	10c007cc 	andi	r3,r2,31
1108552c:	1800841e 	bne	r3,zero,11085740 <_dtoa_r+0xaac>
11085530:	00800704 	movi	r2,28
11085534:	d9000a17 	ldw	r4,40(sp)
11085538:	d9801117 	ldw	r6,68(sp)
1108553c:	80a1883a 	add	r16,r16,r2
11085540:	2089883a 	add	r4,r4,r2
11085544:	308d883a 	add	r6,r6,r2
11085548:	d9000a15 	stw	r4,40(sp)
1108554c:	d9801115 	stw	r6,68(sp)
11085550:	d8801117 	ldw	r2,68(sp)
11085554:	0080050e 	bge	zero,r2,1108556c <_dtoa_r+0x8d8>
11085558:	d9400717 	ldw	r5,28(sp)
1108555c:	d9001617 	ldw	r4,88(sp)
11085560:	100d883a 	mov	r6,r2
11085564:	108876c0 	call	1108876c <__lshift>
11085568:	d8800715 	stw	r2,28(sp)
1108556c:	d8c00a17 	ldw	r3,40(sp)
11085570:	00c0050e 	bge	zero,r3,11085588 <_dtoa_r+0x8f4>
11085574:	d9001617 	ldw	r4,88(sp)
11085578:	900b883a 	mov	r5,r18
1108557c:	180d883a 	mov	r6,r3
11085580:	108876c0 	call	1108876c <__lshift>
11085584:	1025883a 	mov	r18,r2
11085588:	d9000c17 	ldw	r4,48(sp)
1108558c:	2005003a 	cmpeq	r2,r4,zero
11085590:	10016f26 	beq	r2,zero,11085b50 <_dtoa_r+0xebc>
11085594:	d9000f17 	ldw	r4,60(sp)
11085598:	0102170e 	bge	zero,r4,11085df8 <_dtoa_r+0x1164>
1108559c:	d9800b17 	ldw	r6,44(sp)
110855a0:	3005003a 	cmpeq	r2,r6,zero
110855a4:	1000881e 	bne	r2,zero,110857c8 <_dtoa_r+0xb34>
110855a8:	0400050e 	bge	zero,r16,110855c0 <_dtoa_r+0x92c>
110855ac:	d9001617 	ldw	r4,88(sp)
110855b0:	980b883a 	mov	r5,r19
110855b4:	800d883a 	mov	r6,r16
110855b8:	108876c0 	call	1108876c <__lshift>
110855bc:	1027883a 	mov	r19,r2
110855c0:	8804c03a 	cmpne	r2,r17,zero
110855c4:	1002541e 	bne	r2,zero,11085f18 <_dtoa_r+0x1284>
110855c8:	980b883a 	mov	r5,r19
110855cc:	dd800517 	ldw	r22,20(sp)
110855d0:	dcc00615 	stw	r19,24(sp)
110855d4:	a700004c 	andi	fp,r20,1
110855d8:	2827883a 	mov	r19,r5
110855dc:	d9000717 	ldw	r4,28(sp)
110855e0:	900b883a 	mov	r5,r18
110855e4:	1084a7c0 	call	11084a7c <quorem>
110855e8:	d9000717 	ldw	r4,28(sp)
110855ec:	d9400617 	ldw	r5,24(sp)
110855f0:	1023883a 	mov	r17,r2
110855f4:	8dc00c04 	addi	r23,r17,48
110855f8:	1087f840 	call	11087f84 <__mcmp>
110855fc:	d9001617 	ldw	r4,88(sp)
11085600:	900b883a 	mov	r5,r18
11085604:	980d883a 	mov	r6,r19
11085608:	1029883a 	mov	r20,r2
1108560c:	10885e00 	call	110885e0 <__mdiff>
11085610:	102b883a 	mov	r21,r2
11085614:	10800317 	ldw	r2,12(r2)
11085618:	1001281e 	bne	r2,zero,11085abc <_dtoa_r+0xe28>
1108561c:	d9000717 	ldw	r4,28(sp)
11085620:	a80b883a 	mov	r5,r21
11085624:	1087f840 	call	11087f84 <__mcmp>
11085628:	d9001617 	ldw	r4,88(sp)
1108562c:	1021883a 	mov	r16,r2
11085630:	a80b883a 	mov	r5,r21
11085634:	1087e280 	call	11087e28 <_Bfree>
11085638:	8000041e 	bne	r16,zero,1108564c <_dtoa_r+0x9b8>
1108563c:	d8801717 	ldw	r2,92(sp)
11085640:	1000021e 	bne	r2,zero,1108564c <_dtoa_r+0x9b8>
11085644:	e004c03a 	cmpne	r2,fp,zero
11085648:	10011726 	beq	r2,zero,11085aa8 <_dtoa_r+0xe14>
1108564c:	a0010616 	blt	r20,zero,11085a68 <_dtoa_r+0xdd4>
11085650:	a000041e 	bne	r20,zero,11085664 <_dtoa_r+0x9d0>
11085654:	d8c01717 	ldw	r3,92(sp)
11085658:	1800021e 	bne	r3,zero,11085664 <_dtoa_r+0x9d0>
1108565c:	e004c03a 	cmpne	r2,fp,zero
11085660:	10010126 	beq	r2,zero,11085a68 <_dtoa_r+0xdd4>
11085664:	04023d16 	blt	zero,r16,11085f5c <_dtoa_r+0x12c8>
11085668:	b5c00005 	stb	r23,0(r22)
1108566c:	d9800517 	ldw	r6,20(sp)
11085670:	d9000f17 	ldw	r4,60(sp)
11085674:	b5800044 	addi	r22,r22,1
11085678:	3105883a 	add	r2,r6,r4
1108567c:	b0806526 	beq	r22,r2,11085814 <_dtoa_r+0xb80>
11085680:	d9400717 	ldw	r5,28(sp)
11085684:	d9001617 	ldw	r4,88(sp)
11085688:	01800284 	movi	r6,10
1108568c:	000f883a 	mov	r7,zero
11085690:	1088adc0 	call	11088adc <__multadd>
11085694:	d8800715 	stw	r2,28(sp)
11085698:	d8800617 	ldw	r2,24(sp)
1108569c:	14c10c26 	beq	r2,r19,11085ad0 <_dtoa_r+0xe3c>
110856a0:	d9400617 	ldw	r5,24(sp)
110856a4:	d9001617 	ldw	r4,88(sp)
110856a8:	01800284 	movi	r6,10
110856ac:	000f883a 	mov	r7,zero
110856b0:	1088adc0 	call	11088adc <__multadd>
110856b4:	d9001617 	ldw	r4,88(sp)
110856b8:	980b883a 	mov	r5,r19
110856bc:	01800284 	movi	r6,10
110856c0:	000f883a 	mov	r7,zero
110856c4:	d8800615 	stw	r2,24(sp)
110856c8:	1088adc0 	call	11088adc <__multadd>
110856cc:	1027883a 	mov	r19,r2
110856d0:	003fc206 	br	110855dc <_dtoa_r+0x948>
110856d4:	2445c83a 	sub	r2,r4,r17
110856d8:	a088983a 	sll	r4,r20,r2
110856dc:	003e4b06 	br	1108500c <_dtoa_r+0x378>
110856e0:	01bfffc4 	movi	r6,-1
110856e4:	00800044 	movi	r2,1
110856e8:	d9800e15 	stw	r6,56(sp)
110856ec:	d9800f15 	stw	r6,60(sp)
110856f0:	d8800b15 	stw	r2,44(sp)
110856f4:	d8c01617 	ldw	r3,88(sp)
110856f8:	008005c4 	movi	r2,23
110856fc:	18001115 	stw	zero,68(r3)
11085700:	1580082e 	bgeu	r2,r22,11085724 <_dtoa_r+0xa90>
11085704:	00c00104 	movi	r3,4
11085708:	0009883a 	mov	r4,zero
1108570c:	18c7883a 	add	r3,r3,r3
11085710:	18800504 	addi	r2,r3,20
11085714:	21000044 	addi	r4,r4,1
11085718:	b0bffc2e 	bgeu	r22,r2,1108570c <_dtoa_r+0xa78>
1108571c:	d9801617 	ldw	r6,88(sp)
11085720:	31001115 	stw	r4,68(r6)
11085724:	dc000f17 	ldw	r16,60(sp)
11085728:	003e4b06 	br	11085058 <_dtoa_r+0x3c4>
1108572c:	d9801717 	ldw	r6,92(sp)
11085730:	0023883a 	mov	r17,zero
11085734:	31bfff04 	addi	r6,r6,-4
11085738:	d9801715 	stw	r6,92(sp)
1108573c:	003df806 	br	11084f20 <_dtoa_r+0x28c>
11085740:	00800804 	movi	r2,32
11085744:	10c9c83a 	sub	r4,r2,r3
11085748:	00c00104 	movi	r3,4
1108574c:	19005a16 	blt	r3,r4,110858b8 <_dtoa_r+0xc24>
11085750:	008000c4 	movi	r2,3
11085754:	113f7e16 	blt	r2,r4,11085550 <_dtoa_r+0x8bc>
11085758:	20800704 	addi	r2,r4,28
1108575c:	003f7506 	br	11085534 <_dtoa_r+0x8a0>
11085760:	d9801717 	ldw	r6,92(sp)
11085764:	00800044 	movi	r2,1
11085768:	1180a10e 	bge	r2,r6,110859f0 <_dtoa_r+0xd5c>
1108576c:	d9800f17 	ldw	r6,60(sp)
11085770:	d8c01017 	ldw	r3,64(sp)
11085774:	30bfffc4 	addi	r2,r6,-1
11085778:	1881c616 	blt	r3,r2,11085e94 <_dtoa_r+0x1200>
1108577c:	18a5c83a 	sub	r18,r3,r2
11085780:	d8800f17 	ldw	r2,60(sp)
11085784:	10026216 	blt	r2,zero,11086110 <_dtoa_r+0x147c>
11085788:	dc001117 	ldw	r16,68(sp)
1108578c:	1007883a 	mov	r3,r2
11085790:	d9800a17 	ldw	r6,40(sp)
11085794:	d8801117 	ldw	r2,68(sp)
11085798:	d9001617 	ldw	r4,88(sp)
1108579c:	30cd883a 	add	r6,r6,r3
110857a0:	10c5883a 	add	r2,r2,r3
110857a4:	01400044 	movi	r5,1
110857a8:	d9800a15 	stw	r6,40(sp)
110857ac:	d8801115 	stw	r2,68(sp)
110857b0:	1088aa00 	call	11088aa0 <__i2b>
110857b4:	1027883a 	mov	r19,r2
110857b8:	003f2506 	br	11085450 <_dtoa_r+0x7bc>
110857bc:	00c44274 	movhi	r3,4361
110857c0:	18fd7e04 	addi	r3,r3,-2568
110857c4:	003d6706 	br	11084d64 <_dtoa_r+0xd0>
110857c8:	dd800517 	ldw	r22,20(sp)
110857cc:	04000044 	movi	r16,1
110857d0:	00000706 	br	110857f0 <_dtoa_r+0xb5c>
110857d4:	d9400717 	ldw	r5,28(sp)
110857d8:	d9001617 	ldw	r4,88(sp)
110857dc:	01800284 	movi	r6,10
110857e0:	000f883a 	mov	r7,zero
110857e4:	1088adc0 	call	11088adc <__multadd>
110857e8:	d8800715 	stw	r2,28(sp)
110857ec:	84000044 	addi	r16,r16,1
110857f0:	d9000717 	ldw	r4,28(sp)
110857f4:	900b883a 	mov	r5,r18
110857f8:	1084a7c0 	call	11084a7c <quorem>
110857fc:	15c00c04 	addi	r23,r2,48
11085800:	b5c00005 	stb	r23,0(r22)
11085804:	d8c00f17 	ldw	r3,60(sp)
11085808:	b5800044 	addi	r22,r22,1
1108580c:	80fff116 	blt	r16,r3,110857d4 <_dtoa_r+0xb40>
11085810:	d8000615 	stw	zero,24(sp)
11085814:	d9400717 	ldw	r5,28(sp)
11085818:	d9001617 	ldw	r4,88(sp)
1108581c:	01800044 	movi	r6,1
11085820:	108876c0 	call	1108876c <__lshift>
11085824:	1009883a 	mov	r4,r2
11085828:	900b883a 	mov	r5,r18
1108582c:	d8800715 	stw	r2,28(sp)
11085830:	1087f840 	call	11087f84 <__mcmp>
11085834:	00803c0e 	bge	zero,r2,11085928 <_dtoa_r+0xc94>
11085838:	b009883a 	mov	r4,r22
1108583c:	213fffc4 	addi	r4,r4,-1
11085840:	21400003 	ldbu	r5,0(r4)
11085844:	00800e44 	movi	r2,57
11085848:	28c03fcc 	andi	r3,r5,255
1108584c:	18c0201c 	xori	r3,r3,128
11085850:	18ffe004 	addi	r3,r3,-128
11085854:	1881981e 	bne	r3,r2,11085eb8 <_dtoa_r+0x1224>
11085858:	d9800517 	ldw	r6,20(sp)
1108585c:	21bff71e 	bne	r4,r6,1108583c <_dtoa_r+0xba8>
11085860:	d8800d17 	ldw	r2,52(sp)
11085864:	37000044 	addi	fp,r6,1
11085868:	10800044 	addi	r2,r2,1
1108586c:	d8800d15 	stw	r2,52(sp)
11085870:	00800c44 	movi	r2,49
11085874:	30800005 	stb	r2,0(r6)
11085878:	d9001617 	ldw	r4,88(sp)
1108587c:	900b883a 	mov	r5,r18
11085880:	1087e280 	call	11087e28 <_Bfree>
11085884:	983ecd26 	beq	r19,zero,110853bc <_dtoa_r+0x728>
11085888:	d8c00617 	ldw	r3,24(sp)
1108588c:	18000426 	beq	r3,zero,110858a0 <_dtoa_r+0xc0c>
11085890:	1cc00326 	beq	r3,r19,110858a0 <_dtoa_r+0xc0c>
11085894:	d9001617 	ldw	r4,88(sp)
11085898:	180b883a 	mov	r5,r3
1108589c:	1087e280 	call	11087e28 <_Bfree>
110858a0:	d9001617 	ldw	r4,88(sp)
110858a4:	980b883a 	mov	r5,r19
110858a8:	1087e280 	call	11087e28 <_Bfree>
110858ac:	003ec306 	br	110853bc <_dtoa_r+0x728>
110858b0:	1805883a 	mov	r2,r3
110858b4:	003eeb06 	br	11085464 <_dtoa_r+0x7d0>
110858b8:	d9800a17 	ldw	r6,40(sp)
110858bc:	d8c01117 	ldw	r3,68(sp)
110858c0:	20bfff04 	addi	r2,r4,-4
110858c4:	308d883a 	add	r6,r6,r2
110858c8:	1887883a 	add	r3,r3,r2
110858cc:	80a1883a 	add	r16,r16,r2
110858d0:	d9800a15 	stw	r6,40(sp)
110858d4:	d8c01115 	stw	r3,68(sp)
110858d8:	003f1d06 	br	11085550 <_dtoa_r+0x8bc>
110858dc:	a03f0c1e 	bne	r20,zero,11085510 <_dtoa_r+0x87c>
110858e0:	00800434 	movhi	r2,16
110858e4:	10bfffc4 	addi	r2,r2,-1
110858e8:	a884703a 	and	r2,r21,r2
110858ec:	103f081e 	bne	r2,zero,11085510 <_dtoa_r+0x87c>
110858f0:	a89ffc2c 	andhi	r2,r21,32752
110858f4:	103f0626 	beq	r2,zero,11085510 <_dtoa_r+0x87c>
110858f8:	d8c01117 	ldw	r3,68(sp)
110858fc:	d9000a17 	ldw	r4,40(sp)
11085900:	18c00044 	addi	r3,r3,1
11085904:	21000044 	addi	r4,r4,1
11085908:	d8c01115 	stw	r3,68(sp)
1108590c:	d9000a15 	stw	r4,40(sp)
11085910:	003f0006 	br	11085514 <_dtoa_r+0x880>
11085914:	d9400717 	ldw	r5,28(sp)
11085918:	d9001617 	ldw	r4,88(sp)
1108591c:	1088bdc0 	call	11088bdc <__pow5mult>
11085920:	d8800715 	stw	r2,28(sp)
11085924:	003eed06 	br	110854dc <_dtoa_r+0x848>
11085928:	1000021e 	bne	r2,zero,11085934 <_dtoa_r+0xca0>
1108592c:	b880004c 	andi	r2,r23,1
11085930:	103fc11e 	bne	r2,zero,11085838 <_dtoa_r+0xba4>
11085934:	b5bfffc4 	addi	r22,r22,-1
11085938:	b0c00007 	ldb	r3,0(r22)
1108593c:	00800c04 	movi	r2,48
11085940:	18bffc26 	beq	r3,r2,11085934 <_dtoa_r+0xca0>
11085944:	b7000044 	addi	fp,r22,1
11085948:	003fcb06 	br	11085878 <_dtoa_r+0xbe4>
1108594c:	d9800d17 	ldw	r6,52(sp)
11085950:	018fc83a 	sub	r7,zero,r6
11085954:	3801f726 	beq	r7,zero,11086134 <_dtoa_r+0x14a0>
11085958:	398003cc 	andi	r6,r7,15
1108595c:	300c90fa 	slli	r6,r6,3
11085960:	01444274 	movhi	r5,4361
11085964:	297d9c04 	addi	r5,r5,-2448
11085968:	d9001217 	ldw	r4,72(sp)
1108596c:	314d883a 	add	r6,r6,r5
11085970:	30c00117 	ldw	r3,4(r6)
11085974:	30800017 	ldw	r2,0(r6)
11085978:	d9401317 	ldw	r5,76(sp)
1108597c:	3821d13a 	srai	r16,r7,4
11085980:	100d883a 	mov	r6,r2
11085984:	180f883a 	mov	r7,r3
11085988:	108ac1c0 	call	1108ac1c <__muldf3>
1108598c:	1011883a 	mov	r8,r2
11085990:	1813883a 	mov	r9,r3
11085994:	1029883a 	mov	r20,r2
11085998:	182b883a 	mov	r21,r3
1108599c:	8001e526 	beq	r16,zero,11086134 <_dtoa_r+0x14a0>
110859a0:	05800084 	movi	r22,2
110859a4:	04444274 	movhi	r17,4361
110859a8:	8c7dce04 	addi	r17,r17,-2248
110859ac:	8080004c 	andi	r2,r16,1
110859b0:	1005003a 	cmpeq	r2,r2,zero
110859b4:	1000081e 	bne	r2,zero,110859d8 <_dtoa_r+0xd44>
110859b8:	89800017 	ldw	r6,0(r17)
110859bc:	89c00117 	ldw	r7,4(r17)
110859c0:	480b883a 	mov	r5,r9
110859c4:	4009883a 	mov	r4,r8
110859c8:	108ac1c0 	call	1108ac1c <__muldf3>
110859cc:	1011883a 	mov	r8,r2
110859d0:	b5800044 	addi	r22,r22,1
110859d4:	1813883a 	mov	r9,r3
110859d8:	8021d07a 	srai	r16,r16,1
110859dc:	8c400204 	addi	r17,r17,8
110859e0:	803ff21e 	bne	r16,zero,110859ac <_dtoa_r+0xd18>
110859e4:	4029883a 	mov	r20,r8
110859e8:	482b883a 	mov	r21,r9
110859ec:	003dca06 	br	11085118 <_dtoa_r+0x484>
110859f0:	d9000817 	ldw	r4,32(sp)
110859f4:	2005003a 	cmpeq	r2,r4,zero
110859f8:	1001f61e 	bne	r2,zero,110861d4 <_dtoa_r+0x1540>
110859fc:	dc001117 	ldw	r16,68(sp)
11085a00:	dc801017 	ldw	r18,64(sp)
11085a04:	18c10cc4 	addi	r3,r3,1075
11085a08:	003f6106 	br	11085790 <_dtoa_r+0xafc>
11085a0c:	d8000b15 	stw	zero,44(sp)
11085a10:	d9802617 	ldw	r6,152(sp)
11085a14:	d8c00d17 	ldw	r3,52(sp)
11085a18:	30800044 	addi	r2,r6,1
11085a1c:	18ad883a 	add	r22,r3,r2
11085a20:	b13fffc4 	addi	r4,r22,-1
11085a24:	d9000e15 	stw	r4,56(sp)
11085a28:	0581f60e 	bge	zero,r22,11086204 <_dtoa_r+0x1570>
11085a2c:	dd800f15 	stw	r22,60(sp)
11085a30:	003f3006 	br	110856f4 <_dtoa_r+0xa60>
11085a34:	d8000b15 	stw	zero,44(sp)
11085a38:	d9002617 	ldw	r4,152(sp)
11085a3c:	0101eb0e 	bge	zero,r4,110861ec <_dtoa_r+0x1558>
11085a40:	202d883a 	mov	r22,r4
11085a44:	d9000e15 	stw	r4,56(sp)
11085a48:	d9000f15 	stw	r4,60(sp)
11085a4c:	003f2906 	br	110856f4 <_dtoa_r+0xa60>
11085a50:	01800044 	movi	r6,1
11085a54:	d9800b15 	stw	r6,44(sp)
11085a58:	003ff706 	br	11085a38 <_dtoa_r+0xda4>
11085a5c:	01000044 	movi	r4,1
11085a60:	d9000b15 	stw	r4,44(sp)
11085a64:	003fea06 	br	11085a10 <_dtoa_r+0xd7c>
11085a68:	04000c0e 	bge	zero,r16,11085a9c <_dtoa_r+0xe08>
11085a6c:	d9400717 	ldw	r5,28(sp)
11085a70:	d9001617 	ldw	r4,88(sp)
11085a74:	01800044 	movi	r6,1
11085a78:	108876c0 	call	1108876c <__lshift>
11085a7c:	1009883a 	mov	r4,r2
11085a80:	900b883a 	mov	r5,r18
11085a84:	d8800715 	stw	r2,28(sp)
11085a88:	1087f840 	call	11087f84 <__mcmp>
11085a8c:	0081e00e 	bge	zero,r2,11086210 <_dtoa_r+0x157c>
11085a90:	bdc00044 	addi	r23,r23,1
11085a94:	00800e84 	movi	r2,58
11085a98:	b881a226 	beq	r23,r2,11086124 <_dtoa_r+0x1490>
11085a9c:	b7000044 	addi	fp,r22,1
11085aa0:	b5c00005 	stb	r23,0(r22)
11085aa4:	003f7406 	br	11085878 <_dtoa_r+0xbe4>
11085aa8:	00800e44 	movi	r2,57
11085aac:	b8819d26 	beq	r23,r2,11086124 <_dtoa_r+0x1490>
11085ab0:	053ffa0e 	bge	zero,r20,11085a9c <_dtoa_r+0xe08>
11085ab4:	8dc00c44 	addi	r23,r17,49
11085ab8:	003ff806 	br	11085a9c <_dtoa_r+0xe08>
11085abc:	d9001617 	ldw	r4,88(sp)
11085ac0:	a80b883a 	mov	r5,r21
11085ac4:	04000044 	movi	r16,1
11085ac8:	1087e280 	call	11087e28 <_Bfree>
11085acc:	003edf06 	br	1108564c <_dtoa_r+0x9b8>
11085ad0:	d9001617 	ldw	r4,88(sp)
11085ad4:	980b883a 	mov	r5,r19
11085ad8:	01800284 	movi	r6,10
11085adc:	000f883a 	mov	r7,zero
11085ae0:	1088adc0 	call	11088adc <__multadd>
11085ae4:	1027883a 	mov	r19,r2
11085ae8:	d8800615 	stw	r2,24(sp)
11085aec:	003ebb06 	br	110855dc <_dtoa_r+0x948>
11085af0:	d9801117 	ldw	r6,68(sp)
11085af4:	d8800d17 	ldw	r2,52(sp)
11085af8:	d8000915 	stw	zero,36(sp)
11085afc:	308dc83a 	sub	r6,r6,r2
11085b00:	0087c83a 	sub	r3,zero,r2
11085b04:	d9801115 	stw	r6,68(sp)
11085b08:	d8c01015 	stw	r3,64(sp)
11085b0c:	003cfe06 	br	11084f08 <_dtoa_r+0x274>
11085b10:	018dc83a 	sub	r6,zero,r6
11085b14:	d9801115 	stw	r6,68(sp)
11085b18:	d8000a15 	stw	zero,40(sp)
11085b1c:	003cf306 	br	11084eec <_dtoa_r+0x258>
11085b20:	d9000d17 	ldw	r4,52(sp)
11085b24:	108b4e00 	call	1108b4e0 <__floatsidf>
11085b28:	880b883a 	mov	r5,r17
11085b2c:	8009883a 	mov	r4,r16
11085b30:	180f883a 	mov	r7,r3
11085b34:	100d883a 	mov	r6,r2
11085b38:	108b2c00 	call	1108b2c0 <__nedf2>
11085b3c:	103ce126 	beq	r2,zero,11084ec4 <_dtoa_r+0x230>
11085b40:	d9800d17 	ldw	r6,52(sp)
11085b44:	31bfffc4 	addi	r6,r6,-1
11085b48:	d9800d15 	stw	r6,52(sp)
11085b4c:	003cdd06 	br	11084ec4 <_dtoa_r+0x230>
11085b50:	d9000717 	ldw	r4,28(sp)
11085b54:	900b883a 	mov	r5,r18
11085b58:	1087f840 	call	11087f84 <__mcmp>
11085b5c:	103e8d0e 	bge	r2,zero,11085594 <_dtoa_r+0x900>
11085b60:	d9400717 	ldw	r5,28(sp)
11085b64:	d9001617 	ldw	r4,88(sp)
11085b68:	01800284 	movi	r6,10
11085b6c:	000f883a 	mov	r7,zero
11085b70:	1088adc0 	call	11088adc <__multadd>
11085b74:	d9800d17 	ldw	r6,52(sp)
11085b78:	d8800715 	stw	r2,28(sp)
11085b7c:	31bfffc4 	addi	r6,r6,-1
11085b80:	d9800d15 	stw	r6,52(sp)
11085b84:	b001a71e 	bne	r22,zero,11086224 <_dtoa_r+0x1590>
11085b88:	d8800e17 	ldw	r2,56(sp)
11085b8c:	d8800f15 	stw	r2,60(sp)
11085b90:	003e8006 	br	11085594 <_dtoa_r+0x900>
11085b94:	90800417 	ldw	r2,16(r18)
11085b98:	1085883a 	add	r2,r2,r2
11085b9c:	1085883a 	add	r2,r2,r2
11085ba0:	1485883a 	add	r2,r2,r18
11085ba4:	11000417 	ldw	r4,16(r2)
11085ba8:	1087e500 	call	11087e50 <__hi0bits>
11085bac:	00c00804 	movi	r3,32
11085bb0:	1887c83a 	sub	r3,r3,r2
11085bb4:	003e5a06 	br	11085520 <_dtoa_r+0x88c>
11085bb8:	d9400717 	ldw	r5,28(sp)
11085bbc:	d9801017 	ldw	r6,64(sp)
11085bc0:	d9001617 	ldw	r4,88(sp)
11085bc4:	1088bdc0 	call	11088bdc <__pow5mult>
11085bc8:	d8800715 	stw	r2,28(sp)
11085bcc:	003e4306 	br	110854dc <_dtoa_r+0x848>
11085bd0:	d9800f17 	ldw	r6,60(sp)
11085bd4:	d8800d17 	ldw	r2,52(sp)
11085bd8:	d9800315 	stw	r6,12(sp)
11085bdc:	d8800415 	stw	r2,16(sp)
11085be0:	d8c00b17 	ldw	r3,44(sp)
11085be4:	1805003a 	cmpeq	r2,r3,zero
11085be8:	1000e21e 	bne	r2,zero,11085f74 <_dtoa_r+0x12e0>
11085bec:	d9000317 	ldw	r4,12(sp)
11085bf0:	0005883a 	mov	r2,zero
11085bf4:	00cff834 	movhi	r3,16352
11085bf8:	200c90fa 	slli	r6,r4,3
11085bfc:	01044274 	movhi	r4,4361
11085c00:	213d9c04 	addi	r4,r4,-2448
11085c04:	180b883a 	mov	r5,r3
11085c08:	310d883a 	add	r6,r6,r4
11085c0c:	327fff17 	ldw	r9,-4(r6)
11085c10:	323ffe17 	ldw	r8,-8(r6)
11085c14:	1009883a 	mov	r4,r2
11085c18:	480f883a 	mov	r7,r9
11085c1c:	400d883a 	mov	r6,r8
11085c20:	108afe00 	call	1108afe0 <__divdf3>
11085c24:	180b883a 	mov	r5,r3
11085c28:	b00d883a 	mov	r6,r22
11085c2c:	b80f883a 	mov	r7,r23
11085c30:	1009883a 	mov	r4,r2
11085c34:	108ab280 	call	1108ab28 <__subdf3>
11085c38:	a80b883a 	mov	r5,r21
11085c3c:	a009883a 	mov	r4,r20
11085c40:	d8c01915 	stw	r3,100(sp)
11085c44:	d8801815 	stw	r2,96(sp)
11085c48:	108b5d80 	call	1108b5d8 <__fixdfsi>
11085c4c:	1009883a 	mov	r4,r2
11085c50:	1027883a 	mov	r19,r2
11085c54:	108b4e00 	call	1108b4e0 <__floatsidf>
11085c58:	a80b883a 	mov	r5,r21
11085c5c:	a009883a 	mov	r4,r20
11085c60:	180f883a 	mov	r7,r3
11085c64:	100d883a 	mov	r6,r2
11085c68:	108ab280 	call	1108ab28 <__subdf3>
11085c6c:	d9801817 	ldw	r6,96(sp)
11085c70:	1823883a 	mov	r17,r3
11085c74:	d8801415 	stw	r2,80(sp)
11085c78:	302d883a 	mov	r22,r6
11085c7c:	d9800517 	ldw	r6,20(sp)
11085c80:	9cc00c04 	addi	r19,r19,48
11085c84:	dc401515 	stw	r17,84(sp)
11085c88:	d8c01917 	ldw	r3,100(sp)
11085c8c:	34c00005 	stb	r19,0(r6)
11085c90:	d8800517 	ldw	r2,20(sp)
11085c94:	d9401917 	ldw	r5,100(sp)
11085c98:	d9801417 	ldw	r6,80(sp)
11085c9c:	b009883a 	mov	r4,r22
11085ca0:	880f883a 	mov	r7,r17
11085ca4:	182f883a 	mov	r23,r3
11085ca8:	17000044 	addi	fp,r2,1
11085cac:	108b3480 	call	1108b348 <__gtdf2>
11085cb0:	00804e16 	blt	zero,r2,11085dec <_dtoa_r+0x1158>
11085cb4:	d9801417 	ldw	r6,80(sp)
11085cb8:	0005883a 	mov	r2,zero
11085cbc:	00cffc34 	movhi	r3,16368
11085cc0:	180b883a 	mov	r5,r3
11085cc4:	880f883a 	mov	r7,r17
11085cc8:	1009883a 	mov	r4,r2
11085ccc:	108ab280 	call	1108ab28 <__subdf3>
11085cd0:	d9401917 	ldw	r5,100(sp)
11085cd4:	180f883a 	mov	r7,r3
11085cd8:	b009883a 	mov	r4,r22
11085cdc:	100d883a 	mov	r6,r2
11085ce0:	108b3480 	call	1108b348 <__gtdf2>
11085ce4:	00bda216 	blt	zero,r2,11085370 <_dtoa_r+0x6dc>
11085ce8:	d8c00317 	ldw	r3,12(sp)
11085cec:	00800044 	movi	r2,1
11085cf0:	10c01216 	blt	r2,r3,11085d3c <_dtoa_r+0x10a8>
11085cf4:	003d4506 	br	1108520c <_dtoa_r+0x578>
11085cf8:	d9801417 	ldw	r6,80(sp)
11085cfc:	0005883a 	mov	r2,zero
11085d00:	00cffc34 	movhi	r3,16368
11085d04:	180b883a 	mov	r5,r3
11085d08:	880f883a 	mov	r7,r17
11085d0c:	1009883a 	mov	r4,r2
11085d10:	108ab280 	call	1108ab28 <__subdf3>
11085d14:	d9c01b17 	ldw	r7,108(sp)
11085d18:	180b883a 	mov	r5,r3
11085d1c:	1009883a 	mov	r4,r2
11085d20:	b00d883a 	mov	r6,r22
11085d24:	108b4580 	call	1108b458 <__ltdf2>
11085d28:	103d9116 	blt	r2,zero,11085370 <_dtoa_r+0x6dc>
11085d2c:	d9800517 	ldw	r6,20(sp)
11085d30:	d9000317 	ldw	r4,12(sp)
11085d34:	3105883a 	add	r2,r6,r4
11085d38:	e0bd3426 	beq	fp,r2,1108520c <_dtoa_r+0x578>
11085d3c:	04500934 	movhi	r17,16420
11085d40:	0021883a 	mov	r16,zero
11085d44:	b80b883a 	mov	r5,r23
11085d48:	b009883a 	mov	r4,r22
11085d4c:	800d883a 	mov	r6,r16
11085d50:	880f883a 	mov	r7,r17
11085d54:	108ac1c0 	call	1108ac1c <__muldf3>
11085d58:	d9401517 	ldw	r5,84(sp)
11085d5c:	d9001417 	ldw	r4,80(sp)
11085d60:	880f883a 	mov	r7,r17
11085d64:	000d883a 	mov	r6,zero
11085d68:	d8801a15 	stw	r2,104(sp)
11085d6c:	d8c01b15 	stw	r3,108(sp)
11085d70:	108ac1c0 	call	1108ac1c <__muldf3>
11085d74:	180b883a 	mov	r5,r3
11085d78:	1009883a 	mov	r4,r2
11085d7c:	1823883a 	mov	r17,r3
11085d80:	1021883a 	mov	r16,r2
11085d84:	108b5d80 	call	1108b5d8 <__fixdfsi>
11085d88:	1009883a 	mov	r4,r2
11085d8c:	102b883a 	mov	r21,r2
11085d90:	108b4e00 	call	1108b4e0 <__floatsidf>
11085d94:	880b883a 	mov	r5,r17
11085d98:	8009883a 	mov	r4,r16
11085d9c:	180f883a 	mov	r7,r3
11085da0:	100d883a 	mov	r6,r2
11085da4:	108ab280 	call	1108ab28 <__subdf3>
11085da8:	1021883a 	mov	r16,r2
11085dac:	d9001b17 	ldw	r4,108(sp)
11085db0:	1823883a 	mov	r17,r3
11085db4:	dc001415 	stw	r16,80(sp)
11085db8:	ad400c04 	addi	r21,r21,48
11085dbc:	dc401515 	stw	r17,84(sp)
11085dc0:	d8801a17 	ldw	r2,104(sp)
11085dc4:	e5400005 	stb	r21,0(fp)
11085dc8:	202f883a 	mov	r23,r4
11085dcc:	d9c01b17 	ldw	r7,108(sp)
11085dd0:	d9001417 	ldw	r4,80(sp)
11085dd4:	880b883a 	mov	r5,r17
11085dd8:	100d883a 	mov	r6,r2
11085ddc:	102d883a 	mov	r22,r2
11085de0:	e7000044 	addi	fp,fp,1
11085de4:	108b4580 	call	1108b458 <__ltdf2>
11085de8:	103fc30e 	bge	r2,zero,11085cf8 <_dtoa_r+0x1064>
11085dec:	d9000417 	ldw	r4,16(sp)
11085df0:	d9000d15 	stw	r4,52(sp)
11085df4:	003d7106 	br	110853bc <_dtoa_r+0x728>
11085df8:	d9801717 	ldw	r6,92(sp)
11085dfc:	00800084 	movi	r2,2
11085e00:	11bde60e 	bge	r2,r6,1108559c <_dtoa_r+0x908>
11085e04:	203cfb1e 	bne	r4,zero,110851f4 <_dtoa_r+0x560>
11085e08:	d9001617 	ldw	r4,88(sp)
11085e0c:	900b883a 	mov	r5,r18
11085e10:	01800144 	movi	r6,5
11085e14:	000f883a 	mov	r7,zero
11085e18:	1088adc0 	call	11088adc <__multadd>
11085e1c:	d9000717 	ldw	r4,28(sp)
11085e20:	100b883a 	mov	r5,r2
11085e24:	1025883a 	mov	r18,r2
11085e28:	1087f840 	call	11087f84 <__mcmp>
11085e2c:	00bcf10e 	bge	zero,r2,110851f4 <_dtoa_r+0x560>
11085e30:	d8c00d17 	ldw	r3,52(sp)
11085e34:	d9000517 	ldw	r4,20(sp)
11085e38:	d8000615 	stw	zero,24(sp)
11085e3c:	18c00044 	addi	r3,r3,1
11085e40:	d8c00d15 	stw	r3,52(sp)
11085e44:	00800c44 	movi	r2,49
11085e48:	27000044 	addi	fp,r4,1
11085e4c:	20800005 	stb	r2,0(r4)
11085e50:	003e8906 	br	11085878 <_dtoa_r+0xbe4>
11085e54:	d8c00517 	ldw	r3,20(sp)
11085e58:	003bc206 	br	11084d64 <_dtoa_r+0xd0>
11085e5c:	01844274 	movhi	r6,4361
11085e60:	31bdce04 	addi	r6,r6,-2248
11085e64:	30c00917 	ldw	r3,36(r6)
11085e68:	30800817 	ldw	r2,32(r6)
11085e6c:	d9001217 	ldw	r4,72(sp)
11085e70:	d9401317 	ldw	r5,76(sp)
11085e74:	180f883a 	mov	r7,r3
11085e78:	100d883a 	mov	r6,r2
11085e7c:	108afe00 	call	1108afe0 <__divdf3>
11085e80:	948003cc 	andi	r18,r18,15
11085e84:	058000c4 	movi	r22,3
11085e88:	1029883a 	mov	r20,r2
11085e8c:	182b883a 	mov	r21,r3
11085e90:	003c8906 	br	110850b8 <_dtoa_r+0x424>
11085e94:	d9001017 	ldw	r4,64(sp)
11085e98:	d9800917 	ldw	r6,36(sp)
11085e9c:	0025883a 	mov	r18,zero
11085ea0:	1105c83a 	sub	r2,r2,r4
11085ea4:	2089883a 	add	r4,r4,r2
11085ea8:	308d883a 	add	r6,r6,r2
11085eac:	d9001015 	stw	r4,64(sp)
11085eb0:	d9800915 	stw	r6,36(sp)
11085eb4:	003e3206 	br	11085780 <_dtoa_r+0xaec>
11085eb8:	28800044 	addi	r2,r5,1
11085ebc:	27000044 	addi	fp,r4,1
11085ec0:	20800005 	stb	r2,0(r4)
11085ec4:	003e6c06 	br	11085878 <_dtoa_r+0xbe4>
11085ec8:	d8800f17 	ldw	r2,60(sp)
11085ecc:	00bce016 	blt	zero,r2,11085250 <_dtoa_r+0x5bc>
11085ed0:	d9800f17 	ldw	r6,60(sp)
11085ed4:	303cc51e 	bne	r6,zero,110851ec <_dtoa_r+0x558>
11085ed8:	0005883a 	mov	r2,zero
11085edc:	00d00534 	movhi	r3,16404
11085ee0:	980b883a 	mov	r5,r19
11085ee4:	180f883a 	mov	r7,r3
11085ee8:	9009883a 	mov	r4,r18
11085eec:	100d883a 	mov	r6,r2
11085ef0:	108ac1c0 	call	1108ac1c <__muldf3>
11085ef4:	180b883a 	mov	r5,r3
11085ef8:	a80f883a 	mov	r7,r21
11085efc:	1009883a 	mov	r4,r2
11085f00:	a00d883a 	mov	r6,r20
11085f04:	108b3d00 	call	1108b3d0 <__gedf2>
11085f08:	103cb80e 	bge	r2,zero,110851ec <_dtoa_r+0x558>
11085f0c:	0027883a 	mov	r19,zero
11085f10:	0025883a 	mov	r18,zero
11085f14:	003fc606 	br	11085e30 <_dtoa_r+0x119c>
11085f18:	99400117 	ldw	r5,4(r19)
11085f1c:	d9001617 	ldw	r4,88(sp)
11085f20:	10883a80 	call	110883a8 <_Balloc>
11085f24:	99800417 	ldw	r6,16(r19)
11085f28:	11000304 	addi	r4,r2,12
11085f2c:	99400304 	addi	r5,r19,12
11085f30:	318d883a 	add	r6,r6,r6
11085f34:	318d883a 	add	r6,r6,r6
11085f38:	31800204 	addi	r6,r6,8
11085f3c:	1023883a 	mov	r17,r2
11085f40:	1087c100 	call	11087c10 <memcpy>
11085f44:	d9001617 	ldw	r4,88(sp)
11085f48:	880b883a 	mov	r5,r17
11085f4c:	01800044 	movi	r6,1
11085f50:	108876c0 	call	1108876c <__lshift>
11085f54:	100b883a 	mov	r5,r2
11085f58:	003d9c06 	br	110855cc <_dtoa_r+0x938>
11085f5c:	00800e44 	movi	r2,57
11085f60:	b8807026 	beq	r23,r2,11086124 <_dtoa_r+0x1490>
11085f64:	b8800044 	addi	r2,r23,1
11085f68:	b7000044 	addi	fp,r22,1
11085f6c:	b0800005 	stb	r2,0(r22)
11085f70:	003e4106 	br	11085878 <_dtoa_r+0xbe4>
11085f74:	d8800317 	ldw	r2,12(sp)
11085f78:	01844274 	movhi	r6,4361
11085f7c:	31bd9c04 	addi	r6,r6,-2448
11085f80:	b009883a 	mov	r4,r22
11085f84:	100e90fa 	slli	r7,r2,3
11085f88:	b80b883a 	mov	r5,r23
11085f8c:	398f883a 	add	r7,r7,r6
11085f90:	38bffe17 	ldw	r2,-8(r7)
11085f94:	d9800517 	ldw	r6,20(sp)
11085f98:	38ffff17 	ldw	r3,-4(r7)
11085f9c:	37000044 	addi	fp,r6,1
11085fa0:	180f883a 	mov	r7,r3
11085fa4:	100d883a 	mov	r6,r2
11085fa8:	108ac1c0 	call	1108ac1c <__muldf3>
11085fac:	a80b883a 	mov	r5,r21
11085fb0:	a009883a 	mov	r4,r20
11085fb4:	182f883a 	mov	r23,r3
11085fb8:	102d883a 	mov	r22,r2
11085fbc:	108b5d80 	call	1108b5d8 <__fixdfsi>
11085fc0:	1009883a 	mov	r4,r2
11085fc4:	1027883a 	mov	r19,r2
11085fc8:	108b4e00 	call	1108b4e0 <__floatsidf>
11085fcc:	a80b883a 	mov	r5,r21
11085fd0:	a009883a 	mov	r4,r20
11085fd4:	180f883a 	mov	r7,r3
11085fd8:	100d883a 	mov	r6,r2
11085fdc:	108ab280 	call	1108ab28 <__subdf3>
11085fe0:	180b883a 	mov	r5,r3
11085fe4:	d8c00517 	ldw	r3,20(sp)
11085fe8:	9cc00c04 	addi	r19,r19,48
11085fec:	1009883a 	mov	r4,r2
11085ff0:	1cc00005 	stb	r19,0(r3)
11085ff4:	2021883a 	mov	r16,r4
11085ff8:	d9000317 	ldw	r4,12(sp)
11085ffc:	00800044 	movi	r2,1
11086000:	2823883a 	mov	r17,r5
11086004:	20802226 	beq	r4,r2,11086090 <_dtoa_r+0x13fc>
11086008:	1029883a 	mov	r20,r2
1108600c:	0005883a 	mov	r2,zero
11086010:	00d00934 	movhi	r3,16420
11086014:	180f883a 	mov	r7,r3
11086018:	100d883a 	mov	r6,r2
1108601c:	880b883a 	mov	r5,r17
11086020:	8009883a 	mov	r4,r16
11086024:	108ac1c0 	call	1108ac1c <__muldf3>
11086028:	180b883a 	mov	r5,r3
1108602c:	1009883a 	mov	r4,r2
11086030:	1823883a 	mov	r17,r3
11086034:	1021883a 	mov	r16,r2
11086038:	108b5d80 	call	1108b5d8 <__fixdfsi>
1108603c:	1009883a 	mov	r4,r2
11086040:	102b883a 	mov	r21,r2
11086044:	108b4e00 	call	1108b4e0 <__floatsidf>
11086048:	880b883a 	mov	r5,r17
1108604c:	8009883a 	mov	r4,r16
11086050:	180f883a 	mov	r7,r3
11086054:	100d883a 	mov	r6,r2
11086058:	108ab280 	call	1108ab28 <__subdf3>
1108605c:	180b883a 	mov	r5,r3
11086060:	d8c00517 	ldw	r3,20(sp)
11086064:	1009883a 	mov	r4,r2
11086068:	ad400c04 	addi	r21,r21,48
1108606c:	1d05883a 	add	r2,r3,r20
11086070:	15400005 	stb	r21,0(r2)
11086074:	2021883a 	mov	r16,r4
11086078:	d9000317 	ldw	r4,12(sp)
1108607c:	a5000044 	addi	r20,r20,1
11086080:	2823883a 	mov	r17,r5
11086084:	a13fe11e 	bne	r20,r4,1108600c <_dtoa_r+0x1378>
11086088:	e505883a 	add	r2,fp,r20
1108608c:	173fffc4 	addi	fp,r2,-1
11086090:	0025883a 	mov	r18,zero
11086094:	04cff834 	movhi	r19,16352
11086098:	b009883a 	mov	r4,r22
1108609c:	b80b883a 	mov	r5,r23
110860a0:	900d883a 	mov	r6,r18
110860a4:	980f883a 	mov	r7,r19
110860a8:	108aba80 	call	1108aba8 <__adddf3>
110860ac:	180b883a 	mov	r5,r3
110860b0:	1009883a 	mov	r4,r2
110860b4:	800d883a 	mov	r6,r16
110860b8:	880f883a 	mov	r7,r17
110860bc:	108b4580 	call	1108b458 <__ltdf2>
110860c0:	103cab16 	blt	r2,zero,11085370 <_dtoa_r+0x6dc>
110860c4:	0009883a 	mov	r4,zero
110860c8:	980b883a 	mov	r5,r19
110860cc:	b80f883a 	mov	r7,r23
110860d0:	b00d883a 	mov	r6,r22
110860d4:	108ab280 	call	1108ab28 <__subdf3>
110860d8:	180b883a 	mov	r5,r3
110860dc:	880f883a 	mov	r7,r17
110860e0:	1009883a 	mov	r4,r2
110860e4:	800d883a 	mov	r6,r16
110860e8:	108b3480 	call	1108b348 <__gtdf2>
110860ec:	00bc470e 	bge	zero,r2,1108520c <_dtoa_r+0x578>
110860f0:	00c00c04 	movi	r3,48
110860f4:	e73fffc4 	addi	fp,fp,-1
110860f8:	e0800007 	ldb	r2,0(fp)
110860fc:	10fffd26 	beq	r2,r3,110860f4 <_dtoa_r+0x1460>
11086100:	d9800417 	ldw	r6,16(sp)
11086104:	e7000044 	addi	fp,fp,1
11086108:	d9800d15 	stw	r6,52(sp)
1108610c:	003cab06 	br	110853bc <_dtoa_r+0x728>
11086110:	d8c00f17 	ldw	r3,60(sp)
11086114:	d9001117 	ldw	r4,68(sp)
11086118:	20e1c83a 	sub	r16,r4,r3
1108611c:	0007883a 	mov	r3,zero
11086120:	003d9b06 	br	11085790 <_dtoa_r+0xafc>
11086124:	00800e44 	movi	r2,57
11086128:	b0800005 	stb	r2,0(r22)
1108612c:	b5800044 	addi	r22,r22,1
11086130:	003dc106 	br	11085838 <_dtoa_r+0xba4>
11086134:	05800084 	movi	r22,2
11086138:	003bf706 	br	11085118 <_dtoa_r+0x484>
1108613c:	d9000f17 	ldw	r4,60(sp)
11086140:	013c000e 	bge	zero,r4,11085144 <_dtoa_r+0x4b0>
11086144:	d9800e17 	ldw	r6,56(sp)
11086148:	01bc300e 	bge	zero,r6,1108520c <_dtoa_r+0x578>
1108614c:	0005883a 	mov	r2,zero
11086150:	00d00934 	movhi	r3,16420
11086154:	a80b883a 	mov	r5,r21
11086158:	180f883a 	mov	r7,r3
1108615c:	a009883a 	mov	r4,r20
11086160:	100d883a 	mov	r6,r2
11086164:	108ac1c0 	call	1108ac1c <__muldf3>
11086168:	b1000044 	addi	r4,r22,1
1108616c:	1021883a 	mov	r16,r2
11086170:	1823883a 	mov	r17,r3
11086174:	108b4e00 	call	1108b4e0 <__floatsidf>
11086178:	880b883a 	mov	r5,r17
1108617c:	8009883a 	mov	r4,r16
11086180:	180f883a 	mov	r7,r3
11086184:	100d883a 	mov	r6,r2
11086188:	108ac1c0 	call	1108ac1c <__muldf3>
1108618c:	0011883a 	mov	r8,zero
11086190:	02500734 	movhi	r9,16412
11086194:	180b883a 	mov	r5,r3
11086198:	480f883a 	mov	r7,r9
1108619c:	1009883a 	mov	r4,r2
110861a0:	400d883a 	mov	r6,r8
110861a4:	108aba80 	call	1108aba8 <__adddf3>
110861a8:	102d883a 	mov	r22,r2
110861ac:	00bf3034 	movhi	r2,64704
110861b0:	10ef883a 	add	r23,r2,r3
110861b4:	d8800d17 	ldw	r2,52(sp)
110861b8:	d8c00e17 	ldw	r3,56(sp)
110861bc:	8029883a 	mov	r20,r16
110861c0:	10bfffc4 	addi	r2,r2,-1
110861c4:	882b883a 	mov	r21,r17
110861c8:	d8800415 	stw	r2,16(sp)
110861cc:	d8c00315 	stw	r3,12(sp)
110861d0:	003e8306 	br	11085be0 <_dtoa_r+0xf4c>
110861d4:	d8800117 	ldw	r2,4(sp)
110861d8:	dc001117 	ldw	r16,68(sp)
110861dc:	dc801017 	ldw	r18,64(sp)
110861e0:	00c00d84 	movi	r3,54
110861e4:	1887c83a 	sub	r3,r3,r2
110861e8:	003d6906 	br	11085790 <_dtoa_r+0xafc>
110861ec:	01800044 	movi	r6,1
110861f0:	3021883a 	mov	r16,r6
110861f4:	d9800f15 	stw	r6,60(sp)
110861f8:	d9802615 	stw	r6,152(sp)
110861fc:	d9800e15 	stw	r6,56(sp)
11086200:	003b9306 	br	11085050 <_dtoa_r+0x3bc>
11086204:	b021883a 	mov	r16,r22
11086208:	dd800f15 	stw	r22,60(sp)
1108620c:	003b9006 	br	11085050 <_dtoa_r+0x3bc>
11086210:	103e221e 	bne	r2,zero,11085a9c <_dtoa_r+0xe08>
11086214:	b880004c 	andi	r2,r23,1
11086218:	1005003a 	cmpeq	r2,r2,zero
1108621c:	103e1f1e 	bne	r2,zero,11085a9c <_dtoa_r+0xe08>
11086220:	003e1b06 	br	11085a90 <_dtoa_r+0xdfc>
11086224:	d9001617 	ldw	r4,88(sp)
11086228:	980b883a 	mov	r5,r19
1108622c:	01800284 	movi	r6,10
11086230:	000f883a 	mov	r7,zero
11086234:	1088adc0 	call	11088adc <__multadd>
11086238:	d8c00e17 	ldw	r3,56(sp)
1108623c:	1027883a 	mov	r19,r2
11086240:	d8c00f15 	stw	r3,60(sp)
11086244:	003cd306 	br	11085594 <_dtoa_r+0x900>

11086248 <_fflush_r>:
11086248:	defffb04 	addi	sp,sp,-20
1108624c:	dcc00315 	stw	r19,12(sp)
11086250:	dc800215 	stw	r18,8(sp)
11086254:	dfc00415 	stw	ra,16(sp)
11086258:	dc400115 	stw	r17,4(sp)
1108625c:	dc000015 	stw	r16,0(sp)
11086260:	2027883a 	mov	r19,r4
11086264:	2825883a 	mov	r18,r5
11086268:	20000226 	beq	r4,zero,11086274 <_fflush_r+0x2c>
1108626c:	20800e17 	ldw	r2,56(r4)
11086270:	10005626 	beq	r2,zero,110863cc <_fflush_r+0x184>
11086274:	9100030b 	ldhu	r4,12(r18)
11086278:	20ffffcc 	andi	r3,r4,65535
1108627c:	18e0001c 	xori	r3,r3,32768
11086280:	18e00004 	addi	r3,r3,-32768
11086284:	1880020c 	andi	r2,r3,8
11086288:	1000261e 	bne	r2,zero,11086324 <_fflush_r+0xdc>
1108628c:	90c00117 	ldw	r3,4(r18)
11086290:	20820014 	ori	r2,r4,2048
11086294:	9080030d 	sth	r2,12(r18)
11086298:	1009883a 	mov	r4,r2
1108629c:	00c0400e 	bge	zero,r3,110863a0 <_fflush_r+0x158>
110862a0:	92000a17 	ldw	r8,40(r18)
110862a4:	40004026 	beq	r8,zero,110863a8 <_fflush_r+0x160>
110862a8:	2084000c 	andi	r2,r4,4096
110862ac:	10005326 	beq	r2,zero,110863fc <_fflush_r+0x1b4>
110862b0:	94001417 	ldw	r16,80(r18)
110862b4:	9080030b 	ldhu	r2,12(r18)
110862b8:	1080010c 	andi	r2,r2,4
110862bc:	1000481e 	bne	r2,zero,110863e0 <_fflush_r+0x198>
110862c0:	91400717 	ldw	r5,28(r18)
110862c4:	9809883a 	mov	r4,r19
110862c8:	800d883a 	mov	r6,r16
110862cc:	000f883a 	mov	r7,zero
110862d0:	403ee83a 	callr	r8
110862d4:	8080261e 	bne	r16,r2,11086370 <_fflush_r+0x128>
110862d8:	9080030b 	ldhu	r2,12(r18)
110862dc:	91000417 	ldw	r4,16(r18)
110862e0:	90000115 	stw	zero,4(r18)
110862e4:	10bdffcc 	andi	r2,r2,63487
110862e8:	10ffffcc 	andi	r3,r2,65535
110862ec:	18c4000c 	andi	r3,r3,4096
110862f0:	9080030d 	sth	r2,12(r18)
110862f4:	91000015 	stw	r4,0(r18)
110862f8:	18002b26 	beq	r3,zero,110863a8 <_fflush_r+0x160>
110862fc:	0007883a 	mov	r3,zero
11086300:	1805883a 	mov	r2,r3
11086304:	94001415 	stw	r16,80(r18)
11086308:	dfc00417 	ldw	ra,16(sp)
1108630c:	dcc00317 	ldw	r19,12(sp)
11086310:	dc800217 	ldw	r18,8(sp)
11086314:	dc400117 	ldw	r17,4(sp)
11086318:	dc000017 	ldw	r16,0(sp)
1108631c:	dec00504 	addi	sp,sp,20
11086320:	f800283a 	ret
11086324:	94400417 	ldw	r17,16(r18)
11086328:	88001f26 	beq	r17,zero,110863a8 <_fflush_r+0x160>
1108632c:	90800017 	ldw	r2,0(r18)
11086330:	18c000cc 	andi	r3,r3,3
11086334:	94400015 	stw	r17,0(r18)
11086338:	1461c83a 	sub	r16,r2,r17
1108633c:	18002526 	beq	r3,zero,110863d4 <_fflush_r+0x18c>
11086340:	0005883a 	mov	r2,zero
11086344:	90800215 	stw	r2,8(r18)
11086348:	0400170e 	bge	zero,r16,110863a8 <_fflush_r+0x160>
1108634c:	90c00917 	ldw	r3,36(r18)
11086350:	91400717 	ldw	r5,28(r18)
11086354:	880d883a 	mov	r6,r17
11086358:	800f883a 	mov	r7,r16
1108635c:	9809883a 	mov	r4,r19
11086360:	183ee83a 	callr	r3
11086364:	88a3883a 	add	r17,r17,r2
11086368:	80a1c83a 	sub	r16,r16,r2
1108636c:	00bff616 	blt	zero,r2,11086348 <_fflush_r+0x100>
11086370:	9080030b 	ldhu	r2,12(r18)
11086374:	00ffffc4 	movi	r3,-1
11086378:	10801014 	ori	r2,r2,64
1108637c:	9080030d 	sth	r2,12(r18)
11086380:	1805883a 	mov	r2,r3
11086384:	dfc00417 	ldw	ra,16(sp)
11086388:	dcc00317 	ldw	r19,12(sp)
1108638c:	dc800217 	ldw	r18,8(sp)
11086390:	dc400117 	ldw	r17,4(sp)
11086394:	dc000017 	ldw	r16,0(sp)
11086398:	dec00504 	addi	sp,sp,20
1108639c:	f800283a 	ret
110863a0:	90800f17 	ldw	r2,60(r18)
110863a4:	00bfbe16 	blt	zero,r2,110862a0 <_fflush_r+0x58>
110863a8:	0007883a 	mov	r3,zero
110863ac:	1805883a 	mov	r2,r3
110863b0:	dfc00417 	ldw	ra,16(sp)
110863b4:	dcc00317 	ldw	r19,12(sp)
110863b8:	dc800217 	ldw	r18,8(sp)
110863bc:	dc400117 	ldw	r17,4(sp)
110863c0:	dc000017 	ldw	r16,0(sp)
110863c4:	dec00504 	addi	sp,sp,20
110863c8:	f800283a 	ret
110863cc:	10864e00 	call	110864e0 <__sinit>
110863d0:	003fa806 	br	11086274 <_fflush_r+0x2c>
110863d4:	90800517 	ldw	r2,20(r18)
110863d8:	90800215 	stw	r2,8(r18)
110863dc:	003fda06 	br	11086348 <_fflush_r+0x100>
110863e0:	90800117 	ldw	r2,4(r18)
110863e4:	90c00c17 	ldw	r3,48(r18)
110863e8:	80a1c83a 	sub	r16,r16,r2
110863ec:	183fb426 	beq	r3,zero,110862c0 <_fflush_r+0x78>
110863f0:	90800f17 	ldw	r2,60(r18)
110863f4:	80a1c83a 	sub	r16,r16,r2
110863f8:	003fb106 	br	110862c0 <_fflush_r+0x78>
110863fc:	91400717 	ldw	r5,28(r18)
11086400:	9809883a 	mov	r4,r19
11086404:	000d883a 	mov	r6,zero
11086408:	01c00044 	movi	r7,1
1108640c:	403ee83a 	callr	r8
11086410:	1021883a 	mov	r16,r2
11086414:	00bfffc4 	movi	r2,-1
11086418:	80800226 	beq	r16,r2,11086424 <_fflush_r+0x1dc>
1108641c:	92000a17 	ldw	r8,40(r18)
11086420:	003fa406 	br	110862b4 <_fflush_r+0x6c>
11086424:	98c00017 	ldw	r3,0(r19)
11086428:	00800744 	movi	r2,29
1108642c:	18bfde26 	beq	r3,r2,110863a8 <_fflush_r+0x160>
11086430:	9080030b 	ldhu	r2,12(r18)
11086434:	8007883a 	mov	r3,r16
11086438:	10801014 	ori	r2,r2,64
1108643c:	9080030d 	sth	r2,12(r18)
11086440:	003fcf06 	br	11086380 <_fflush_r+0x138>

11086444 <fflush>:
11086444:	01444234 	movhi	r5,4360
11086448:	29589204 	addi	r5,r5,25160
1108644c:	2007883a 	mov	r3,r4
11086450:	20000526 	beq	r4,zero,11086468 <fflush+0x24>
11086454:	00844274 	movhi	r2,4361
11086458:	1084bc04 	addi	r2,r2,4848
1108645c:	11000017 	ldw	r4,0(r2)
11086460:	180b883a 	mov	r5,r3
11086464:	10862481 	jmpi	11086248 <_fflush_r>
11086468:	00844274 	movhi	r2,4361
1108646c:	1084bd04 	addi	r2,r2,4852
11086470:	11000017 	ldw	r4,0(r2)
11086474:	10870141 	jmpi	11087014 <_fwalk_reent>

11086478 <std>:
11086478:	00844274 	movhi	r2,4361
1108647c:	10a53c04 	addi	r2,r2,-27408
11086480:	20800b15 	stw	r2,44(r4)
11086484:	00844274 	movhi	r2,4361
11086488:	10a57704 	addi	r2,r2,-27172
1108648c:	20800815 	stw	r2,32(r4)
11086490:	00c44274 	movhi	r3,4361
11086494:	18e55804 	addi	r3,r3,-27296
11086498:	00844274 	movhi	r2,4361
1108649c:	10a53e04 	addi	r2,r2,-27400
110864a0:	2140030d 	sth	r5,12(r4)
110864a4:	2180038d 	sth	r6,14(r4)
110864a8:	20c00915 	stw	r3,36(r4)
110864ac:	20800a15 	stw	r2,40(r4)
110864b0:	20000015 	stw	zero,0(r4)
110864b4:	20000115 	stw	zero,4(r4)
110864b8:	20000215 	stw	zero,8(r4)
110864bc:	20000415 	stw	zero,16(r4)
110864c0:	20000515 	stw	zero,20(r4)
110864c4:	20000615 	stw	zero,24(r4)
110864c8:	21000715 	stw	r4,28(r4)
110864cc:	f800283a 	ret

110864d0 <__sfp_lock_acquire>:
110864d0:	f800283a 	ret

110864d4 <__sfp_lock_release>:
110864d4:	f800283a 	ret

110864d8 <__sinit_lock_acquire>:
110864d8:	f800283a 	ret

110864dc <__sinit_lock_release>:
110864dc:	f800283a 	ret

110864e0 <__sinit>:
110864e0:	20800e17 	ldw	r2,56(r4)
110864e4:	defffd04 	addi	sp,sp,-12
110864e8:	dc400115 	stw	r17,4(sp)
110864ec:	dc000015 	stw	r16,0(sp)
110864f0:	dfc00215 	stw	ra,8(sp)
110864f4:	04400044 	movi	r17,1
110864f8:	01400104 	movi	r5,4
110864fc:	000d883a 	mov	r6,zero
11086500:	2021883a 	mov	r16,r4
11086504:	2200bb04 	addi	r8,r4,748
11086508:	200f883a 	mov	r7,r4
1108650c:	10000526 	beq	r2,zero,11086524 <__sinit+0x44>
11086510:	dfc00217 	ldw	ra,8(sp)
11086514:	dc400117 	ldw	r17,4(sp)
11086518:	dc000017 	ldw	r16,0(sp)
1108651c:	dec00304 	addi	sp,sp,12
11086520:	f800283a 	ret
11086524:	21000117 	ldw	r4,4(r4)
11086528:	00844234 	movhi	r2,4360
1108652c:	10997104 	addi	r2,r2,26052
11086530:	00c000c4 	movi	r3,3
11086534:	80800f15 	stw	r2,60(r16)
11086538:	80c0b915 	stw	r3,740(r16)
1108653c:	8200ba15 	stw	r8,744(r16)
11086540:	84400e15 	stw	r17,56(r16)
11086544:	8000b815 	stw	zero,736(r16)
11086548:	10864780 	call	11086478 <std>
1108654c:	81000217 	ldw	r4,8(r16)
11086550:	880d883a 	mov	r6,r17
11086554:	800f883a 	mov	r7,r16
11086558:	01400284 	movi	r5,10
1108655c:	10864780 	call	11086478 <std>
11086560:	81000317 	ldw	r4,12(r16)
11086564:	800f883a 	mov	r7,r16
11086568:	01400484 	movi	r5,18
1108656c:	01800084 	movi	r6,2
11086570:	dfc00217 	ldw	ra,8(sp)
11086574:	dc400117 	ldw	r17,4(sp)
11086578:	dc000017 	ldw	r16,0(sp)
1108657c:	dec00304 	addi	sp,sp,12
11086580:	10864781 	jmpi	11086478 <std>

11086584 <__fp_lock>:
11086584:	0005883a 	mov	r2,zero
11086588:	f800283a 	ret

1108658c <__fp_unlock>:
1108658c:	0005883a 	mov	r2,zero
11086590:	f800283a 	ret

11086594 <__fp_unlock_all>:
11086594:	00844274 	movhi	r2,4361
11086598:	1084bc04 	addi	r2,r2,4848
1108659c:	11000017 	ldw	r4,0(r2)
110865a0:	01444234 	movhi	r5,4360
110865a4:	29596304 	addi	r5,r5,25996
110865a8:	10870dc1 	jmpi	110870dc <_fwalk>

110865ac <__fp_lock_all>:
110865ac:	00844274 	movhi	r2,4361
110865b0:	1084bc04 	addi	r2,r2,4848
110865b4:	11000017 	ldw	r4,0(r2)
110865b8:	01444234 	movhi	r5,4360
110865bc:	29596104 	addi	r5,r5,25988
110865c0:	10870dc1 	jmpi	110870dc <_fwalk>

110865c4 <_cleanup_r>:
110865c4:	01444274 	movhi	r5,4361
110865c8:	29666904 	addi	r5,r5,-26204
110865cc:	10870dc1 	jmpi	110870dc <_fwalk>

110865d0 <_cleanup>:
110865d0:	00844274 	movhi	r2,4361
110865d4:	1084bd04 	addi	r2,r2,4852
110865d8:	11000017 	ldw	r4,0(r2)
110865dc:	10865c41 	jmpi	110865c4 <_cleanup_r>

110865e0 <__sfmoreglue>:
110865e0:	defffc04 	addi	sp,sp,-16
110865e4:	dc400115 	stw	r17,4(sp)
110865e8:	2c401724 	muli	r17,r5,92
110865ec:	dc800215 	stw	r18,8(sp)
110865f0:	2825883a 	mov	r18,r5
110865f4:	89400304 	addi	r5,r17,12
110865f8:	dc000015 	stw	r16,0(sp)
110865fc:	dfc00315 	stw	ra,12(sp)
11086600:	10873ec0 	call	110873ec <_malloc_r>
11086604:	0021883a 	mov	r16,zero
11086608:	880d883a 	mov	r6,r17
1108660c:	000b883a 	mov	r5,zero
11086610:	10000626 	beq	r2,zero,1108662c <__sfmoreglue+0x4c>
11086614:	11000304 	addi	r4,r2,12
11086618:	14800115 	stw	r18,4(r2)
1108661c:	10000015 	stw	zero,0(r2)
11086620:	11000215 	stw	r4,8(r2)
11086624:	1021883a 	mov	r16,r2
11086628:	1087d900 	call	11087d90 <memset>
1108662c:	8005883a 	mov	r2,r16
11086630:	dfc00317 	ldw	ra,12(sp)
11086634:	dc800217 	ldw	r18,8(sp)
11086638:	dc400117 	ldw	r17,4(sp)
1108663c:	dc000017 	ldw	r16,0(sp)
11086640:	dec00404 	addi	sp,sp,16
11086644:	f800283a 	ret

11086648 <__sfp>:
11086648:	defffd04 	addi	sp,sp,-12
1108664c:	00844274 	movhi	r2,4361
11086650:	1084bd04 	addi	r2,r2,4852
11086654:	dc000015 	stw	r16,0(sp)
11086658:	14000017 	ldw	r16,0(r2)
1108665c:	dc400115 	stw	r17,4(sp)
11086660:	dfc00215 	stw	ra,8(sp)
11086664:	80800e17 	ldw	r2,56(r16)
11086668:	2023883a 	mov	r17,r4
1108666c:	10002626 	beq	r2,zero,11086708 <__sfp+0xc0>
11086670:	8400b804 	addi	r16,r16,736
11086674:	80800117 	ldw	r2,4(r16)
11086678:	81000217 	ldw	r4,8(r16)
1108667c:	10ffffc4 	addi	r3,r2,-1
11086680:	18000916 	blt	r3,zero,110866a8 <__sfp+0x60>
11086684:	2080030f 	ldh	r2,12(r4)
11086688:	10000b26 	beq	r2,zero,110866b8 <__sfp+0x70>
1108668c:	017fffc4 	movi	r5,-1
11086690:	00000206 	br	1108669c <__sfp+0x54>
11086694:	2080030f 	ldh	r2,12(r4)
11086698:	10000726 	beq	r2,zero,110866b8 <__sfp+0x70>
1108669c:	18ffffc4 	addi	r3,r3,-1
110866a0:	21001704 	addi	r4,r4,92
110866a4:	197ffb1e 	bne	r3,r5,11086694 <__sfp+0x4c>
110866a8:	80800017 	ldw	r2,0(r16)
110866ac:	10001926 	beq	r2,zero,11086714 <__sfp+0xcc>
110866b0:	1021883a 	mov	r16,r2
110866b4:	003fef06 	br	11086674 <__sfp+0x2c>
110866b8:	00bfffc4 	movi	r2,-1
110866bc:	00c00044 	movi	r3,1
110866c0:	2080038d 	sth	r2,14(r4)
110866c4:	20c0030d 	sth	r3,12(r4)
110866c8:	20000015 	stw	zero,0(r4)
110866cc:	20000215 	stw	zero,8(r4)
110866d0:	20000115 	stw	zero,4(r4)
110866d4:	20000415 	stw	zero,16(r4)
110866d8:	20000515 	stw	zero,20(r4)
110866dc:	20000615 	stw	zero,24(r4)
110866e0:	20000c15 	stw	zero,48(r4)
110866e4:	20000d15 	stw	zero,52(r4)
110866e8:	20001115 	stw	zero,68(r4)
110866ec:	20001215 	stw	zero,72(r4)
110866f0:	2005883a 	mov	r2,r4
110866f4:	dfc00217 	ldw	ra,8(sp)
110866f8:	dc400117 	ldw	r17,4(sp)
110866fc:	dc000017 	ldw	r16,0(sp)
11086700:	dec00304 	addi	sp,sp,12
11086704:	f800283a 	ret
11086708:	8009883a 	mov	r4,r16
1108670c:	10864e00 	call	110864e0 <__sinit>
11086710:	003fd706 	br	11086670 <__sfp+0x28>
11086714:	8809883a 	mov	r4,r17
11086718:	01400104 	movi	r5,4
1108671c:	10865e00 	call	110865e0 <__sfmoreglue>
11086720:	80800015 	stw	r2,0(r16)
11086724:	103fe21e 	bne	r2,zero,110866b0 <__sfp+0x68>
11086728:	00800304 	movi	r2,12
1108672c:	0009883a 	mov	r4,zero
11086730:	88800015 	stw	r2,0(r17)
11086734:	003fee06 	br	110866f0 <__sfp+0xa8>

11086738 <_malloc_trim_r>:
11086738:	defffb04 	addi	sp,sp,-20
1108673c:	dcc00315 	stw	r19,12(sp)
11086740:	04c44274 	movhi	r19,4361
11086744:	9cff3804 	addi	r19,r19,-800
11086748:	dc800215 	stw	r18,8(sp)
1108674c:	dc400115 	stw	r17,4(sp)
11086750:	dc000015 	stw	r16,0(sp)
11086754:	2823883a 	mov	r17,r5
11086758:	2025883a 	mov	r18,r4
1108675c:	dfc00415 	stw	ra,16(sp)
11086760:	108c6b40 	call	1108c6b4 <__malloc_lock>
11086764:	98800217 	ldw	r2,8(r19)
11086768:	9009883a 	mov	r4,r18
1108676c:	000b883a 	mov	r5,zero
11086770:	10c00117 	ldw	r3,4(r2)
11086774:	00bfff04 	movi	r2,-4
11086778:	18a0703a 	and	r16,r3,r2
1108677c:	8463c83a 	sub	r17,r16,r17
11086780:	8c43fbc4 	addi	r17,r17,4079
11086784:	8822d33a 	srli	r17,r17,12
11086788:	0083ffc4 	movi	r2,4095
1108678c:	8c7fffc4 	addi	r17,r17,-1
11086790:	8822933a 	slli	r17,r17,12
11086794:	1440060e 	bge	r2,r17,110867b0 <_malloc_trim_r+0x78>
11086798:	10894800 	call	11089480 <_sbrk_r>
1108679c:	98c00217 	ldw	r3,8(r19)
110867a0:	9009883a 	mov	r4,r18
110867a4:	044bc83a 	sub	r5,zero,r17
110867a8:	80c7883a 	add	r3,r16,r3
110867ac:	10c00926 	beq	r2,r3,110867d4 <_malloc_trim_r+0x9c>
110867b0:	108c6d40 	call	1108c6d4 <__malloc_unlock>
110867b4:	0005883a 	mov	r2,zero
110867b8:	dfc00417 	ldw	ra,16(sp)
110867bc:	dcc00317 	ldw	r19,12(sp)
110867c0:	dc800217 	ldw	r18,8(sp)
110867c4:	dc400117 	ldw	r17,4(sp)
110867c8:	dc000017 	ldw	r16,0(sp)
110867cc:	dec00504 	addi	sp,sp,20
110867d0:	f800283a 	ret
110867d4:	9009883a 	mov	r4,r18
110867d8:	10894800 	call	11089480 <_sbrk_r>
110867dc:	844dc83a 	sub	r6,r16,r17
110867e0:	00ffffc4 	movi	r3,-1
110867e4:	9009883a 	mov	r4,r18
110867e8:	000b883a 	mov	r5,zero
110867ec:	01c44274 	movhi	r7,4361
110867f0:	39cb7b04 	addi	r7,r7,11756
110867f4:	31800054 	ori	r6,r6,1
110867f8:	10c00926 	beq	r2,r3,11086820 <_malloc_trim_r+0xe8>
110867fc:	38800017 	ldw	r2,0(r7)
11086800:	98c00217 	ldw	r3,8(r19)
11086804:	9009883a 	mov	r4,r18
11086808:	1445c83a 	sub	r2,r2,r17
1108680c:	38800015 	stw	r2,0(r7)
11086810:	19800115 	stw	r6,4(r3)
11086814:	108c6d40 	call	1108c6d4 <__malloc_unlock>
11086818:	00800044 	movi	r2,1
1108681c:	003fe606 	br	110867b8 <_malloc_trim_r+0x80>
11086820:	10894800 	call	11089480 <_sbrk_r>
11086824:	99800217 	ldw	r6,8(r19)
11086828:	100f883a 	mov	r7,r2
1108682c:	9009883a 	mov	r4,r18
11086830:	1187c83a 	sub	r3,r2,r6
11086834:	008003c4 	movi	r2,15
11086838:	19400054 	ori	r5,r3,1
1108683c:	10ffdc0e 	bge	r2,r3,110867b0 <_malloc_trim_r+0x78>
11086840:	00844274 	movhi	r2,4361
11086844:	1084c104 	addi	r2,r2,4868
11086848:	10c00017 	ldw	r3,0(r2)
1108684c:	00844274 	movhi	r2,4361
11086850:	108b7b04 	addi	r2,r2,11756
11086854:	31400115 	stw	r5,4(r6)
11086858:	38c7c83a 	sub	r3,r7,r3
1108685c:	10c00015 	stw	r3,0(r2)
11086860:	003fd306 	br	110867b0 <_malloc_trim_r+0x78>

11086864 <_free_r>:
11086864:	defffd04 	addi	sp,sp,-12
11086868:	dc400115 	stw	r17,4(sp)
1108686c:	dc000015 	stw	r16,0(sp)
11086870:	dfc00215 	stw	ra,8(sp)
11086874:	2821883a 	mov	r16,r5
11086878:	2023883a 	mov	r17,r4
1108687c:	28005a26 	beq	r5,zero,110869e8 <_free_r+0x184>
11086880:	108c6b40 	call	1108c6b4 <__malloc_lock>
11086884:	823ffe04 	addi	r8,r16,-8
11086888:	41400117 	ldw	r5,4(r8)
1108688c:	00bfff84 	movi	r2,-2
11086890:	02844274 	movhi	r10,4361
11086894:	52bf3804 	addi	r10,r10,-800
11086898:	288e703a 	and	r7,r5,r2
1108689c:	41cd883a 	add	r6,r8,r7
110868a0:	30c00117 	ldw	r3,4(r6)
110868a4:	51000217 	ldw	r4,8(r10)
110868a8:	00bfff04 	movi	r2,-4
110868ac:	1892703a 	and	r9,r3,r2
110868b0:	5017883a 	mov	r11,r10
110868b4:	31006726 	beq	r6,r4,11086a54 <_free_r+0x1f0>
110868b8:	2880004c 	andi	r2,r5,1
110868bc:	1005003a 	cmpeq	r2,r2,zero
110868c0:	32400115 	stw	r9,4(r6)
110868c4:	10001a1e 	bne	r2,zero,11086930 <_free_r+0xcc>
110868c8:	000b883a 	mov	r5,zero
110868cc:	3247883a 	add	r3,r6,r9
110868d0:	18800117 	ldw	r2,4(r3)
110868d4:	1080004c 	andi	r2,r2,1
110868d8:	1000231e 	bne	r2,zero,11086968 <_free_r+0x104>
110868dc:	280ac03a 	cmpne	r5,r5,zero
110868e0:	3a4f883a 	add	r7,r7,r9
110868e4:	2800451e 	bne	r5,zero,110869fc <_free_r+0x198>
110868e8:	31000217 	ldw	r4,8(r6)
110868ec:	00844274 	movhi	r2,4361
110868f0:	10bf3a04 	addi	r2,r2,-792
110868f4:	20807b26 	beq	r4,r2,11086ae4 <_free_r+0x280>
110868f8:	30800317 	ldw	r2,12(r6)
110868fc:	3a07883a 	add	r3,r7,r8
11086900:	19c00015 	stw	r7,0(r3)
11086904:	11000215 	stw	r4,8(r2)
11086908:	20800315 	stw	r2,12(r4)
1108690c:	38800054 	ori	r2,r7,1
11086910:	40800115 	stw	r2,4(r8)
11086914:	28001a26 	beq	r5,zero,11086980 <_free_r+0x11c>
11086918:	8809883a 	mov	r4,r17
1108691c:	dfc00217 	ldw	ra,8(sp)
11086920:	dc400117 	ldw	r17,4(sp)
11086924:	dc000017 	ldw	r16,0(sp)
11086928:	dec00304 	addi	sp,sp,12
1108692c:	108c6d41 	jmpi	1108c6d4 <__malloc_unlock>
11086930:	80bffe17 	ldw	r2,-8(r16)
11086934:	50c00204 	addi	r3,r10,8
11086938:	4091c83a 	sub	r8,r8,r2
1108693c:	41000217 	ldw	r4,8(r8)
11086940:	388f883a 	add	r7,r7,r2
11086944:	20c06126 	beq	r4,r3,11086acc <_free_r+0x268>
11086948:	40800317 	ldw	r2,12(r8)
1108694c:	3247883a 	add	r3,r6,r9
11086950:	000b883a 	mov	r5,zero
11086954:	11000215 	stw	r4,8(r2)
11086958:	20800315 	stw	r2,12(r4)
1108695c:	18800117 	ldw	r2,4(r3)
11086960:	1080004c 	andi	r2,r2,1
11086964:	103fdd26 	beq	r2,zero,110868dc <_free_r+0x78>
11086968:	38800054 	ori	r2,r7,1
1108696c:	3a07883a 	add	r3,r7,r8
11086970:	280ac03a 	cmpne	r5,r5,zero
11086974:	40800115 	stw	r2,4(r8)
11086978:	19c00015 	stw	r7,0(r3)
1108697c:	283fe61e 	bne	r5,zero,11086918 <_free_r+0xb4>
11086980:	00807fc4 	movi	r2,511
11086984:	11c01f2e 	bgeu	r2,r7,11086a04 <_free_r+0x1a0>
11086988:	3806d27a 	srli	r3,r7,9
1108698c:	1800481e 	bne	r3,zero,11086ab0 <_free_r+0x24c>
11086990:	3804d0fa 	srli	r2,r7,3
11086994:	100690fa 	slli	r3,r2,3
11086998:	1acd883a 	add	r6,r3,r11
1108699c:	31400217 	ldw	r5,8(r6)
110869a0:	31405926 	beq	r6,r5,11086b08 <_free_r+0x2a4>
110869a4:	28800117 	ldw	r2,4(r5)
110869a8:	00ffff04 	movi	r3,-4
110869ac:	10c4703a 	and	r2,r2,r3
110869b0:	3880022e 	bgeu	r7,r2,110869bc <_free_r+0x158>
110869b4:	29400217 	ldw	r5,8(r5)
110869b8:	317ffa1e 	bne	r6,r5,110869a4 <_free_r+0x140>
110869bc:	29800317 	ldw	r6,12(r5)
110869c0:	41800315 	stw	r6,12(r8)
110869c4:	41400215 	stw	r5,8(r8)
110869c8:	8809883a 	mov	r4,r17
110869cc:	2a000315 	stw	r8,12(r5)
110869d0:	32000215 	stw	r8,8(r6)
110869d4:	dfc00217 	ldw	ra,8(sp)
110869d8:	dc400117 	ldw	r17,4(sp)
110869dc:	dc000017 	ldw	r16,0(sp)
110869e0:	dec00304 	addi	sp,sp,12
110869e4:	108c6d41 	jmpi	1108c6d4 <__malloc_unlock>
110869e8:	dfc00217 	ldw	ra,8(sp)
110869ec:	dc400117 	ldw	r17,4(sp)
110869f0:	dc000017 	ldw	r16,0(sp)
110869f4:	dec00304 	addi	sp,sp,12
110869f8:	f800283a 	ret
110869fc:	31000217 	ldw	r4,8(r6)
11086a00:	003fbd06 	br	110868f8 <_free_r+0x94>
11086a04:	3806d0fa 	srli	r3,r7,3
11086a08:	00800044 	movi	r2,1
11086a0c:	51400117 	ldw	r5,4(r10)
11086a10:	180890fa 	slli	r4,r3,3
11086a14:	1807d0ba 	srai	r3,r3,2
11086a18:	22c9883a 	add	r4,r4,r11
11086a1c:	21800217 	ldw	r6,8(r4)
11086a20:	10c4983a 	sll	r2,r2,r3
11086a24:	41000315 	stw	r4,12(r8)
11086a28:	41800215 	stw	r6,8(r8)
11086a2c:	288ab03a 	or	r5,r5,r2
11086a30:	22000215 	stw	r8,8(r4)
11086a34:	8809883a 	mov	r4,r17
11086a38:	51400115 	stw	r5,4(r10)
11086a3c:	32000315 	stw	r8,12(r6)
11086a40:	dfc00217 	ldw	ra,8(sp)
11086a44:	dc400117 	ldw	r17,4(sp)
11086a48:	dc000017 	ldw	r16,0(sp)
11086a4c:	dec00304 	addi	sp,sp,12
11086a50:	108c6d41 	jmpi	1108c6d4 <__malloc_unlock>
11086a54:	2880004c 	andi	r2,r5,1
11086a58:	3a4d883a 	add	r6,r7,r9
11086a5c:	1000071e 	bne	r2,zero,11086a7c <_free_r+0x218>
11086a60:	80bffe17 	ldw	r2,-8(r16)
11086a64:	4091c83a 	sub	r8,r8,r2
11086a68:	41000317 	ldw	r4,12(r8)
11086a6c:	40c00217 	ldw	r3,8(r8)
11086a70:	308d883a 	add	r6,r6,r2
11086a74:	20c00215 	stw	r3,8(r4)
11086a78:	19000315 	stw	r4,12(r3)
11086a7c:	00844274 	movhi	r2,4361
11086a80:	1084c004 	addi	r2,r2,4864
11086a84:	11000017 	ldw	r4,0(r2)
11086a88:	30c00054 	ori	r3,r6,1
11086a8c:	52000215 	stw	r8,8(r10)
11086a90:	40c00115 	stw	r3,4(r8)
11086a94:	313fa036 	bltu	r6,r4,11086918 <_free_r+0xb4>
11086a98:	00844274 	movhi	r2,4361
11086a9c:	108b6704 	addi	r2,r2,11676
11086aa0:	11400017 	ldw	r5,0(r2)
11086aa4:	8809883a 	mov	r4,r17
11086aa8:	10867380 	call	11086738 <_malloc_trim_r>
11086aac:	003f9a06 	br	11086918 <_free_r+0xb4>
11086ab0:	00800104 	movi	r2,4
11086ab4:	10c0072e 	bgeu	r2,r3,11086ad4 <_free_r+0x270>
11086ab8:	00800504 	movi	r2,20
11086abc:	10c01936 	bltu	r2,r3,11086b24 <_free_r+0x2c0>
11086ac0:	188016c4 	addi	r2,r3,91
11086ac4:	100690fa 	slli	r3,r2,3
11086ac8:	003fb306 	br	11086998 <_free_r+0x134>
11086acc:	01400044 	movi	r5,1
11086ad0:	003f7e06 	br	110868cc <_free_r+0x68>
11086ad4:	3804d1ba 	srli	r2,r7,6
11086ad8:	10800e04 	addi	r2,r2,56
11086adc:	100690fa 	slli	r3,r2,3
11086ae0:	003fad06 	br	11086998 <_free_r+0x134>
11086ae4:	22000315 	stw	r8,12(r4)
11086ae8:	22000215 	stw	r8,8(r4)
11086aec:	3a05883a 	add	r2,r7,r8
11086af0:	38c00054 	ori	r3,r7,1
11086af4:	11c00015 	stw	r7,0(r2)
11086af8:	41000215 	stw	r4,8(r8)
11086afc:	40c00115 	stw	r3,4(r8)
11086b00:	41000315 	stw	r4,12(r8)
11086b04:	003f8406 	br	11086918 <_free_r+0xb4>
11086b08:	1005d0ba 	srai	r2,r2,2
11086b0c:	00c00044 	movi	r3,1
11086b10:	51000117 	ldw	r4,4(r10)
11086b14:	1886983a 	sll	r3,r3,r2
11086b18:	20c8b03a 	or	r4,r4,r3
11086b1c:	51000115 	stw	r4,4(r10)
11086b20:	003fa706 	br	110869c0 <_free_r+0x15c>
11086b24:	00801504 	movi	r2,84
11086b28:	10c00436 	bltu	r2,r3,11086b3c <_free_r+0x2d8>
11086b2c:	3804d33a 	srli	r2,r7,12
11086b30:	10801b84 	addi	r2,r2,110
11086b34:	100690fa 	slli	r3,r2,3
11086b38:	003f9706 	br	11086998 <_free_r+0x134>
11086b3c:	00805504 	movi	r2,340
11086b40:	10c00436 	bltu	r2,r3,11086b54 <_free_r+0x2f0>
11086b44:	3804d3fa 	srli	r2,r7,15
11086b48:	10801dc4 	addi	r2,r2,119
11086b4c:	100690fa 	slli	r3,r2,3
11086b50:	003f9106 	br	11086998 <_free_r+0x134>
11086b54:	00815504 	movi	r2,1364
11086b58:	10c0032e 	bgeu	r2,r3,11086b68 <_free_r+0x304>
11086b5c:	00801f84 	movi	r2,126
11086b60:	00c0fc04 	movi	r3,1008
11086b64:	003f8c06 	br	11086998 <_free_r+0x134>
11086b68:	3804d4ba 	srli	r2,r7,18
11086b6c:	10801f04 	addi	r2,r2,124
11086b70:	100690fa 	slli	r3,r2,3
11086b74:	003f8806 	br	11086998 <_free_r+0x134>

11086b78 <__sfvwrite_r>:
11086b78:	30800217 	ldw	r2,8(r6)
11086b7c:	defff504 	addi	sp,sp,-44
11086b80:	df000915 	stw	fp,36(sp)
11086b84:	dd800715 	stw	r22,28(sp)
11086b88:	dc800315 	stw	r18,12(sp)
11086b8c:	dfc00a15 	stw	ra,40(sp)
11086b90:	ddc00815 	stw	r23,32(sp)
11086b94:	dd400615 	stw	r21,24(sp)
11086b98:	dd000515 	stw	r20,20(sp)
11086b9c:	dcc00415 	stw	r19,16(sp)
11086ba0:	dc400215 	stw	r17,8(sp)
11086ba4:	dc000115 	stw	r16,4(sp)
11086ba8:	302d883a 	mov	r22,r6
11086bac:	2039883a 	mov	fp,r4
11086bb0:	2825883a 	mov	r18,r5
11086bb4:	10001c26 	beq	r2,zero,11086c28 <__sfvwrite_r+0xb0>
11086bb8:	29c0030b 	ldhu	r7,12(r5)
11086bbc:	3880020c 	andi	r2,r7,8
11086bc0:	10002726 	beq	r2,zero,11086c60 <__sfvwrite_r+0xe8>
11086bc4:	28800417 	ldw	r2,16(r5)
11086bc8:	10002526 	beq	r2,zero,11086c60 <__sfvwrite_r+0xe8>
11086bcc:	3880008c 	andi	r2,r7,2
11086bd0:	b5400017 	ldw	r21,0(r22)
11086bd4:	10002826 	beq	r2,zero,11086c78 <__sfvwrite_r+0x100>
11086bd8:	0021883a 	mov	r16,zero
11086bdc:	0023883a 	mov	r17,zero
11086be0:	880d883a 	mov	r6,r17
11086be4:	e009883a 	mov	r4,fp
11086be8:	00810004 	movi	r2,1024
11086bec:	80006e26 	beq	r16,zero,11086da8 <__sfvwrite_r+0x230>
11086bf0:	800f883a 	mov	r7,r16
11086bf4:	91400717 	ldw	r5,28(r18)
11086bf8:	1400012e 	bgeu	r2,r16,11086c00 <__sfvwrite_r+0x88>
11086bfc:	100f883a 	mov	r7,r2
11086c00:	90c00917 	ldw	r3,36(r18)
11086c04:	183ee83a 	callr	r3
11086c08:	1007883a 	mov	r3,r2
11086c0c:	80a1c83a 	sub	r16,r16,r2
11086c10:	88a3883a 	add	r17,r17,r2
11086c14:	00806d0e 	bge	zero,r2,11086dcc <__sfvwrite_r+0x254>
11086c18:	b0800217 	ldw	r2,8(r22)
11086c1c:	10c5c83a 	sub	r2,r2,r3
11086c20:	b0800215 	stw	r2,8(r22)
11086c24:	103fee1e 	bne	r2,zero,11086be0 <__sfvwrite_r+0x68>
11086c28:	0009883a 	mov	r4,zero
11086c2c:	2005883a 	mov	r2,r4
11086c30:	dfc00a17 	ldw	ra,40(sp)
11086c34:	df000917 	ldw	fp,36(sp)
11086c38:	ddc00817 	ldw	r23,32(sp)
11086c3c:	dd800717 	ldw	r22,28(sp)
11086c40:	dd400617 	ldw	r21,24(sp)
11086c44:	dd000517 	ldw	r20,20(sp)
11086c48:	dcc00417 	ldw	r19,16(sp)
11086c4c:	dc800317 	ldw	r18,12(sp)
11086c50:	dc400217 	ldw	r17,8(sp)
11086c54:	dc000117 	ldw	r16,4(sp)
11086c58:	dec00b04 	addi	sp,sp,44
11086c5c:	f800283a 	ret
11086c60:	10849400 	call	11084940 <__swsetup_r>
11086c64:	1000e41e 	bne	r2,zero,11086ff8 <__sfvwrite_r+0x480>
11086c68:	91c0030b 	ldhu	r7,12(r18)
11086c6c:	b5400017 	ldw	r21,0(r22)
11086c70:	3880008c 	andi	r2,r7,2
11086c74:	103fd81e 	bne	r2,zero,11086bd8 <__sfvwrite_r+0x60>
11086c78:	3880004c 	andi	r2,r7,1
11086c7c:	1005003a 	cmpeq	r2,r2,zero
11086c80:	10005726 	beq	r2,zero,11086de0 <__sfvwrite_r+0x268>
11086c84:	0029883a 	mov	r20,zero
11086c88:	002f883a 	mov	r23,zero
11086c8c:	a0004226 	beq	r20,zero,11086d98 <__sfvwrite_r+0x220>
11086c90:	3880800c 	andi	r2,r7,512
11086c94:	94000217 	ldw	r16,8(r18)
11086c98:	10008b26 	beq	r2,zero,11086ec8 <__sfvwrite_r+0x350>
11086c9c:	800d883a 	mov	r6,r16
11086ca0:	a400a536 	bltu	r20,r16,11086f38 <__sfvwrite_r+0x3c0>
11086ca4:	3881200c 	andi	r2,r7,1152
11086ca8:	10002726 	beq	r2,zero,11086d48 <__sfvwrite_r+0x1d0>
11086cac:	90800517 	ldw	r2,20(r18)
11086cb0:	92000417 	ldw	r8,16(r18)
11086cb4:	91400017 	ldw	r5,0(r18)
11086cb8:	1087883a 	add	r3,r2,r2
11086cbc:	1887883a 	add	r3,r3,r2
11086cc0:	1808d7fa 	srli	r4,r3,31
11086cc4:	2a21c83a 	sub	r16,r5,r8
11086cc8:	80800044 	addi	r2,r16,1
11086ccc:	20c9883a 	add	r4,r4,r3
11086cd0:	2027d07a 	srai	r19,r4,1
11086cd4:	a085883a 	add	r2,r20,r2
11086cd8:	980d883a 	mov	r6,r19
11086cdc:	9880022e 	bgeu	r19,r2,11086ce8 <__sfvwrite_r+0x170>
11086ce0:	1027883a 	mov	r19,r2
11086ce4:	100d883a 	mov	r6,r2
11086ce8:	3881000c 	andi	r2,r7,1024
11086cec:	1000b826 	beq	r2,zero,11086fd0 <__sfvwrite_r+0x458>
11086cf0:	300b883a 	mov	r5,r6
11086cf4:	e009883a 	mov	r4,fp
11086cf8:	10873ec0 	call	110873ec <_malloc_r>
11086cfc:	10003126 	beq	r2,zero,11086dc4 <__sfvwrite_r+0x24c>
11086d00:	91400417 	ldw	r5,16(r18)
11086d04:	1009883a 	mov	r4,r2
11086d08:	800d883a 	mov	r6,r16
11086d0c:	1023883a 	mov	r17,r2
11086d10:	1087c100 	call	11087c10 <memcpy>
11086d14:	90c0030b 	ldhu	r3,12(r18)
11086d18:	00beffc4 	movi	r2,-1025
11086d1c:	1886703a 	and	r3,r3,r2
11086d20:	18c02014 	ori	r3,r3,128
11086d24:	90c0030d 	sth	r3,12(r18)
11086d28:	9c07c83a 	sub	r3,r19,r16
11086d2c:	8c05883a 	add	r2,r17,r16
11086d30:	a00d883a 	mov	r6,r20
11086d34:	a021883a 	mov	r16,r20
11086d38:	90800015 	stw	r2,0(r18)
11086d3c:	90c00215 	stw	r3,8(r18)
11086d40:	94400415 	stw	r17,16(r18)
11086d44:	94c00515 	stw	r19,20(r18)
11086d48:	91000017 	ldw	r4,0(r18)
11086d4c:	b80b883a 	mov	r5,r23
11086d50:	a023883a 	mov	r17,r20
11086d54:	1087cb00 	call	11087cb0 <memmove>
11086d58:	90c00217 	ldw	r3,8(r18)
11086d5c:	90800017 	ldw	r2,0(r18)
11086d60:	a027883a 	mov	r19,r20
11086d64:	1c07c83a 	sub	r3,r3,r16
11086d68:	1405883a 	add	r2,r2,r16
11086d6c:	90c00215 	stw	r3,8(r18)
11086d70:	a021883a 	mov	r16,r20
11086d74:	90800015 	stw	r2,0(r18)
11086d78:	b0800217 	ldw	r2,8(r22)
11086d7c:	1405c83a 	sub	r2,r2,r16
11086d80:	b0800215 	stw	r2,8(r22)
11086d84:	103fa826 	beq	r2,zero,11086c28 <__sfvwrite_r+0xb0>
11086d88:	a469c83a 	sub	r20,r20,r17
11086d8c:	91c0030b 	ldhu	r7,12(r18)
11086d90:	bcef883a 	add	r23,r23,r19
11086d94:	a03fbe1e 	bne	r20,zero,11086c90 <__sfvwrite_r+0x118>
11086d98:	adc00017 	ldw	r23,0(r21)
11086d9c:	ad000117 	ldw	r20,4(r21)
11086da0:	ad400204 	addi	r21,r21,8
11086da4:	003fb906 	br	11086c8c <__sfvwrite_r+0x114>
11086da8:	ac400017 	ldw	r17,0(r21)
11086dac:	ac000117 	ldw	r16,4(r21)
11086db0:	ad400204 	addi	r21,r21,8
11086db4:	003f8a06 	br	11086be0 <__sfvwrite_r+0x68>
11086db8:	91400417 	ldw	r5,16(r18)
11086dbc:	e009883a 	mov	r4,fp
11086dc0:	10868640 	call	11086864 <_free_r>
11086dc4:	00800304 	movi	r2,12
11086dc8:	e0800015 	stw	r2,0(fp)
11086dcc:	9080030b 	ldhu	r2,12(r18)
11086dd0:	013fffc4 	movi	r4,-1
11086dd4:	10801014 	ori	r2,r2,64
11086dd8:	9080030d 	sth	r2,12(r18)
11086ddc:	003f9306 	br	11086c2c <__sfvwrite_r+0xb4>
11086de0:	0027883a 	mov	r19,zero
11086de4:	002f883a 	mov	r23,zero
11086de8:	d8000015 	stw	zero,0(sp)
11086dec:	0029883a 	mov	r20,zero
11086df0:	98001e26 	beq	r19,zero,11086e6c <__sfvwrite_r+0x2f4>
11086df4:	d8c00017 	ldw	r3,0(sp)
11086df8:	1804c03a 	cmpne	r2,r3,zero
11086dfc:	10005e26 	beq	r2,zero,11086f78 <__sfvwrite_r+0x400>
11086e00:	9821883a 	mov	r16,r19
11086e04:	a4c0012e 	bgeu	r20,r19,11086e0c <__sfvwrite_r+0x294>
11086e08:	a021883a 	mov	r16,r20
11086e0c:	91000017 	ldw	r4,0(r18)
11086e10:	90800417 	ldw	r2,16(r18)
11086e14:	91800217 	ldw	r6,8(r18)
11086e18:	91c00517 	ldw	r7,20(r18)
11086e1c:	1100022e 	bgeu	r2,r4,11086e28 <__sfvwrite_r+0x2b0>
11086e20:	31e3883a 	add	r17,r6,r7
11086e24:	8c001616 	blt	r17,r16,11086e80 <__sfvwrite_r+0x308>
11086e28:	81c03816 	blt	r16,r7,11086f0c <__sfvwrite_r+0x394>
11086e2c:	90c00917 	ldw	r3,36(r18)
11086e30:	91400717 	ldw	r5,28(r18)
11086e34:	e009883a 	mov	r4,fp
11086e38:	b80d883a 	mov	r6,r23
11086e3c:	183ee83a 	callr	r3
11086e40:	1023883a 	mov	r17,r2
11086e44:	00bfe10e 	bge	zero,r2,11086dcc <__sfvwrite_r+0x254>
11086e48:	a469c83a 	sub	r20,r20,r17
11086e4c:	a0001826 	beq	r20,zero,11086eb0 <__sfvwrite_r+0x338>
11086e50:	b0800217 	ldw	r2,8(r22)
11086e54:	1445c83a 	sub	r2,r2,r17
11086e58:	b0800215 	stw	r2,8(r22)
11086e5c:	103f7226 	beq	r2,zero,11086c28 <__sfvwrite_r+0xb0>
11086e60:	9c67c83a 	sub	r19,r19,r17
11086e64:	bc6f883a 	add	r23,r23,r17
11086e68:	983fe21e 	bne	r19,zero,11086df4 <__sfvwrite_r+0x27c>
11086e6c:	adc00017 	ldw	r23,0(r21)
11086e70:	acc00117 	ldw	r19,4(r21)
11086e74:	ad400204 	addi	r21,r21,8
11086e78:	d8000015 	stw	zero,0(sp)
11086e7c:	003fdc06 	br	11086df0 <__sfvwrite_r+0x278>
11086e80:	b80b883a 	mov	r5,r23
11086e84:	880d883a 	mov	r6,r17
11086e88:	1087cb00 	call	11087cb0 <memmove>
11086e8c:	90c00017 	ldw	r3,0(r18)
11086e90:	e009883a 	mov	r4,fp
11086e94:	900b883a 	mov	r5,r18
11086e98:	1c47883a 	add	r3,r3,r17
11086e9c:	90c00015 	stw	r3,0(r18)
11086ea0:	10862480 	call	11086248 <_fflush_r>
11086ea4:	103fc91e 	bne	r2,zero,11086dcc <__sfvwrite_r+0x254>
11086ea8:	a469c83a 	sub	r20,r20,r17
11086eac:	a03fe81e 	bne	r20,zero,11086e50 <__sfvwrite_r+0x2d8>
11086eb0:	e009883a 	mov	r4,fp
11086eb4:	900b883a 	mov	r5,r18
11086eb8:	10862480 	call	11086248 <_fflush_r>
11086ebc:	103fc31e 	bne	r2,zero,11086dcc <__sfvwrite_r+0x254>
11086ec0:	d8000015 	stw	zero,0(sp)
11086ec4:	003fe206 	br	11086e50 <__sfvwrite_r+0x2d8>
11086ec8:	91000017 	ldw	r4,0(r18)
11086ecc:	90800417 	ldw	r2,16(r18)
11086ed0:	1100022e 	bgeu	r2,r4,11086edc <__sfvwrite_r+0x364>
11086ed4:	8023883a 	mov	r17,r16
11086ed8:	85003136 	bltu	r16,r20,11086fa0 <__sfvwrite_r+0x428>
11086edc:	91c00517 	ldw	r7,20(r18)
11086ee0:	a1c01836 	bltu	r20,r7,11086f44 <__sfvwrite_r+0x3cc>
11086ee4:	90c00917 	ldw	r3,36(r18)
11086ee8:	91400717 	ldw	r5,28(r18)
11086eec:	e009883a 	mov	r4,fp
11086ef0:	b80d883a 	mov	r6,r23
11086ef4:	183ee83a 	callr	r3
11086ef8:	1021883a 	mov	r16,r2
11086efc:	00bfb30e 	bge	zero,r2,11086dcc <__sfvwrite_r+0x254>
11086f00:	1023883a 	mov	r17,r2
11086f04:	1027883a 	mov	r19,r2
11086f08:	003f9b06 	br	11086d78 <__sfvwrite_r+0x200>
11086f0c:	b80b883a 	mov	r5,r23
11086f10:	800d883a 	mov	r6,r16
11086f14:	1087cb00 	call	11087cb0 <memmove>
11086f18:	90c00217 	ldw	r3,8(r18)
11086f1c:	90800017 	ldw	r2,0(r18)
11086f20:	8023883a 	mov	r17,r16
11086f24:	1c07c83a 	sub	r3,r3,r16
11086f28:	1405883a 	add	r2,r2,r16
11086f2c:	90c00215 	stw	r3,8(r18)
11086f30:	90800015 	stw	r2,0(r18)
11086f34:	003fc406 	br	11086e48 <__sfvwrite_r+0x2d0>
11086f38:	a00d883a 	mov	r6,r20
11086f3c:	a021883a 	mov	r16,r20
11086f40:	003f8106 	br	11086d48 <__sfvwrite_r+0x1d0>
11086f44:	b80b883a 	mov	r5,r23
11086f48:	a00d883a 	mov	r6,r20
11086f4c:	1087cb00 	call	11087cb0 <memmove>
11086f50:	90c00217 	ldw	r3,8(r18)
11086f54:	90800017 	ldw	r2,0(r18)
11086f58:	a021883a 	mov	r16,r20
11086f5c:	1d07c83a 	sub	r3,r3,r20
11086f60:	1505883a 	add	r2,r2,r20
11086f64:	a023883a 	mov	r17,r20
11086f68:	a027883a 	mov	r19,r20
11086f6c:	90c00215 	stw	r3,8(r18)
11086f70:	90800015 	stw	r2,0(r18)
11086f74:	003f8006 	br	11086d78 <__sfvwrite_r+0x200>
11086f78:	b809883a 	mov	r4,r23
11086f7c:	01400284 	movi	r5,10
11086f80:	980d883a 	mov	r6,r19
11086f84:	1087b2c0 	call	11087b2c <memchr>
11086f88:	10001726 	beq	r2,zero,11086fe8 <__sfvwrite_r+0x470>
11086f8c:	15c5c83a 	sub	r2,r2,r23
11086f90:	15000044 	addi	r20,r2,1
11086f94:	00800044 	movi	r2,1
11086f98:	d8800015 	stw	r2,0(sp)
11086f9c:	003f9806 	br	11086e00 <__sfvwrite_r+0x288>
11086fa0:	b80b883a 	mov	r5,r23
11086fa4:	800d883a 	mov	r6,r16
11086fa8:	1087cb00 	call	11087cb0 <memmove>
11086fac:	90c00017 	ldw	r3,0(r18)
11086fb0:	e009883a 	mov	r4,fp
11086fb4:	900b883a 	mov	r5,r18
11086fb8:	1c07883a 	add	r3,r3,r16
11086fbc:	90c00015 	stw	r3,0(r18)
11086fc0:	8027883a 	mov	r19,r16
11086fc4:	10862480 	call	11086248 <_fflush_r>
11086fc8:	103f6b26 	beq	r2,zero,11086d78 <__sfvwrite_r+0x200>
11086fcc:	003f7f06 	br	11086dcc <__sfvwrite_r+0x254>
11086fd0:	400b883a 	mov	r5,r8
11086fd4:	e009883a 	mov	r4,fp
11086fd8:	1088e1c0 	call	11088e1c <_realloc_r>
11086fdc:	103f7626 	beq	r2,zero,11086db8 <__sfvwrite_r+0x240>
11086fe0:	1023883a 	mov	r17,r2
11086fe4:	003f5006 	br	11086d28 <__sfvwrite_r+0x1b0>
11086fe8:	00c00044 	movi	r3,1
11086fec:	9d000044 	addi	r20,r19,1
11086ff0:	d8c00015 	stw	r3,0(sp)
11086ff4:	003f8206 	br	11086e00 <__sfvwrite_r+0x288>
11086ff8:	9080030b 	ldhu	r2,12(r18)
11086ffc:	00c00244 	movi	r3,9
11087000:	013fffc4 	movi	r4,-1
11087004:	10801014 	ori	r2,r2,64
11087008:	9080030d 	sth	r2,12(r18)
1108700c:	e0c00015 	stw	r3,0(fp)
11087010:	003f0606 	br	11086c2c <__sfvwrite_r+0xb4>

11087014 <_fwalk_reent>:
11087014:	defff704 	addi	sp,sp,-36
11087018:	dcc00315 	stw	r19,12(sp)
1108701c:	24c0b804 	addi	r19,r4,736
11087020:	dd800615 	stw	r22,24(sp)
11087024:	dd400515 	stw	r21,20(sp)
11087028:	dfc00815 	stw	ra,32(sp)
1108702c:	ddc00715 	stw	r23,28(sp)
11087030:	dd000415 	stw	r20,16(sp)
11087034:	dc800215 	stw	r18,8(sp)
11087038:	dc400115 	stw	r17,4(sp)
1108703c:	dc000015 	stw	r16,0(sp)
11087040:	202b883a 	mov	r21,r4
11087044:	282d883a 	mov	r22,r5
11087048:	10864d00 	call	110864d0 <__sfp_lock_acquire>
1108704c:	98002126 	beq	r19,zero,110870d4 <_fwalk_reent+0xc0>
11087050:	002f883a 	mov	r23,zero
11087054:	9c800117 	ldw	r18,4(r19)
11087058:	9c000217 	ldw	r16,8(r19)
1108705c:	90bfffc4 	addi	r2,r18,-1
11087060:	10000d16 	blt	r2,zero,11087098 <_fwalk_reent+0x84>
11087064:	0023883a 	mov	r17,zero
11087068:	053fffc4 	movi	r20,-1
1108706c:	8080030f 	ldh	r2,12(r16)
11087070:	8c400044 	addi	r17,r17,1
11087074:	10000626 	beq	r2,zero,11087090 <_fwalk_reent+0x7c>
11087078:	8080038f 	ldh	r2,14(r16)
1108707c:	800b883a 	mov	r5,r16
11087080:	a809883a 	mov	r4,r21
11087084:	15000226 	beq	r2,r20,11087090 <_fwalk_reent+0x7c>
11087088:	b03ee83a 	callr	r22
1108708c:	b8aeb03a 	or	r23,r23,r2
11087090:	84001704 	addi	r16,r16,92
11087094:	947ff51e 	bne	r18,r17,1108706c <_fwalk_reent+0x58>
11087098:	9cc00017 	ldw	r19,0(r19)
1108709c:	983fed1e 	bne	r19,zero,11087054 <_fwalk_reent+0x40>
110870a0:	10864d40 	call	110864d4 <__sfp_lock_release>
110870a4:	b805883a 	mov	r2,r23
110870a8:	dfc00817 	ldw	ra,32(sp)
110870ac:	ddc00717 	ldw	r23,28(sp)
110870b0:	dd800617 	ldw	r22,24(sp)
110870b4:	dd400517 	ldw	r21,20(sp)
110870b8:	dd000417 	ldw	r20,16(sp)
110870bc:	dcc00317 	ldw	r19,12(sp)
110870c0:	dc800217 	ldw	r18,8(sp)
110870c4:	dc400117 	ldw	r17,4(sp)
110870c8:	dc000017 	ldw	r16,0(sp)
110870cc:	dec00904 	addi	sp,sp,36
110870d0:	f800283a 	ret
110870d4:	002f883a 	mov	r23,zero
110870d8:	003ff106 	br	110870a0 <_fwalk_reent+0x8c>

110870dc <_fwalk>:
110870dc:	defff804 	addi	sp,sp,-32
110870e0:	dcc00315 	stw	r19,12(sp)
110870e4:	24c0b804 	addi	r19,r4,736
110870e8:	dd400515 	stw	r21,20(sp)
110870ec:	dfc00715 	stw	ra,28(sp)
110870f0:	dd800615 	stw	r22,24(sp)
110870f4:	dd000415 	stw	r20,16(sp)
110870f8:	dc800215 	stw	r18,8(sp)
110870fc:	dc400115 	stw	r17,4(sp)
11087100:	dc000015 	stw	r16,0(sp)
11087104:	282b883a 	mov	r21,r5
11087108:	10864d00 	call	110864d0 <__sfp_lock_acquire>
1108710c:	98001f26 	beq	r19,zero,1108718c <_fwalk+0xb0>
11087110:	002d883a 	mov	r22,zero
11087114:	9c800117 	ldw	r18,4(r19)
11087118:	9c000217 	ldw	r16,8(r19)
1108711c:	90bfffc4 	addi	r2,r18,-1
11087120:	10000c16 	blt	r2,zero,11087154 <_fwalk+0x78>
11087124:	0023883a 	mov	r17,zero
11087128:	053fffc4 	movi	r20,-1
1108712c:	8080030f 	ldh	r2,12(r16)
11087130:	8c400044 	addi	r17,r17,1
11087134:	10000526 	beq	r2,zero,1108714c <_fwalk+0x70>
11087138:	8080038f 	ldh	r2,14(r16)
1108713c:	8009883a 	mov	r4,r16
11087140:	15000226 	beq	r2,r20,1108714c <_fwalk+0x70>
11087144:	a83ee83a 	callr	r21
11087148:	b0acb03a 	or	r22,r22,r2
1108714c:	84001704 	addi	r16,r16,92
11087150:	947ff61e 	bne	r18,r17,1108712c <_fwalk+0x50>
11087154:	9cc00017 	ldw	r19,0(r19)
11087158:	983fee1e 	bne	r19,zero,11087114 <_fwalk+0x38>
1108715c:	10864d40 	call	110864d4 <__sfp_lock_release>
11087160:	b005883a 	mov	r2,r22
11087164:	dfc00717 	ldw	ra,28(sp)
11087168:	dd800617 	ldw	r22,24(sp)
1108716c:	dd400517 	ldw	r21,20(sp)
11087170:	dd000417 	ldw	r20,16(sp)
11087174:	dcc00317 	ldw	r19,12(sp)
11087178:	dc800217 	ldw	r18,8(sp)
1108717c:	dc400117 	ldw	r17,4(sp)
11087180:	dc000017 	ldw	r16,0(sp)
11087184:	dec00804 	addi	sp,sp,32
11087188:	f800283a 	ret
1108718c:	002d883a 	mov	r22,zero
11087190:	003ff206 	br	1108715c <_fwalk+0x80>

11087194 <__locale_charset>:
11087194:	d0a00317 	ldw	r2,-32756(gp)
11087198:	f800283a 	ret

1108719c <_localeconv_r>:
1108719c:	00844274 	movhi	r2,4361
110871a0:	10bd9004 	addi	r2,r2,-2496
110871a4:	f800283a 	ret

110871a8 <localeconv>:
110871a8:	00844274 	movhi	r2,4361
110871ac:	1084bc04 	addi	r2,r2,4848
110871b0:	11000017 	ldw	r4,0(r2)
110871b4:	108719c1 	jmpi	1108719c <_localeconv_r>

110871b8 <_setlocale_r>:
110871b8:	defffc04 	addi	sp,sp,-16
110871bc:	00c44274 	movhi	r3,4361
110871c0:	18fd8b04 	addi	r3,r3,-2516
110871c4:	dc800215 	stw	r18,8(sp)
110871c8:	dc400115 	stw	r17,4(sp)
110871cc:	dc000015 	stw	r16,0(sp)
110871d0:	2023883a 	mov	r17,r4
110871d4:	2825883a 	mov	r18,r5
110871d8:	dfc00315 	stw	ra,12(sp)
110871dc:	3021883a 	mov	r16,r6
110871e0:	3009883a 	mov	r4,r6
110871e4:	180b883a 	mov	r5,r3
110871e8:	30000926 	beq	r6,zero,11087210 <_setlocale_r+0x58>
110871ec:	108963c0 	call	1108963c <strcmp>
110871f0:	8009883a 	mov	r4,r16
110871f4:	01444274 	movhi	r5,4361
110871f8:	297d7604 	addi	r5,r5,-2600
110871fc:	10000b1e 	bne	r2,zero,1108722c <_setlocale_r+0x74>
11087200:	8c000d15 	stw	r16,52(r17)
11087204:	8c800c15 	stw	r18,48(r17)
11087208:	00c44274 	movhi	r3,4361
1108720c:	18fd8b04 	addi	r3,r3,-2516
11087210:	1805883a 	mov	r2,r3
11087214:	dfc00317 	ldw	ra,12(sp)
11087218:	dc800217 	ldw	r18,8(sp)
1108721c:	dc400117 	ldw	r17,4(sp)
11087220:	dc000017 	ldw	r16,0(sp)
11087224:	dec00404 	addi	sp,sp,16
11087228:	f800283a 	ret
1108722c:	108963c0 	call	1108963c <strcmp>
11087230:	0007883a 	mov	r3,zero
11087234:	103ff226 	beq	r2,zero,11087200 <_setlocale_r+0x48>
11087238:	003ff506 	br	11087210 <_setlocale_r+0x58>

1108723c <setlocale>:
1108723c:	01844274 	movhi	r6,4361
11087240:	3184bc04 	addi	r6,r6,4848
11087244:	2007883a 	mov	r3,r4
11087248:	31000017 	ldw	r4,0(r6)
1108724c:	280d883a 	mov	r6,r5
11087250:	180b883a 	mov	r5,r3
11087254:	10871b81 	jmpi	110871b8 <_setlocale_r>

11087258 <__smakebuf_r>:
11087258:	2880030b 	ldhu	r2,12(r5)
1108725c:	deffed04 	addi	sp,sp,-76
11087260:	dc401015 	stw	r17,64(sp)
11087264:	1080008c 	andi	r2,r2,2
11087268:	dc000f15 	stw	r16,60(sp)
1108726c:	dfc01215 	stw	ra,72(sp)
11087270:	dc801115 	stw	r18,68(sp)
11087274:	2821883a 	mov	r16,r5
11087278:	2023883a 	mov	r17,r4
1108727c:	10000b26 	beq	r2,zero,110872ac <__smakebuf_r+0x54>
11087280:	28c010c4 	addi	r3,r5,67
11087284:	00800044 	movi	r2,1
11087288:	28800515 	stw	r2,20(r5)
1108728c:	28c00415 	stw	r3,16(r5)
11087290:	28c00015 	stw	r3,0(r5)
11087294:	dfc01217 	ldw	ra,72(sp)
11087298:	dc801117 	ldw	r18,68(sp)
1108729c:	dc401017 	ldw	r17,64(sp)
110872a0:	dc000f17 	ldw	r16,60(sp)
110872a4:	dec01304 	addi	sp,sp,76
110872a8:	f800283a 	ret
110872ac:	2940038f 	ldh	r5,14(r5)
110872b0:	28002116 	blt	r5,zero,11087338 <__smakebuf_r+0xe0>
110872b4:	d80d883a 	mov	r6,sp
110872b8:	10899b80 	call	110899b8 <_fstat_r>
110872bc:	10001e16 	blt	r2,zero,11087338 <__smakebuf_r+0xe0>
110872c0:	d8800117 	ldw	r2,4(sp)
110872c4:	00e00014 	movui	r3,32768
110872c8:	113c000c 	andi	r4,r2,61440
110872cc:	20c03126 	beq	r4,r3,11087394 <__smakebuf_r+0x13c>
110872d0:	8080030b 	ldhu	r2,12(r16)
110872d4:	00c80004 	movi	r3,8192
110872d8:	10820014 	ori	r2,r2,2048
110872dc:	8080030d 	sth	r2,12(r16)
110872e0:	20c01e26 	beq	r4,r3,1108735c <__smakebuf_r+0x104>
110872e4:	04810004 	movi	r18,1024
110872e8:	8809883a 	mov	r4,r17
110872ec:	900b883a 	mov	r5,r18
110872f0:	10873ec0 	call	110873ec <_malloc_r>
110872f4:	1009883a 	mov	r4,r2
110872f8:	10003126 	beq	r2,zero,110873c0 <__smakebuf_r+0x168>
110872fc:	80c0030b 	ldhu	r3,12(r16)
11087300:	00844234 	movhi	r2,4360
11087304:	10997104 	addi	r2,r2,26052
11087308:	88800f15 	stw	r2,60(r17)
1108730c:	18c02014 	ori	r3,r3,128
11087310:	84800515 	stw	r18,20(r16)
11087314:	80c0030d 	sth	r3,12(r16)
11087318:	81000415 	stw	r4,16(r16)
1108731c:	81000015 	stw	r4,0(r16)
11087320:	dfc01217 	ldw	ra,72(sp)
11087324:	dc801117 	ldw	r18,68(sp)
11087328:	dc401017 	ldw	r17,64(sp)
1108732c:	dc000f17 	ldw	r16,60(sp)
11087330:	dec01304 	addi	sp,sp,76
11087334:	f800283a 	ret
11087338:	80c0030b 	ldhu	r3,12(r16)
1108733c:	1880200c 	andi	r2,r3,128
11087340:	10000426 	beq	r2,zero,11087354 <__smakebuf_r+0xfc>
11087344:	04801004 	movi	r18,64
11087348:	18820014 	ori	r2,r3,2048
1108734c:	8080030d 	sth	r2,12(r16)
11087350:	003fe506 	br	110872e8 <__smakebuf_r+0x90>
11087354:	04810004 	movi	r18,1024
11087358:	003ffb06 	br	11087348 <__smakebuf_r+0xf0>
1108735c:	8140038f 	ldh	r5,14(r16)
11087360:	8809883a 	mov	r4,r17
11087364:	1089a2c0 	call	11089a2c <_isatty_r>
11087368:	103fde26 	beq	r2,zero,110872e4 <__smakebuf_r+0x8c>
1108736c:	8080030b 	ldhu	r2,12(r16)
11087370:	80c010c4 	addi	r3,r16,67
11087374:	04810004 	movi	r18,1024
11087378:	10800054 	ori	r2,r2,1
1108737c:	8080030d 	sth	r2,12(r16)
11087380:	00800044 	movi	r2,1
11087384:	80c00415 	stw	r3,16(r16)
11087388:	80800515 	stw	r2,20(r16)
1108738c:	80c00015 	stw	r3,0(r16)
11087390:	003fd506 	br	110872e8 <__smakebuf_r+0x90>
11087394:	80c00a17 	ldw	r3,40(r16)
11087398:	00844274 	movhi	r2,4361
1108739c:	10a53e04 	addi	r2,r2,-27400
110873a0:	18bfcb1e 	bne	r3,r2,110872d0 <__smakebuf_r+0x78>
110873a4:	8080030b 	ldhu	r2,12(r16)
110873a8:	00c10004 	movi	r3,1024
110873ac:	1825883a 	mov	r18,r3
110873b0:	10c4b03a 	or	r2,r2,r3
110873b4:	8080030d 	sth	r2,12(r16)
110873b8:	80c01315 	stw	r3,76(r16)
110873bc:	003fca06 	br	110872e8 <__smakebuf_r+0x90>
110873c0:	8100030b 	ldhu	r4,12(r16)
110873c4:	2080800c 	andi	r2,r4,512
110873c8:	103fb21e 	bne	r2,zero,11087294 <__smakebuf_r+0x3c>
110873cc:	80c010c4 	addi	r3,r16,67
110873d0:	21000094 	ori	r4,r4,2
110873d4:	00800044 	movi	r2,1
110873d8:	80800515 	stw	r2,20(r16)
110873dc:	8100030d 	sth	r4,12(r16)
110873e0:	80c00415 	stw	r3,16(r16)
110873e4:	80c00015 	stw	r3,0(r16)
110873e8:	003faa06 	br	11087294 <__smakebuf_r+0x3c>

110873ec <_malloc_r>:
110873ec:	defff604 	addi	sp,sp,-40
110873f0:	28c002c4 	addi	r3,r5,11
110873f4:	00800584 	movi	r2,22
110873f8:	dc800215 	stw	r18,8(sp)
110873fc:	dfc00915 	stw	ra,36(sp)
11087400:	df000815 	stw	fp,32(sp)
11087404:	ddc00715 	stw	r23,28(sp)
11087408:	dd800615 	stw	r22,24(sp)
1108740c:	dd400515 	stw	r21,20(sp)
11087410:	dd000415 	stw	r20,16(sp)
11087414:	dcc00315 	stw	r19,12(sp)
11087418:	dc400115 	stw	r17,4(sp)
1108741c:	dc000015 	stw	r16,0(sp)
11087420:	2025883a 	mov	r18,r4
11087424:	10c01236 	bltu	r2,r3,11087470 <_malloc_r+0x84>
11087428:	04400404 	movi	r17,16
1108742c:	8940142e 	bgeu	r17,r5,11087480 <_malloc_r+0x94>
11087430:	00800304 	movi	r2,12
11087434:	0007883a 	mov	r3,zero
11087438:	90800015 	stw	r2,0(r18)
1108743c:	1805883a 	mov	r2,r3
11087440:	dfc00917 	ldw	ra,36(sp)
11087444:	df000817 	ldw	fp,32(sp)
11087448:	ddc00717 	ldw	r23,28(sp)
1108744c:	dd800617 	ldw	r22,24(sp)
11087450:	dd400517 	ldw	r21,20(sp)
11087454:	dd000417 	ldw	r20,16(sp)
11087458:	dcc00317 	ldw	r19,12(sp)
1108745c:	dc800217 	ldw	r18,8(sp)
11087460:	dc400117 	ldw	r17,4(sp)
11087464:	dc000017 	ldw	r16,0(sp)
11087468:	dec00a04 	addi	sp,sp,40
1108746c:	f800283a 	ret
11087470:	00bffe04 	movi	r2,-8
11087474:	18a2703a 	and	r17,r3,r2
11087478:	883fed16 	blt	r17,zero,11087430 <_malloc_r+0x44>
1108747c:	897fec36 	bltu	r17,r5,11087430 <_malloc_r+0x44>
11087480:	9009883a 	mov	r4,r18
11087484:	108c6b40 	call	1108c6b4 <__malloc_lock>
11087488:	00807dc4 	movi	r2,503
1108748c:	14402b2e 	bgeu	r2,r17,1108753c <_malloc_r+0x150>
11087490:	8806d27a 	srli	r3,r17,9
11087494:	18003f1e 	bne	r3,zero,11087594 <_malloc_r+0x1a8>
11087498:	880cd0fa 	srli	r6,r17,3
1108749c:	300490fa 	slli	r2,r6,3
110874a0:	02c44274 	movhi	r11,4361
110874a4:	5aff3804 	addi	r11,r11,-800
110874a8:	12cb883a 	add	r5,r2,r11
110874ac:	2c000317 	ldw	r16,12(r5)
110874b0:	580f883a 	mov	r7,r11
110874b4:	2c00041e 	bne	r5,r16,110874c8 <_malloc_r+0xdc>
110874b8:	00000a06 	br	110874e4 <_malloc_r+0xf8>
110874bc:	1800860e 	bge	r3,zero,110876d8 <_malloc_r+0x2ec>
110874c0:	84000317 	ldw	r16,12(r16)
110874c4:	2c000726 	beq	r5,r16,110874e4 <_malloc_r+0xf8>
110874c8:	80800117 	ldw	r2,4(r16)
110874cc:	00ffff04 	movi	r3,-4
110874d0:	10c8703a 	and	r4,r2,r3
110874d4:	2447c83a 	sub	r3,r4,r17
110874d8:	008003c4 	movi	r2,15
110874dc:	10fff70e 	bge	r2,r3,110874bc <_malloc_r+0xd0>
110874e0:	31bfffc4 	addi	r6,r6,-1
110874e4:	32400044 	addi	r9,r6,1
110874e8:	02844274 	movhi	r10,4361
110874ec:	52bf3a04 	addi	r10,r10,-792
110874f0:	54000217 	ldw	r16,8(r10)
110874f4:	8280a026 	beq	r16,r10,11087778 <_malloc_r+0x38c>
110874f8:	80800117 	ldw	r2,4(r16)
110874fc:	00ffff04 	movi	r3,-4
11087500:	10ca703a 	and	r5,r2,r3
11087504:	2c4dc83a 	sub	r6,r5,r17
11087508:	008003c4 	movi	r2,15
1108750c:	11808316 	blt	r2,r6,1108771c <_malloc_r+0x330>
11087510:	52800315 	stw	r10,12(r10)
11087514:	52800215 	stw	r10,8(r10)
11087518:	30002916 	blt	r6,zero,110875c0 <_malloc_r+0x1d4>
1108751c:	8147883a 	add	r3,r16,r5
11087520:	18800117 	ldw	r2,4(r3)
11087524:	9009883a 	mov	r4,r18
11087528:	10800054 	ori	r2,r2,1
1108752c:	18800115 	stw	r2,4(r3)
11087530:	108c6d40 	call	1108c6d4 <__malloc_unlock>
11087534:	80c00204 	addi	r3,r16,8
11087538:	003fc006 	br	1108743c <_malloc_r+0x50>
1108753c:	02c44274 	movhi	r11,4361
11087540:	5aff3804 	addi	r11,r11,-800
11087544:	8ac5883a 	add	r2,r17,r11
11087548:	14000317 	ldw	r16,12(r2)
1108754c:	580f883a 	mov	r7,r11
11087550:	8806d0fa 	srli	r3,r17,3
11087554:	14006c26 	beq	r2,r16,11087708 <_malloc_r+0x31c>
11087558:	80c00117 	ldw	r3,4(r16)
1108755c:	00bfff04 	movi	r2,-4
11087560:	81800317 	ldw	r6,12(r16)
11087564:	1886703a 	and	r3,r3,r2
11087568:	80c7883a 	add	r3,r16,r3
1108756c:	18800117 	ldw	r2,4(r3)
11087570:	81400217 	ldw	r5,8(r16)
11087574:	9009883a 	mov	r4,r18
11087578:	10800054 	ori	r2,r2,1
1108757c:	18800115 	stw	r2,4(r3)
11087580:	31400215 	stw	r5,8(r6)
11087584:	29800315 	stw	r6,12(r5)
11087588:	108c6d40 	call	1108c6d4 <__malloc_unlock>
1108758c:	80c00204 	addi	r3,r16,8
11087590:	003faa06 	br	1108743c <_malloc_r+0x50>
11087594:	00800104 	movi	r2,4
11087598:	10c0052e 	bgeu	r2,r3,110875b0 <_malloc_r+0x1c4>
1108759c:	00800504 	movi	r2,20
110875a0:	10c07836 	bltu	r2,r3,11087784 <_malloc_r+0x398>
110875a4:	198016c4 	addi	r6,r3,91
110875a8:	300490fa 	slli	r2,r6,3
110875ac:	003fbc06 	br	110874a0 <_malloc_r+0xb4>
110875b0:	8804d1ba 	srli	r2,r17,6
110875b4:	11800e04 	addi	r6,r2,56
110875b8:	300490fa 	slli	r2,r6,3
110875bc:	003fb806 	br	110874a0 <_malloc_r+0xb4>
110875c0:	00807fc4 	movi	r2,511
110875c4:	1140bb36 	bltu	r2,r5,110878b4 <_malloc_r+0x4c8>
110875c8:	2806d0fa 	srli	r3,r5,3
110875cc:	573ffe04 	addi	fp,r10,-8
110875d0:	00800044 	movi	r2,1
110875d4:	180890fa 	slli	r4,r3,3
110875d8:	1807d0ba 	srai	r3,r3,2
110875dc:	e1c00117 	ldw	r7,4(fp)
110875e0:	5909883a 	add	r4,r11,r4
110875e4:	21400217 	ldw	r5,8(r4)
110875e8:	10c4983a 	sll	r2,r2,r3
110875ec:	81000315 	stw	r4,12(r16)
110875f0:	81400215 	stw	r5,8(r16)
110875f4:	388eb03a 	or	r7,r7,r2
110875f8:	2c000315 	stw	r16,12(r5)
110875fc:	24000215 	stw	r16,8(r4)
11087600:	e1c00115 	stw	r7,4(fp)
11087604:	4807883a 	mov	r3,r9
11087608:	4800cd16 	blt	r9,zero,11087940 <_malloc_r+0x554>
1108760c:	1807d0ba 	srai	r3,r3,2
11087610:	00800044 	movi	r2,1
11087614:	10c8983a 	sll	r4,r2,r3
11087618:	39004436 	bltu	r7,r4,1108772c <_malloc_r+0x340>
1108761c:	21c4703a 	and	r2,r4,r7
11087620:	10000a1e 	bne	r2,zero,1108764c <_malloc_r+0x260>
11087624:	2109883a 	add	r4,r4,r4
11087628:	00bfff04 	movi	r2,-4
1108762c:	4884703a 	and	r2,r9,r2
11087630:	3906703a 	and	r3,r7,r4
11087634:	12400104 	addi	r9,r2,4
11087638:	1800041e 	bne	r3,zero,1108764c <_malloc_r+0x260>
1108763c:	2109883a 	add	r4,r4,r4
11087640:	3904703a 	and	r2,r7,r4
11087644:	4a400104 	addi	r9,r9,4
11087648:	103ffc26 	beq	r2,zero,1108763c <_malloc_r+0x250>
1108764c:	480490fa 	slli	r2,r9,3
11087650:	4819883a 	mov	r12,r9
11087654:	023fff04 	movi	r8,-4
11087658:	589b883a 	add	r13,r11,r2
1108765c:	6807883a 	mov	r3,r13
11087660:	014003c4 	movi	r5,15
11087664:	1c000317 	ldw	r16,12(r3)
11087668:	1c00041e 	bne	r3,r16,1108767c <_malloc_r+0x290>
1108766c:	0000a706 	br	1108790c <_malloc_r+0x520>
11087670:	3000ab0e 	bge	r6,zero,11087920 <_malloc_r+0x534>
11087674:	84000317 	ldw	r16,12(r16)
11087678:	1c00a426 	beq	r3,r16,1108790c <_malloc_r+0x520>
1108767c:	80800117 	ldw	r2,4(r16)
11087680:	1204703a 	and	r2,r2,r8
11087684:	144dc83a 	sub	r6,r2,r17
11087688:	29bff90e 	bge	r5,r6,11087670 <_malloc_r+0x284>
1108768c:	81000317 	ldw	r4,12(r16)
11087690:	80c00217 	ldw	r3,8(r16)
11087694:	89400054 	ori	r5,r17,1
11087698:	8445883a 	add	r2,r16,r17
1108769c:	20c00215 	stw	r3,8(r4)
110876a0:	19000315 	stw	r4,12(r3)
110876a4:	81400115 	stw	r5,4(r16)
110876a8:	1187883a 	add	r3,r2,r6
110876ac:	31000054 	ori	r4,r6,1
110876b0:	50800315 	stw	r2,12(r10)
110876b4:	50800215 	stw	r2,8(r10)
110876b8:	19800015 	stw	r6,0(r3)
110876bc:	11000115 	stw	r4,4(r2)
110876c0:	12800215 	stw	r10,8(r2)
110876c4:	12800315 	stw	r10,12(r2)
110876c8:	9009883a 	mov	r4,r18
110876cc:	108c6d40 	call	1108c6d4 <__malloc_unlock>
110876d0:	80c00204 	addi	r3,r16,8
110876d4:	003f5906 	br	1108743c <_malloc_r+0x50>
110876d8:	8109883a 	add	r4,r16,r4
110876dc:	20800117 	ldw	r2,4(r4)
110876e0:	80c00217 	ldw	r3,8(r16)
110876e4:	81400317 	ldw	r5,12(r16)
110876e8:	10800054 	ori	r2,r2,1
110876ec:	20800115 	stw	r2,4(r4)
110876f0:	28c00215 	stw	r3,8(r5)
110876f4:	19400315 	stw	r5,12(r3)
110876f8:	9009883a 	mov	r4,r18
110876fc:	108c6d40 	call	1108c6d4 <__malloc_unlock>
11087700:	80c00204 	addi	r3,r16,8
11087704:	003f4d06 	br	1108743c <_malloc_r+0x50>
11087708:	80800204 	addi	r2,r16,8
1108770c:	14000317 	ldw	r16,12(r2)
11087710:	143f911e 	bne	r2,r16,11087558 <_malloc_r+0x16c>
11087714:	1a400084 	addi	r9,r3,2
11087718:	003f7306 	br	110874e8 <_malloc_r+0xfc>
1108771c:	88c00054 	ori	r3,r17,1
11087720:	8445883a 	add	r2,r16,r17
11087724:	80c00115 	stw	r3,4(r16)
11087728:	003fdf06 	br	110876a8 <_malloc_r+0x2bc>
1108772c:	e4000217 	ldw	r16,8(fp)
11087730:	00bfff04 	movi	r2,-4
11087734:	80c00117 	ldw	r3,4(r16)
11087738:	802d883a 	mov	r22,r16
1108773c:	18aa703a 	and	r21,r3,r2
11087740:	ac401636 	bltu	r21,r17,1108779c <_malloc_r+0x3b0>
11087744:	ac49c83a 	sub	r4,r21,r17
11087748:	008003c4 	movi	r2,15
1108774c:	1100130e 	bge	r2,r4,1108779c <_malloc_r+0x3b0>
11087750:	88800054 	ori	r2,r17,1
11087754:	8447883a 	add	r3,r16,r17
11087758:	80800115 	stw	r2,4(r16)
1108775c:	20800054 	ori	r2,r4,1
11087760:	18800115 	stw	r2,4(r3)
11087764:	e0c00215 	stw	r3,8(fp)
11087768:	9009883a 	mov	r4,r18
1108776c:	108c6d40 	call	1108c6d4 <__malloc_unlock>
11087770:	80c00204 	addi	r3,r16,8
11087774:	003f3106 	br	1108743c <_malloc_r+0x50>
11087778:	39c00117 	ldw	r7,4(r7)
1108777c:	573ffe04 	addi	fp,r10,-8
11087780:	003fa006 	br	11087604 <_malloc_r+0x218>
11087784:	00801504 	movi	r2,84
11087788:	10c06736 	bltu	r2,r3,11087928 <_malloc_r+0x53c>
1108778c:	8804d33a 	srli	r2,r17,12
11087790:	11801b84 	addi	r6,r2,110
11087794:	300490fa 	slli	r2,r6,3
11087798:	003f4106 	br	110874a0 <_malloc_r+0xb4>
1108779c:	d0a6ab17 	ldw	r2,-25940(gp)
110877a0:	d0e00517 	ldw	r3,-32748(gp)
110877a4:	053fffc4 	movi	r20,-1
110877a8:	10800404 	addi	r2,r2,16
110877ac:	88a7883a 	add	r19,r17,r2
110877b0:	1d000326 	beq	r3,r20,110877c0 <_malloc_r+0x3d4>
110877b4:	98c3ffc4 	addi	r3,r19,4095
110877b8:	00bc0004 	movi	r2,-4096
110877bc:	18a6703a 	and	r19,r3,r2
110877c0:	9009883a 	mov	r4,r18
110877c4:	980b883a 	mov	r5,r19
110877c8:	10894800 	call	11089480 <_sbrk_r>
110877cc:	1009883a 	mov	r4,r2
110877d0:	15000426 	beq	r2,r20,110877e4 <_malloc_r+0x3f8>
110877d4:	854b883a 	add	r5,r16,r21
110877d8:	1029883a 	mov	r20,r2
110877dc:	11405a2e 	bgeu	r2,r5,11087948 <_malloc_r+0x55c>
110877e0:	87000c26 	beq	r16,fp,11087814 <_malloc_r+0x428>
110877e4:	e4000217 	ldw	r16,8(fp)
110877e8:	80c00117 	ldw	r3,4(r16)
110877ec:	00bfff04 	movi	r2,-4
110877f0:	1884703a 	and	r2,r3,r2
110877f4:	14400336 	bltu	r2,r17,11087804 <_malloc_r+0x418>
110877f8:	1449c83a 	sub	r4,r2,r17
110877fc:	008003c4 	movi	r2,15
11087800:	113fd316 	blt	r2,r4,11087750 <_malloc_r+0x364>
11087804:	9009883a 	mov	r4,r18
11087808:	108c6d40 	call	1108c6d4 <__malloc_unlock>
1108780c:	0007883a 	mov	r3,zero
11087810:	003f0a06 	br	1108743c <_malloc_r+0x50>
11087814:	05c44274 	movhi	r23,4361
11087818:	bdcb7b04 	addi	r23,r23,11756
1108781c:	b8800017 	ldw	r2,0(r23)
11087820:	988d883a 	add	r6,r19,r2
11087824:	b9800015 	stw	r6,0(r23)
11087828:	d0e00517 	ldw	r3,-32748(gp)
1108782c:	00bfffc4 	movi	r2,-1
11087830:	18808e26 	beq	r3,r2,11087a6c <_malloc_r+0x680>
11087834:	2145c83a 	sub	r2,r4,r5
11087838:	3085883a 	add	r2,r6,r2
1108783c:	b8800015 	stw	r2,0(r23)
11087840:	20c001cc 	andi	r3,r4,7
11087844:	18005f1e 	bne	r3,zero,110879c4 <_malloc_r+0x5d8>
11087848:	000b883a 	mov	r5,zero
1108784c:	a4c5883a 	add	r2,r20,r19
11087850:	1083ffcc 	andi	r2,r2,4095
11087854:	00c40004 	movi	r3,4096
11087858:	1887c83a 	sub	r3,r3,r2
1108785c:	28e7883a 	add	r19,r5,r3
11087860:	9009883a 	mov	r4,r18
11087864:	980b883a 	mov	r5,r19
11087868:	10894800 	call	11089480 <_sbrk_r>
1108786c:	1007883a 	mov	r3,r2
11087870:	00bfffc4 	movi	r2,-1
11087874:	18807a26 	beq	r3,r2,11087a60 <_malloc_r+0x674>
11087878:	1d05c83a 	sub	r2,r3,r20
1108787c:	9885883a 	add	r2,r19,r2
11087880:	10c00054 	ori	r3,r2,1
11087884:	b8800017 	ldw	r2,0(r23)
11087888:	a021883a 	mov	r16,r20
1108788c:	a0c00115 	stw	r3,4(r20)
11087890:	9885883a 	add	r2,r19,r2
11087894:	b8800015 	stw	r2,0(r23)
11087898:	e5000215 	stw	r20,8(fp)
1108789c:	b7003626 	beq	r22,fp,11087978 <_malloc_r+0x58c>
110878a0:	018003c4 	movi	r6,15
110878a4:	35404b36 	bltu	r6,r21,110879d4 <_malloc_r+0x5e8>
110878a8:	00800044 	movi	r2,1
110878ac:	a0800115 	stw	r2,4(r20)
110878b0:	003fcd06 	br	110877e8 <_malloc_r+0x3fc>
110878b4:	2808d27a 	srli	r4,r5,9
110878b8:	2000371e 	bne	r4,zero,11087998 <_malloc_r+0x5ac>
110878bc:	2808d0fa 	srli	r4,r5,3
110878c0:	200690fa 	slli	r3,r4,3
110878c4:	1ad1883a 	add	r8,r3,r11
110878c8:	41800217 	ldw	r6,8(r8)
110878cc:	41805b26 	beq	r8,r6,11087a3c <_malloc_r+0x650>
110878d0:	30800117 	ldw	r2,4(r6)
110878d4:	00ffff04 	movi	r3,-4
110878d8:	10c4703a 	and	r2,r2,r3
110878dc:	2880022e 	bgeu	r5,r2,110878e8 <_malloc_r+0x4fc>
110878e0:	31800217 	ldw	r6,8(r6)
110878e4:	41bffa1e 	bne	r8,r6,110878d0 <_malloc_r+0x4e4>
110878e8:	32000317 	ldw	r8,12(r6)
110878ec:	39c00117 	ldw	r7,4(r7)
110878f0:	82000315 	stw	r8,12(r16)
110878f4:	81800215 	stw	r6,8(r16)
110878f8:	07044274 	movhi	fp,4361
110878fc:	e73f3804 	addi	fp,fp,-800
11087900:	34000315 	stw	r16,12(r6)
11087904:	44000215 	stw	r16,8(r8)
11087908:	003f3e06 	br	11087604 <_malloc_r+0x218>
1108790c:	63000044 	addi	r12,r12,1
11087910:	608000cc 	andi	r2,r12,3
11087914:	10005d26 	beq	r2,zero,11087a8c <_malloc_r+0x6a0>
11087918:	18c00204 	addi	r3,r3,8
1108791c:	003f5106 	br	11087664 <_malloc_r+0x278>
11087920:	8089883a 	add	r4,r16,r2
11087924:	003f6d06 	br	110876dc <_malloc_r+0x2f0>
11087928:	00805504 	movi	r2,340
1108792c:	10c02036 	bltu	r2,r3,110879b0 <_malloc_r+0x5c4>
11087930:	8804d3fa 	srli	r2,r17,15
11087934:	11801dc4 	addi	r6,r2,119
11087938:	300490fa 	slli	r2,r6,3
1108793c:	003ed806 	br	110874a0 <_malloc_r+0xb4>
11087940:	48c000c4 	addi	r3,r9,3
11087944:	003f3106 	br	1108760c <_malloc_r+0x220>
11087948:	05c44274 	movhi	r23,4361
1108794c:	bdcb7b04 	addi	r23,r23,11756
11087950:	b8800017 	ldw	r2,0(r23)
11087954:	988d883a 	add	r6,r19,r2
11087958:	b9800015 	stw	r6,0(r23)
1108795c:	293fb21e 	bne	r5,r4,11087828 <_malloc_r+0x43c>
11087960:	2083ffcc 	andi	r2,r4,4095
11087964:	103fb01e 	bne	r2,zero,11087828 <_malloc_r+0x43c>
11087968:	e4000217 	ldw	r16,8(fp)
1108796c:	9d45883a 	add	r2,r19,r21
11087970:	10800054 	ori	r2,r2,1
11087974:	80800115 	stw	r2,4(r16)
11087978:	b8c00017 	ldw	r3,0(r23)
1108797c:	d0a6ac17 	ldw	r2,-25936(gp)
11087980:	10c0012e 	bgeu	r2,r3,11087988 <_malloc_r+0x59c>
11087984:	d0e6ac15 	stw	r3,-25936(gp)
11087988:	d0a6ad17 	ldw	r2,-25932(gp)
1108798c:	10ff962e 	bgeu	r2,r3,110877e8 <_malloc_r+0x3fc>
11087990:	d0e6ad15 	stw	r3,-25932(gp)
11087994:	003f9406 	br	110877e8 <_malloc_r+0x3fc>
11087998:	00800104 	movi	r2,4
1108799c:	11001e36 	bltu	r2,r4,11087a18 <_malloc_r+0x62c>
110879a0:	2804d1ba 	srli	r2,r5,6
110879a4:	11000e04 	addi	r4,r2,56
110879a8:	200690fa 	slli	r3,r4,3
110879ac:	003fc506 	br	110878c4 <_malloc_r+0x4d8>
110879b0:	00815504 	movi	r2,1364
110879b4:	10c01d2e 	bgeu	r2,r3,11087a2c <_malloc_r+0x640>
110879b8:	01801f84 	movi	r6,126
110879bc:	0080fc04 	movi	r2,1008
110879c0:	003eb706 	br	110874a0 <_malloc_r+0xb4>
110879c4:	00800204 	movi	r2,8
110879c8:	10cbc83a 	sub	r5,r2,r3
110879cc:	2169883a 	add	r20,r4,r5
110879d0:	003f9e06 	br	1108784c <_malloc_r+0x460>
110879d4:	00bffe04 	movi	r2,-8
110879d8:	a93ffd04 	addi	r4,r21,-12
110879dc:	2088703a 	and	r4,r4,r2
110879e0:	b10b883a 	add	r5,r22,r4
110879e4:	00c00144 	movi	r3,5
110879e8:	28c00215 	stw	r3,8(r5)
110879ec:	28c00115 	stw	r3,4(r5)
110879f0:	b0800117 	ldw	r2,4(r22)
110879f4:	1080004c 	andi	r2,r2,1
110879f8:	2084b03a 	or	r2,r4,r2
110879fc:	b0800115 	stw	r2,4(r22)
11087a00:	313fdd2e 	bgeu	r6,r4,11087978 <_malloc_r+0x58c>
11087a04:	b1400204 	addi	r5,r22,8
11087a08:	9009883a 	mov	r4,r18
11087a0c:	10868640 	call	11086864 <_free_r>
11087a10:	e4000217 	ldw	r16,8(fp)
11087a14:	003fd806 	br	11087978 <_malloc_r+0x58c>
11087a18:	00800504 	movi	r2,20
11087a1c:	11001536 	bltu	r2,r4,11087a74 <_malloc_r+0x688>
11087a20:	210016c4 	addi	r4,r4,91
11087a24:	200690fa 	slli	r3,r4,3
11087a28:	003fa606 	br	110878c4 <_malloc_r+0x4d8>
11087a2c:	8804d4ba 	srli	r2,r17,18
11087a30:	11801f04 	addi	r6,r2,124
11087a34:	300490fa 	slli	r2,r6,3
11087a38:	003e9906 	br	110874a0 <_malloc_r+0xb4>
11087a3c:	2009d0ba 	srai	r4,r4,2
11087a40:	01444274 	movhi	r5,4361
11087a44:	297f3804 	addi	r5,r5,-800
11087a48:	00c00044 	movi	r3,1
11087a4c:	28800117 	ldw	r2,4(r5)
11087a50:	1906983a 	sll	r3,r3,r4
11087a54:	10c4b03a 	or	r2,r2,r3
11087a58:	28800115 	stw	r2,4(r5)
11087a5c:	003fa306 	br	110878ec <_malloc_r+0x500>
11087a60:	0027883a 	mov	r19,zero
11087a64:	00c00044 	movi	r3,1
11087a68:	003f8606 	br	11087884 <_malloc_r+0x498>
11087a6c:	d1200515 	stw	r4,-32748(gp)
11087a70:	003f7306 	br	11087840 <_malloc_r+0x454>
11087a74:	00801504 	movi	r2,84
11087a78:	11001936 	bltu	r2,r4,11087ae0 <_malloc_r+0x6f4>
11087a7c:	2804d33a 	srli	r2,r5,12
11087a80:	11001b84 	addi	r4,r2,110
11087a84:	200690fa 	slli	r3,r4,3
11087a88:	003f8e06 	br	110878c4 <_malloc_r+0x4d8>
11087a8c:	480b883a 	mov	r5,r9
11087a90:	6807883a 	mov	r3,r13
11087a94:	288000cc 	andi	r2,r5,3
11087a98:	18fffe04 	addi	r3,r3,-8
11087a9c:	297fffc4 	addi	r5,r5,-1
11087aa0:	10001526 	beq	r2,zero,11087af8 <_malloc_r+0x70c>
11087aa4:	18800217 	ldw	r2,8(r3)
11087aa8:	10fffa26 	beq	r2,r3,11087a94 <_malloc_r+0x6a8>
11087aac:	2109883a 	add	r4,r4,r4
11087ab0:	393f1e36 	bltu	r7,r4,1108772c <_malloc_r+0x340>
11087ab4:	203f1d26 	beq	r4,zero,1108772c <_malloc_r+0x340>
11087ab8:	21c4703a 	and	r2,r4,r7
11087abc:	10000226 	beq	r2,zero,11087ac8 <_malloc_r+0x6dc>
11087ac0:	6013883a 	mov	r9,r12
11087ac4:	003ee106 	br	1108764c <_malloc_r+0x260>
11087ac8:	2109883a 	add	r4,r4,r4
11087acc:	3904703a 	and	r2,r7,r4
11087ad0:	63000104 	addi	r12,r12,4
11087ad4:	103ffc26 	beq	r2,zero,11087ac8 <_malloc_r+0x6dc>
11087ad8:	6013883a 	mov	r9,r12
11087adc:	003edb06 	br	1108764c <_malloc_r+0x260>
11087ae0:	00805504 	movi	r2,340
11087ae4:	11000836 	bltu	r2,r4,11087b08 <_malloc_r+0x71c>
11087ae8:	2804d3fa 	srli	r2,r5,15
11087aec:	11001dc4 	addi	r4,r2,119
11087af0:	200690fa 	slli	r3,r4,3
11087af4:	003f7306 	br	110878c4 <_malloc_r+0x4d8>
11087af8:	0104303a 	nor	r2,zero,r4
11087afc:	388e703a 	and	r7,r7,r2
11087b00:	e1c00115 	stw	r7,4(fp)
11087b04:	003fe906 	br	11087aac <_malloc_r+0x6c0>
11087b08:	00815504 	movi	r2,1364
11087b0c:	1100032e 	bgeu	r2,r4,11087b1c <_malloc_r+0x730>
11087b10:	01001f84 	movi	r4,126
11087b14:	00c0fc04 	movi	r3,1008
11087b18:	003f6a06 	br	110878c4 <_malloc_r+0x4d8>
11087b1c:	2804d4ba 	srli	r2,r5,18
11087b20:	11001f04 	addi	r4,r2,124
11087b24:	200690fa 	slli	r3,r4,3
11087b28:	003f6606 	br	110878c4 <_malloc_r+0x4d8>

11087b2c <memchr>:
11087b2c:	008000c4 	movi	r2,3
11087b30:	29403fcc 	andi	r5,r5,255
11087b34:	2007883a 	mov	r3,r4
11087b38:	1180022e 	bgeu	r2,r6,11087b44 <memchr+0x18>
11087b3c:	2084703a 	and	r2,r4,r2
11087b40:	10000b26 	beq	r2,zero,11087b70 <memchr+0x44>
11087b44:	313fffc4 	addi	r4,r6,-1
11087b48:	3000051e 	bne	r6,zero,11087b60 <memchr+0x34>
11087b4c:	00002c06 	br	11087c00 <memchr+0xd4>
11087b50:	213fffc4 	addi	r4,r4,-1
11087b54:	00bfffc4 	movi	r2,-1
11087b58:	18c00044 	addi	r3,r3,1
11087b5c:	20802826 	beq	r4,r2,11087c00 <memchr+0xd4>
11087b60:	18800003 	ldbu	r2,0(r3)
11087b64:	28bffa1e 	bne	r5,r2,11087b50 <memchr+0x24>
11087b68:	1805883a 	mov	r2,r3
11087b6c:	f800283a 	ret
11087b70:	0011883a 	mov	r8,zero
11087b74:	0007883a 	mov	r3,zero
11087b78:	01c00104 	movi	r7,4
11087b7c:	4004923a 	slli	r2,r8,8
11087b80:	18c00044 	addi	r3,r3,1
11087b84:	1151883a 	add	r8,r2,r5
11087b88:	19fffc1e 	bne	r3,r7,11087b7c <memchr+0x50>
11087b8c:	02bfbff4 	movhi	r10,65279
11087b90:	52bfbfc4 	addi	r10,r10,-257
11087b94:	02602074 	movhi	r9,32897
11087b98:	4a602004 	addi	r9,r9,-32640
11087b9c:	02c000c4 	movi	r11,3
11087ba0:	20800017 	ldw	r2,0(r4)
11087ba4:	31bfff04 	addi	r6,r6,-4
11087ba8:	200f883a 	mov	r7,r4
11087bac:	1204f03a 	xor	r2,r2,r8
11087bb0:	1287883a 	add	r3,r2,r10
11087bb4:	1a46703a 	and	r3,r3,r9
11087bb8:	0084303a 	nor	r2,zero,r2
11087bbc:	10c4703a 	and	r2,r2,r3
11087bc0:	10000b26 	beq	r2,zero,11087bf0 <memchr+0xc4>
11087bc4:	20800003 	ldbu	r2,0(r4)
11087bc8:	28800f26 	beq	r5,r2,11087c08 <memchr+0xdc>
11087bcc:	20800043 	ldbu	r2,1(r4)
11087bd0:	21c00044 	addi	r7,r4,1
11087bd4:	28800c26 	beq	r5,r2,11087c08 <memchr+0xdc>
11087bd8:	20800083 	ldbu	r2,2(r4)
11087bdc:	21c00084 	addi	r7,r4,2
11087be0:	28800926 	beq	r5,r2,11087c08 <memchr+0xdc>
11087be4:	208000c3 	ldbu	r2,3(r4)
11087be8:	21c000c4 	addi	r7,r4,3
11087bec:	28800626 	beq	r5,r2,11087c08 <memchr+0xdc>
11087bf0:	21000104 	addi	r4,r4,4
11087bf4:	59bfea36 	bltu	r11,r6,11087ba0 <memchr+0x74>
11087bf8:	2007883a 	mov	r3,r4
11087bfc:	003fd106 	br	11087b44 <memchr+0x18>
11087c00:	0005883a 	mov	r2,zero
11087c04:	f800283a 	ret
11087c08:	3805883a 	mov	r2,r7
11087c0c:	f800283a 	ret

11087c10 <memcpy>:
11087c10:	01c003c4 	movi	r7,15
11087c14:	2007883a 	mov	r3,r4
11087c18:	3980032e 	bgeu	r7,r6,11087c28 <memcpy+0x18>
11087c1c:	2904b03a 	or	r2,r5,r4
11087c20:	108000cc 	andi	r2,r2,3
11087c24:	10000926 	beq	r2,zero,11087c4c <memcpy+0x3c>
11087c28:	30000626 	beq	r6,zero,11087c44 <memcpy+0x34>
11087c2c:	30cd883a 	add	r6,r6,r3
11087c30:	28800003 	ldbu	r2,0(r5)
11087c34:	29400044 	addi	r5,r5,1
11087c38:	18800005 	stb	r2,0(r3)
11087c3c:	18c00044 	addi	r3,r3,1
11087c40:	30fffb1e 	bne	r6,r3,11087c30 <memcpy+0x20>
11087c44:	2005883a 	mov	r2,r4
11087c48:	f800283a 	ret
11087c4c:	3811883a 	mov	r8,r7
11087c50:	200f883a 	mov	r7,r4
11087c54:	28c00017 	ldw	r3,0(r5)
11087c58:	31bffc04 	addi	r6,r6,-16
11087c5c:	38c00015 	stw	r3,0(r7)
11087c60:	28800117 	ldw	r2,4(r5)
11087c64:	38800115 	stw	r2,4(r7)
11087c68:	28c00217 	ldw	r3,8(r5)
11087c6c:	38c00215 	stw	r3,8(r7)
11087c70:	28800317 	ldw	r2,12(r5)
11087c74:	29400404 	addi	r5,r5,16
11087c78:	38800315 	stw	r2,12(r7)
11087c7c:	39c00404 	addi	r7,r7,16
11087c80:	41bff436 	bltu	r8,r6,11087c54 <memcpy+0x44>
11087c84:	008000c4 	movi	r2,3
11087c88:	1180072e 	bgeu	r2,r6,11087ca8 <memcpy+0x98>
11087c8c:	1007883a 	mov	r3,r2
11087c90:	28800017 	ldw	r2,0(r5)
11087c94:	31bfff04 	addi	r6,r6,-4
11087c98:	29400104 	addi	r5,r5,4
11087c9c:	38800015 	stw	r2,0(r7)
11087ca0:	39c00104 	addi	r7,r7,4
11087ca4:	19bffa36 	bltu	r3,r6,11087c90 <memcpy+0x80>
11087ca8:	3807883a 	mov	r3,r7
11087cac:	003fde06 	br	11087c28 <memcpy+0x18>

11087cb0 <memmove>:
11087cb0:	2807883a 	mov	r3,r5
11087cb4:	2011883a 	mov	r8,r4
11087cb8:	29000c2e 	bgeu	r5,r4,11087cec <memmove+0x3c>
11087cbc:	298f883a 	add	r7,r5,r6
11087cc0:	21c00a2e 	bgeu	r4,r7,11087cec <memmove+0x3c>
11087cc4:	30000726 	beq	r6,zero,11087ce4 <memmove+0x34>
11087cc8:	2187883a 	add	r3,r4,r6
11087ccc:	198dc83a 	sub	r6,r3,r6
11087cd0:	39ffffc4 	addi	r7,r7,-1
11087cd4:	38800003 	ldbu	r2,0(r7)
11087cd8:	18ffffc4 	addi	r3,r3,-1
11087cdc:	18800005 	stb	r2,0(r3)
11087ce0:	19bffb1e 	bne	r3,r6,11087cd0 <memmove+0x20>
11087ce4:	2005883a 	mov	r2,r4
11087ce8:	f800283a 	ret
11087cec:	01c003c4 	movi	r7,15
11087cf0:	39800a36 	bltu	r7,r6,11087d1c <memmove+0x6c>
11087cf4:	303ffb26 	beq	r6,zero,11087ce4 <memmove+0x34>
11087cf8:	400f883a 	mov	r7,r8
11087cfc:	320d883a 	add	r6,r6,r8
11087d00:	28800003 	ldbu	r2,0(r5)
11087d04:	29400044 	addi	r5,r5,1
11087d08:	38800005 	stb	r2,0(r7)
11087d0c:	39c00044 	addi	r7,r7,1
11087d10:	39bffb1e 	bne	r7,r6,11087d00 <memmove+0x50>
11087d14:	2005883a 	mov	r2,r4
11087d18:	f800283a 	ret
11087d1c:	1904b03a 	or	r2,r3,r4
11087d20:	108000cc 	andi	r2,r2,3
11087d24:	103ff31e 	bne	r2,zero,11087cf4 <memmove+0x44>
11087d28:	3811883a 	mov	r8,r7
11087d2c:	180b883a 	mov	r5,r3
11087d30:	200f883a 	mov	r7,r4
11087d34:	28c00017 	ldw	r3,0(r5)
11087d38:	31bffc04 	addi	r6,r6,-16
11087d3c:	38c00015 	stw	r3,0(r7)
11087d40:	28800117 	ldw	r2,4(r5)
11087d44:	38800115 	stw	r2,4(r7)
11087d48:	28c00217 	ldw	r3,8(r5)
11087d4c:	38c00215 	stw	r3,8(r7)
11087d50:	28800317 	ldw	r2,12(r5)
11087d54:	29400404 	addi	r5,r5,16
11087d58:	38800315 	stw	r2,12(r7)
11087d5c:	39c00404 	addi	r7,r7,16
11087d60:	41bff436 	bltu	r8,r6,11087d34 <memmove+0x84>
11087d64:	008000c4 	movi	r2,3
11087d68:	1180072e 	bgeu	r2,r6,11087d88 <memmove+0xd8>
11087d6c:	1007883a 	mov	r3,r2
11087d70:	28800017 	ldw	r2,0(r5)
11087d74:	31bfff04 	addi	r6,r6,-4
11087d78:	29400104 	addi	r5,r5,4
11087d7c:	38800015 	stw	r2,0(r7)
11087d80:	39c00104 	addi	r7,r7,4
11087d84:	19bffa36 	bltu	r3,r6,11087d70 <memmove+0xc0>
11087d88:	3811883a 	mov	r8,r7
11087d8c:	003fd906 	br	11087cf4 <memmove+0x44>

11087d90 <memset>:
11087d90:	008000c4 	movi	r2,3
11087d94:	29403fcc 	andi	r5,r5,255
11087d98:	2007883a 	mov	r3,r4
11087d9c:	1180022e 	bgeu	r2,r6,11087da8 <memset+0x18>
11087da0:	2084703a 	and	r2,r4,r2
11087da4:	10000826 	beq	r2,zero,11087dc8 <memset+0x38>
11087da8:	30000526 	beq	r6,zero,11087dc0 <memset+0x30>
11087dac:	2805883a 	mov	r2,r5
11087db0:	30cd883a 	add	r6,r6,r3
11087db4:	18800005 	stb	r2,0(r3)
11087db8:	18c00044 	addi	r3,r3,1
11087dbc:	19bffd1e 	bne	r3,r6,11087db4 <memset+0x24>
11087dc0:	2005883a 	mov	r2,r4
11087dc4:	f800283a 	ret
11087dc8:	2804923a 	slli	r2,r5,8
11087dcc:	020003c4 	movi	r8,15
11087dd0:	200f883a 	mov	r7,r4
11087dd4:	2884b03a 	or	r2,r5,r2
11087dd8:	1006943a 	slli	r3,r2,16
11087ddc:	10c6b03a 	or	r3,r2,r3
11087de0:	41800a2e 	bgeu	r8,r6,11087e0c <memset+0x7c>
11087de4:	4005883a 	mov	r2,r8
11087de8:	31bffc04 	addi	r6,r6,-16
11087dec:	38c00015 	stw	r3,0(r7)
11087df0:	38c00115 	stw	r3,4(r7)
11087df4:	38c00215 	stw	r3,8(r7)
11087df8:	38c00315 	stw	r3,12(r7)
11087dfc:	39c00404 	addi	r7,r7,16
11087e00:	11bff936 	bltu	r2,r6,11087de8 <memset+0x58>
11087e04:	008000c4 	movi	r2,3
11087e08:	1180052e 	bgeu	r2,r6,11087e20 <memset+0x90>
11087e0c:	31bfff04 	addi	r6,r6,-4
11087e10:	008000c4 	movi	r2,3
11087e14:	38c00015 	stw	r3,0(r7)
11087e18:	39c00104 	addi	r7,r7,4
11087e1c:	11bffb36 	bltu	r2,r6,11087e0c <memset+0x7c>
11087e20:	3807883a 	mov	r3,r7
11087e24:	003fe006 	br	11087da8 <memset+0x18>

11087e28 <_Bfree>:
11087e28:	28000826 	beq	r5,zero,11087e4c <_Bfree+0x24>
11087e2c:	28800117 	ldw	r2,4(r5)
11087e30:	21001317 	ldw	r4,76(r4)
11087e34:	1085883a 	add	r2,r2,r2
11087e38:	1085883a 	add	r2,r2,r2
11087e3c:	1105883a 	add	r2,r2,r4
11087e40:	10c00017 	ldw	r3,0(r2)
11087e44:	28c00015 	stw	r3,0(r5)
11087e48:	11400015 	stw	r5,0(r2)
11087e4c:	f800283a 	ret

11087e50 <__hi0bits>:
11087e50:	20bfffec 	andhi	r2,r4,65535
11087e54:	10001426 	beq	r2,zero,11087ea8 <__hi0bits+0x58>
11087e58:	0007883a 	mov	r3,zero
11087e5c:	20bfc02c 	andhi	r2,r4,65280
11087e60:	1000021e 	bne	r2,zero,11087e6c <__hi0bits+0x1c>
11087e64:	2008923a 	slli	r4,r4,8
11087e68:	18c00204 	addi	r3,r3,8
11087e6c:	20bc002c 	andhi	r2,r4,61440
11087e70:	1000021e 	bne	r2,zero,11087e7c <__hi0bits+0x2c>
11087e74:	2008913a 	slli	r4,r4,4
11087e78:	18c00104 	addi	r3,r3,4
11087e7c:	20b0002c 	andhi	r2,r4,49152
11087e80:	1000031e 	bne	r2,zero,11087e90 <__hi0bits+0x40>
11087e84:	2105883a 	add	r2,r4,r4
11087e88:	18c00084 	addi	r3,r3,2
11087e8c:	1089883a 	add	r4,r2,r2
11087e90:	20000316 	blt	r4,zero,11087ea0 <__hi0bits+0x50>
11087e94:	2090002c 	andhi	r2,r4,16384
11087e98:	10000626 	beq	r2,zero,11087eb4 <__hi0bits+0x64>
11087e9c:	18c00044 	addi	r3,r3,1
11087ea0:	1805883a 	mov	r2,r3
11087ea4:	f800283a 	ret
11087ea8:	2008943a 	slli	r4,r4,16
11087eac:	00c00404 	movi	r3,16
11087eb0:	003fea06 	br	11087e5c <__hi0bits+0xc>
11087eb4:	00c00804 	movi	r3,32
11087eb8:	1805883a 	mov	r2,r3
11087ebc:	f800283a 	ret

11087ec0 <__lo0bits>:
11087ec0:	20c00017 	ldw	r3,0(r4)
11087ec4:	188001cc 	andi	r2,r3,7
11087ec8:	10000a26 	beq	r2,zero,11087ef4 <__lo0bits+0x34>
11087ecc:	1880004c 	andi	r2,r3,1
11087ed0:	1005003a 	cmpeq	r2,r2,zero
11087ed4:	10002126 	beq	r2,zero,11087f5c <__lo0bits+0x9c>
11087ed8:	1880008c 	andi	r2,r3,2
11087edc:	1000251e 	bne	r2,zero,11087f74 <__lo0bits+0xb4>
11087ee0:	1804d0ba 	srli	r2,r3,2
11087ee4:	01400084 	movi	r5,2
11087ee8:	20800015 	stw	r2,0(r4)
11087eec:	2805883a 	mov	r2,r5
11087ef0:	f800283a 	ret
11087ef4:	18bfffcc 	andi	r2,r3,65535
11087ef8:	10001526 	beq	r2,zero,11087f50 <__lo0bits+0x90>
11087efc:	000b883a 	mov	r5,zero
11087f00:	18803fcc 	andi	r2,r3,255
11087f04:	1000021e 	bne	r2,zero,11087f10 <__lo0bits+0x50>
11087f08:	1806d23a 	srli	r3,r3,8
11087f0c:	29400204 	addi	r5,r5,8
11087f10:	188003cc 	andi	r2,r3,15
11087f14:	1000021e 	bne	r2,zero,11087f20 <__lo0bits+0x60>
11087f18:	1806d13a 	srli	r3,r3,4
11087f1c:	29400104 	addi	r5,r5,4
11087f20:	188000cc 	andi	r2,r3,3
11087f24:	1000021e 	bne	r2,zero,11087f30 <__lo0bits+0x70>
11087f28:	1806d0ba 	srli	r3,r3,2
11087f2c:	29400084 	addi	r5,r5,2
11087f30:	1880004c 	andi	r2,r3,1
11087f34:	1000031e 	bne	r2,zero,11087f44 <__lo0bits+0x84>
11087f38:	1806d07a 	srli	r3,r3,1
11087f3c:	18000a26 	beq	r3,zero,11087f68 <__lo0bits+0xa8>
11087f40:	29400044 	addi	r5,r5,1
11087f44:	2805883a 	mov	r2,r5
11087f48:	20c00015 	stw	r3,0(r4)
11087f4c:	f800283a 	ret
11087f50:	1806d43a 	srli	r3,r3,16
11087f54:	01400404 	movi	r5,16
11087f58:	003fe906 	br	11087f00 <__lo0bits+0x40>
11087f5c:	000b883a 	mov	r5,zero
11087f60:	2805883a 	mov	r2,r5
11087f64:	f800283a 	ret
11087f68:	01400804 	movi	r5,32
11087f6c:	2805883a 	mov	r2,r5
11087f70:	f800283a 	ret
11087f74:	1804d07a 	srli	r2,r3,1
11087f78:	01400044 	movi	r5,1
11087f7c:	20800015 	stw	r2,0(r4)
11087f80:	003fda06 	br	11087eec <__lo0bits+0x2c>

11087f84 <__mcmp>:
11087f84:	20800417 	ldw	r2,16(r4)
11087f88:	28c00417 	ldw	r3,16(r5)
11087f8c:	10cfc83a 	sub	r7,r2,r3
11087f90:	38000c1e 	bne	r7,zero,11087fc4 <__mcmp+0x40>
11087f94:	18c5883a 	add	r2,r3,r3
11087f98:	1085883a 	add	r2,r2,r2
11087f9c:	10c00504 	addi	r3,r2,20
11087fa0:	21000504 	addi	r4,r4,20
11087fa4:	28cb883a 	add	r5,r5,r3
11087fa8:	2085883a 	add	r2,r4,r2
11087fac:	10bfff04 	addi	r2,r2,-4
11087fb0:	297fff04 	addi	r5,r5,-4
11087fb4:	11800017 	ldw	r6,0(r2)
11087fb8:	28c00017 	ldw	r3,0(r5)
11087fbc:	30c0031e 	bne	r6,r3,11087fcc <__mcmp+0x48>
11087fc0:	20bffa36 	bltu	r4,r2,11087fac <__mcmp+0x28>
11087fc4:	3805883a 	mov	r2,r7
11087fc8:	f800283a 	ret
11087fcc:	30c00336 	bltu	r6,r3,11087fdc <__mcmp+0x58>
11087fd0:	01c00044 	movi	r7,1
11087fd4:	3805883a 	mov	r2,r7
11087fd8:	f800283a 	ret
11087fdc:	01ffffc4 	movi	r7,-1
11087fe0:	003ff806 	br	11087fc4 <__mcmp+0x40>

11087fe4 <__ulp>:
11087fe4:	295ffc2c 	andhi	r5,r5,32752
11087fe8:	013f3034 	movhi	r4,64704
11087fec:	290b883a 	add	r5,r5,r4
11087ff0:	0145c83a 	sub	r2,zero,r5
11087ff4:	1007d53a 	srai	r3,r2,20
11087ff8:	000d883a 	mov	r6,zero
11087ffc:	0140040e 	bge	zero,r5,11088010 <__ulp+0x2c>
11088000:	280f883a 	mov	r7,r5
11088004:	3807883a 	mov	r3,r7
11088008:	3005883a 	mov	r2,r6
1108800c:	f800283a 	ret
11088010:	008004c4 	movi	r2,19
11088014:	193ffb04 	addi	r4,r3,-20
11088018:	10c00c0e 	bge	r2,r3,1108804c <__ulp+0x68>
1108801c:	008007c4 	movi	r2,31
11088020:	1107c83a 	sub	r3,r2,r4
11088024:	00800784 	movi	r2,30
11088028:	01400044 	movi	r5,1
1108802c:	11000216 	blt	r2,r4,11088038 <__ulp+0x54>
11088030:	00800044 	movi	r2,1
11088034:	10ca983a 	sll	r5,r2,r3
11088038:	000f883a 	mov	r7,zero
1108803c:	280d883a 	mov	r6,r5
11088040:	3807883a 	mov	r3,r7
11088044:	3005883a 	mov	r2,r6
11088048:	f800283a 	ret
1108804c:	00800234 	movhi	r2,8
11088050:	10cfd83a 	sra	r7,r2,r3
11088054:	000d883a 	mov	r6,zero
11088058:	3005883a 	mov	r2,r6
1108805c:	3807883a 	mov	r3,r7
11088060:	f800283a 	ret

11088064 <__b2d>:
11088064:	20800417 	ldw	r2,16(r4)
11088068:	defff904 	addi	sp,sp,-28
1108806c:	dd000415 	stw	r20,16(sp)
11088070:	1085883a 	add	r2,r2,r2
11088074:	25000504 	addi	r20,r4,20
11088078:	1085883a 	add	r2,r2,r2
1108807c:	dc000015 	stw	r16,0(sp)
11088080:	a0a1883a 	add	r16,r20,r2
11088084:	dd400515 	stw	r21,20(sp)
11088088:	857fff17 	ldw	r21,-4(r16)
1108808c:	dc400115 	stw	r17,4(sp)
11088090:	dfc00615 	stw	ra,24(sp)
11088094:	a809883a 	mov	r4,r21
11088098:	2823883a 	mov	r17,r5
1108809c:	dcc00315 	stw	r19,12(sp)
110880a0:	dc800215 	stw	r18,8(sp)
110880a4:	1087e500 	call	11087e50 <__hi0bits>
110880a8:	100b883a 	mov	r5,r2
110880ac:	00800804 	movi	r2,32
110880b0:	1145c83a 	sub	r2,r2,r5
110880b4:	88800015 	stw	r2,0(r17)
110880b8:	00800284 	movi	r2,10
110880bc:	80ffff04 	addi	r3,r16,-4
110880c0:	11401416 	blt	r2,r5,11088114 <__b2d+0xb0>
110880c4:	008002c4 	movi	r2,11
110880c8:	1149c83a 	sub	r4,r2,r5
110880cc:	a0c02736 	bltu	r20,r3,1108816c <__b2d+0x108>
110880d0:	000d883a 	mov	r6,zero
110880d4:	28800544 	addi	r2,r5,21
110880d8:	a906d83a 	srl	r3,r21,r4
110880dc:	a884983a 	sll	r2,r21,r2
110880e0:	1ccffc34 	orhi	r19,r3,16368
110880e4:	11a4b03a 	or	r18,r2,r6
110880e8:	9005883a 	mov	r2,r18
110880ec:	9807883a 	mov	r3,r19
110880f0:	dfc00617 	ldw	ra,24(sp)
110880f4:	dd400517 	ldw	r21,20(sp)
110880f8:	dd000417 	ldw	r20,16(sp)
110880fc:	dcc00317 	ldw	r19,12(sp)
11088100:	dc800217 	ldw	r18,8(sp)
11088104:	dc400117 	ldw	r17,4(sp)
11088108:	dc000017 	ldw	r16,0(sp)
1108810c:	dec00704 	addi	sp,sp,28
11088110:	f800283a 	ret
11088114:	a0c00e36 	bltu	r20,r3,11088150 <__b2d+0xec>
11088118:	293ffd44 	addi	r4,r5,-11
1108811c:	000d883a 	mov	r6,zero
11088120:	20000f26 	beq	r4,zero,11088160 <__b2d+0xfc>
11088124:	00800804 	movi	r2,32
11088128:	110bc83a 	sub	r5,r2,r4
1108812c:	a0c01236 	bltu	r20,r3,11088178 <__b2d+0x114>
11088130:	000f883a 	mov	r7,zero
11088134:	a904983a 	sll	r2,r21,r4
11088138:	3146d83a 	srl	r3,r6,r5
1108813c:	3108983a 	sll	r4,r6,r4
11088140:	108ffc34 	orhi	r2,r2,16368
11088144:	18a6b03a 	or	r19,r3,r2
11088148:	3924b03a 	or	r18,r7,r4
1108814c:	003fe606 	br	110880e8 <__b2d+0x84>
11088150:	293ffd44 	addi	r4,r5,-11
11088154:	81bffe17 	ldw	r6,-8(r16)
11088158:	80fffe04 	addi	r3,r16,-8
1108815c:	203ff11e 	bne	r4,zero,11088124 <__b2d+0xc0>
11088160:	accffc34 	orhi	r19,r21,16368
11088164:	3025883a 	mov	r18,r6
11088168:	003fdf06 	br	110880e8 <__b2d+0x84>
1108816c:	18bfff17 	ldw	r2,-4(r3)
11088170:	110cd83a 	srl	r6,r2,r4
11088174:	003fd706 	br	110880d4 <__b2d+0x70>
11088178:	18bfff17 	ldw	r2,-4(r3)
1108817c:	114ed83a 	srl	r7,r2,r5
11088180:	003fec06 	br	11088134 <__b2d+0xd0>

11088184 <__ratio>:
11088184:	defff904 	addi	sp,sp,-28
11088188:	dc400215 	stw	r17,8(sp)
1108818c:	2823883a 	mov	r17,r5
11088190:	d80b883a 	mov	r5,sp
11088194:	dfc00615 	stw	ra,24(sp)
11088198:	dd000515 	stw	r20,20(sp)
1108819c:	dcc00415 	stw	r19,16(sp)
110881a0:	dc800315 	stw	r18,12(sp)
110881a4:	2025883a 	mov	r18,r4
110881a8:	10880640 	call	11088064 <__b2d>
110881ac:	8809883a 	mov	r4,r17
110881b0:	d9400104 	addi	r5,sp,4
110881b4:	1027883a 	mov	r19,r2
110881b8:	1829883a 	mov	r20,r3
110881bc:	10880640 	call	11088064 <__b2d>
110881c0:	89000417 	ldw	r4,16(r17)
110881c4:	91c00417 	ldw	r7,16(r18)
110881c8:	d9800117 	ldw	r6,4(sp)
110881cc:	180b883a 	mov	r5,r3
110881d0:	390fc83a 	sub	r7,r7,r4
110881d4:	1009883a 	mov	r4,r2
110881d8:	d8800017 	ldw	r2,0(sp)
110881dc:	380e917a 	slli	r7,r7,5
110881e0:	2011883a 	mov	r8,r4
110881e4:	1185c83a 	sub	r2,r2,r6
110881e8:	11c5883a 	add	r2,r2,r7
110881ec:	1006953a 	slli	r3,r2,20
110881f0:	2813883a 	mov	r9,r5
110881f4:	00800d0e 	bge	zero,r2,1108822c <__ratio+0xa8>
110881f8:	1d29883a 	add	r20,r3,r20
110881fc:	a00b883a 	mov	r5,r20
11088200:	480f883a 	mov	r7,r9
11088204:	9809883a 	mov	r4,r19
11088208:	400d883a 	mov	r6,r8
1108820c:	108afe00 	call	1108afe0 <__divdf3>
11088210:	dfc00617 	ldw	ra,24(sp)
11088214:	dd000517 	ldw	r20,20(sp)
11088218:	dcc00417 	ldw	r19,16(sp)
1108821c:	dc800317 	ldw	r18,12(sp)
11088220:	dc400217 	ldw	r17,8(sp)
11088224:	dec00704 	addi	sp,sp,28
11088228:	f800283a 	ret
1108822c:	28d3c83a 	sub	r9,r5,r3
11088230:	003ff206 	br	110881fc <__ratio+0x78>

11088234 <_mprec_log10>:
11088234:	defffe04 	addi	sp,sp,-8
11088238:	008005c4 	movi	r2,23
1108823c:	dc000015 	stw	r16,0(sp)
11088240:	dfc00115 	stw	ra,4(sp)
11088244:	2021883a 	mov	r16,r4
11088248:	11000c16 	blt	r2,r4,1108827c <_mprec_log10+0x48>
1108824c:	200490fa 	slli	r2,r4,3
11088250:	00c44274 	movhi	r3,4361
11088254:	18fd9c04 	addi	r3,r3,-2448
11088258:	10c5883a 	add	r2,r2,r3
1108825c:	12400117 	ldw	r9,4(r2)
11088260:	12000017 	ldw	r8,0(r2)
11088264:	4807883a 	mov	r3,r9
11088268:	4005883a 	mov	r2,r8
1108826c:	dfc00117 	ldw	ra,4(sp)
11088270:	dc000017 	ldw	r16,0(sp)
11088274:	dec00204 	addi	sp,sp,8
11088278:	f800283a 	ret
1108827c:	0011883a 	mov	r8,zero
11088280:	024ffc34 	movhi	r9,16368
11088284:	0005883a 	mov	r2,zero
11088288:	00d00934 	movhi	r3,16420
1108828c:	480b883a 	mov	r5,r9
11088290:	4009883a 	mov	r4,r8
11088294:	180f883a 	mov	r7,r3
11088298:	100d883a 	mov	r6,r2
1108829c:	108ac1c0 	call	1108ac1c <__muldf3>
110882a0:	843fffc4 	addi	r16,r16,-1
110882a4:	1011883a 	mov	r8,r2
110882a8:	1813883a 	mov	r9,r3
110882ac:	803ff51e 	bne	r16,zero,11088284 <_mprec_log10+0x50>
110882b0:	4005883a 	mov	r2,r8
110882b4:	4807883a 	mov	r3,r9
110882b8:	dfc00117 	ldw	ra,4(sp)
110882bc:	dc000017 	ldw	r16,0(sp)
110882c0:	dec00204 	addi	sp,sp,8
110882c4:	f800283a 	ret

110882c8 <__copybits>:
110882c8:	297fffc4 	addi	r5,r5,-1
110882cc:	30800417 	ldw	r2,16(r6)
110882d0:	280bd17a 	srai	r5,r5,5
110882d4:	31800504 	addi	r6,r6,20
110882d8:	1085883a 	add	r2,r2,r2
110882dc:	294b883a 	add	r5,r5,r5
110882e0:	294b883a 	add	r5,r5,r5
110882e4:	1085883a 	add	r2,r2,r2
110882e8:	290b883a 	add	r5,r5,r4
110882ec:	3087883a 	add	r3,r6,r2
110882f0:	29400104 	addi	r5,r5,4
110882f4:	30c0052e 	bgeu	r6,r3,1108830c <__copybits+0x44>
110882f8:	30800017 	ldw	r2,0(r6)
110882fc:	31800104 	addi	r6,r6,4
11088300:	20800015 	stw	r2,0(r4)
11088304:	21000104 	addi	r4,r4,4
11088308:	30fffb36 	bltu	r6,r3,110882f8 <__copybits+0x30>
1108830c:	2140032e 	bgeu	r4,r5,1108831c <__copybits+0x54>
11088310:	20000015 	stw	zero,0(r4)
11088314:	21000104 	addi	r4,r4,4
11088318:	217ffd36 	bltu	r4,r5,11088310 <__copybits+0x48>
1108831c:	f800283a 	ret

11088320 <__any_on>:
11088320:	20800417 	ldw	r2,16(r4)
11088324:	2807d17a 	srai	r3,r5,5
11088328:	21000504 	addi	r4,r4,20
1108832c:	10c00d0e 	bge	r2,r3,11088364 <__any_on+0x44>
11088330:	1085883a 	add	r2,r2,r2
11088334:	1085883a 	add	r2,r2,r2
11088338:	208d883a 	add	r6,r4,r2
1108833c:	2180182e 	bgeu	r4,r6,110883a0 <__any_on+0x80>
11088340:	30bfff17 	ldw	r2,-4(r6)
11088344:	30ffff04 	addi	r3,r6,-4
11088348:	1000041e 	bne	r2,zero,1108835c <__any_on+0x3c>
1108834c:	20c0142e 	bgeu	r4,r3,110883a0 <__any_on+0x80>
11088350:	18ffff04 	addi	r3,r3,-4
11088354:	18800017 	ldw	r2,0(r3)
11088358:	103ffc26 	beq	r2,zero,1108834c <__any_on+0x2c>
1108835c:	00800044 	movi	r2,1
11088360:	f800283a 	ret
11088364:	18800a0e 	bge	r3,r2,11088390 <__any_on+0x70>
11088368:	294007cc 	andi	r5,r5,31
1108836c:	28000826 	beq	r5,zero,11088390 <__any_on+0x70>
11088370:	18c5883a 	add	r2,r3,r3
11088374:	1085883a 	add	r2,r2,r2
11088378:	208d883a 	add	r6,r4,r2
1108837c:	30c00017 	ldw	r3,0(r6)
11088380:	1944d83a 	srl	r2,r3,r5
11088384:	1144983a 	sll	r2,r2,r5
11088388:	18bff41e 	bne	r3,r2,1108835c <__any_on+0x3c>
1108838c:	003feb06 	br	1108833c <__any_on+0x1c>
11088390:	18c5883a 	add	r2,r3,r3
11088394:	1085883a 	add	r2,r2,r2
11088398:	208d883a 	add	r6,r4,r2
1108839c:	003fe706 	br	1108833c <__any_on+0x1c>
110883a0:	0005883a 	mov	r2,zero
110883a4:	f800283a 	ret

110883a8 <_Balloc>:
110883a8:	20c01317 	ldw	r3,76(r4)
110883ac:	defffb04 	addi	sp,sp,-20
110883b0:	dcc00315 	stw	r19,12(sp)
110883b4:	dc800215 	stw	r18,8(sp)
110883b8:	dfc00415 	stw	ra,16(sp)
110883bc:	2825883a 	mov	r18,r5
110883c0:	dc400115 	stw	r17,4(sp)
110883c4:	dc000015 	stw	r16,0(sp)
110883c8:	2027883a 	mov	r19,r4
110883cc:	01800404 	movi	r6,16
110883d0:	01400104 	movi	r5,4
110883d4:	18001726 	beq	r3,zero,11088434 <_Balloc+0x8c>
110883d8:	01400044 	movi	r5,1
110883dc:	9485883a 	add	r2,r18,r18
110883e0:	2ca2983a 	sll	r17,r5,r18
110883e4:	1085883a 	add	r2,r2,r2
110883e8:	10c7883a 	add	r3,r2,r3
110883ec:	1c000017 	ldw	r16,0(r3)
110883f0:	8c4d883a 	add	r6,r17,r17
110883f4:	318d883a 	add	r6,r6,r6
110883f8:	9809883a 	mov	r4,r19
110883fc:	31800504 	addi	r6,r6,20
11088400:	80001226 	beq	r16,zero,1108844c <_Balloc+0xa4>
11088404:	80800017 	ldw	r2,0(r16)
11088408:	18800015 	stw	r2,0(r3)
1108840c:	80000415 	stw	zero,16(r16)
11088410:	80000315 	stw	zero,12(r16)
11088414:	8005883a 	mov	r2,r16
11088418:	dfc00417 	ldw	ra,16(sp)
1108841c:	dcc00317 	ldw	r19,12(sp)
11088420:	dc800217 	ldw	r18,8(sp)
11088424:	dc400117 	ldw	r17,4(sp)
11088428:	dc000017 	ldw	r16,0(sp)
1108842c:	dec00504 	addi	sp,sp,20
11088430:	f800283a 	ret
11088434:	10897700 	call	11089770 <_calloc_r>
11088438:	1007883a 	mov	r3,r2
1108843c:	0021883a 	mov	r16,zero
11088440:	98801315 	stw	r2,76(r19)
11088444:	103fe41e 	bne	r2,zero,110883d8 <_Balloc+0x30>
11088448:	003ff206 	br	11088414 <_Balloc+0x6c>
1108844c:	10897700 	call	11089770 <_calloc_r>
11088450:	103ff026 	beq	r2,zero,11088414 <_Balloc+0x6c>
11088454:	1021883a 	mov	r16,r2
11088458:	14800115 	stw	r18,4(r2)
1108845c:	14400215 	stw	r17,8(r2)
11088460:	003fea06 	br	1108840c <_Balloc+0x64>

11088464 <__d2b>:
11088464:	defff504 	addi	sp,sp,-44
11088468:	dcc00515 	stw	r19,20(sp)
1108846c:	04c00044 	movi	r19,1
11088470:	dc000215 	stw	r16,8(sp)
11088474:	2821883a 	mov	r16,r5
11088478:	980b883a 	mov	r5,r19
1108847c:	ddc00915 	stw	r23,36(sp)
11088480:	dd800815 	stw	r22,32(sp)
11088484:	dd400715 	stw	r21,28(sp)
11088488:	dd000615 	stw	r20,24(sp)
1108848c:	dc800415 	stw	r18,16(sp)
11088490:	dc400315 	stw	r17,12(sp)
11088494:	dfc00a15 	stw	ra,40(sp)
11088498:	3023883a 	mov	r17,r6
1108849c:	382d883a 	mov	r22,r7
110884a0:	ddc00b17 	ldw	r23,44(sp)
110884a4:	10883a80 	call	110883a8 <_Balloc>
110884a8:	1025883a 	mov	r18,r2
110884ac:	00a00034 	movhi	r2,32768
110884b0:	10bfffc4 	addi	r2,r2,-1
110884b4:	8888703a 	and	r4,r17,r2
110884b8:	202ad53a 	srli	r21,r4,20
110884bc:	00800434 	movhi	r2,16
110884c0:	10bfffc4 	addi	r2,r2,-1
110884c4:	8886703a 	and	r3,r17,r2
110884c8:	a829003a 	cmpeq	r20,r21,zero
110884cc:	800b883a 	mov	r5,r16
110884d0:	d8c00115 	stw	r3,4(sp)
110884d4:	94000504 	addi	r16,r18,20
110884d8:	a000021e 	bne	r20,zero,110884e4 <__d2b+0x80>
110884dc:	18c00434 	orhi	r3,r3,16
110884e0:	d8c00115 	stw	r3,4(sp)
110884e4:	28002726 	beq	r5,zero,11088584 <__d2b+0x120>
110884e8:	d809883a 	mov	r4,sp
110884ec:	d9400015 	stw	r5,0(sp)
110884f0:	1087ec00 	call	11087ec0 <__lo0bits>
110884f4:	100d883a 	mov	r6,r2
110884f8:	10003526 	beq	r2,zero,110885d0 <__d2b+0x16c>
110884fc:	d8c00117 	ldw	r3,4(sp)
11088500:	00800804 	movi	r2,32
11088504:	1185c83a 	sub	r2,r2,r6
11088508:	d9000017 	ldw	r4,0(sp)
1108850c:	1886983a 	sll	r3,r3,r2
11088510:	1906b03a 	or	r3,r3,r4
11088514:	90c00515 	stw	r3,20(r18)
11088518:	d8c00117 	ldw	r3,4(sp)
1108851c:	1986d83a 	srl	r3,r3,r6
11088520:	d8c00115 	stw	r3,4(sp)
11088524:	180b003a 	cmpeq	r5,r3,zero
11088528:	00800084 	movi	r2,2
1108852c:	114bc83a 	sub	r5,r2,r5
11088530:	80c00115 	stw	r3,4(r16)
11088534:	91400415 	stw	r5,16(r18)
11088538:	a0001a1e 	bne	r20,zero,110885a4 <__d2b+0x140>
1108853c:	3545883a 	add	r2,r6,r21
11088540:	10bef344 	addi	r2,r2,-1075
11088544:	00c00d44 	movi	r3,53
11088548:	b0800015 	stw	r2,0(r22)
1108854c:	1987c83a 	sub	r3,r3,r6
11088550:	b8c00015 	stw	r3,0(r23)
11088554:	9005883a 	mov	r2,r18
11088558:	dfc00a17 	ldw	ra,40(sp)
1108855c:	ddc00917 	ldw	r23,36(sp)
11088560:	dd800817 	ldw	r22,32(sp)
11088564:	dd400717 	ldw	r21,28(sp)
11088568:	dd000617 	ldw	r20,24(sp)
1108856c:	dcc00517 	ldw	r19,20(sp)
11088570:	dc800417 	ldw	r18,16(sp)
11088574:	dc400317 	ldw	r17,12(sp)
11088578:	dc000217 	ldw	r16,8(sp)
1108857c:	dec00b04 	addi	sp,sp,44
11088580:	f800283a 	ret
11088584:	d9000104 	addi	r4,sp,4
11088588:	1087ec00 	call	11087ec0 <__lo0bits>
1108858c:	11800804 	addi	r6,r2,32
11088590:	d8800117 	ldw	r2,4(sp)
11088594:	94c00415 	stw	r19,16(r18)
11088598:	980b883a 	mov	r5,r19
1108859c:	90800515 	stw	r2,20(r18)
110885a0:	a03fe626 	beq	r20,zero,1108853c <__d2b+0xd8>
110885a4:	2945883a 	add	r2,r5,r5
110885a8:	1085883a 	add	r2,r2,r2
110885ac:	1405883a 	add	r2,r2,r16
110885b0:	113fff17 	ldw	r4,-4(r2)
110885b4:	30fef384 	addi	r3,r6,-1074
110885b8:	2820917a 	slli	r16,r5,5
110885bc:	b0c00015 	stw	r3,0(r22)
110885c0:	1087e500 	call	11087e50 <__hi0bits>
110885c4:	80a1c83a 	sub	r16,r16,r2
110885c8:	bc000015 	stw	r16,0(r23)
110885cc:	003fe106 	br	11088554 <__d2b+0xf0>
110885d0:	d8800017 	ldw	r2,0(sp)
110885d4:	90800515 	stw	r2,20(r18)
110885d8:	d8c00117 	ldw	r3,4(sp)
110885dc:	003fd106 	br	11088524 <__d2b+0xc0>

110885e0 <__mdiff>:
110885e0:	defffb04 	addi	sp,sp,-20
110885e4:	dc000015 	stw	r16,0(sp)
110885e8:	2821883a 	mov	r16,r5
110885ec:	dc800215 	stw	r18,8(sp)
110885f0:	300b883a 	mov	r5,r6
110885f4:	2025883a 	mov	r18,r4
110885f8:	8009883a 	mov	r4,r16
110885fc:	dc400115 	stw	r17,4(sp)
11088600:	dfc00415 	stw	ra,16(sp)
11088604:	dcc00315 	stw	r19,12(sp)
11088608:	3023883a 	mov	r17,r6
1108860c:	1087f840 	call	11087f84 <__mcmp>
11088610:	10004226 	beq	r2,zero,1108871c <__mdiff+0x13c>
11088614:	10005016 	blt	r2,zero,11088758 <__mdiff+0x178>
11088618:	0027883a 	mov	r19,zero
1108861c:	81400117 	ldw	r5,4(r16)
11088620:	9009883a 	mov	r4,r18
11088624:	10883a80 	call	110883a8 <_Balloc>
11088628:	1019883a 	mov	r12,r2
1108862c:	82800417 	ldw	r10,16(r16)
11088630:	88800417 	ldw	r2,16(r17)
11088634:	81800504 	addi	r6,r16,20
11088638:	5287883a 	add	r3,r10,r10
1108863c:	1085883a 	add	r2,r2,r2
11088640:	18c7883a 	add	r3,r3,r3
11088644:	1085883a 	add	r2,r2,r2
11088648:	8a000504 	addi	r8,r17,20
1108864c:	64c00315 	stw	r19,12(r12)
11088650:	30db883a 	add	r13,r6,r3
11088654:	4097883a 	add	r11,r8,r2
11088658:	61c00504 	addi	r7,r12,20
1108865c:	0013883a 	mov	r9,zero
11088660:	31000017 	ldw	r4,0(r6)
11088664:	41400017 	ldw	r5,0(r8)
11088668:	42000104 	addi	r8,r8,4
1108866c:	20bfffcc 	andi	r2,r4,65535
11088670:	28ffffcc 	andi	r3,r5,65535
11088674:	10c5c83a 	sub	r2,r2,r3
11088678:	1245883a 	add	r2,r2,r9
1108867c:	2008d43a 	srli	r4,r4,16
11088680:	280ad43a 	srli	r5,r5,16
11088684:	1007d43a 	srai	r3,r2,16
11088688:	3880000d 	sth	r2,0(r7)
1108868c:	2149c83a 	sub	r4,r4,r5
11088690:	20c9883a 	add	r4,r4,r3
11088694:	3900008d 	sth	r4,2(r7)
11088698:	31800104 	addi	r6,r6,4
1108869c:	39c00104 	addi	r7,r7,4
110886a0:	2013d43a 	srai	r9,r4,16
110886a4:	42ffee36 	bltu	r8,r11,11088660 <__mdiff+0x80>
110886a8:	33400c2e 	bgeu	r6,r13,110886dc <__mdiff+0xfc>
110886ac:	30800017 	ldw	r2,0(r6)
110886b0:	31800104 	addi	r6,r6,4
110886b4:	10ffffcc 	andi	r3,r2,65535
110886b8:	1a47883a 	add	r3,r3,r9
110886bc:	1004d43a 	srli	r2,r2,16
110886c0:	1809d43a 	srai	r4,r3,16
110886c4:	38c0000d 	sth	r3,0(r7)
110886c8:	1105883a 	add	r2,r2,r4
110886cc:	3880008d 	sth	r2,2(r7)
110886d0:	1013d43a 	srai	r9,r2,16
110886d4:	39c00104 	addi	r7,r7,4
110886d8:	337ff436 	bltu	r6,r13,110886ac <__mdiff+0xcc>
110886dc:	38bfff17 	ldw	r2,-4(r7)
110886e0:	38ffff04 	addi	r3,r7,-4
110886e4:	1000041e 	bne	r2,zero,110886f8 <__mdiff+0x118>
110886e8:	18ffff04 	addi	r3,r3,-4
110886ec:	18800017 	ldw	r2,0(r3)
110886f0:	52bfffc4 	addi	r10,r10,-1
110886f4:	103ffc26 	beq	r2,zero,110886e8 <__mdiff+0x108>
110886f8:	6005883a 	mov	r2,r12
110886fc:	62800415 	stw	r10,16(r12)
11088700:	dfc00417 	ldw	ra,16(sp)
11088704:	dcc00317 	ldw	r19,12(sp)
11088708:	dc800217 	ldw	r18,8(sp)
1108870c:	dc400117 	ldw	r17,4(sp)
11088710:	dc000017 	ldw	r16,0(sp)
11088714:	dec00504 	addi	sp,sp,20
11088718:	f800283a 	ret
1108871c:	9009883a 	mov	r4,r18
11088720:	000b883a 	mov	r5,zero
11088724:	10883a80 	call	110883a8 <_Balloc>
11088728:	1019883a 	mov	r12,r2
1108872c:	00800044 	movi	r2,1
11088730:	60800415 	stw	r2,16(r12)
11088734:	6005883a 	mov	r2,r12
11088738:	60000515 	stw	zero,20(r12)
1108873c:	dfc00417 	ldw	ra,16(sp)
11088740:	dcc00317 	ldw	r19,12(sp)
11088744:	dc800217 	ldw	r18,8(sp)
11088748:	dc400117 	ldw	r17,4(sp)
1108874c:	dc000017 	ldw	r16,0(sp)
11088750:	dec00504 	addi	sp,sp,20
11088754:	f800283a 	ret
11088758:	880d883a 	mov	r6,r17
1108875c:	04c00044 	movi	r19,1
11088760:	8023883a 	mov	r17,r16
11088764:	3021883a 	mov	r16,r6
11088768:	003fac06 	br	1108861c <__mdiff+0x3c>

1108876c <__lshift>:
1108876c:	defff904 	addi	sp,sp,-28
11088770:	28800417 	ldw	r2,16(r5)
11088774:	dc000015 	stw	r16,0(sp)
11088778:	3021d17a 	srai	r16,r6,5
1108877c:	28c00217 	ldw	r3,8(r5)
11088780:	10800044 	addi	r2,r2,1
11088784:	dc400115 	stw	r17,4(sp)
11088788:	80a3883a 	add	r17,r16,r2
1108878c:	dd400515 	stw	r21,20(sp)
11088790:	dd000415 	stw	r20,16(sp)
11088794:	dc800215 	stw	r18,8(sp)
11088798:	dfc00615 	stw	ra,24(sp)
1108879c:	2825883a 	mov	r18,r5
110887a0:	dcc00315 	stw	r19,12(sp)
110887a4:	3029883a 	mov	r20,r6
110887a8:	202b883a 	mov	r21,r4
110887ac:	29400117 	ldw	r5,4(r5)
110887b0:	1c40030e 	bge	r3,r17,110887c0 <__lshift+0x54>
110887b4:	18c7883a 	add	r3,r3,r3
110887b8:	29400044 	addi	r5,r5,1
110887bc:	1c7ffd16 	blt	r3,r17,110887b4 <__lshift+0x48>
110887c0:	a809883a 	mov	r4,r21
110887c4:	10883a80 	call	110883a8 <_Balloc>
110887c8:	1027883a 	mov	r19,r2
110887cc:	11400504 	addi	r5,r2,20
110887d0:	0400090e 	bge	zero,r16,110887f8 <__lshift+0x8c>
110887d4:	2805883a 	mov	r2,r5
110887d8:	0007883a 	mov	r3,zero
110887dc:	18c00044 	addi	r3,r3,1
110887e0:	10000015 	stw	zero,0(r2)
110887e4:	10800104 	addi	r2,r2,4
110887e8:	80fffc1e 	bne	r16,r3,110887dc <__lshift+0x70>
110887ec:	8405883a 	add	r2,r16,r16
110887f0:	1085883a 	add	r2,r2,r2
110887f4:	288b883a 	add	r5,r5,r2
110887f8:	90800417 	ldw	r2,16(r18)
110887fc:	91000504 	addi	r4,r18,20
11088800:	a18007cc 	andi	r6,r20,31
11088804:	1085883a 	add	r2,r2,r2
11088808:	1085883a 	add	r2,r2,r2
1108880c:	208f883a 	add	r7,r4,r2
11088810:	30001e26 	beq	r6,zero,1108888c <__lshift+0x120>
11088814:	00800804 	movi	r2,32
11088818:	1191c83a 	sub	r8,r2,r6
1108881c:	0007883a 	mov	r3,zero
11088820:	20800017 	ldw	r2,0(r4)
11088824:	1184983a 	sll	r2,r2,r6
11088828:	1884b03a 	or	r2,r3,r2
1108882c:	28800015 	stw	r2,0(r5)
11088830:	20c00017 	ldw	r3,0(r4)
11088834:	21000104 	addi	r4,r4,4
11088838:	29400104 	addi	r5,r5,4
1108883c:	1a06d83a 	srl	r3,r3,r8
11088840:	21fff736 	bltu	r4,r7,11088820 <__lshift+0xb4>
11088844:	28c00015 	stw	r3,0(r5)
11088848:	18000126 	beq	r3,zero,11088850 <__lshift+0xe4>
1108884c:	8c400044 	addi	r17,r17,1
11088850:	88bfffc4 	addi	r2,r17,-1
11088854:	98800415 	stw	r2,16(r19)
11088858:	a809883a 	mov	r4,r21
1108885c:	900b883a 	mov	r5,r18
11088860:	1087e280 	call	11087e28 <_Bfree>
11088864:	9805883a 	mov	r2,r19
11088868:	dfc00617 	ldw	ra,24(sp)
1108886c:	dd400517 	ldw	r21,20(sp)
11088870:	dd000417 	ldw	r20,16(sp)
11088874:	dcc00317 	ldw	r19,12(sp)
11088878:	dc800217 	ldw	r18,8(sp)
1108887c:	dc400117 	ldw	r17,4(sp)
11088880:	dc000017 	ldw	r16,0(sp)
11088884:	dec00704 	addi	sp,sp,28
11088888:	f800283a 	ret
1108888c:	20800017 	ldw	r2,0(r4)
11088890:	21000104 	addi	r4,r4,4
11088894:	28800015 	stw	r2,0(r5)
11088898:	29400104 	addi	r5,r5,4
1108889c:	21ffec2e 	bgeu	r4,r7,11088850 <__lshift+0xe4>
110888a0:	20800017 	ldw	r2,0(r4)
110888a4:	21000104 	addi	r4,r4,4
110888a8:	28800015 	stw	r2,0(r5)
110888ac:	29400104 	addi	r5,r5,4
110888b0:	21fff636 	bltu	r4,r7,1108888c <__lshift+0x120>
110888b4:	003fe606 	br	11088850 <__lshift+0xe4>

110888b8 <__multiply>:
110888b8:	defff904 	addi	sp,sp,-28
110888bc:	dcc00315 	stw	r19,12(sp)
110888c0:	dc800215 	stw	r18,8(sp)
110888c4:	2cc00417 	ldw	r19,16(r5)
110888c8:	34800417 	ldw	r18,16(r6)
110888cc:	dd000415 	stw	r20,16(sp)
110888d0:	dc400115 	stw	r17,4(sp)
110888d4:	dfc00615 	stw	ra,24(sp)
110888d8:	dd400515 	stw	r21,20(sp)
110888dc:	dc000015 	stw	r16,0(sp)
110888e0:	2823883a 	mov	r17,r5
110888e4:	3029883a 	mov	r20,r6
110888e8:	9c80040e 	bge	r19,r18,110888fc <__multiply+0x44>
110888ec:	9027883a 	mov	r19,r18
110888f0:	2c800417 	ldw	r18,16(r5)
110888f4:	2829883a 	mov	r20,r5
110888f8:	3023883a 	mov	r17,r6
110888fc:	88800217 	ldw	r2,8(r17)
11088900:	9ca1883a 	add	r16,r19,r18
11088904:	89400117 	ldw	r5,4(r17)
11088908:	1400010e 	bge	r2,r16,11088910 <__multiply+0x58>
1108890c:	29400044 	addi	r5,r5,1
11088910:	10883a80 	call	110883a8 <_Balloc>
11088914:	102b883a 	mov	r21,r2
11088918:	8405883a 	add	r2,r16,r16
1108891c:	1085883a 	add	r2,r2,r2
11088920:	a9000504 	addi	r4,r21,20
11088924:	209d883a 	add	r14,r4,r2
11088928:	2380042e 	bgeu	r4,r14,1108893c <__multiply+0x84>
1108892c:	2005883a 	mov	r2,r4
11088930:	10000015 	stw	zero,0(r2)
11088934:	10800104 	addi	r2,r2,4
11088938:	13bffd36 	bltu	r2,r14,11088930 <__multiply+0x78>
1108893c:	9485883a 	add	r2,r18,r18
11088940:	9cc7883a 	add	r3,r19,r19
11088944:	a1800504 	addi	r6,r20,20
11088948:	1085883a 	add	r2,r2,r2
1108894c:	8b400504 	addi	r13,r17,20
11088950:	18c7883a 	add	r3,r3,r3
11088954:	309f883a 	add	r15,r6,r2
11088958:	68d7883a 	add	r11,r13,r3
1108895c:	33c03b2e 	bgeu	r6,r15,11088a4c <__multiply+0x194>
11088960:	2019883a 	mov	r12,r4
11088964:	30800017 	ldw	r2,0(r6)
11088968:	127fffcc 	andi	r9,r2,65535
1108896c:	48001826 	beq	r9,zero,110889d0 <__multiply+0x118>
11088970:	6811883a 	mov	r8,r13
11088974:	600f883a 	mov	r7,r12
11088978:	0015883a 	mov	r10,zero
1108897c:	40c00017 	ldw	r3,0(r8)
11088980:	39400017 	ldw	r5,0(r7)
11088984:	42000104 	addi	r8,r8,4
11088988:	193fffcc 	andi	r4,r3,65535
1108898c:	4909383a 	mul	r4,r9,r4
11088990:	1806d43a 	srli	r3,r3,16
11088994:	28bfffcc 	andi	r2,r5,65535
11088998:	5085883a 	add	r2,r10,r2
1108899c:	2089883a 	add	r4,r4,r2
110889a0:	48c7383a 	mul	r3,r9,r3
110889a4:	280ad43a 	srli	r5,r5,16
110889a8:	2004d43a 	srli	r2,r4,16
110889ac:	3900000d 	sth	r4,0(r7)
110889b0:	1947883a 	add	r3,r3,r5
110889b4:	10c5883a 	add	r2,r2,r3
110889b8:	3880008d 	sth	r2,2(r7)
110889bc:	1014d43a 	srli	r10,r2,16
110889c0:	39c00104 	addi	r7,r7,4
110889c4:	42ffed36 	bltu	r8,r11,1108897c <__multiply+0xc4>
110889c8:	3a800015 	stw	r10,0(r7)
110889cc:	30800017 	ldw	r2,0(r6)
110889d0:	1012d43a 	srli	r9,r2,16
110889d4:	48001926 	beq	r9,zero,11088a3c <__multiply+0x184>
110889d8:	60800017 	ldw	r2,0(r12)
110889dc:	6811883a 	mov	r8,r13
110889e0:	600f883a 	mov	r7,r12
110889e4:	0015883a 	mov	r10,zero
110889e8:	100b883a 	mov	r5,r2
110889ec:	41000017 	ldw	r4,0(r8)
110889f0:	2806d43a 	srli	r3,r5,16
110889f4:	3880000d 	sth	r2,0(r7)
110889f8:	20bfffcc 	andi	r2,r4,65535
110889fc:	4885383a 	mul	r2,r9,r2
11088a00:	50c7883a 	add	r3,r10,r3
11088a04:	2008d43a 	srli	r4,r4,16
11088a08:	10c5883a 	add	r2,r2,r3
11088a0c:	3880008d 	sth	r2,2(r7)
11088a10:	39c00104 	addi	r7,r7,4
11088a14:	39400017 	ldw	r5,0(r7)
11088a18:	4909383a 	mul	r4,r9,r4
11088a1c:	1004d43a 	srli	r2,r2,16
11088a20:	28ffffcc 	andi	r3,r5,65535
11088a24:	20c9883a 	add	r4,r4,r3
11088a28:	1105883a 	add	r2,r2,r4
11088a2c:	42000104 	addi	r8,r8,4
11088a30:	1014d43a 	srli	r10,r2,16
11088a34:	42ffed36 	bltu	r8,r11,110889ec <__multiply+0x134>
11088a38:	38800015 	stw	r2,0(r7)
11088a3c:	31800104 	addi	r6,r6,4
11088a40:	33c0022e 	bgeu	r6,r15,11088a4c <__multiply+0x194>
11088a44:	63000104 	addi	r12,r12,4
11088a48:	003fc606 	br	11088964 <__multiply+0xac>
11088a4c:	0400090e 	bge	zero,r16,11088a74 <__multiply+0x1bc>
11088a50:	70bfff17 	ldw	r2,-4(r14)
11088a54:	70ffff04 	addi	r3,r14,-4
11088a58:	10000326 	beq	r2,zero,11088a68 <__multiply+0x1b0>
11088a5c:	00000506 	br	11088a74 <__multiply+0x1bc>
11088a60:	18800017 	ldw	r2,0(r3)
11088a64:	1000031e 	bne	r2,zero,11088a74 <__multiply+0x1bc>
11088a68:	843fffc4 	addi	r16,r16,-1
11088a6c:	18ffff04 	addi	r3,r3,-4
11088a70:	803ffb1e 	bne	r16,zero,11088a60 <__multiply+0x1a8>
11088a74:	a805883a 	mov	r2,r21
11088a78:	ac000415 	stw	r16,16(r21)
11088a7c:	dfc00617 	ldw	ra,24(sp)
11088a80:	dd400517 	ldw	r21,20(sp)
11088a84:	dd000417 	ldw	r20,16(sp)
11088a88:	dcc00317 	ldw	r19,12(sp)
11088a8c:	dc800217 	ldw	r18,8(sp)
11088a90:	dc400117 	ldw	r17,4(sp)
11088a94:	dc000017 	ldw	r16,0(sp)
11088a98:	dec00704 	addi	sp,sp,28
11088a9c:	f800283a 	ret

11088aa0 <__i2b>:
11088aa0:	defffd04 	addi	sp,sp,-12
11088aa4:	dc000015 	stw	r16,0(sp)
11088aa8:	04000044 	movi	r16,1
11088aac:	dc800115 	stw	r18,4(sp)
11088ab0:	2825883a 	mov	r18,r5
11088ab4:	800b883a 	mov	r5,r16
11088ab8:	dfc00215 	stw	ra,8(sp)
11088abc:	10883a80 	call	110883a8 <_Balloc>
11088ac0:	14000415 	stw	r16,16(r2)
11088ac4:	14800515 	stw	r18,20(r2)
11088ac8:	dfc00217 	ldw	ra,8(sp)
11088acc:	dc800117 	ldw	r18,4(sp)
11088ad0:	dc000017 	ldw	r16,0(sp)
11088ad4:	dec00304 	addi	sp,sp,12
11088ad8:	f800283a 	ret

11088adc <__multadd>:
11088adc:	defffa04 	addi	sp,sp,-24
11088ae0:	dc800215 	stw	r18,8(sp)
11088ae4:	2c800417 	ldw	r18,16(r5)
11088ae8:	dd000415 	stw	r20,16(sp)
11088aec:	dcc00315 	stw	r19,12(sp)
11088af0:	dc000015 	stw	r16,0(sp)
11088af4:	dfc00515 	stw	ra,20(sp)
11088af8:	3821883a 	mov	r16,r7
11088afc:	dc400115 	stw	r17,4(sp)
11088b00:	2827883a 	mov	r19,r5
11088b04:	2029883a 	mov	r20,r4
11088b08:	2a000504 	addi	r8,r5,20
11088b0c:	000f883a 	mov	r7,zero
11088b10:	40800017 	ldw	r2,0(r8)
11088b14:	39c00044 	addi	r7,r7,1
11088b18:	10ffffcc 	andi	r3,r2,65535
11088b1c:	1987383a 	mul	r3,r3,r6
11088b20:	1004d43a 	srli	r2,r2,16
11088b24:	1c07883a 	add	r3,r3,r16
11088b28:	180ad43a 	srli	r5,r3,16
11088b2c:	1185383a 	mul	r2,r2,r6
11088b30:	18ffffcc 	andi	r3,r3,65535
11088b34:	1145883a 	add	r2,r2,r5
11088b38:	1008943a 	slli	r4,r2,16
11088b3c:	1020d43a 	srli	r16,r2,16
11088b40:	20c9883a 	add	r4,r4,r3
11088b44:	41000015 	stw	r4,0(r8)
11088b48:	42000104 	addi	r8,r8,4
11088b4c:	3cbff016 	blt	r7,r18,11088b10 <__multadd+0x34>
11088b50:	80000826 	beq	r16,zero,11088b74 <__multadd+0x98>
11088b54:	98800217 	ldw	r2,8(r19)
11088b58:	90800f0e 	bge	r18,r2,11088b98 <__multadd+0xbc>
11088b5c:	9485883a 	add	r2,r18,r18
11088b60:	1085883a 	add	r2,r2,r2
11088b64:	14c5883a 	add	r2,r2,r19
11088b68:	90c00044 	addi	r3,r18,1
11088b6c:	14000515 	stw	r16,20(r2)
11088b70:	98c00415 	stw	r3,16(r19)
11088b74:	9805883a 	mov	r2,r19
11088b78:	dfc00517 	ldw	ra,20(sp)
11088b7c:	dd000417 	ldw	r20,16(sp)
11088b80:	dcc00317 	ldw	r19,12(sp)
11088b84:	dc800217 	ldw	r18,8(sp)
11088b88:	dc400117 	ldw	r17,4(sp)
11088b8c:	dc000017 	ldw	r16,0(sp)
11088b90:	dec00604 	addi	sp,sp,24
11088b94:	f800283a 	ret
11088b98:	99400117 	ldw	r5,4(r19)
11088b9c:	a009883a 	mov	r4,r20
11088ba0:	29400044 	addi	r5,r5,1
11088ba4:	10883a80 	call	110883a8 <_Balloc>
11088ba8:	99800417 	ldw	r6,16(r19)
11088bac:	99400304 	addi	r5,r19,12
11088bb0:	11000304 	addi	r4,r2,12
11088bb4:	318d883a 	add	r6,r6,r6
11088bb8:	318d883a 	add	r6,r6,r6
11088bbc:	31800204 	addi	r6,r6,8
11088bc0:	1023883a 	mov	r17,r2
11088bc4:	1087c100 	call	11087c10 <memcpy>
11088bc8:	980b883a 	mov	r5,r19
11088bcc:	a009883a 	mov	r4,r20
11088bd0:	1087e280 	call	11087e28 <_Bfree>
11088bd4:	8827883a 	mov	r19,r17
11088bd8:	003fe006 	br	11088b5c <__multadd+0x80>

11088bdc <__pow5mult>:
11088bdc:	defffa04 	addi	sp,sp,-24
11088be0:	308000cc 	andi	r2,r6,3
11088be4:	dd000415 	stw	r20,16(sp)
11088be8:	dcc00315 	stw	r19,12(sp)
11088bec:	dc000015 	stw	r16,0(sp)
11088bf0:	dfc00515 	stw	ra,20(sp)
11088bf4:	dc800215 	stw	r18,8(sp)
11088bf8:	dc400115 	stw	r17,4(sp)
11088bfc:	3021883a 	mov	r16,r6
11088c00:	2027883a 	mov	r19,r4
11088c04:	2829883a 	mov	r20,r5
11088c08:	10002b1e 	bne	r2,zero,11088cb8 <__pow5mult+0xdc>
11088c0c:	8025d0ba 	srai	r18,r16,2
11088c10:	90001b26 	beq	r18,zero,11088c80 <__pow5mult+0xa4>
11088c14:	9c001217 	ldw	r16,72(r19)
11088c18:	8000081e 	bne	r16,zero,11088c3c <__pow5mult+0x60>
11088c1c:	00003006 	br	11088ce0 <__pow5mult+0x104>
11088c20:	800b883a 	mov	r5,r16
11088c24:	800d883a 	mov	r6,r16
11088c28:	9809883a 	mov	r4,r19
11088c2c:	90001426 	beq	r18,zero,11088c80 <__pow5mult+0xa4>
11088c30:	80800017 	ldw	r2,0(r16)
11088c34:	10001b26 	beq	r2,zero,11088ca4 <__pow5mult+0xc8>
11088c38:	1021883a 	mov	r16,r2
11088c3c:	9080004c 	andi	r2,r18,1
11088c40:	1005003a 	cmpeq	r2,r2,zero
11088c44:	9025d07a 	srai	r18,r18,1
11088c48:	800d883a 	mov	r6,r16
11088c4c:	9809883a 	mov	r4,r19
11088c50:	a00b883a 	mov	r5,r20
11088c54:	103ff21e 	bne	r2,zero,11088c20 <__pow5mult+0x44>
11088c58:	10888b80 	call	110888b8 <__multiply>
11088c5c:	a00b883a 	mov	r5,r20
11088c60:	9809883a 	mov	r4,r19
11088c64:	1023883a 	mov	r17,r2
11088c68:	1087e280 	call	11087e28 <_Bfree>
11088c6c:	8829883a 	mov	r20,r17
11088c70:	800b883a 	mov	r5,r16
11088c74:	800d883a 	mov	r6,r16
11088c78:	9809883a 	mov	r4,r19
11088c7c:	903fec1e 	bne	r18,zero,11088c30 <__pow5mult+0x54>
11088c80:	a005883a 	mov	r2,r20
11088c84:	dfc00517 	ldw	ra,20(sp)
11088c88:	dd000417 	ldw	r20,16(sp)
11088c8c:	dcc00317 	ldw	r19,12(sp)
11088c90:	dc800217 	ldw	r18,8(sp)
11088c94:	dc400117 	ldw	r17,4(sp)
11088c98:	dc000017 	ldw	r16,0(sp)
11088c9c:	dec00604 	addi	sp,sp,24
11088ca0:	f800283a 	ret
11088ca4:	10888b80 	call	110888b8 <__multiply>
11088ca8:	80800015 	stw	r2,0(r16)
11088cac:	1021883a 	mov	r16,r2
11088cb0:	10000015 	stw	zero,0(r2)
11088cb4:	003fe106 	br	11088c3c <__pow5mult+0x60>
11088cb8:	1085883a 	add	r2,r2,r2
11088cbc:	00c44274 	movhi	r3,4361
11088cc0:	18fde204 	addi	r3,r3,-2168
11088cc4:	1085883a 	add	r2,r2,r2
11088cc8:	10c5883a 	add	r2,r2,r3
11088ccc:	11bfff17 	ldw	r6,-4(r2)
11088cd0:	000f883a 	mov	r7,zero
11088cd4:	1088adc0 	call	11088adc <__multadd>
11088cd8:	1029883a 	mov	r20,r2
11088cdc:	003fcb06 	br	11088c0c <__pow5mult+0x30>
11088ce0:	9809883a 	mov	r4,r19
11088ce4:	01409c44 	movi	r5,625
11088ce8:	1088aa00 	call	11088aa0 <__i2b>
11088cec:	98801215 	stw	r2,72(r19)
11088cf0:	1021883a 	mov	r16,r2
11088cf4:	10000015 	stw	zero,0(r2)
11088cf8:	003fd006 	br	11088c3c <__pow5mult+0x60>

11088cfc <__s2b>:
11088cfc:	defff904 	addi	sp,sp,-28
11088d00:	dcc00315 	stw	r19,12(sp)
11088d04:	dc800215 	stw	r18,8(sp)
11088d08:	2827883a 	mov	r19,r5
11088d0c:	2025883a 	mov	r18,r4
11088d10:	01400244 	movi	r5,9
11088d14:	39000204 	addi	r4,r7,8
11088d18:	dd000415 	stw	r20,16(sp)
11088d1c:	dc400115 	stw	r17,4(sp)
11088d20:	dfc00615 	stw	ra,24(sp)
11088d24:	dd400515 	stw	r21,20(sp)
11088d28:	dc000015 	stw	r16,0(sp)
11088d2c:	3829883a 	mov	r20,r7
11088d30:	3023883a 	mov	r17,r6
11088d34:	10825e00 	call	110825e0 <__divsi3>
11088d38:	00c00044 	movi	r3,1
11088d3c:	1880350e 	bge	r3,r2,11088e14 <__s2b+0x118>
11088d40:	000b883a 	mov	r5,zero
11088d44:	18c7883a 	add	r3,r3,r3
11088d48:	29400044 	addi	r5,r5,1
11088d4c:	18bffd16 	blt	r3,r2,11088d44 <__s2b+0x48>
11088d50:	9009883a 	mov	r4,r18
11088d54:	10883a80 	call	110883a8 <_Balloc>
11088d58:	1011883a 	mov	r8,r2
11088d5c:	d8800717 	ldw	r2,28(sp)
11088d60:	00c00044 	movi	r3,1
11088d64:	01800244 	movi	r6,9
11088d68:	40800515 	stw	r2,20(r8)
11088d6c:	40c00415 	stw	r3,16(r8)
11088d70:	3440260e 	bge	r6,r17,11088e0c <__s2b+0x110>
11088d74:	3021883a 	mov	r16,r6
11088d78:	99ab883a 	add	r21,r19,r6
11088d7c:	9c05883a 	add	r2,r19,r16
11088d80:	11c00007 	ldb	r7,0(r2)
11088d84:	400b883a 	mov	r5,r8
11088d88:	9009883a 	mov	r4,r18
11088d8c:	39fff404 	addi	r7,r7,-48
11088d90:	01800284 	movi	r6,10
11088d94:	1088adc0 	call	11088adc <__multadd>
11088d98:	84000044 	addi	r16,r16,1
11088d9c:	1011883a 	mov	r8,r2
11088da0:	8c3ff61e 	bne	r17,r16,11088d7c <__s2b+0x80>
11088da4:	ac45883a 	add	r2,r21,r17
11088da8:	117ffe04 	addi	r5,r2,-8
11088dac:	880d883a 	mov	r6,r17
11088db0:	35000c0e 	bge	r6,r20,11088de4 <__s2b+0xe8>
11088db4:	a185c83a 	sub	r2,r20,r6
11088db8:	2821883a 	mov	r16,r5
11088dbc:	28a3883a 	add	r17,r5,r2
11088dc0:	81c00007 	ldb	r7,0(r16)
11088dc4:	400b883a 	mov	r5,r8
11088dc8:	9009883a 	mov	r4,r18
11088dcc:	39fff404 	addi	r7,r7,-48
11088dd0:	01800284 	movi	r6,10
11088dd4:	1088adc0 	call	11088adc <__multadd>
11088dd8:	84000044 	addi	r16,r16,1
11088ddc:	1011883a 	mov	r8,r2
11088de0:	847ff71e 	bne	r16,r17,11088dc0 <__s2b+0xc4>
11088de4:	4005883a 	mov	r2,r8
11088de8:	dfc00617 	ldw	ra,24(sp)
11088dec:	dd400517 	ldw	r21,20(sp)
11088df0:	dd000417 	ldw	r20,16(sp)
11088df4:	dcc00317 	ldw	r19,12(sp)
11088df8:	dc800217 	ldw	r18,8(sp)
11088dfc:	dc400117 	ldw	r17,4(sp)
11088e00:	dc000017 	ldw	r16,0(sp)
11088e04:	dec00704 	addi	sp,sp,28
11088e08:	f800283a 	ret
11088e0c:	99400284 	addi	r5,r19,10
11088e10:	003fe706 	br	11088db0 <__s2b+0xb4>
11088e14:	000b883a 	mov	r5,zero
11088e18:	003fcd06 	br	11088d50 <__s2b+0x54>

11088e1c <_realloc_r>:
11088e1c:	defff404 	addi	sp,sp,-48
11088e20:	dd800815 	stw	r22,32(sp)
11088e24:	dc800415 	stw	r18,16(sp)
11088e28:	dc400315 	stw	r17,12(sp)
11088e2c:	dfc00b15 	stw	ra,44(sp)
11088e30:	df000a15 	stw	fp,40(sp)
11088e34:	ddc00915 	stw	r23,36(sp)
11088e38:	dd400715 	stw	r21,28(sp)
11088e3c:	dd000615 	stw	r20,24(sp)
11088e40:	dcc00515 	stw	r19,20(sp)
11088e44:	dc000215 	stw	r16,8(sp)
11088e48:	2825883a 	mov	r18,r5
11088e4c:	3023883a 	mov	r17,r6
11088e50:	202d883a 	mov	r22,r4
11088e54:	2800c926 	beq	r5,zero,1108917c <_realloc_r+0x360>
11088e58:	108c6b40 	call	1108c6b4 <__malloc_lock>
11088e5c:	943ffe04 	addi	r16,r18,-8
11088e60:	88c002c4 	addi	r3,r17,11
11088e64:	00800584 	movi	r2,22
11088e68:	82000117 	ldw	r8,4(r16)
11088e6c:	10c01b2e 	bgeu	r2,r3,11088edc <_realloc_r+0xc0>
11088e70:	00bffe04 	movi	r2,-8
11088e74:	188e703a 	and	r7,r3,r2
11088e78:	3839883a 	mov	fp,r7
11088e7c:	38001a16 	blt	r7,zero,11088ee8 <_realloc_r+0xcc>
11088e80:	e4401936 	bltu	fp,r17,11088ee8 <_realloc_r+0xcc>
11088e84:	013fff04 	movi	r4,-4
11088e88:	4126703a 	and	r19,r8,r4
11088e8c:	99c02616 	blt	r19,r7,11088f28 <_realloc_r+0x10c>
11088e90:	802b883a 	mov	r21,r16
11088e94:	9829883a 	mov	r20,r19
11088e98:	84000204 	addi	r16,r16,8
11088e9c:	a80f883a 	mov	r7,r21
11088ea0:	a70dc83a 	sub	r6,r20,fp
11088ea4:	008003c4 	movi	r2,15
11088ea8:	1180c136 	bltu	r2,r6,110891b0 <_realloc_r+0x394>
11088eac:	38800117 	ldw	r2,4(r7)
11088eb0:	a549883a 	add	r4,r20,r21
11088eb4:	1080004c 	andi	r2,r2,1
11088eb8:	a084b03a 	or	r2,r20,r2
11088ebc:	38800115 	stw	r2,4(r7)
11088ec0:	20c00117 	ldw	r3,4(r4)
11088ec4:	18c00054 	ori	r3,r3,1
11088ec8:	20c00115 	stw	r3,4(r4)
11088ecc:	b009883a 	mov	r4,r22
11088ed0:	108c6d40 	call	1108c6d4 <__malloc_unlock>
11088ed4:	8023883a 	mov	r17,r16
11088ed8:	00000606 	br	11088ef4 <_realloc_r+0xd8>
11088edc:	01c00404 	movi	r7,16
11088ee0:	3839883a 	mov	fp,r7
11088ee4:	e47fe72e 	bgeu	fp,r17,11088e84 <_realloc_r+0x68>
11088ee8:	00800304 	movi	r2,12
11088eec:	0023883a 	mov	r17,zero
11088ef0:	b0800015 	stw	r2,0(r22)
11088ef4:	8805883a 	mov	r2,r17
11088ef8:	dfc00b17 	ldw	ra,44(sp)
11088efc:	df000a17 	ldw	fp,40(sp)
11088f00:	ddc00917 	ldw	r23,36(sp)
11088f04:	dd800817 	ldw	r22,32(sp)
11088f08:	dd400717 	ldw	r21,28(sp)
11088f0c:	dd000617 	ldw	r20,24(sp)
11088f10:	dcc00517 	ldw	r19,20(sp)
11088f14:	dc800417 	ldw	r18,16(sp)
11088f18:	dc400317 	ldw	r17,12(sp)
11088f1c:	dc000217 	ldw	r16,8(sp)
11088f20:	dec00c04 	addi	sp,sp,48
11088f24:	f800283a 	ret
11088f28:	00844274 	movhi	r2,4361
11088f2c:	10bf3804 	addi	r2,r2,-800
11088f30:	12400217 	ldw	r9,8(r2)
11088f34:	84cd883a 	add	r6,r16,r19
11088f38:	802b883a 	mov	r21,r16
11088f3c:	3240b926 	beq	r6,r9,11089224 <_realloc_r+0x408>
11088f40:	31400117 	ldw	r5,4(r6)
11088f44:	00bfff84 	movi	r2,-2
11088f48:	2884703a 	and	r2,r5,r2
11088f4c:	1185883a 	add	r2,r2,r6
11088f50:	10c00117 	ldw	r3,4(r2)
11088f54:	18c0004c 	andi	r3,r3,1
11088f58:	1807003a 	cmpeq	r3,r3,zero
11088f5c:	1800a326 	beq	r3,zero,110891ec <_realloc_r+0x3d0>
11088f60:	2908703a 	and	r4,r5,r4
11088f64:	9929883a 	add	r20,r19,r4
11088f68:	a1c0a30e 	bge	r20,r7,110891f8 <_realloc_r+0x3dc>
11088f6c:	4080004c 	andi	r2,r8,1
11088f70:	1000551e 	bne	r2,zero,110890c8 <_realloc_r+0x2ac>
11088f74:	80800017 	ldw	r2,0(r16)
11088f78:	80afc83a 	sub	r23,r16,r2
11088f7c:	b8c00117 	ldw	r3,4(r23)
11088f80:	00bfff04 	movi	r2,-4
11088f84:	1884703a 	and	r2,r3,r2
11088f88:	30002e26 	beq	r6,zero,11089044 <_realloc_r+0x228>
11088f8c:	3240b926 	beq	r6,r9,11089274 <_realloc_r+0x458>
11088f90:	98a9883a 	add	r20,r19,r2
11088f94:	2509883a 	add	r4,r4,r20
11088f98:	d9000015 	stw	r4,0(sp)
11088f9c:	21c02a16 	blt	r4,r7,11089048 <_realloc_r+0x22c>
11088fa0:	30800317 	ldw	r2,12(r6)
11088fa4:	30c00217 	ldw	r3,8(r6)
11088fa8:	01400904 	movi	r5,36
11088fac:	99bfff04 	addi	r6,r19,-4
11088fb0:	18800315 	stw	r2,12(r3)
11088fb4:	10c00215 	stw	r3,8(r2)
11088fb8:	b9000317 	ldw	r4,12(r23)
11088fbc:	b8800217 	ldw	r2,8(r23)
11088fc0:	b82b883a 	mov	r21,r23
11088fc4:	bc000204 	addi	r16,r23,8
11088fc8:	20800215 	stw	r2,8(r4)
11088fcc:	11000315 	stw	r4,12(r2)
11088fd0:	2980e436 	bltu	r5,r6,11089364 <_realloc_r+0x548>
11088fd4:	008004c4 	movi	r2,19
11088fd8:	9009883a 	mov	r4,r18
11088fdc:	8011883a 	mov	r8,r16
11088fe0:	11800f2e 	bgeu	r2,r6,11089020 <_realloc_r+0x204>
11088fe4:	90800017 	ldw	r2,0(r18)
11088fe8:	ba000404 	addi	r8,r23,16
11088fec:	91000204 	addi	r4,r18,8
11088ff0:	b8800215 	stw	r2,8(r23)
11088ff4:	90c00117 	ldw	r3,4(r18)
11088ff8:	008006c4 	movi	r2,27
11088ffc:	b8c00315 	stw	r3,12(r23)
11089000:	1180072e 	bgeu	r2,r6,11089020 <_realloc_r+0x204>
11089004:	90c00217 	ldw	r3,8(r18)
11089008:	ba000604 	addi	r8,r23,24
1108900c:	91000404 	addi	r4,r18,16
11089010:	b8c00415 	stw	r3,16(r23)
11089014:	90800317 	ldw	r2,12(r18)
11089018:	b8800515 	stw	r2,20(r23)
1108901c:	3140e726 	beq	r6,r5,110893bc <_realloc_r+0x5a0>
11089020:	20800017 	ldw	r2,0(r4)
11089024:	dd000017 	ldw	r20,0(sp)
11089028:	b80f883a 	mov	r7,r23
1108902c:	40800015 	stw	r2,0(r8)
11089030:	20c00117 	ldw	r3,4(r4)
11089034:	40c00115 	stw	r3,4(r8)
11089038:	20800217 	ldw	r2,8(r4)
1108903c:	40800215 	stw	r2,8(r8)
11089040:	003f9706 	br	11088ea0 <_realloc_r+0x84>
11089044:	98a9883a 	add	r20,r19,r2
11089048:	a1c01f16 	blt	r20,r7,110890c8 <_realloc_r+0x2ac>
1108904c:	b8c00317 	ldw	r3,12(r23)
11089050:	b8800217 	ldw	r2,8(r23)
11089054:	99bfff04 	addi	r6,r19,-4
11089058:	01400904 	movi	r5,36
1108905c:	b82b883a 	mov	r21,r23
11089060:	18800215 	stw	r2,8(r3)
11089064:	10c00315 	stw	r3,12(r2)
11089068:	bc000204 	addi	r16,r23,8
1108906c:	2980c336 	bltu	r5,r6,1108937c <_realloc_r+0x560>
11089070:	008004c4 	movi	r2,19
11089074:	9009883a 	mov	r4,r18
11089078:	8011883a 	mov	r8,r16
1108907c:	11800f2e 	bgeu	r2,r6,110890bc <_realloc_r+0x2a0>
11089080:	90800017 	ldw	r2,0(r18)
11089084:	ba000404 	addi	r8,r23,16
11089088:	91000204 	addi	r4,r18,8
1108908c:	b8800215 	stw	r2,8(r23)
11089090:	90c00117 	ldw	r3,4(r18)
11089094:	008006c4 	movi	r2,27
11089098:	b8c00315 	stw	r3,12(r23)
1108909c:	1180072e 	bgeu	r2,r6,110890bc <_realloc_r+0x2a0>
110890a0:	90c00217 	ldw	r3,8(r18)
110890a4:	ba000604 	addi	r8,r23,24
110890a8:	91000404 	addi	r4,r18,16
110890ac:	b8c00415 	stw	r3,16(r23)
110890b0:	90800317 	ldw	r2,12(r18)
110890b4:	b8800515 	stw	r2,20(r23)
110890b8:	3140c726 	beq	r6,r5,110893d8 <_realloc_r+0x5bc>
110890bc:	20800017 	ldw	r2,0(r4)
110890c0:	b80f883a 	mov	r7,r23
110890c4:	003fd906 	br	1108902c <_realloc_r+0x210>
110890c8:	880b883a 	mov	r5,r17
110890cc:	b009883a 	mov	r4,r22
110890d0:	10873ec0 	call	110873ec <_malloc_r>
110890d4:	1023883a 	mov	r17,r2
110890d8:	10002526 	beq	r2,zero,11089170 <_realloc_r+0x354>
110890dc:	80800117 	ldw	r2,4(r16)
110890e0:	00ffff84 	movi	r3,-2
110890e4:	893ffe04 	addi	r4,r17,-8
110890e8:	10c4703a 	and	r2,r2,r3
110890ec:	8085883a 	add	r2,r16,r2
110890f0:	20809526 	beq	r4,r2,11089348 <_realloc_r+0x52c>
110890f4:	99bfff04 	addi	r6,r19,-4
110890f8:	01c00904 	movi	r7,36
110890fc:	39804536 	bltu	r7,r6,11089214 <_realloc_r+0x3f8>
11089100:	008004c4 	movi	r2,19
11089104:	9009883a 	mov	r4,r18
11089108:	880b883a 	mov	r5,r17
1108910c:	11800f2e 	bgeu	r2,r6,1108914c <_realloc_r+0x330>
11089110:	90800017 	ldw	r2,0(r18)
11089114:	89400204 	addi	r5,r17,8
11089118:	91000204 	addi	r4,r18,8
1108911c:	88800015 	stw	r2,0(r17)
11089120:	90c00117 	ldw	r3,4(r18)
11089124:	008006c4 	movi	r2,27
11089128:	88c00115 	stw	r3,4(r17)
1108912c:	1180072e 	bgeu	r2,r6,1108914c <_realloc_r+0x330>
11089130:	90c00217 	ldw	r3,8(r18)
11089134:	89400404 	addi	r5,r17,16
11089138:	91000404 	addi	r4,r18,16
1108913c:	88c00215 	stw	r3,8(r17)
11089140:	90800317 	ldw	r2,12(r18)
11089144:	88800315 	stw	r2,12(r17)
11089148:	31c09126 	beq	r6,r7,11089390 <_realloc_r+0x574>
1108914c:	20800017 	ldw	r2,0(r4)
11089150:	28800015 	stw	r2,0(r5)
11089154:	20c00117 	ldw	r3,4(r4)
11089158:	28c00115 	stw	r3,4(r5)
1108915c:	20800217 	ldw	r2,8(r4)
11089160:	28800215 	stw	r2,8(r5)
11089164:	900b883a 	mov	r5,r18
11089168:	b009883a 	mov	r4,r22
1108916c:	10868640 	call	11086864 <_free_r>
11089170:	b009883a 	mov	r4,r22
11089174:	108c6d40 	call	1108c6d4 <__malloc_unlock>
11089178:	003f5e06 	br	11088ef4 <_realloc_r+0xd8>
1108917c:	300b883a 	mov	r5,r6
11089180:	dfc00b17 	ldw	ra,44(sp)
11089184:	df000a17 	ldw	fp,40(sp)
11089188:	ddc00917 	ldw	r23,36(sp)
1108918c:	dd800817 	ldw	r22,32(sp)
11089190:	dd400717 	ldw	r21,28(sp)
11089194:	dd000617 	ldw	r20,24(sp)
11089198:	dcc00517 	ldw	r19,20(sp)
1108919c:	dc800417 	ldw	r18,16(sp)
110891a0:	dc400317 	ldw	r17,12(sp)
110891a4:	dc000217 	ldw	r16,8(sp)
110891a8:	dec00c04 	addi	sp,sp,48
110891ac:	10873ec1 	jmpi	110873ec <_malloc_r>
110891b0:	38800117 	ldw	r2,4(r7)
110891b4:	e54b883a 	add	r5,fp,r21
110891b8:	31000054 	ori	r4,r6,1
110891bc:	1080004c 	andi	r2,r2,1
110891c0:	1704b03a 	or	r2,r2,fp
110891c4:	38800115 	stw	r2,4(r7)
110891c8:	29000115 	stw	r4,4(r5)
110891cc:	2987883a 	add	r3,r5,r6
110891d0:	18800117 	ldw	r2,4(r3)
110891d4:	29400204 	addi	r5,r5,8
110891d8:	b009883a 	mov	r4,r22
110891dc:	10800054 	ori	r2,r2,1
110891e0:	18800115 	stw	r2,4(r3)
110891e4:	10868640 	call	11086864 <_free_r>
110891e8:	003f3806 	br	11088ecc <_realloc_r+0xb0>
110891ec:	000d883a 	mov	r6,zero
110891f0:	0009883a 	mov	r4,zero
110891f4:	003f5d06 	br	11088f6c <_realloc_r+0x150>
110891f8:	30c00217 	ldw	r3,8(r6)
110891fc:	30800317 	ldw	r2,12(r6)
11089200:	800f883a 	mov	r7,r16
11089204:	84000204 	addi	r16,r16,8
11089208:	10c00215 	stw	r3,8(r2)
1108920c:	18800315 	stw	r2,12(r3)
11089210:	003f2306 	br	11088ea0 <_realloc_r+0x84>
11089214:	8809883a 	mov	r4,r17
11089218:	900b883a 	mov	r5,r18
1108921c:	1087cb00 	call	11087cb0 <memmove>
11089220:	003fd006 	br	11089164 <_realloc_r+0x348>
11089224:	30800117 	ldw	r2,4(r6)
11089228:	e0c00404 	addi	r3,fp,16
1108922c:	1108703a 	and	r4,r2,r4
11089230:	9905883a 	add	r2,r19,r4
11089234:	10ff4d16 	blt	r2,r3,11088f6c <_realloc_r+0x150>
11089238:	1705c83a 	sub	r2,r2,fp
1108923c:	870b883a 	add	r5,r16,fp
11089240:	10800054 	ori	r2,r2,1
11089244:	28800115 	stw	r2,4(r5)
11089248:	80c00117 	ldw	r3,4(r16)
1108924c:	00844274 	movhi	r2,4361
11089250:	10bf3804 	addi	r2,r2,-800
11089254:	b009883a 	mov	r4,r22
11089258:	18c0004c 	andi	r3,r3,1
1108925c:	e0c6b03a 	or	r3,fp,r3
11089260:	11400215 	stw	r5,8(r2)
11089264:	80c00115 	stw	r3,4(r16)
11089268:	108c6d40 	call	1108c6d4 <__malloc_unlock>
1108926c:	84400204 	addi	r17,r16,8
11089270:	003f2006 	br	11088ef4 <_realloc_r+0xd8>
11089274:	98a9883a 	add	r20,r19,r2
11089278:	2509883a 	add	r4,r4,r20
1108927c:	e0800404 	addi	r2,fp,16
11089280:	d9000115 	stw	r4,4(sp)
11089284:	20bf7016 	blt	r4,r2,11089048 <_realloc_r+0x22c>
11089288:	b8c00317 	ldw	r3,12(r23)
1108928c:	b8800217 	ldw	r2,8(r23)
11089290:	99bfff04 	addi	r6,r19,-4
11089294:	01400904 	movi	r5,36
11089298:	18800215 	stw	r2,8(r3)
1108929c:	10c00315 	stw	r3,12(r2)
110892a0:	bc400204 	addi	r17,r23,8
110892a4:	29804136 	bltu	r5,r6,110893ac <_realloc_r+0x590>
110892a8:	008004c4 	movi	r2,19
110892ac:	9009883a 	mov	r4,r18
110892b0:	880f883a 	mov	r7,r17
110892b4:	11800f2e 	bgeu	r2,r6,110892f4 <_realloc_r+0x4d8>
110892b8:	90800017 	ldw	r2,0(r18)
110892bc:	b9c00404 	addi	r7,r23,16
110892c0:	91000204 	addi	r4,r18,8
110892c4:	b8800215 	stw	r2,8(r23)
110892c8:	90c00117 	ldw	r3,4(r18)
110892cc:	008006c4 	movi	r2,27
110892d0:	b8c00315 	stw	r3,12(r23)
110892d4:	1180072e 	bgeu	r2,r6,110892f4 <_realloc_r+0x4d8>
110892d8:	90c00217 	ldw	r3,8(r18)
110892dc:	b9c00604 	addi	r7,r23,24
110892e0:	91000404 	addi	r4,r18,16
110892e4:	b8c00415 	stw	r3,16(r23)
110892e8:	90800317 	ldw	r2,12(r18)
110892ec:	b8800515 	stw	r2,20(r23)
110892f0:	31404026 	beq	r6,r5,110893f4 <_realloc_r+0x5d8>
110892f4:	20800017 	ldw	r2,0(r4)
110892f8:	38800015 	stw	r2,0(r7)
110892fc:	20c00117 	ldw	r3,4(r4)
11089300:	38c00115 	stw	r3,4(r7)
11089304:	20800217 	ldw	r2,8(r4)
11089308:	38800215 	stw	r2,8(r7)
1108930c:	d8c00117 	ldw	r3,4(sp)
11089310:	bf0b883a 	add	r5,r23,fp
11089314:	b009883a 	mov	r4,r22
11089318:	1f05c83a 	sub	r2,r3,fp
1108931c:	10800054 	ori	r2,r2,1
11089320:	28800115 	stw	r2,4(r5)
11089324:	b8c00117 	ldw	r3,4(r23)
11089328:	00844274 	movhi	r2,4361
1108932c:	10bf3804 	addi	r2,r2,-800
11089330:	11400215 	stw	r5,8(r2)
11089334:	18c0004c 	andi	r3,r3,1
11089338:	e0c6b03a 	or	r3,fp,r3
1108933c:	b8c00115 	stw	r3,4(r23)
11089340:	108c6d40 	call	1108c6d4 <__malloc_unlock>
11089344:	003eeb06 	br	11088ef4 <_realloc_r+0xd8>
11089348:	20800117 	ldw	r2,4(r4)
1108934c:	00ffff04 	movi	r3,-4
11089350:	800f883a 	mov	r7,r16
11089354:	10c4703a 	and	r2,r2,r3
11089358:	98a9883a 	add	r20,r19,r2
1108935c:	84000204 	addi	r16,r16,8
11089360:	003ecf06 	br	11088ea0 <_realloc_r+0x84>
11089364:	900b883a 	mov	r5,r18
11089368:	8009883a 	mov	r4,r16
1108936c:	1087cb00 	call	11087cb0 <memmove>
11089370:	dd000017 	ldw	r20,0(sp)
11089374:	b80f883a 	mov	r7,r23
11089378:	003ec906 	br	11088ea0 <_realloc_r+0x84>
1108937c:	900b883a 	mov	r5,r18
11089380:	8009883a 	mov	r4,r16
11089384:	1087cb00 	call	11087cb0 <memmove>
11089388:	b80f883a 	mov	r7,r23
1108938c:	003ec406 	br	11088ea0 <_realloc_r+0x84>
11089390:	90c00417 	ldw	r3,16(r18)
11089394:	89400604 	addi	r5,r17,24
11089398:	91000604 	addi	r4,r18,24
1108939c:	88c00415 	stw	r3,16(r17)
110893a0:	90800517 	ldw	r2,20(r18)
110893a4:	88800515 	stw	r2,20(r17)
110893a8:	003f6806 	br	1108914c <_realloc_r+0x330>
110893ac:	900b883a 	mov	r5,r18
110893b0:	8809883a 	mov	r4,r17
110893b4:	1087cb00 	call	11087cb0 <memmove>
110893b8:	003fd406 	br	1108930c <_realloc_r+0x4f0>
110893bc:	90c00417 	ldw	r3,16(r18)
110893c0:	91000604 	addi	r4,r18,24
110893c4:	ba000804 	addi	r8,r23,32
110893c8:	b8c00615 	stw	r3,24(r23)
110893cc:	90800517 	ldw	r2,20(r18)
110893d0:	b8800715 	stw	r2,28(r23)
110893d4:	003f1206 	br	11089020 <_realloc_r+0x204>
110893d8:	90c00417 	ldw	r3,16(r18)
110893dc:	91000604 	addi	r4,r18,24
110893e0:	ba000804 	addi	r8,r23,32
110893e4:	b8c00615 	stw	r3,24(r23)
110893e8:	90800517 	ldw	r2,20(r18)
110893ec:	b8800715 	stw	r2,28(r23)
110893f0:	003f3206 	br	110890bc <_realloc_r+0x2a0>
110893f4:	90c00417 	ldw	r3,16(r18)
110893f8:	91000604 	addi	r4,r18,24
110893fc:	b9c00804 	addi	r7,r23,32
11089400:	b8c00615 	stw	r3,24(r23)
11089404:	90800517 	ldw	r2,20(r18)
11089408:	b8800715 	stw	r2,28(r23)
1108940c:	003fb906 	br	110892f4 <_realloc_r+0x4d8>

11089410 <__isinfd>:
11089410:	200d883a 	mov	r6,r4
11089414:	0109c83a 	sub	r4,zero,r4
11089418:	2188b03a 	or	r4,r4,r6
1108941c:	2008d7fa 	srli	r4,r4,31
11089420:	00a00034 	movhi	r2,32768
11089424:	10bfffc4 	addi	r2,r2,-1
11089428:	1144703a 	and	r2,r2,r5
1108942c:	2088b03a 	or	r4,r4,r2
11089430:	009ffc34 	movhi	r2,32752
11089434:	1105c83a 	sub	r2,r2,r4
11089438:	0087c83a 	sub	r3,zero,r2
1108943c:	10c4b03a 	or	r2,r2,r3
11089440:	1004d7fa 	srli	r2,r2,31
11089444:	00c00044 	movi	r3,1
11089448:	1885c83a 	sub	r2,r3,r2
1108944c:	f800283a 	ret

11089450 <__isnand>:
11089450:	200d883a 	mov	r6,r4
11089454:	0109c83a 	sub	r4,zero,r4
11089458:	2188b03a 	or	r4,r4,r6
1108945c:	2008d7fa 	srli	r4,r4,31
11089460:	00a00034 	movhi	r2,32768
11089464:	10bfffc4 	addi	r2,r2,-1
11089468:	1144703a 	and	r2,r2,r5
1108946c:	2088b03a 	or	r4,r4,r2
11089470:	009ffc34 	movhi	r2,32752
11089474:	1105c83a 	sub	r2,r2,r4
11089478:	1004d7fa 	srli	r2,r2,31
1108947c:	f800283a 	ret

11089480 <_sbrk_r>:
11089480:	defffd04 	addi	sp,sp,-12
11089484:	dc000015 	stw	r16,0(sp)
11089488:	04044274 	movhi	r16,4361
1108948c:	840b6a04 	addi	r16,r16,11688
11089490:	dc400115 	stw	r17,4(sp)
11089494:	80000015 	stw	zero,0(r16)
11089498:	2023883a 	mov	r17,r4
1108949c:	2809883a 	mov	r4,r5
110894a0:	dfc00215 	stw	ra,8(sp)
110894a4:	108c8d40 	call	1108c8d4 <sbrk>
110894a8:	1007883a 	mov	r3,r2
110894ac:	00bfffc4 	movi	r2,-1
110894b0:	18800626 	beq	r3,r2,110894cc <_sbrk_r+0x4c>
110894b4:	1805883a 	mov	r2,r3
110894b8:	dfc00217 	ldw	ra,8(sp)
110894bc:	dc400117 	ldw	r17,4(sp)
110894c0:	dc000017 	ldw	r16,0(sp)
110894c4:	dec00304 	addi	sp,sp,12
110894c8:	f800283a 	ret
110894cc:	80800017 	ldw	r2,0(r16)
110894d0:	103ff826 	beq	r2,zero,110894b4 <_sbrk_r+0x34>
110894d4:	88800015 	stw	r2,0(r17)
110894d8:	1805883a 	mov	r2,r3
110894dc:	dfc00217 	ldw	ra,8(sp)
110894e0:	dc400117 	ldw	r17,4(sp)
110894e4:	dc000017 	ldw	r16,0(sp)
110894e8:	dec00304 	addi	sp,sp,12
110894ec:	f800283a 	ret

110894f0 <__sclose>:
110894f0:	2940038f 	ldh	r5,14(r5)
110894f4:	10898241 	jmpi	11089824 <_close_r>

110894f8 <__sseek>:
110894f8:	defffe04 	addi	sp,sp,-8
110894fc:	dc000015 	stw	r16,0(sp)
11089500:	2821883a 	mov	r16,r5
11089504:	2940038f 	ldh	r5,14(r5)
11089508:	dfc00115 	stw	ra,4(sp)
1108950c:	1089a9c0 	call	11089a9c <_lseek_r>
11089510:	1007883a 	mov	r3,r2
11089514:	00bfffc4 	movi	r2,-1
11089518:	18800926 	beq	r3,r2,11089540 <__sseek+0x48>
1108951c:	8080030b 	ldhu	r2,12(r16)
11089520:	80c01415 	stw	r3,80(r16)
11089524:	10840014 	ori	r2,r2,4096
11089528:	8080030d 	sth	r2,12(r16)
1108952c:	1805883a 	mov	r2,r3
11089530:	dfc00117 	ldw	ra,4(sp)
11089534:	dc000017 	ldw	r16,0(sp)
11089538:	dec00204 	addi	sp,sp,8
1108953c:	f800283a 	ret
11089540:	8080030b 	ldhu	r2,12(r16)
11089544:	10bbffcc 	andi	r2,r2,61439
11089548:	8080030d 	sth	r2,12(r16)
1108954c:	1805883a 	mov	r2,r3
11089550:	dfc00117 	ldw	ra,4(sp)
11089554:	dc000017 	ldw	r16,0(sp)
11089558:	dec00204 	addi	sp,sp,8
1108955c:	f800283a 	ret

11089560 <__swrite>:
11089560:	2880030b 	ldhu	r2,12(r5)
11089564:	defffb04 	addi	sp,sp,-20
11089568:	dcc00315 	stw	r19,12(sp)
1108956c:	1080400c 	andi	r2,r2,256
11089570:	dc800215 	stw	r18,8(sp)
11089574:	dc400115 	stw	r17,4(sp)
11089578:	dc000015 	stw	r16,0(sp)
1108957c:	3027883a 	mov	r19,r6
11089580:	3825883a 	mov	r18,r7
11089584:	dfc00415 	stw	ra,16(sp)
11089588:	2821883a 	mov	r16,r5
1108958c:	000d883a 	mov	r6,zero
11089590:	01c00084 	movi	r7,2
11089594:	2023883a 	mov	r17,r4
11089598:	10000226 	beq	r2,zero,110895a4 <__swrite+0x44>
1108959c:	2940038f 	ldh	r5,14(r5)
110895a0:	1089a9c0 	call	11089a9c <_lseek_r>
110895a4:	8080030b 	ldhu	r2,12(r16)
110895a8:	8140038f 	ldh	r5,14(r16)
110895ac:	8809883a 	mov	r4,r17
110895b0:	10bbffcc 	andi	r2,r2,61439
110895b4:	980d883a 	mov	r6,r19
110895b8:	900f883a 	mov	r7,r18
110895bc:	8080030d 	sth	r2,12(r16)
110895c0:	dfc00417 	ldw	ra,16(sp)
110895c4:	dcc00317 	ldw	r19,12(sp)
110895c8:	dc800217 	ldw	r18,8(sp)
110895cc:	dc400117 	ldw	r17,4(sp)
110895d0:	dc000017 	ldw	r16,0(sp)
110895d4:	dec00504 	addi	sp,sp,20
110895d8:	10896f81 	jmpi	110896f8 <_write_r>

110895dc <__sread>:
110895dc:	defffe04 	addi	sp,sp,-8
110895e0:	dc000015 	stw	r16,0(sp)
110895e4:	2821883a 	mov	r16,r5
110895e8:	2940038f 	ldh	r5,14(r5)
110895ec:	dfc00115 	stw	ra,4(sp)
110895f0:	1089b140 	call	11089b14 <_read_r>
110895f4:	1007883a 	mov	r3,r2
110895f8:	10000816 	blt	r2,zero,1108961c <__sread+0x40>
110895fc:	80801417 	ldw	r2,80(r16)
11089600:	10c5883a 	add	r2,r2,r3
11089604:	80801415 	stw	r2,80(r16)
11089608:	1805883a 	mov	r2,r3
1108960c:	dfc00117 	ldw	ra,4(sp)
11089610:	dc000017 	ldw	r16,0(sp)
11089614:	dec00204 	addi	sp,sp,8
11089618:	f800283a 	ret
1108961c:	8080030b 	ldhu	r2,12(r16)
11089620:	10bbffcc 	andi	r2,r2,61439
11089624:	8080030d 	sth	r2,12(r16)
11089628:	1805883a 	mov	r2,r3
1108962c:	dfc00117 	ldw	ra,4(sp)
11089630:	dc000017 	ldw	r16,0(sp)
11089634:	dec00204 	addi	sp,sp,8
11089638:	f800283a 	ret

1108963c <strcmp>:
1108963c:	2144b03a 	or	r2,r4,r5
11089640:	108000cc 	andi	r2,r2,3
11089644:	10001d1e 	bne	r2,zero,110896bc <strcmp+0x80>
11089648:	200f883a 	mov	r7,r4
1108964c:	28800017 	ldw	r2,0(r5)
11089650:	21000017 	ldw	r4,0(r4)
11089654:	280d883a 	mov	r6,r5
11089658:	2080161e 	bne	r4,r2,110896b4 <strcmp+0x78>
1108965c:	023fbff4 	movhi	r8,65279
11089660:	423fbfc4 	addi	r8,r8,-257
11089664:	2207883a 	add	r3,r4,r8
11089668:	01602074 	movhi	r5,32897
1108966c:	29602004 	addi	r5,r5,-32640
11089670:	1946703a 	and	r3,r3,r5
11089674:	0104303a 	nor	r2,zero,r4
11089678:	10c4703a 	and	r2,r2,r3
1108967c:	10001c1e 	bne	r2,zero,110896f0 <strcmp+0xb4>
11089680:	4013883a 	mov	r9,r8
11089684:	2811883a 	mov	r8,r5
11089688:	00000106 	br	11089690 <strcmp+0x54>
1108968c:	1800181e 	bne	r3,zero,110896f0 <strcmp+0xb4>
11089690:	39c00104 	addi	r7,r7,4
11089694:	39000017 	ldw	r4,0(r7)
11089698:	31800104 	addi	r6,r6,4
1108969c:	31400017 	ldw	r5,0(r6)
110896a0:	2245883a 	add	r2,r4,r9
110896a4:	1204703a 	and	r2,r2,r8
110896a8:	0106303a 	nor	r3,zero,r4
110896ac:	1886703a 	and	r3,r3,r2
110896b0:	217ff626 	beq	r4,r5,1108968c <strcmp+0x50>
110896b4:	3809883a 	mov	r4,r7
110896b8:	300b883a 	mov	r5,r6
110896bc:	20c00007 	ldb	r3,0(r4)
110896c0:	1800051e 	bne	r3,zero,110896d8 <strcmp+0x9c>
110896c4:	00000606 	br	110896e0 <strcmp+0xa4>
110896c8:	21000044 	addi	r4,r4,1
110896cc:	20c00007 	ldb	r3,0(r4)
110896d0:	29400044 	addi	r5,r5,1
110896d4:	18000226 	beq	r3,zero,110896e0 <strcmp+0xa4>
110896d8:	28800007 	ldb	r2,0(r5)
110896dc:	18bffa26 	beq	r3,r2,110896c8 <strcmp+0x8c>
110896e0:	20c00003 	ldbu	r3,0(r4)
110896e4:	28800003 	ldbu	r2,0(r5)
110896e8:	1885c83a 	sub	r2,r3,r2
110896ec:	f800283a 	ret
110896f0:	0005883a 	mov	r2,zero
110896f4:	f800283a 	ret

110896f8 <_write_r>:
110896f8:	defffd04 	addi	sp,sp,-12
110896fc:	dc000015 	stw	r16,0(sp)
11089700:	04044274 	movhi	r16,4361
11089704:	840b6a04 	addi	r16,r16,11688
11089708:	dc400115 	stw	r17,4(sp)
1108970c:	80000015 	stw	zero,0(r16)
11089710:	2023883a 	mov	r17,r4
11089714:	2809883a 	mov	r4,r5
11089718:	300b883a 	mov	r5,r6
1108971c:	380d883a 	mov	r6,r7
11089720:	dfc00215 	stw	ra,8(sp)
11089724:	108c9c00 	call	1108c9c0 <write>
11089728:	1007883a 	mov	r3,r2
1108972c:	00bfffc4 	movi	r2,-1
11089730:	18800626 	beq	r3,r2,1108974c <_write_r+0x54>
11089734:	1805883a 	mov	r2,r3
11089738:	dfc00217 	ldw	ra,8(sp)
1108973c:	dc400117 	ldw	r17,4(sp)
11089740:	dc000017 	ldw	r16,0(sp)
11089744:	dec00304 	addi	sp,sp,12
11089748:	f800283a 	ret
1108974c:	80800017 	ldw	r2,0(r16)
11089750:	103ff826 	beq	r2,zero,11089734 <_write_r+0x3c>
11089754:	88800015 	stw	r2,0(r17)
11089758:	1805883a 	mov	r2,r3
1108975c:	dfc00217 	ldw	ra,8(sp)
11089760:	dc400117 	ldw	r17,4(sp)
11089764:	dc000017 	ldw	r16,0(sp)
11089768:	dec00304 	addi	sp,sp,12
1108976c:	f800283a 	ret

11089770 <_calloc_r>:
11089770:	298b383a 	mul	r5,r5,r6
11089774:	defffe04 	addi	sp,sp,-8
11089778:	dc000015 	stw	r16,0(sp)
1108977c:	dfc00115 	stw	ra,4(sp)
11089780:	10873ec0 	call	110873ec <_malloc_r>
11089784:	1021883a 	mov	r16,r2
11089788:	01c00904 	movi	r7,36
1108978c:	10000d26 	beq	r2,zero,110897c4 <_calloc_r+0x54>
11089790:	10ffff17 	ldw	r3,-4(r2)
11089794:	1009883a 	mov	r4,r2
11089798:	00bfff04 	movi	r2,-4
1108979c:	1886703a 	and	r3,r3,r2
110897a0:	1887883a 	add	r3,r3,r2
110897a4:	180d883a 	mov	r6,r3
110897a8:	000b883a 	mov	r5,zero
110897ac:	38c01736 	bltu	r7,r3,1108980c <_calloc_r+0x9c>
110897b0:	008004c4 	movi	r2,19
110897b4:	10c00836 	bltu	r2,r3,110897d8 <_calloc_r+0x68>
110897b8:	20000215 	stw	zero,8(r4)
110897bc:	20000015 	stw	zero,0(r4)
110897c0:	20000115 	stw	zero,4(r4)
110897c4:	8005883a 	mov	r2,r16
110897c8:	dfc00117 	ldw	ra,4(sp)
110897cc:	dc000017 	ldw	r16,0(sp)
110897d0:	dec00204 	addi	sp,sp,8
110897d4:	f800283a 	ret
110897d8:	008006c4 	movi	r2,27
110897dc:	80000015 	stw	zero,0(r16)
110897e0:	80000115 	stw	zero,4(r16)
110897e4:	81000204 	addi	r4,r16,8
110897e8:	10fff32e 	bgeu	r2,r3,110897b8 <_calloc_r+0x48>
110897ec:	80000215 	stw	zero,8(r16)
110897f0:	80000315 	stw	zero,12(r16)
110897f4:	81000404 	addi	r4,r16,16
110897f8:	19ffef1e 	bne	r3,r7,110897b8 <_calloc_r+0x48>
110897fc:	81000604 	addi	r4,r16,24
11089800:	80000415 	stw	zero,16(r16)
11089804:	80000515 	stw	zero,20(r16)
11089808:	003feb06 	br	110897b8 <_calloc_r+0x48>
1108980c:	1087d900 	call	11087d90 <memset>
11089810:	8005883a 	mov	r2,r16
11089814:	dfc00117 	ldw	ra,4(sp)
11089818:	dc000017 	ldw	r16,0(sp)
1108981c:	dec00204 	addi	sp,sp,8
11089820:	f800283a 	ret

11089824 <_close_r>:
11089824:	defffd04 	addi	sp,sp,-12
11089828:	dc000015 	stw	r16,0(sp)
1108982c:	04044274 	movhi	r16,4361
11089830:	840b6a04 	addi	r16,r16,11688
11089834:	dc400115 	stw	r17,4(sp)
11089838:	80000015 	stw	zero,0(r16)
1108983c:	2023883a 	mov	r17,r4
11089840:	2809883a 	mov	r4,r5
11089844:	dfc00215 	stw	ra,8(sp)
11089848:	108be700 	call	1108be70 <close>
1108984c:	1007883a 	mov	r3,r2
11089850:	00bfffc4 	movi	r2,-1
11089854:	18800626 	beq	r3,r2,11089870 <_close_r+0x4c>
11089858:	1805883a 	mov	r2,r3
1108985c:	dfc00217 	ldw	ra,8(sp)
11089860:	dc400117 	ldw	r17,4(sp)
11089864:	dc000017 	ldw	r16,0(sp)
11089868:	dec00304 	addi	sp,sp,12
1108986c:	f800283a 	ret
11089870:	80800017 	ldw	r2,0(r16)
11089874:	103ff826 	beq	r2,zero,11089858 <_close_r+0x34>
11089878:	88800015 	stw	r2,0(r17)
1108987c:	1805883a 	mov	r2,r3
11089880:	dfc00217 	ldw	ra,8(sp)
11089884:	dc400117 	ldw	r17,4(sp)
11089888:	dc000017 	ldw	r16,0(sp)
1108988c:	dec00304 	addi	sp,sp,12
11089890:	f800283a 	ret

11089894 <_fclose_r>:
11089894:	defffc04 	addi	sp,sp,-16
11089898:	dc400115 	stw	r17,4(sp)
1108989c:	dc000015 	stw	r16,0(sp)
110898a0:	dfc00315 	stw	ra,12(sp)
110898a4:	dc800215 	stw	r18,8(sp)
110898a8:	2821883a 	mov	r16,r5
110898ac:	2023883a 	mov	r17,r4
110898b0:	28002926 	beq	r5,zero,11089958 <_fclose_r+0xc4>
110898b4:	10864d00 	call	110864d0 <__sfp_lock_acquire>
110898b8:	88000226 	beq	r17,zero,110898c4 <_fclose_r+0x30>
110898bc:	88800e17 	ldw	r2,56(r17)
110898c0:	10002d26 	beq	r2,zero,11089978 <_fclose_r+0xe4>
110898c4:	8080030f 	ldh	r2,12(r16)
110898c8:	10002226 	beq	r2,zero,11089954 <_fclose_r+0xc0>
110898cc:	8809883a 	mov	r4,r17
110898d0:	800b883a 	mov	r5,r16
110898d4:	10862480 	call	11086248 <_fflush_r>
110898d8:	1025883a 	mov	r18,r2
110898dc:	80800b17 	ldw	r2,44(r16)
110898e0:	10000426 	beq	r2,zero,110898f4 <_fclose_r+0x60>
110898e4:	81400717 	ldw	r5,28(r16)
110898e8:	8809883a 	mov	r4,r17
110898ec:	103ee83a 	callr	r2
110898f0:	10002a16 	blt	r2,zero,1108999c <_fclose_r+0x108>
110898f4:	8080030b 	ldhu	r2,12(r16)
110898f8:	1080200c 	andi	r2,r2,128
110898fc:	1000231e 	bne	r2,zero,1108998c <_fclose_r+0xf8>
11089900:	81400c17 	ldw	r5,48(r16)
11089904:	28000526 	beq	r5,zero,1108991c <_fclose_r+0x88>
11089908:	80801004 	addi	r2,r16,64
1108990c:	28800226 	beq	r5,r2,11089918 <_fclose_r+0x84>
11089910:	8809883a 	mov	r4,r17
11089914:	10868640 	call	11086864 <_free_r>
11089918:	80000c15 	stw	zero,48(r16)
1108991c:	81401117 	ldw	r5,68(r16)
11089920:	28000326 	beq	r5,zero,11089930 <_fclose_r+0x9c>
11089924:	8809883a 	mov	r4,r17
11089928:	10868640 	call	11086864 <_free_r>
1108992c:	80001115 	stw	zero,68(r16)
11089930:	8000030d 	sth	zero,12(r16)
11089934:	10864d40 	call	110864d4 <__sfp_lock_release>
11089938:	9005883a 	mov	r2,r18
1108993c:	dfc00317 	ldw	ra,12(sp)
11089940:	dc800217 	ldw	r18,8(sp)
11089944:	dc400117 	ldw	r17,4(sp)
11089948:	dc000017 	ldw	r16,0(sp)
1108994c:	dec00404 	addi	sp,sp,16
11089950:	f800283a 	ret
11089954:	10864d40 	call	110864d4 <__sfp_lock_release>
11089958:	0025883a 	mov	r18,zero
1108995c:	9005883a 	mov	r2,r18
11089960:	dfc00317 	ldw	ra,12(sp)
11089964:	dc800217 	ldw	r18,8(sp)
11089968:	dc400117 	ldw	r17,4(sp)
1108996c:	dc000017 	ldw	r16,0(sp)
11089970:	dec00404 	addi	sp,sp,16
11089974:	f800283a 	ret
11089978:	8809883a 	mov	r4,r17
1108997c:	10864e00 	call	110864e0 <__sinit>
11089980:	8080030f 	ldh	r2,12(r16)
11089984:	103fd11e 	bne	r2,zero,110898cc <_fclose_r+0x38>
11089988:	003ff206 	br	11089954 <_fclose_r+0xc0>
1108998c:	81400417 	ldw	r5,16(r16)
11089990:	8809883a 	mov	r4,r17
11089994:	10868640 	call	11086864 <_free_r>
11089998:	003fd906 	br	11089900 <_fclose_r+0x6c>
1108999c:	04bfffc4 	movi	r18,-1
110899a0:	003fd406 	br	110898f4 <_fclose_r+0x60>

110899a4 <fclose>:
110899a4:	00844274 	movhi	r2,4361
110899a8:	1084bc04 	addi	r2,r2,4848
110899ac:	200b883a 	mov	r5,r4
110899b0:	11000017 	ldw	r4,0(r2)
110899b4:	10898941 	jmpi	11089894 <_fclose_r>

110899b8 <_fstat_r>:
110899b8:	defffd04 	addi	sp,sp,-12
110899bc:	dc000015 	stw	r16,0(sp)
110899c0:	04044274 	movhi	r16,4361
110899c4:	840b6a04 	addi	r16,r16,11688
110899c8:	dc400115 	stw	r17,4(sp)
110899cc:	80000015 	stw	zero,0(r16)
110899d0:	2023883a 	mov	r17,r4
110899d4:	2809883a 	mov	r4,r5
110899d8:	300b883a 	mov	r5,r6
110899dc:	dfc00215 	stw	ra,8(sp)
110899e0:	108bff80 	call	1108bff8 <fstat>
110899e4:	1007883a 	mov	r3,r2
110899e8:	00bfffc4 	movi	r2,-1
110899ec:	18800626 	beq	r3,r2,11089a08 <_fstat_r+0x50>
110899f0:	1805883a 	mov	r2,r3
110899f4:	dfc00217 	ldw	ra,8(sp)
110899f8:	dc400117 	ldw	r17,4(sp)
110899fc:	dc000017 	ldw	r16,0(sp)
11089a00:	dec00304 	addi	sp,sp,12
11089a04:	f800283a 	ret
11089a08:	80800017 	ldw	r2,0(r16)
11089a0c:	103ff826 	beq	r2,zero,110899f0 <_fstat_r+0x38>
11089a10:	88800015 	stw	r2,0(r17)
11089a14:	1805883a 	mov	r2,r3
11089a18:	dfc00217 	ldw	ra,8(sp)
11089a1c:	dc400117 	ldw	r17,4(sp)
11089a20:	dc000017 	ldw	r16,0(sp)
11089a24:	dec00304 	addi	sp,sp,12
11089a28:	f800283a 	ret

11089a2c <_isatty_r>:
11089a2c:	defffd04 	addi	sp,sp,-12
11089a30:	dc000015 	stw	r16,0(sp)
11089a34:	04044274 	movhi	r16,4361
11089a38:	840b6a04 	addi	r16,r16,11688
11089a3c:	dc400115 	stw	r17,4(sp)
11089a40:	80000015 	stw	zero,0(r16)
11089a44:	2023883a 	mov	r17,r4
11089a48:	2809883a 	mov	r4,r5
11089a4c:	dfc00215 	stw	ra,8(sp)
11089a50:	108c2ec0 	call	1108c2ec <isatty>
11089a54:	1007883a 	mov	r3,r2
11089a58:	00bfffc4 	movi	r2,-1
11089a5c:	18800626 	beq	r3,r2,11089a78 <_isatty_r+0x4c>
11089a60:	1805883a 	mov	r2,r3
11089a64:	dfc00217 	ldw	ra,8(sp)
11089a68:	dc400117 	ldw	r17,4(sp)
11089a6c:	dc000017 	ldw	r16,0(sp)
11089a70:	dec00304 	addi	sp,sp,12
11089a74:	f800283a 	ret
11089a78:	80800017 	ldw	r2,0(r16)
11089a7c:	103ff826 	beq	r2,zero,11089a60 <_isatty_r+0x34>
11089a80:	88800015 	stw	r2,0(r17)
11089a84:	1805883a 	mov	r2,r3
11089a88:	dfc00217 	ldw	ra,8(sp)
11089a8c:	dc400117 	ldw	r17,4(sp)
11089a90:	dc000017 	ldw	r16,0(sp)
11089a94:	dec00304 	addi	sp,sp,12
11089a98:	f800283a 	ret

11089a9c <_lseek_r>:
11089a9c:	defffd04 	addi	sp,sp,-12
11089aa0:	dc000015 	stw	r16,0(sp)
11089aa4:	04044274 	movhi	r16,4361
11089aa8:	840b6a04 	addi	r16,r16,11688
11089aac:	dc400115 	stw	r17,4(sp)
11089ab0:	80000015 	stw	zero,0(r16)
11089ab4:	2023883a 	mov	r17,r4
11089ab8:	2809883a 	mov	r4,r5
11089abc:	300b883a 	mov	r5,r6
11089ac0:	380d883a 	mov	r6,r7
11089ac4:	dfc00215 	stw	ra,8(sp)
11089ac8:	108c4f80 	call	1108c4f8 <lseek>
11089acc:	1007883a 	mov	r3,r2
11089ad0:	00bfffc4 	movi	r2,-1
11089ad4:	18800626 	beq	r3,r2,11089af0 <_lseek_r+0x54>
11089ad8:	1805883a 	mov	r2,r3
11089adc:	dfc00217 	ldw	ra,8(sp)
11089ae0:	dc400117 	ldw	r17,4(sp)
11089ae4:	dc000017 	ldw	r16,0(sp)
11089ae8:	dec00304 	addi	sp,sp,12
11089aec:	f800283a 	ret
11089af0:	80800017 	ldw	r2,0(r16)
11089af4:	103ff826 	beq	r2,zero,11089ad8 <_lseek_r+0x3c>
11089af8:	88800015 	stw	r2,0(r17)
11089afc:	1805883a 	mov	r2,r3
11089b00:	dfc00217 	ldw	ra,8(sp)
11089b04:	dc400117 	ldw	r17,4(sp)
11089b08:	dc000017 	ldw	r16,0(sp)
11089b0c:	dec00304 	addi	sp,sp,12
11089b10:	f800283a 	ret

11089b14 <_read_r>:
11089b14:	defffd04 	addi	sp,sp,-12
11089b18:	dc000015 	stw	r16,0(sp)
11089b1c:	04044274 	movhi	r16,4361
11089b20:	840b6a04 	addi	r16,r16,11688
11089b24:	dc400115 	stw	r17,4(sp)
11089b28:	80000015 	stw	zero,0(r16)
11089b2c:	2023883a 	mov	r17,r4
11089b30:	2809883a 	mov	r4,r5
11089b34:	300b883a 	mov	r5,r6
11089b38:	380d883a 	mov	r6,r7
11089b3c:	dfc00215 	stw	ra,8(sp)
11089b40:	108c6f40 	call	1108c6f4 <read>
11089b44:	1007883a 	mov	r3,r2
11089b48:	00bfffc4 	movi	r2,-1
11089b4c:	18800626 	beq	r3,r2,11089b68 <_read_r+0x54>
11089b50:	1805883a 	mov	r2,r3
11089b54:	dfc00217 	ldw	ra,8(sp)
11089b58:	dc400117 	ldw	r17,4(sp)
11089b5c:	dc000017 	ldw	r16,0(sp)
11089b60:	dec00304 	addi	sp,sp,12
11089b64:	f800283a 	ret
11089b68:	80800017 	ldw	r2,0(r16)
11089b6c:	103ff826 	beq	r2,zero,11089b50 <_read_r+0x3c>
11089b70:	88800015 	stw	r2,0(r17)
11089b74:	1805883a 	mov	r2,r3
11089b78:	dfc00217 	ldw	ra,8(sp)
11089b7c:	dc400117 	ldw	r17,4(sp)
11089b80:	dc000017 	ldw	r16,0(sp)
11089b84:	dec00304 	addi	sp,sp,12
11089b88:	f800283a 	ret

11089b8c <__udivdi3>:
11089b8c:	defff004 	addi	sp,sp,-64
11089b90:	2005883a 	mov	r2,r4
11089b94:	3011883a 	mov	r8,r6
11089b98:	df000e15 	stw	fp,56(sp)
11089b9c:	dd000a15 	stw	r20,40(sp)
11089ba0:	dc000615 	stw	r16,24(sp)
11089ba4:	dfc00f15 	stw	ra,60(sp)
11089ba8:	ddc00d15 	stw	r23,52(sp)
11089bac:	dd800c15 	stw	r22,48(sp)
11089bb0:	dd400b15 	stw	r21,44(sp)
11089bb4:	dcc00915 	stw	r19,36(sp)
11089bb8:	dc800815 	stw	r18,32(sp)
11089bbc:	dc400715 	stw	r17,28(sp)
11089bc0:	4021883a 	mov	r16,r8
11089bc4:	1039883a 	mov	fp,r2
11089bc8:	2829883a 	mov	r20,r5
11089bcc:	38003b1e 	bne	r7,zero,11089cbc <__udivdi3+0x130>
11089bd0:	2a005c36 	bltu	r5,r8,11089d44 <__udivdi3+0x1b8>
11089bd4:	4000a626 	beq	r8,zero,11089e70 <__udivdi3+0x2e4>
11089bd8:	00bfffd4 	movui	r2,65535
11089bdc:	14009e36 	bltu	r2,r16,11089e58 <__udivdi3+0x2cc>
11089be0:	00803fc4 	movi	r2,255
11089be4:	14013d36 	bltu	r2,r16,1108a0dc <__udivdi3+0x550>
11089be8:	000b883a 	mov	r5,zero
11089bec:	0005883a 	mov	r2,zero
11089bf0:	8084d83a 	srl	r2,r16,r2
11089bf4:	01044274 	movhi	r4,4361
11089bf8:	213dea04 	addi	r4,r4,-2136
11089bfc:	01800804 	movi	r6,32
11089c00:	1105883a 	add	r2,r2,r4
11089c04:	10c00003 	ldbu	r3,0(r2)
11089c08:	28c7883a 	add	r3,r5,r3
11089c0c:	30edc83a 	sub	r22,r6,r3
11089c10:	b000ee1e 	bne	r22,zero,11089fcc <__udivdi3+0x440>
11089c14:	802ad43a 	srli	r21,r16,16
11089c18:	00800044 	movi	r2,1
11089c1c:	a423c83a 	sub	r17,r20,r16
11089c20:	85ffffcc 	andi	r23,r16,65535
11089c24:	d8800315 	stw	r2,12(sp)
11089c28:	8809883a 	mov	r4,r17
11089c2c:	a80b883a 	mov	r5,r21
11089c30:	10826a00 	call	110826a0 <__udivsi3>
11089c34:	8809883a 	mov	r4,r17
11089c38:	a80b883a 	mov	r5,r21
11089c3c:	102d883a 	mov	r22,r2
11089c40:	10826a80 	call	110826a8 <__umodsi3>
11089c44:	1004943a 	slli	r2,r2,16
11089c48:	e006d43a 	srli	r3,fp,16
11089c4c:	bda3383a 	mul	r17,r23,r22
11089c50:	10c4b03a 	or	r2,r2,r3
11089c54:	1440042e 	bgeu	r2,r17,11089c68 <__udivdi3+0xdc>
11089c58:	1405883a 	add	r2,r2,r16
11089c5c:	b5bfffc4 	addi	r22,r22,-1
11089c60:	14000136 	bltu	r2,r16,11089c68 <__udivdi3+0xdc>
11089c64:	14413d36 	bltu	r2,r17,1108a15c <__udivdi3+0x5d0>
11089c68:	1463c83a 	sub	r17,r2,r17
11089c6c:	8809883a 	mov	r4,r17
11089c70:	a80b883a 	mov	r5,r21
11089c74:	10826a00 	call	110826a0 <__udivsi3>
11089c78:	8809883a 	mov	r4,r17
11089c7c:	a80b883a 	mov	r5,r21
11089c80:	1029883a 	mov	r20,r2
11089c84:	10826a80 	call	110826a8 <__umodsi3>
11089c88:	1004943a 	slli	r2,r2,16
11089c8c:	bd09383a 	mul	r4,r23,r20
11089c90:	e0ffffcc 	andi	r3,fp,65535
11089c94:	10c4b03a 	or	r2,r2,r3
11089c98:	1100042e 	bgeu	r2,r4,11089cac <__udivdi3+0x120>
11089c9c:	8085883a 	add	r2,r16,r2
11089ca0:	a53fffc4 	addi	r20,r20,-1
11089ca4:	14000136 	bltu	r2,r16,11089cac <__udivdi3+0x120>
11089ca8:	11012036 	bltu	r2,r4,1108a12c <__udivdi3+0x5a0>
11089cac:	b004943a 	slli	r2,r22,16
11089cb0:	d9000317 	ldw	r4,12(sp)
11089cb4:	a084b03a 	or	r2,r20,r2
11089cb8:	00001506 	br	11089d10 <__udivdi3+0x184>
11089cbc:	380d883a 	mov	r6,r7
11089cc0:	29c06236 	bltu	r5,r7,11089e4c <__udivdi3+0x2c0>
11089cc4:	00bfffd4 	movui	r2,65535
11089cc8:	11c05a36 	bltu	r2,r7,11089e34 <__udivdi3+0x2a8>
11089ccc:	00803fc4 	movi	r2,255
11089cd0:	11c0fc36 	bltu	r2,r7,1108a0c4 <__udivdi3+0x538>
11089cd4:	000b883a 	mov	r5,zero
11089cd8:	0005883a 	mov	r2,zero
11089cdc:	3084d83a 	srl	r2,r6,r2
11089ce0:	01044274 	movhi	r4,4361
11089ce4:	213dea04 	addi	r4,r4,-2136
11089ce8:	01c00804 	movi	r7,32
11089cec:	1105883a 	add	r2,r2,r4
11089cf0:	10c00003 	ldbu	r3,0(r2)
11089cf4:	28c7883a 	add	r3,r5,r3
11089cf8:	38efc83a 	sub	r23,r7,r3
11089cfc:	b800691e 	bne	r23,zero,11089ea4 <__udivdi3+0x318>
11089d00:	35000136 	bltu	r6,r20,11089d08 <__udivdi3+0x17c>
11089d04:	e4005136 	bltu	fp,r16,11089e4c <__udivdi3+0x2c0>
11089d08:	00800044 	movi	r2,1
11089d0c:	0009883a 	mov	r4,zero
11089d10:	2007883a 	mov	r3,r4
11089d14:	dfc00f17 	ldw	ra,60(sp)
11089d18:	df000e17 	ldw	fp,56(sp)
11089d1c:	ddc00d17 	ldw	r23,52(sp)
11089d20:	dd800c17 	ldw	r22,48(sp)
11089d24:	dd400b17 	ldw	r21,44(sp)
11089d28:	dd000a17 	ldw	r20,40(sp)
11089d2c:	dcc00917 	ldw	r19,36(sp)
11089d30:	dc800817 	ldw	r18,32(sp)
11089d34:	dc400717 	ldw	r17,28(sp)
11089d38:	dc000617 	ldw	r16,24(sp)
11089d3c:	dec01004 	addi	sp,sp,64
11089d40:	f800283a 	ret
11089d44:	00bfffd4 	movui	r2,65535
11089d48:	12005036 	bltu	r2,r8,11089e8c <__udivdi3+0x300>
11089d4c:	00803fc4 	movi	r2,255
11089d50:	1200e836 	bltu	r2,r8,1108a0f4 <__udivdi3+0x568>
11089d54:	000b883a 	mov	r5,zero
11089d58:	0005883a 	mov	r2,zero
11089d5c:	8084d83a 	srl	r2,r16,r2
11089d60:	01044274 	movhi	r4,4361
11089d64:	213dea04 	addi	r4,r4,-2136
11089d68:	01800804 	movi	r6,32
11089d6c:	1105883a 	add	r2,r2,r4
11089d70:	10c00003 	ldbu	r3,0(r2)
11089d74:	28c7883a 	add	r3,r5,r3
11089d78:	30cbc83a 	sub	r5,r6,r3
11089d7c:	28000626 	beq	r5,zero,11089d98 <__udivdi3+0x20c>
11089d80:	3145c83a 	sub	r2,r6,r5
11089d84:	e084d83a 	srl	r2,fp,r2
11089d88:	a146983a 	sll	r3,r20,r5
11089d8c:	e178983a 	sll	fp,fp,r5
11089d90:	8160983a 	sll	r16,r16,r5
11089d94:	18a8b03a 	or	r20,r3,r2
11089d98:	802ad43a 	srli	r21,r16,16
11089d9c:	a009883a 	mov	r4,r20
11089da0:	85ffffcc 	andi	r23,r16,65535
11089da4:	a80b883a 	mov	r5,r21
11089da8:	10826a00 	call	110826a0 <__udivsi3>
11089dac:	a009883a 	mov	r4,r20
11089db0:	a80b883a 	mov	r5,r21
11089db4:	102d883a 	mov	r22,r2
11089db8:	10826a80 	call	110826a8 <__umodsi3>
11089dbc:	1004943a 	slli	r2,r2,16
11089dc0:	e006d43a 	srli	r3,fp,16
11089dc4:	bda3383a 	mul	r17,r23,r22
11089dc8:	10c4b03a 	or	r2,r2,r3
11089dcc:	1440042e 	bgeu	r2,r17,11089de0 <__udivdi3+0x254>
11089dd0:	1405883a 	add	r2,r2,r16
11089dd4:	b5bfffc4 	addi	r22,r22,-1
11089dd8:	14000136 	bltu	r2,r16,11089de0 <__udivdi3+0x254>
11089ddc:	1440d536 	bltu	r2,r17,1108a134 <__udivdi3+0x5a8>
11089de0:	1463c83a 	sub	r17,r2,r17
11089de4:	8809883a 	mov	r4,r17
11089de8:	a80b883a 	mov	r5,r21
11089dec:	10826a00 	call	110826a0 <__udivsi3>
11089df0:	8809883a 	mov	r4,r17
11089df4:	a80b883a 	mov	r5,r21
11089df8:	1029883a 	mov	r20,r2
11089dfc:	10826a80 	call	110826a8 <__umodsi3>
11089e00:	1004943a 	slli	r2,r2,16
11089e04:	bd09383a 	mul	r4,r23,r20
11089e08:	e0ffffcc 	andi	r3,fp,65535
11089e0c:	10c4b03a 	or	r2,r2,r3
11089e10:	1100042e 	bgeu	r2,r4,11089e24 <__udivdi3+0x298>
11089e14:	8085883a 	add	r2,r16,r2
11089e18:	a53fffc4 	addi	r20,r20,-1
11089e1c:	14000136 	bltu	r2,r16,11089e24 <__udivdi3+0x298>
11089e20:	1100c736 	bltu	r2,r4,1108a140 <__udivdi3+0x5b4>
11089e24:	b004943a 	slli	r2,r22,16
11089e28:	0009883a 	mov	r4,zero
11089e2c:	a084b03a 	or	r2,r20,r2
11089e30:	003fb706 	br	11089d10 <__udivdi3+0x184>
11089e34:	00804034 	movhi	r2,256
11089e38:	10bfffc4 	addi	r2,r2,-1
11089e3c:	11c0a436 	bltu	r2,r7,1108a0d0 <__udivdi3+0x544>
11089e40:	01400404 	movi	r5,16
11089e44:	2805883a 	mov	r2,r5
11089e48:	003fa406 	br	11089cdc <__udivdi3+0x150>
11089e4c:	0005883a 	mov	r2,zero
11089e50:	0009883a 	mov	r4,zero
11089e54:	003fae06 	br	11089d10 <__udivdi3+0x184>
11089e58:	00804034 	movhi	r2,256
11089e5c:	10bfffc4 	addi	r2,r2,-1
11089e60:	1400a136 	bltu	r2,r16,1108a0e8 <__udivdi3+0x55c>
11089e64:	01400404 	movi	r5,16
11089e68:	2805883a 	mov	r2,r5
11089e6c:	003f6006 	br	11089bf0 <__udivdi3+0x64>
11089e70:	01000044 	movi	r4,1
11089e74:	000b883a 	mov	r5,zero
11089e78:	10826a00 	call	110826a0 <__udivsi3>
11089e7c:	1021883a 	mov	r16,r2
11089e80:	00bfffd4 	movui	r2,65535
11089e84:	143ff436 	bltu	r2,r16,11089e58 <__udivdi3+0x2cc>
11089e88:	003f5506 	br	11089be0 <__udivdi3+0x54>
11089e8c:	00804034 	movhi	r2,256
11089e90:	10bfffc4 	addi	r2,r2,-1
11089e94:	12009a36 	bltu	r2,r8,1108a100 <__udivdi3+0x574>
11089e98:	01400404 	movi	r5,16
11089e9c:	2805883a 	mov	r2,r5
11089ea0:	003fae06 	br	11089d5c <__udivdi3+0x1d0>
11089ea4:	3dc5c83a 	sub	r2,r7,r23
11089ea8:	35c8983a 	sll	r4,r6,r23
11089eac:	8086d83a 	srl	r3,r16,r2
11089eb0:	a0a2d83a 	srl	r17,r20,r2
11089eb4:	e084d83a 	srl	r2,fp,r2
11089eb8:	20eab03a 	or	r21,r4,r3
11089ebc:	a82cd43a 	srli	r22,r21,16
11089ec0:	a5c6983a 	sll	r3,r20,r23
11089ec4:	8809883a 	mov	r4,r17
11089ec8:	b00b883a 	mov	r5,r22
11089ecc:	1886b03a 	or	r3,r3,r2
11089ed0:	d8c00215 	stw	r3,8(sp)
11089ed4:	10826a00 	call	110826a0 <__udivsi3>
11089ed8:	8809883a 	mov	r4,r17
11089edc:	b00b883a 	mov	r5,r22
11089ee0:	1029883a 	mov	r20,r2
11089ee4:	10826a80 	call	110826a8 <__umodsi3>
11089ee8:	a8ffffcc 	andi	r3,r21,65535
11089eec:	d8c00515 	stw	r3,20(sp)
11089ef0:	d9000217 	ldw	r4,8(sp)
11089ef4:	d9400517 	ldw	r5,20(sp)
11089ef8:	1004943a 	slli	r2,r2,16
11089efc:	2006d43a 	srli	r3,r4,16
11089f00:	85e0983a 	sll	r16,r16,r23
11089f04:	2d23383a 	mul	r17,r5,r20
11089f08:	10c4b03a 	or	r2,r2,r3
11089f0c:	dc000015 	stw	r16,0(sp)
11089f10:	1440032e 	bgeu	r2,r17,11089f20 <__udivdi3+0x394>
11089f14:	1545883a 	add	r2,r2,r21
11089f18:	a53fffc4 	addi	r20,r20,-1
11089f1c:	15407f2e 	bgeu	r2,r21,1108a11c <__udivdi3+0x590>
11089f20:	1463c83a 	sub	r17,r2,r17
11089f24:	8809883a 	mov	r4,r17
11089f28:	b00b883a 	mov	r5,r22
11089f2c:	10826a00 	call	110826a0 <__udivsi3>
11089f30:	8809883a 	mov	r4,r17
11089f34:	b00b883a 	mov	r5,r22
11089f38:	1021883a 	mov	r16,r2
11089f3c:	10826a80 	call	110826a8 <__umodsi3>
11089f40:	d8c00517 	ldw	r3,20(sp)
11089f44:	d9000217 	ldw	r4,8(sp)
11089f48:	1004943a 	slli	r2,r2,16
11089f4c:	1c0f383a 	mul	r7,r3,r16
11089f50:	20ffffcc 	andi	r3,r4,65535
11089f54:	10e2b03a 	or	r17,r2,r3
11089f58:	89c0032e 	bgeu	r17,r7,11089f68 <__udivdi3+0x3dc>
11089f5c:	8d63883a 	add	r17,r17,r21
11089f60:	843fffc4 	addi	r16,r16,-1
11089f64:	8d40692e 	bgeu	r17,r21,1108a10c <__udivdi3+0x580>
11089f68:	a008943a 	slli	r4,r20,16
11089f6c:	d9400017 	ldw	r5,0(sp)
11089f70:	89e3c83a 	sub	r17,r17,r7
11089f74:	8110b03a 	or	r8,r16,r4
11089f78:	280cd43a 	srli	r6,r5,16
11089f7c:	28ffffcc 	andi	r3,r5,65535
11089f80:	40bfffcc 	andi	r2,r8,65535
11089f84:	400ad43a 	srli	r5,r8,16
11089f88:	10d3383a 	mul	r9,r2,r3
11089f8c:	1185383a 	mul	r2,r2,r6
11089f90:	28c7383a 	mul	r3,r5,r3
11089f94:	4808d43a 	srli	r4,r9,16
11089f98:	298b383a 	mul	r5,r5,r6
11089f9c:	10c5883a 	add	r2,r2,r3
11089fa0:	2089883a 	add	r4,r4,r2
11089fa4:	20c0022e 	bgeu	r4,r3,11089fb0 <__udivdi3+0x424>
11089fa8:	00800074 	movhi	r2,1
11089fac:	288b883a 	add	r5,r5,r2
11089fb0:	2004d43a 	srli	r2,r4,16
11089fb4:	288b883a 	add	r5,r5,r2
11089fb8:	89403f36 	bltu	r17,r5,1108a0b8 <__udivdi3+0x52c>
11089fbc:	89403926 	beq	r17,r5,1108a0a4 <__udivdi3+0x518>
11089fc0:	4005883a 	mov	r2,r8
11089fc4:	0009883a 	mov	r4,zero
11089fc8:	003f5106 	br	11089d10 <__udivdi3+0x184>
11089fcc:	85a0983a 	sll	r16,r16,r22
11089fd0:	3585c83a 	sub	r2,r6,r22
11089fd4:	a0a2d83a 	srl	r17,r20,r2
11089fd8:	802ad43a 	srli	r21,r16,16
11089fdc:	e084d83a 	srl	r2,fp,r2
11089fe0:	a586983a 	sll	r3,r20,r22
11089fe4:	8809883a 	mov	r4,r17
11089fe8:	a80b883a 	mov	r5,r21
11089fec:	1886b03a 	or	r3,r3,r2
11089ff0:	d8c00115 	stw	r3,4(sp)
11089ff4:	10826a00 	call	110826a0 <__udivsi3>
11089ff8:	8809883a 	mov	r4,r17
11089ffc:	a80b883a 	mov	r5,r21
1108a000:	d8800415 	stw	r2,16(sp)
1108a004:	10826a80 	call	110826a8 <__umodsi3>
1108a008:	d9000117 	ldw	r4,4(sp)
1108a00c:	d9400417 	ldw	r5,16(sp)
1108a010:	1004943a 	slli	r2,r2,16
1108a014:	85ffffcc 	andi	r23,r16,65535
1108a018:	2006d43a 	srli	r3,r4,16
1108a01c:	b963383a 	mul	r17,r23,r5
1108a020:	10c4b03a 	or	r2,r2,r3
1108a024:	1440042e 	bgeu	r2,r17,1108a038 <__udivdi3+0x4ac>
1108a028:	297fffc4 	addi	r5,r5,-1
1108a02c:	1405883a 	add	r2,r2,r16
1108a030:	d9400415 	stw	r5,16(sp)
1108a034:	1400442e 	bgeu	r2,r16,1108a148 <__udivdi3+0x5bc>
1108a038:	1463c83a 	sub	r17,r2,r17
1108a03c:	8809883a 	mov	r4,r17
1108a040:	a80b883a 	mov	r5,r21
1108a044:	10826a00 	call	110826a0 <__udivsi3>
1108a048:	8809883a 	mov	r4,r17
1108a04c:	a80b883a 	mov	r5,r21
1108a050:	1029883a 	mov	r20,r2
1108a054:	10826a80 	call	110826a8 <__umodsi3>
1108a058:	d9400117 	ldw	r5,4(sp)
1108a05c:	1004943a 	slli	r2,r2,16
1108a060:	bd09383a 	mul	r4,r23,r20
1108a064:	28ffffcc 	andi	r3,r5,65535
1108a068:	10c6b03a 	or	r3,r2,r3
1108a06c:	1900062e 	bgeu	r3,r4,1108a088 <__udivdi3+0x4fc>
1108a070:	1c07883a 	add	r3,r3,r16
1108a074:	a53fffc4 	addi	r20,r20,-1
1108a078:	1c000336 	bltu	r3,r16,1108a088 <__udivdi3+0x4fc>
1108a07c:	1900022e 	bgeu	r3,r4,1108a088 <__udivdi3+0x4fc>
1108a080:	a53fffc4 	addi	r20,r20,-1
1108a084:	1c07883a 	add	r3,r3,r16
1108a088:	d9400417 	ldw	r5,16(sp)
1108a08c:	e5b8983a 	sll	fp,fp,r22
1108a090:	1923c83a 	sub	r17,r3,r4
1108a094:	2804943a 	slli	r2,r5,16
1108a098:	a0a8b03a 	or	r20,r20,r2
1108a09c:	dd000315 	stw	r20,12(sp)
1108a0a0:	003ee106 	br	11089c28 <__udivdi3+0x9c>
1108a0a4:	2004943a 	slli	r2,r4,16
1108a0a8:	e5c8983a 	sll	r4,fp,r23
1108a0ac:	48ffffcc 	andi	r3,r9,65535
1108a0b0:	10c5883a 	add	r2,r2,r3
1108a0b4:	20bfc22e 	bgeu	r4,r2,11089fc0 <__udivdi3+0x434>
1108a0b8:	40bfffc4 	addi	r2,r8,-1
1108a0bc:	0009883a 	mov	r4,zero
1108a0c0:	003f1306 	br	11089d10 <__udivdi3+0x184>
1108a0c4:	01400204 	movi	r5,8
1108a0c8:	2805883a 	mov	r2,r5
1108a0cc:	003f0306 	br	11089cdc <__udivdi3+0x150>
1108a0d0:	01400604 	movi	r5,24
1108a0d4:	2805883a 	mov	r2,r5
1108a0d8:	003f0006 	br	11089cdc <__udivdi3+0x150>
1108a0dc:	01400204 	movi	r5,8
1108a0e0:	2805883a 	mov	r2,r5
1108a0e4:	003ec206 	br	11089bf0 <__udivdi3+0x64>
1108a0e8:	01400604 	movi	r5,24
1108a0ec:	2805883a 	mov	r2,r5
1108a0f0:	003ebf06 	br	11089bf0 <__udivdi3+0x64>
1108a0f4:	01400204 	movi	r5,8
1108a0f8:	2805883a 	mov	r2,r5
1108a0fc:	003f1706 	br	11089d5c <__udivdi3+0x1d0>
1108a100:	01400604 	movi	r5,24
1108a104:	2805883a 	mov	r2,r5
1108a108:	003f1406 	br	11089d5c <__udivdi3+0x1d0>
1108a10c:	89ff962e 	bgeu	r17,r7,11089f68 <__udivdi3+0x3dc>
1108a110:	8d63883a 	add	r17,r17,r21
1108a114:	843fffc4 	addi	r16,r16,-1
1108a118:	003f9306 	br	11089f68 <__udivdi3+0x3dc>
1108a11c:	147f802e 	bgeu	r2,r17,11089f20 <__udivdi3+0x394>
1108a120:	a53fffc4 	addi	r20,r20,-1
1108a124:	1545883a 	add	r2,r2,r21
1108a128:	003f7d06 	br	11089f20 <__udivdi3+0x394>
1108a12c:	a53fffc4 	addi	r20,r20,-1
1108a130:	003ede06 	br	11089cac <__udivdi3+0x120>
1108a134:	b5bfffc4 	addi	r22,r22,-1
1108a138:	1405883a 	add	r2,r2,r16
1108a13c:	003f2806 	br	11089de0 <__udivdi3+0x254>
1108a140:	a53fffc4 	addi	r20,r20,-1
1108a144:	003f3706 	br	11089e24 <__udivdi3+0x298>
1108a148:	147fbb2e 	bgeu	r2,r17,1108a038 <__udivdi3+0x4ac>
1108a14c:	297fffc4 	addi	r5,r5,-1
1108a150:	1405883a 	add	r2,r2,r16
1108a154:	d9400415 	stw	r5,16(sp)
1108a158:	003fb706 	br	1108a038 <__udivdi3+0x4ac>
1108a15c:	b5bfffc4 	addi	r22,r22,-1
1108a160:	1405883a 	add	r2,r2,r16
1108a164:	003ec006 	br	11089c68 <__udivdi3+0xdc>

1108a168 <__umoddi3>:
1108a168:	defff104 	addi	sp,sp,-60
1108a16c:	dd800b15 	stw	r22,44(sp)
1108a170:	dd000915 	stw	r20,36(sp)
1108a174:	dc000515 	stw	r16,20(sp)
1108a178:	dfc00e15 	stw	ra,56(sp)
1108a17c:	df000d15 	stw	fp,52(sp)
1108a180:	ddc00c15 	stw	r23,48(sp)
1108a184:	dd400a15 	stw	r21,40(sp)
1108a188:	dcc00815 	stw	r19,32(sp)
1108a18c:	dc800715 	stw	r18,28(sp)
1108a190:	dc400615 	stw	r17,24(sp)
1108a194:	3021883a 	mov	r16,r6
1108a198:	202d883a 	mov	r22,r4
1108a19c:	2829883a 	mov	r20,r5
1108a1a0:	38002b1e 	bne	r7,zero,1108a250 <__umoddi3+0xe8>
1108a1a4:	29805036 	bltu	r5,r6,1108a2e8 <__umoddi3+0x180>
1108a1a8:	30008a26 	beq	r6,zero,1108a3d4 <__umoddi3+0x26c>
1108a1ac:	00bfffd4 	movui	r2,65535
1108a1b0:	14008236 	bltu	r2,r16,1108a3bc <__umoddi3+0x254>
1108a1b4:	00803fc4 	movi	r2,255
1108a1b8:	14013636 	bltu	r2,r16,1108a694 <__umoddi3+0x52c>
1108a1bc:	000b883a 	mov	r5,zero
1108a1c0:	0005883a 	mov	r2,zero
1108a1c4:	8084d83a 	srl	r2,r16,r2
1108a1c8:	01044274 	movhi	r4,4361
1108a1cc:	213dea04 	addi	r4,r4,-2136
1108a1d0:	01800804 	movi	r6,32
1108a1d4:	1105883a 	add	r2,r2,r4
1108a1d8:	10c00003 	ldbu	r3,0(r2)
1108a1dc:	28c7883a 	add	r3,r5,r3
1108a1e0:	30efc83a 	sub	r23,r6,r3
1108a1e4:	b800941e 	bne	r23,zero,1108a438 <__umoddi3+0x2d0>
1108a1e8:	802ad43a 	srli	r21,r16,16
1108a1ec:	a423c83a 	sub	r17,r20,r16
1108a1f0:	0039883a 	mov	fp,zero
1108a1f4:	853fffcc 	andi	r20,r16,65535
1108a1f8:	8809883a 	mov	r4,r17
1108a1fc:	a80b883a 	mov	r5,r21
1108a200:	10826a00 	call	110826a0 <__udivsi3>
1108a204:	8809883a 	mov	r4,r17
1108a208:	a80b883a 	mov	r5,r21
1108a20c:	a0a3383a 	mul	r17,r20,r2
1108a210:	10826a80 	call	110826a8 <__umodsi3>
1108a214:	1004943a 	slli	r2,r2,16
1108a218:	b006d43a 	srli	r3,r22,16
1108a21c:	10c4b03a 	or	r2,r2,r3
1108a220:	1440032e 	bgeu	r2,r17,1108a230 <__umoddi3+0xc8>
1108a224:	1405883a 	add	r2,r2,r16
1108a228:	14000136 	bltu	r2,r16,1108a230 <__umoddi3+0xc8>
1108a22c:	14413536 	bltu	r2,r17,1108a704 <__umoddi3+0x59c>
1108a230:	1463c83a 	sub	r17,r2,r17
1108a234:	8809883a 	mov	r4,r17
1108a238:	a80b883a 	mov	r5,r21
1108a23c:	10826a00 	call	110826a0 <__udivsi3>
1108a240:	8809883a 	mov	r4,r17
1108a244:	a0a3383a 	mul	r17,r20,r2
1108a248:	a80b883a 	mov	r5,r21
1108a24c:	00004d06 	br	1108a384 <__umoddi3+0x21c>
1108a250:	380d883a 	mov	r6,r7
1108a254:	29c0102e 	bgeu	r5,r7,1108a298 <__umoddi3+0x130>
1108a258:	2011883a 	mov	r8,r4
1108a25c:	2813883a 	mov	r9,r5
1108a260:	4005883a 	mov	r2,r8
1108a264:	4807883a 	mov	r3,r9
1108a268:	dfc00e17 	ldw	ra,56(sp)
1108a26c:	df000d17 	ldw	fp,52(sp)
1108a270:	ddc00c17 	ldw	r23,48(sp)
1108a274:	dd800b17 	ldw	r22,44(sp)
1108a278:	dd400a17 	ldw	r21,40(sp)
1108a27c:	dd000917 	ldw	r20,36(sp)
1108a280:	dcc00817 	ldw	r19,32(sp)
1108a284:	dc800717 	ldw	r18,28(sp)
1108a288:	dc400617 	ldw	r17,24(sp)
1108a28c:	dc000517 	ldw	r16,20(sp)
1108a290:	dec00f04 	addi	sp,sp,60
1108a294:	f800283a 	ret
1108a298:	00bfffd4 	movui	r2,65535
1108a29c:	11c05a36 	bltu	r2,r7,1108a408 <__umoddi3+0x2a0>
1108a2a0:	00803fc4 	movi	r2,255
1108a2a4:	11c0fe36 	bltu	r2,r7,1108a6a0 <__umoddi3+0x538>
1108a2a8:	000b883a 	mov	r5,zero
1108a2ac:	0005883a 	mov	r2,zero
1108a2b0:	3084d83a 	srl	r2,r6,r2
1108a2b4:	01044274 	movhi	r4,4361
1108a2b8:	213dea04 	addi	r4,r4,-2136
1108a2bc:	01c00804 	movi	r7,32
1108a2c0:	1105883a 	add	r2,r2,r4
1108a2c4:	10c00003 	ldbu	r3,0(r2)
1108a2c8:	28c7883a 	add	r3,r5,r3
1108a2cc:	38ebc83a 	sub	r21,r7,r3
1108a2d0:	a800851e 	bne	r21,zero,1108a4e8 <__umoddi3+0x380>
1108a2d4:	35005236 	bltu	r6,r20,1108a420 <__umoddi3+0x2b8>
1108a2d8:	b400512e 	bgeu	r22,r16,1108a420 <__umoddi3+0x2b8>
1108a2dc:	b011883a 	mov	r8,r22
1108a2e0:	a013883a 	mov	r9,r20
1108a2e4:	003fde06 	br	1108a260 <__umoddi3+0xf8>
1108a2e8:	00bfffd4 	movui	r2,65535
1108a2ec:	11804036 	bltu	r2,r6,1108a3f0 <__umoddi3+0x288>
1108a2f0:	00803fc4 	movi	r2,255
1108a2f4:	1180ed36 	bltu	r2,r6,1108a6ac <__umoddi3+0x544>
1108a2f8:	000b883a 	mov	r5,zero
1108a2fc:	0005883a 	mov	r2,zero
1108a300:	8084d83a 	srl	r2,r16,r2
1108a304:	01044274 	movhi	r4,4361
1108a308:	213dea04 	addi	r4,r4,-2136
1108a30c:	01800804 	movi	r6,32
1108a310:	1105883a 	add	r2,r2,r4
1108a314:	10c00003 	ldbu	r3,0(r2)
1108a318:	28c7883a 	add	r3,r5,r3
1108a31c:	30c7c83a 	sub	r3,r6,r3
1108a320:	1800bf1e 	bne	r3,zero,1108a620 <__umoddi3+0x4b8>
1108a324:	0039883a 	mov	fp,zero
1108a328:	802ad43a 	srli	r21,r16,16
1108a32c:	a009883a 	mov	r4,r20
1108a330:	85ffffcc 	andi	r23,r16,65535
1108a334:	a80b883a 	mov	r5,r21
1108a338:	10826a00 	call	110826a0 <__udivsi3>
1108a33c:	a009883a 	mov	r4,r20
1108a340:	a80b883a 	mov	r5,r21
1108a344:	b8a3383a 	mul	r17,r23,r2
1108a348:	10826a80 	call	110826a8 <__umodsi3>
1108a34c:	1004943a 	slli	r2,r2,16
1108a350:	b006d43a 	srli	r3,r22,16
1108a354:	10c4b03a 	or	r2,r2,r3
1108a358:	1440032e 	bgeu	r2,r17,1108a368 <__umoddi3+0x200>
1108a35c:	1405883a 	add	r2,r2,r16
1108a360:	14000136 	bltu	r2,r16,1108a368 <__umoddi3+0x200>
1108a364:	1440e536 	bltu	r2,r17,1108a6fc <__umoddi3+0x594>
1108a368:	1463c83a 	sub	r17,r2,r17
1108a36c:	8809883a 	mov	r4,r17
1108a370:	a80b883a 	mov	r5,r21
1108a374:	10826a00 	call	110826a0 <__udivsi3>
1108a378:	8809883a 	mov	r4,r17
1108a37c:	b8a3383a 	mul	r17,r23,r2
1108a380:	a80b883a 	mov	r5,r21
1108a384:	10826a80 	call	110826a8 <__umodsi3>
1108a388:	1004943a 	slli	r2,r2,16
1108a38c:	b0ffffcc 	andi	r3,r22,65535
1108a390:	10c4b03a 	or	r2,r2,r3
1108a394:	1440042e 	bgeu	r2,r17,1108a3a8 <__umoddi3+0x240>
1108a398:	1405883a 	add	r2,r2,r16
1108a39c:	14000236 	bltu	r2,r16,1108a3a8 <__umoddi3+0x240>
1108a3a0:	1440012e 	bgeu	r2,r17,1108a3a8 <__umoddi3+0x240>
1108a3a4:	1405883a 	add	r2,r2,r16
1108a3a8:	1445c83a 	sub	r2,r2,r17
1108a3ac:	1724d83a 	srl	r18,r2,fp
1108a3b0:	0013883a 	mov	r9,zero
1108a3b4:	9011883a 	mov	r8,r18
1108a3b8:	003fa906 	br	1108a260 <__umoddi3+0xf8>
1108a3bc:	00804034 	movhi	r2,256
1108a3c0:	10bfffc4 	addi	r2,r2,-1
1108a3c4:	1400b036 	bltu	r2,r16,1108a688 <__umoddi3+0x520>
1108a3c8:	01400404 	movi	r5,16
1108a3cc:	2805883a 	mov	r2,r5
1108a3d0:	003f7c06 	br	1108a1c4 <__umoddi3+0x5c>
1108a3d4:	01000044 	movi	r4,1
1108a3d8:	000b883a 	mov	r5,zero
1108a3dc:	10826a00 	call	110826a0 <__udivsi3>
1108a3e0:	1021883a 	mov	r16,r2
1108a3e4:	00bfffd4 	movui	r2,65535
1108a3e8:	143ff436 	bltu	r2,r16,1108a3bc <__umoddi3+0x254>
1108a3ec:	003f7106 	br	1108a1b4 <__umoddi3+0x4c>
1108a3f0:	00804034 	movhi	r2,256
1108a3f4:	10bfffc4 	addi	r2,r2,-1
1108a3f8:	1180af36 	bltu	r2,r6,1108a6b8 <__umoddi3+0x550>
1108a3fc:	01400404 	movi	r5,16
1108a400:	2805883a 	mov	r2,r5
1108a404:	003fbe06 	br	1108a300 <__umoddi3+0x198>
1108a408:	00804034 	movhi	r2,256
1108a40c:	10bfffc4 	addi	r2,r2,-1
1108a410:	11c0ac36 	bltu	r2,r7,1108a6c4 <__umoddi3+0x55c>
1108a414:	01400404 	movi	r5,16
1108a418:	2805883a 	mov	r2,r5
1108a41c:	003fa406 	br	1108a2b0 <__umoddi3+0x148>
1108a420:	b409c83a 	sub	r4,r22,r16
1108a424:	b105803a 	cmpltu	r2,r22,r4
1108a428:	a187c83a 	sub	r3,r20,r6
1108a42c:	18a9c83a 	sub	r20,r3,r2
1108a430:	202d883a 	mov	r22,r4
1108a434:	003fa906 	br	1108a2dc <__umoddi3+0x174>
1108a438:	85e0983a 	sll	r16,r16,r23
1108a43c:	35c5c83a 	sub	r2,r6,r23
1108a440:	a0a2d83a 	srl	r17,r20,r2
1108a444:	802ad43a 	srli	r21,r16,16
1108a448:	b084d83a 	srl	r2,r22,r2
1108a44c:	a5c6983a 	sll	r3,r20,r23
1108a450:	8809883a 	mov	r4,r17
1108a454:	a80b883a 	mov	r5,r21
1108a458:	1886b03a 	or	r3,r3,r2
1108a45c:	d8c00115 	stw	r3,4(sp)
1108a460:	853fffcc 	andi	r20,r16,65535
1108a464:	10826a00 	call	110826a0 <__udivsi3>
1108a468:	8809883a 	mov	r4,r17
1108a46c:	a80b883a 	mov	r5,r21
1108a470:	a0a3383a 	mul	r17,r20,r2
1108a474:	10826a80 	call	110826a8 <__umodsi3>
1108a478:	d9000117 	ldw	r4,4(sp)
1108a47c:	1004943a 	slli	r2,r2,16
1108a480:	b839883a 	mov	fp,r23
1108a484:	2006d43a 	srli	r3,r4,16
1108a488:	10c4b03a 	or	r2,r2,r3
1108a48c:	1440022e 	bgeu	r2,r17,1108a498 <__umoddi3+0x330>
1108a490:	1405883a 	add	r2,r2,r16
1108a494:	1400962e 	bgeu	r2,r16,1108a6f0 <__umoddi3+0x588>
1108a498:	1463c83a 	sub	r17,r2,r17
1108a49c:	8809883a 	mov	r4,r17
1108a4a0:	a80b883a 	mov	r5,r21
1108a4a4:	10826a00 	call	110826a0 <__udivsi3>
1108a4a8:	8809883a 	mov	r4,r17
1108a4ac:	a80b883a 	mov	r5,r21
1108a4b0:	a0a3383a 	mul	r17,r20,r2
1108a4b4:	10826a80 	call	110826a8 <__umodsi3>
1108a4b8:	d9400117 	ldw	r5,4(sp)
1108a4bc:	1004943a 	slli	r2,r2,16
1108a4c0:	28ffffcc 	andi	r3,r5,65535
1108a4c4:	10c4b03a 	or	r2,r2,r3
1108a4c8:	1440042e 	bgeu	r2,r17,1108a4dc <__umoddi3+0x374>
1108a4cc:	1405883a 	add	r2,r2,r16
1108a4d0:	14000236 	bltu	r2,r16,1108a4dc <__umoddi3+0x374>
1108a4d4:	1440012e 	bgeu	r2,r17,1108a4dc <__umoddi3+0x374>
1108a4d8:	1405883a 	add	r2,r2,r16
1108a4dc:	b5ec983a 	sll	r22,r22,r23
1108a4e0:	1463c83a 	sub	r17,r2,r17
1108a4e4:	003f4406 	br	1108a1f8 <__umoddi3+0x90>
1108a4e8:	3d4fc83a 	sub	r7,r7,r21
1108a4ec:	3546983a 	sll	r3,r6,r21
1108a4f0:	81c4d83a 	srl	r2,r16,r7
1108a4f4:	a1e2d83a 	srl	r17,r20,r7
1108a4f8:	a54c983a 	sll	r6,r20,r21
1108a4fc:	18aeb03a 	or	r23,r3,r2
1108a500:	b828d43a 	srli	r20,r23,16
1108a504:	b1c4d83a 	srl	r2,r22,r7
1108a508:	8809883a 	mov	r4,r17
1108a50c:	a00b883a 	mov	r5,r20
1108a510:	308cb03a 	or	r6,r6,r2
1108a514:	d9c00315 	stw	r7,12(sp)
1108a518:	d9800215 	stw	r6,8(sp)
1108a51c:	10826a00 	call	110826a0 <__udivsi3>
1108a520:	8809883a 	mov	r4,r17
1108a524:	a00b883a 	mov	r5,r20
1108a528:	1039883a 	mov	fp,r2
1108a52c:	10826a80 	call	110826a8 <__umodsi3>
1108a530:	b8ffffcc 	andi	r3,r23,65535
1108a534:	d8c00415 	stw	r3,16(sp)
1108a538:	d9000217 	ldw	r4,8(sp)
1108a53c:	d9400417 	ldw	r5,16(sp)
1108a540:	1004943a 	slli	r2,r2,16
1108a544:	2006d43a 	srli	r3,r4,16
1108a548:	8560983a 	sll	r16,r16,r21
1108a54c:	2f23383a 	mul	r17,r5,fp
1108a550:	10c4b03a 	or	r2,r2,r3
1108a554:	dc000015 	stw	r16,0(sp)
1108a558:	b56c983a 	sll	r22,r22,r21
1108a55c:	1440032e 	bgeu	r2,r17,1108a56c <__umoddi3+0x404>
1108a560:	15c5883a 	add	r2,r2,r23
1108a564:	e73fffc4 	addi	fp,fp,-1
1108a568:	15c05d2e 	bgeu	r2,r23,1108a6e0 <__umoddi3+0x578>
1108a56c:	1463c83a 	sub	r17,r2,r17
1108a570:	8809883a 	mov	r4,r17
1108a574:	a00b883a 	mov	r5,r20
1108a578:	10826a00 	call	110826a0 <__udivsi3>
1108a57c:	8809883a 	mov	r4,r17
1108a580:	a00b883a 	mov	r5,r20
1108a584:	1021883a 	mov	r16,r2
1108a588:	10826a80 	call	110826a8 <__umodsi3>
1108a58c:	d8c00417 	ldw	r3,16(sp)
1108a590:	d9000217 	ldw	r4,8(sp)
1108a594:	1004943a 	slli	r2,r2,16
1108a598:	1c23383a 	mul	r17,r3,r16
1108a59c:	20ffffcc 	andi	r3,r4,65535
1108a5a0:	10ceb03a 	or	r7,r2,r3
1108a5a4:	3c40032e 	bgeu	r7,r17,1108a5b4 <__umoddi3+0x44c>
1108a5a8:	3dcf883a 	add	r7,r7,r23
1108a5ac:	843fffc4 	addi	r16,r16,-1
1108a5b0:	3dc0472e 	bgeu	r7,r23,1108a6d0 <__umoddi3+0x568>
1108a5b4:	e004943a 	slli	r2,fp,16
1108a5b8:	d9400017 	ldw	r5,0(sp)
1108a5bc:	3c4fc83a 	sub	r7,r7,r17
1108a5c0:	8084b03a 	or	r2,r16,r2
1108a5c4:	28ffffcc 	andi	r3,r5,65535
1108a5c8:	280cd43a 	srli	r6,r5,16
1108a5cc:	100ad43a 	srli	r5,r2,16
1108a5d0:	10bfffcc 	andi	r2,r2,65535
1108a5d4:	10d1383a 	mul	r8,r2,r3
1108a5d8:	28c7383a 	mul	r3,r5,r3
1108a5dc:	1185383a 	mul	r2,r2,r6
1108a5e0:	4008d43a 	srli	r4,r8,16
1108a5e4:	298b383a 	mul	r5,r5,r6
1108a5e8:	10c5883a 	add	r2,r2,r3
1108a5ec:	2089883a 	add	r4,r4,r2
1108a5f0:	20c0022e 	bgeu	r4,r3,1108a5fc <__umoddi3+0x494>
1108a5f4:	00800074 	movhi	r2,1
1108a5f8:	288b883a 	add	r5,r5,r2
1108a5fc:	2004d43a 	srli	r2,r4,16
1108a600:	2008943a 	slli	r4,r4,16
1108a604:	40ffffcc 	andi	r3,r8,65535
1108a608:	288b883a 	add	r5,r5,r2
1108a60c:	20c9883a 	add	r4,r4,r3
1108a610:	39400b36 	bltu	r7,r5,1108a640 <__umoddi3+0x4d8>
1108a614:	39403d26 	beq	r7,r5,1108a70c <__umoddi3+0x5a4>
1108a618:	394bc83a 	sub	r5,r7,r5
1108a61c:	00000f06 	br	1108a65c <__umoddi3+0x4f4>
1108a620:	30c5c83a 	sub	r2,r6,r3
1108a624:	1839883a 	mov	fp,r3
1108a628:	b084d83a 	srl	r2,r22,r2
1108a62c:	a0c6983a 	sll	r3,r20,r3
1108a630:	8720983a 	sll	r16,r16,fp
1108a634:	b72c983a 	sll	r22,r22,fp
1108a638:	18a8b03a 	or	r20,r3,r2
1108a63c:	003f3a06 	br	1108a328 <__umoddi3+0x1c0>
1108a640:	d8c00017 	ldw	r3,0(sp)
1108a644:	20c5c83a 	sub	r2,r4,r3
1108a648:	2089803a 	cmpltu	r4,r4,r2
1108a64c:	2dc7c83a 	sub	r3,r5,r23
1108a650:	1907c83a 	sub	r3,r3,r4
1108a654:	38cbc83a 	sub	r5,r7,r3
1108a658:	1009883a 	mov	r4,r2
1108a65c:	b105c83a 	sub	r2,r22,r4
1108a660:	b087803a 	cmpltu	r3,r22,r2
1108a664:	28c7c83a 	sub	r3,r5,r3
1108a668:	d9400317 	ldw	r5,12(sp)
1108a66c:	1544d83a 	srl	r2,r2,r21
1108a670:	1948983a 	sll	r4,r3,r5
1108a674:	1d46d83a 	srl	r3,r3,r21
1108a678:	20a4b03a 	or	r18,r4,r2
1108a67c:	9011883a 	mov	r8,r18
1108a680:	1813883a 	mov	r9,r3
1108a684:	003ef606 	br	1108a260 <__umoddi3+0xf8>
1108a688:	01400604 	movi	r5,24
1108a68c:	2805883a 	mov	r2,r5
1108a690:	003ecc06 	br	1108a1c4 <__umoddi3+0x5c>
1108a694:	01400204 	movi	r5,8
1108a698:	2805883a 	mov	r2,r5
1108a69c:	003ec906 	br	1108a1c4 <__umoddi3+0x5c>
1108a6a0:	01400204 	movi	r5,8
1108a6a4:	2805883a 	mov	r2,r5
1108a6a8:	003f0106 	br	1108a2b0 <__umoddi3+0x148>
1108a6ac:	01400204 	movi	r5,8
1108a6b0:	2805883a 	mov	r2,r5
1108a6b4:	003f1206 	br	1108a300 <__umoddi3+0x198>
1108a6b8:	01400604 	movi	r5,24
1108a6bc:	2805883a 	mov	r2,r5
1108a6c0:	003f0f06 	br	1108a300 <__umoddi3+0x198>
1108a6c4:	01400604 	movi	r5,24
1108a6c8:	2805883a 	mov	r2,r5
1108a6cc:	003ef806 	br	1108a2b0 <__umoddi3+0x148>
1108a6d0:	3c7fb82e 	bgeu	r7,r17,1108a5b4 <__umoddi3+0x44c>
1108a6d4:	843fffc4 	addi	r16,r16,-1
1108a6d8:	3dcf883a 	add	r7,r7,r23
1108a6dc:	003fb506 	br	1108a5b4 <__umoddi3+0x44c>
1108a6e0:	147fa22e 	bgeu	r2,r17,1108a56c <__umoddi3+0x404>
1108a6e4:	e73fffc4 	addi	fp,fp,-1
1108a6e8:	15c5883a 	add	r2,r2,r23
1108a6ec:	003f9f06 	br	1108a56c <__umoddi3+0x404>
1108a6f0:	147f692e 	bgeu	r2,r17,1108a498 <__umoddi3+0x330>
1108a6f4:	1405883a 	add	r2,r2,r16
1108a6f8:	003f6706 	br	1108a498 <__umoddi3+0x330>
1108a6fc:	1405883a 	add	r2,r2,r16
1108a700:	003f1906 	br	1108a368 <__umoddi3+0x200>
1108a704:	1405883a 	add	r2,r2,r16
1108a708:	003ec906 	br	1108a230 <__umoddi3+0xc8>
1108a70c:	b13fcc36 	bltu	r22,r4,1108a640 <__umoddi3+0x4d8>
1108a710:	000b883a 	mov	r5,zero
1108a714:	003fd106 	br	1108a65c <__umoddi3+0x4f4>

1108a718 <_fpadd_parts>:
1108a718:	defff804 	addi	sp,sp,-32
1108a71c:	dcc00315 	stw	r19,12(sp)
1108a720:	2027883a 	mov	r19,r4
1108a724:	21000017 	ldw	r4,0(r4)
1108a728:	00c00044 	movi	r3,1
1108a72c:	dd400515 	stw	r21,20(sp)
1108a730:	dd000415 	stw	r20,16(sp)
1108a734:	ddc00715 	stw	r23,28(sp)
1108a738:	dd800615 	stw	r22,24(sp)
1108a73c:	dc800215 	stw	r18,8(sp)
1108a740:	dc400115 	stw	r17,4(sp)
1108a744:	dc000015 	stw	r16,0(sp)
1108a748:	282b883a 	mov	r21,r5
1108a74c:	3029883a 	mov	r20,r6
1108a750:	1900632e 	bgeu	r3,r4,1108a8e0 <_fpadd_parts+0x1c8>
1108a754:	28800017 	ldw	r2,0(r5)
1108a758:	1880812e 	bgeu	r3,r2,1108a960 <_fpadd_parts+0x248>
1108a75c:	00c00104 	movi	r3,4
1108a760:	20c0dc26 	beq	r4,r3,1108aad4 <_fpadd_parts+0x3bc>
1108a764:	10c07e26 	beq	r2,r3,1108a960 <_fpadd_parts+0x248>
1108a768:	00c00084 	movi	r3,2
1108a76c:	10c06726 	beq	r2,r3,1108a90c <_fpadd_parts+0x1f4>
1108a770:	20c07b26 	beq	r4,r3,1108a960 <_fpadd_parts+0x248>
1108a774:	9dc00217 	ldw	r23,8(r19)
1108a778:	28c00217 	ldw	r3,8(r5)
1108a77c:	9c400317 	ldw	r17,12(r19)
1108a780:	2bc00317 	ldw	r15,12(r5)
1108a784:	b8cdc83a 	sub	r6,r23,r3
1108a788:	9c800417 	ldw	r18,16(r19)
1108a78c:	2c000417 	ldw	r16,16(r5)
1108a790:	3009883a 	mov	r4,r6
1108a794:	30009716 	blt	r6,zero,1108a9f4 <_fpadd_parts+0x2dc>
1108a798:	00800fc4 	movi	r2,63
1108a79c:	11806b16 	blt	r2,r6,1108a94c <_fpadd_parts+0x234>
1108a7a0:	0100a40e 	bge	zero,r4,1108aa34 <_fpadd_parts+0x31c>
1108a7a4:	35bff804 	addi	r22,r6,-32
1108a7a8:	b000bc16 	blt	r22,zero,1108aa9c <_fpadd_parts+0x384>
1108a7ac:	8596d83a 	srl	r11,r16,r22
1108a7b0:	0019883a 	mov	r12,zero
1108a7b4:	0013883a 	mov	r9,zero
1108a7b8:	01000044 	movi	r4,1
1108a7bc:	0015883a 	mov	r10,zero
1108a7c0:	b000be16 	blt	r22,zero,1108aabc <_fpadd_parts+0x3a4>
1108a7c4:	2590983a 	sll	r8,r4,r22
1108a7c8:	000f883a 	mov	r7,zero
1108a7cc:	00bfffc4 	movi	r2,-1
1108a7d0:	3889883a 	add	r4,r7,r2
1108a7d4:	408b883a 	add	r5,r8,r2
1108a7d8:	21cd803a 	cmpltu	r6,r4,r7
1108a7dc:	314b883a 	add	r5,r6,r5
1108a7e0:	7904703a 	and	r2,r15,r4
1108a7e4:	8146703a 	and	r3,r16,r5
1108a7e8:	10c4b03a 	or	r2,r2,r3
1108a7ec:	10000226 	beq	r2,zero,1108a7f8 <_fpadd_parts+0xe0>
1108a7f0:	02400044 	movi	r9,1
1108a7f4:	0015883a 	mov	r10,zero
1108a7f8:	5a5eb03a 	or	r15,r11,r9
1108a7fc:	62a0b03a 	or	r16,r12,r10
1108a800:	99400117 	ldw	r5,4(r19)
1108a804:	a8800117 	ldw	r2,4(r21)
1108a808:	28806e26 	beq	r5,r2,1108a9c4 <_fpadd_parts+0x2ac>
1108a80c:	28006626 	beq	r5,zero,1108a9a8 <_fpadd_parts+0x290>
1108a810:	7c45c83a 	sub	r2,r15,r17
1108a814:	7889803a 	cmpltu	r4,r15,r2
1108a818:	8487c83a 	sub	r3,r16,r18
1108a81c:	1909c83a 	sub	r4,r3,r4
1108a820:	100d883a 	mov	r6,r2
1108a824:	200f883a 	mov	r7,r4
1108a828:	38007716 	blt	r7,zero,1108aa08 <_fpadd_parts+0x2f0>
1108a82c:	a5c00215 	stw	r23,8(r20)
1108a830:	a1c00415 	stw	r7,16(r20)
1108a834:	a0000115 	stw	zero,4(r20)
1108a838:	a1800315 	stw	r6,12(r20)
1108a83c:	a2000317 	ldw	r8,12(r20)
1108a840:	a2400417 	ldw	r9,16(r20)
1108a844:	00bfffc4 	movi	r2,-1
1108a848:	408b883a 	add	r5,r8,r2
1108a84c:	2a09803a 	cmpltu	r4,r5,r8
1108a850:	488d883a 	add	r6,r9,r2
1108a854:	01c40034 	movhi	r7,4096
1108a858:	39ffffc4 	addi	r7,r7,-1
1108a85c:	218d883a 	add	r6,r4,r6
1108a860:	39801736 	bltu	r7,r6,1108a8c0 <_fpadd_parts+0x1a8>
1108a864:	31c06526 	beq	r6,r7,1108a9fc <_fpadd_parts+0x2e4>
1108a868:	a3000217 	ldw	r12,8(r20)
1108a86c:	4209883a 	add	r4,r8,r8
1108a870:	00bfffc4 	movi	r2,-1
1108a874:	220f803a 	cmpltu	r7,r4,r8
1108a878:	4a4b883a 	add	r5,r9,r9
1108a87c:	394f883a 	add	r7,r7,r5
1108a880:	2095883a 	add	r10,r4,r2
1108a884:	3897883a 	add	r11,r7,r2
1108a888:	510d803a 	cmpltu	r6,r10,r4
1108a88c:	6099883a 	add	r12,r12,r2
1108a890:	32d7883a 	add	r11,r6,r11
1108a894:	00840034 	movhi	r2,4096
1108a898:	10bfffc4 	addi	r2,r2,-1
1108a89c:	2011883a 	mov	r8,r4
1108a8a0:	3813883a 	mov	r9,r7
1108a8a4:	a1000315 	stw	r4,12(r20)
1108a8a8:	a1c00415 	stw	r7,16(r20)
1108a8ac:	a3000215 	stw	r12,8(r20)
1108a8b0:	12c00336 	bltu	r2,r11,1108a8c0 <_fpadd_parts+0x1a8>
1108a8b4:	58bfed1e 	bne	r11,r2,1108a86c <_fpadd_parts+0x154>
1108a8b8:	00bfff84 	movi	r2,-2
1108a8bc:	12bfeb2e 	bgeu	r2,r10,1108a86c <_fpadd_parts+0x154>
1108a8c0:	a2800417 	ldw	r10,16(r20)
1108a8c4:	008000c4 	movi	r2,3
1108a8c8:	00c80034 	movhi	r3,8192
1108a8cc:	18ffffc4 	addi	r3,r3,-1
1108a8d0:	a2400317 	ldw	r9,12(r20)
1108a8d4:	a0800015 	stw	r2,0(r20)
1108a8d8:	1a802336 	bltu	r3,r10,1108a968 <_fpadd_parts+0x250>
1108a8dc:	a027883a 	mov	r19,r20
1108a8e0:	9805883a 	mov	r2,r19
1108a8e4:	ddc00717 	ldw	r23,28(sp)
1108a8e8:	dd800617 	ldw	r22,24(sp)
1108a8ec:	dd400517 	ldw	r21,20(sp)
1108a8f0:	dd000417 	ldw	r20,16(sp)
1108a8f4:	dcc00317 	ldw	r19,12(sp)
1108a8f8:	dc800217 	ldw	r18,8(sp)
1108a8fc:	dc400117 	ldw	r17,4(sp)
1108a900:	dc000017 	ldw	r16,0(sp)
1108a904:	dec00804 	addi	sp,sp,32
1108a908:	f800283a 	ret
1108a90c:	20fff41e 	bne	r4,r3,1108a8e0 <_fpadd_parts+0x1c8>
1108a910:	31000015 	stw	r4,0(r6)
1108a914:	98800117 	ldw	r2,4(r19)
1108a918:	30800115 	stw	r2,4(r6)
1108a91c:	98c00217 	ldw	r3,8(r19)
1108a920:	30c00215 	stw	r3,8(r6)
1108a924:	98800317 	ldw	r2,12(r19)
1108a928:	30800315 	stw	r2,12(r6)
1108a92c:	98c00417 	ldw	r3,16(r19)
1108a930:	30c00415 	stw	r3,16(r6)
1108a934:	98800117 	ldw	r2,4(r19)
1108a938:	28c00117 	ldw	r3,4(r5)
1108a93c:	3027883a 	mov	r19,r6
1108a940:	10c4703a 	and	r2,r2,r3
1108a944:	30800115 	stw	r2,4(r6)
1108a948:	003fe506 	br	1108a8e0 <_fpadd_parts+0x1c8>
1108a94c:	1dc02616 	blt	r3,r23,1108a9e8 <_fpadd_parts+0x2d0>
1108a950:	0023883a 	mov	r17,zero
1108a954:	182f883a 	mov	r23,r3
1108a958:	0025883a 	mov	r18,zero
1108a95c:	003fa806 	br	1108a800 <_fpadd_parts+0xe8>
1108a960:	a827883a 	mov	r19,r21
1108a964:	003fde06 	br	1108a8e0 <_fpadd_parts+0x1c8>
1108a968:	01800044 	movi	r6,1
1108a96c:	500497fa 	slli	r2,r10,31
1108a970:	4808d07a 	srli	r4,r9,1
1108a974:	518ad83a 	srl	r5,r10,r6
1108a978:	a2000217 	ldw	r8,8(r20)
1108a97c:	1108b03a 	or	r4,r2,r4
1108a980:	0007883a 	mov	r3,zero
1108a984:	4984703a 	and	r2,r9,r6
1108a988:	208cb03a 	or	r6,r4,r2
1108a98c:	28ceb03a 	or	r7,r5,r3
1108a990:	42000044 	addi	r8,r8,1
1108a994:	a027883a 	mov	r19,r20
1108a998:	a1c00415 	stw	r7,16(r20)
1108a99c:	a2000215 	stw	r8,8(r20)
1108a9a0:	a1800315 	stw	r6,12(r20)
1108a9a4:	003fce06 	br	1108a8e0 <_fpadd_parts+0x1c8>
1108a9a8:	8bc5c83a 	sub	r2,r17,r15
1108a9ac:	8889803a 	cmpltu	r4,r17,r2
1108a9b0:	9407c83a 	sub	r3,r18,r16
1108a9b4:	1909c83a 	sub	r4,r3,r4
1108a9b8:	100d883a 	mov	r6,r2
1108a9bc:	200f883a 	mov	r7,r4
1108a9c0:	003f9906 	br	1108a828 <_fpadd_parts+0x110>
1108a9c4:	7c45883a 	add	r2,r15,r17
1108a9c8:	13c9803a 	cmpltu	r4,r2,r15
1108a9cc:	8487883a 	add	r3,r16,r18
1108a9d0:	20c9883a 	add	r4,r4,r3
1108a9d4:	a1400115 	stw	r5,4(r20)
1108a9d8:	a5c00215 	stw	r23,8(r20)
1108a9dc:	a0800315 	stw	r2,12(r20)
1108a9e0:	a1000415 	stw	r4,16(r20)
1108a9e4:	003fb606 	br	1108a8c0 <_fpadd_parts+0x1a8>
1108a9e8:	001f883a 	mov	r15,zero
1108a9ec:	0021883a 	mov	r16,zero
1108a9f0:	003f8306 	br	1108a800 <_fpadd_parts+0xe8>
1108a9f4:	018dc83a 	sub	r6,zero,r6
1108a9f8:	003f6706 	br	1108a798 <_fpadd_parts+0x80>
1108a9fc:	00bfff84 	movi	r2,-2
1108aa00:	117faf36 	bltu	r2,r5,1108a8c0 <_fpadd_parts+0x1a8>
1108aa04:	003f9806 	br	1108a868 <_fpadd_parts+0x150>
1108aa08:	0005883a 	mov	r2,zero
1108aa0c:	1189c83a 	sub	r4,r2,r6
1108aa10:	1105803a 	cmpltu	r2,r2,r4
1108aa14:	01cbc83a 	sub	r5,zero,r7
1108aa18:	2885c83a 	sub	r2,r5,r2
1108aa1c:	01800044 	movi	r6,1
1108aa20:	a1800115 	stw	r6,4(r20)
1108aa24:	a5c00215 	stw	r23,8(r20)
1108aa28:	a1000315 	stw	r4,12(r20)
1108aa2c:	a0800415 	stw	r2,16(r20)
1108aa30:	003f8206 	br	1108a83c <_fpadd_parts+0x124>
1108aa34:	203f7226 	beq	r4,zero,1108a800 <_fpadd_parts+0xe8>
1108aa38:	35bff804 	addi	r22,r6,-32
1108aa3c:	b9af883a 	add	r23,r23,r6
1108aa40:	b0003116 	blt	r22,zero,1108ab08 <_fpadd_parts+0x3f0>
1108aa44:	959ad83a 	srl	r13,r18,r22
1108aa48:	001d883a 	mov	r14,zero
1108aa4c:	000f883a 	mov	r7,zero
1108aa50:	01000044 	movi	r4,1
1108aa54:	0011883a 	mov	r8,zero
1108aa58:	b0002516 	blt	r22,zero,1108aaf0 <_fpadd_parts+0x3d8>
1108aa5c:	2594983a 	sll	r10,r4,r22
1108aa60:	0013883a 	mov	r9,zero
1108aa64:	00bfffc4 	movi	r2,-1
1108aa68:	4889883a 	add	r4,r9,r2
1108aa6c:	508b883a 	add	r5,r10,r2
1108aa70:	224d803a 	cmpltu	r6,r4,r9
1108aa74:	314b883a 	add	r5,r6,r5
1108aa78:	8904703a 	and	r2,r17,r4
1108aa7c:	9146703a 	and	r3,r18,r5
1108aa80:	10c4b03a 	or	r2,r2,r3
1108aa84:	10000226 	beq	r2,zero,1108aa90 <_fpadd_parts+0x378>
1108aa88:	01c00044 	movi	r7,1
1108aa8c:	0011883a 	mov	r8,zero
1108aa90:	69e2b03a 	or	r17,r13,r7
1108aa94:	7224b03a 	or	r18,r14,r8
1108aa98:	003f5906 	br	1108a800 <_fpadd_parts+0xe8>
1108aa9c:	8407883a 	add	r3,r16,r16
1108aaa0:	008007c4 	movi	r2,31
1108aaa4:	1185c83a 	sub	r2,r2,r6
1108aaa8:	1886983a 	sll	r3,r3,r2
1108aaac:	7996d83a 	srl	r11,r15,r6
1108aab0:	8198d83a 	srl	r12,r16,r6
1108aab4:	1ad6b03a 	or	r11,r3,r11
1108aab8:	003f3e06 	br	1108a7b4 <_fpadd_parts+0x9c>
1108aabc:	2006d07a 	srli	r3,r4,1
1108aac0:	008007c4 	movi	r2,31
1108aac4:	1185c83a 	sub	r2,r2,r6
1108aac8:	1890d83a 	srl	r8,r3,r2
1108aacc:	218e983a 	sll	r7,r4,r6
1108aad0:	003f3e06 	br	1108a7cc <_fpadd_parts+0xb4>
1108aad4:	113f821e 	bne	r2,r4,1108a8e0 <_fpadd_parts+0x1c8>
1108aad8:	28c00117 	ldw	r3,4(r5)
1108aadc:	98800117 	ldw	r2,4(r19)
1108aae0:	10ff7f26 	beq	r2,r3,1108a8e0 <_fpadd_parts+0x1c8>
1108aae4:	04c44274 	movhi	r19,4361
1108aae8:	9cfde504 	addi	r19,r19,-2156
1108aaec:	003f7c06 	br	1108a8e0 <_fpadd_parts+0x1c8>
1108aaf0:	2006d07a 	srli	r3,r4,1
1108aaf4:	008007c4 	movi	r2,31
1108aaf8:	1185c83a 	sub	r2,r2,r6
1108aafc:	1894d83a 	srl	r10,r3,r2
1108ab00:	2192983a 	sll	r9,r4,r6
1108ab04:	003fd706 	br	1108aa64 <_fpadd_parts+0x34c>
1108ab08:	9487883a 	add	r3,r18,r18
1108ab0c:	008007c4 	movi	r2,31
1108ab10:	1185c83a 	sub	r2,r2,r6
1108ab14:	1886983a 	sll	r3,r3,r2
1108ab18:	899ad83a 	srl	r13,r17,r6
1108ab1c:	919cd83a 	srl	r14,r18,r6
1108ab20:	1b5ab03a 	or	r13,r3,r13
1108ab24:	003fc906 	br	1108aa4c <_fpadd_parts+0x334>

1108ab28 <__subdf3>:
1108ab28:	deffea04 	addi	sp,sp,-88
1108ab2c:	dcc01415 	stw	r19,80(sp)
1108ab30:	dcc00404 	addi	r19,sp,16
1108ab34:	2011883a 	mov	r8,r4
1108ab38:	2813883a 	mov	r9,r5
1108ab3c:	dc401315 	stw	r17,76(sp)
1108ab40:	d809883a 	mov	r4,sp
1108ab44:	980b883a 	mov	r5,r19
1108ab48:	dc400904 	addi	r17,sp,36
1108ab4c:	dfc01515 	stw	ra,84(sp)
1108ab50:	da400115 	stw	r9,4(sp)
1108ab54:	d9c00315 	stw	r7,12(sp)
1108ab58:	da000015 	stw	r8,0(sp)
1108ab5c:	d9800215 	stw	r6,8(sp)
1108ab60:	108bc700 	call	1108bc70 <__unpack_d>
1108ab64:	d9000204 	addi	r4,sp,8
1108ab68:	880b883a 	mov	r5,r17
1108ab6c:	108bc700 	call	1108bc70 <__unpack_d>
1108ab70:	d8800a17 	ldw	r2,40(sp)
1108ab74:	880b883a 	mov	r5,r17
1108ab78:	9809883a 	mov	r4,r19
1108ab7c:	d9800e04 	addi	r6,sp,56
1108ab80:	1080005c 	xori	r2,r2,1
1108ab84:	d8800a15 	stw	r2,40(sp)
1108ab88:	108a7180 	call	1108a718 <_fpadd_parts>
1108ab8c:	1009883a 	mov	r4,r2
1108ab90:	108b95c0 	call	1108b95c <__pack_d>
1108ab94:	dfc01517 	ldw	ra,84(sp)
1108ab98:	dcc01417 	ldw	r19,80(sp)
1108ab9c:	dc401317 	ldw	r17,76(sp)
1108aba0:	dec01604 	addi	sp,sp,88
1108aba4:	f800283a 	ret

1108aba8 <__adddf3>:
1108aba8:	deffea04 	addi	sp,sp,-88
1108abac:	dcc01415 	stw	r19,80(sp)
1108abb0:	dcc00404 	addi	r19,sp,16
1108abb4:	2011883a 	mov	r8,r4
1108abb8:	2813883a 	mov	r9,r5
1108abbc:	dc401315 	stw	r17,76(sp)
1108abc0:	d809883a 	mov	r4,sp
1108abc4:	980b883a 	mov	r5,r19
1108abc8:	dc400904 	addi	r17,sp,36
1108abcc:	dfc01515 	stw	ra,84(sp)
1108abd0:	da400115 	stw	r9,4(sp)
1108abd4:	d9c00315 	stw	r7,12(sp)
1108abd8:	da000015 	stw	r8,0(sp)
1108abdc:	d9800215 	stw	r6,8(sp)
1108abe0:	108bc700 	call	1108bc70 <__unpack_d>
1108abe4:	d9000204 	addi	r4,sp,8
1108abe8:	880b883a 	mov	r5,r17
1108abec:	108bc700 	call	1108bc70 <__unpack_d>
1108abf0:	d9800e04 	addi	r6,sp,56
1108abf4:	9809883a 	mov	r4,r19
1108abf8:	880b883a 	mov	r5,r17
1108abfc:	108a7180 	call	1108a718 <_fpadd_parts>
1108ac00:	1009883a 	mov	r4,r2
1108ac04:	108b95c0 	call	1108b95c <__pack_d>
1108ac08:	dfc01517 	ldw	ra,84(sp)
1108ac0c:	dcc01417 	ldw	r19,80(sp)
1108ac10:	dc401317 	ldw	r17,76(sp)
1108ac14:	dec01604 	addi	sp,sp,88
1108ac18:	f800283a 	ret

1108ac1c <__muldf3>:
1108ac1c:	deffe004 	addi	sp,sp,-128
1108ac20:	dc401815 	stw	r17,96(sp)
1108ac24:	dc400404 	addi	r17,sp,16
1108ac28:	2011883a 	mov	r8,r4
1108ac2c:	2813883a 	mov	r9,r5
1108ac30:	dc001715 	stw	r16,92(sp)
1108ac34:	d809883a 	mov	r4,sp
1108ac38:	880b883a 	mov	r5,r17
1108ac3c:	dc000904 	addi	r16,sp,36
1108ac40:	dfc01f15 	stw	ra,124(sp)
1108ac44:	da400115 	stw	r9,4(sp)
1108ac48:	d9c00315 	stw	r7,12(sp)
1108ac4c:	da000015 	stw	r8,0(sp)
1108ac50:	d9800215 	stw	r6,8(sp)
1108ac54:	ddc01e15 	stw	r23,120(sp)
1108ac58:	dd801d15 	stw	r22,116(sp)
1108ac5c:	dd401c15 	stw	r21,112(sp)
1108ac60:	dd001b15 	stw	r20,108(sp)
1108ac64:	dcc01a15 	stw	r19,104(sp)
1108ac68:	dc801915 	stw	r18,100(sp)
1108ac6c:	108bc700 	call	1108bc70 <__unpack_d>
1108ac70:	d9000204 	addi	r4,sp,8
1108ac74:	800b883a 	mov	r5,r16
1108ac78:	108bc700 	call	1108bc70 <__unpack_d>
1108ac7c:	d9000417 	ldw	r4,16(sp)
1108ac80:	00800044 	movi	r2,1
1108ac84:	1100102e 	bgeu	r2,r4,1108acc8 <__muldf3+0xac>
1108ac88:	d8c00917 	ldw	r3,36(sp)
1108ac8c:	10c0062e 	bgeu	r2,r3,1108aca8 <__muldf3+0x8c>
1108ac90:	00800104 	movi	r2,4
1108ac94:	20800a26 	beq	r4,r2,1108acc0 <__muldf3+0xa4>
1108ac98:	1880cc26 	beq	r3,r2,1108afcc <__muldf3+0x3b0>
1108ac9c:	00800084 	movi	r2,2
1108aca0:	20800926 	beq	r4,r2,1108acc8 <__muldf3+0xac>
1108aca4:	1880191e 	bne	r3,r2,1108ad0c <__muldf3+0xf0>
1108aca8:	d8c00a17 	ldw	r3,40(sp)
1108acac:	d8800517 	ldw	r2,20(sp)
1108acb0:	8009883a 	mov	r4,r16
1108acb4:	10c4c03a 	cmpne	r2,r2,r3
1108acb8:	d8800a15 	stw	r2,40(sp)
1108acbc:	00000706 	br	1108acdc <__muldf3+0xc0>
1108acc0:	00800084 	movi	r2,2
1108acc4:	1880c326 	beq	r3,r2,1108afd4 <__muldf3+0x3b8>
1108acc8:	d8800517 	ldw	r2,20(sp)
1108accc:	d8c00a17 	ldw	r3,40(sp)
1108acd0:	8809883a 	mov	r4,r17
1108acd4:	10c4c03a 	cmpne	r2,r2,r3
1108acd8:	d8800515 	stw	r2,20(sp)
1108acdc:	108b95c0 	call	1108b95c <__pack_d>
1108ace0:	dfc01f17 	ldw	ra,124(sp)
1108ace4:	ddc01e17 	ldw	r23,120(sp)
1108ace8:	dd801d17 	ldw	r22,116(sp)
1108acec:	dd401c17 	ldw	r21,112(sp)
1108acf0:	dd001b17 	ldw	r20,108(sp)
1108acf4:	dcc01a17 	ldw	r19,104(sp)
1108acf8:	dc801917 	ldw	r18,100(sp)
1108acfc:	dc401817 	ldw	r17,96(sp)
1108ad00:	dc001717 	ldw	r16,92(sp)
1108ad04:	dec02004 	addi	sp,sp,128
1108ad08:	f800283a 	ret
1108ad0c:	dd800717 	ldw	r22,28(sp)
1108ad10:	dc800c17 	ldw	r18,48(sp)
1108ad14:	002b883a 	mov	r21,zero
1108ad18:	0023883a 	mov	r17,zero
1108ad1c:	a80b883a 	mov	r5,r21
1108ad20:	b00d883a 	mov	r6,r22
1108ad24:	880f883a 	mov	r7,r17
1108ad28:	ddc00817 	ldw	r23,32(sp)
1108ad2c:	dcc00d17 	ldw	r19,52(sp)
1108ad30:	9009883a 	mov	r4,r18
1108ad34:	108b8440 	call	1108b844 <__muldi3>
1108ad38:	001b883a 	mov	r13,zero
1108ad3c:	680f883a 	mov	r7,r13
1108ad40:	b009883a 	mov	r4,r22
1108ad44:	000b883a 	mov	r5,zero
1108ad48:	980d883a 	mov	r6,r19
1108ad4c:	b82d883a 	mov	r22,r23
1108ad50:	002f883a 	mov	r23,zero
1108ad54:	db401615 	stw	r13,88(sp)
1108ad58:	d8801315 	stw	r2,76(sp)
1108ad5c:	d8c01415 	stw	r3,80(sp)
1108ad60:	dcc01515 	stw	r19,84(sp)
1108ad64:	108b8440 	call	1108b844 <__muldi3>
1108ad68:	b00d883a 	mov	r6,r22
1108ad6c:	000b883a 	mov	r5,zero
1108ad70:	9009883a 	mov	r4,r18
1108ad74:	b80f883a 	mov	r7,r23
1108ad78:	1021883a 	mov	r16,r2
1108ad7c:	1823883a 	mov	r17,r3
1108ad80:	108b8440 	call	1108b844 <__muldi3>
1108ad84:	8085883a 	add	r2,r16,r2
1108ad88:	140d803a 	cmpltu	r6,r2,r16
1108ad8c:	88c7883a 	add	r3,r17,r3
1108ad90:	30cd883a 	add	r6,r6,r3
1108ad94:	1029883a 	mov	r20,r2
1108ad98:	302b883a 	mov	r21,r6
1108ad9c:	da801317 	ldw	r10,76(sp)
1108ada0:	dac01417 	ldw	r11,80(sp)
1108ada4:	db001517 	ldw	r12,84(sp)
1108ada8:	db401617 	ldw	r13,88(sp)
1108adac:	3440612e 	bgeu	r6,r17,1108af34 <__muldf3+0x318>
1108adb0:	0009883a 	mov	r4,zero
1108adb4:	5105883a 	add	r2,r10,r4
1108adb8:	128d803a 	cmpltu	r6,r2,r10
1108adbc:	5d07883a 	add	r3,r11,r20
1108adc0:	30cd883a 	add	r6,r6,r3
1108adc4:	0021883a 	mov	r16,zero
1108adc8:	04400044 	movi	r17,1
1108adcc:	1025883a 	mov	r18,r2
1108add0:	3027883a 	mov	r19,r6
1108add4:	32c06236 	bltu	r6,r11,1108af60 <__muldf3+0x344>
1108add8:	59807a26 	beq	r11,r6,1108afc4 <__muldf3+0x3a8>
1108addc:	680b883a 	mov	r5,r13
1108ade0:	b80f883a 	mov	r7,r23
1108ade4:	6009883a 	mov	r4,r12
1108ade8:	b00d883a 	mov	r6,r22
1108adec:	108b8440 	call	1108b844 <__muldi3>
1108adf0:	1009883a 	mov	r4,r2
1108adf4:	000f883a 	mov	r7,zero
1108adf8:	1545883a 	add	r2,r2,r21
1108adfc:	1111803a 	cmpltu	r8,r2,r4
1108ae00:	19c7883a 	add	r3,r3,r7
1108ae04:	40c7883a 	add	r3,r8,r3
1108ae08:	88cb883a 	add	r5,r17,r3
1108ae0c:	d8c00617 	ldw	r3,24(sp)
1108ae10:	8089883a 	add	r4,r16,r2
1108ae14:	d8800b17 	ldw	r2,44(sp)
1108ae18:	18c00104 	addi	r3,r3,4
1108ae1c:	240d803a 	cmpltu	r6,r4,r16
1108ae20:	10c7883a 	add	r3,r2,r3
1108ae24:	2013883a 	mov	r9,r4
1108ae28:	d8800a17 	ldw	r2,40(sp)
1108ae2c:	d9000517 	ldw	r4,20(sp)
1108ae30:	314d883a 	add	r6,r6,r5
1108ae34:	3015883a 	mov	r10,r6
1108ae38:	2088c03a 	cmpne	r4,r4,r2
1108ae3c:	00880034 	movhi	r2,8192
1108ae40:	10bfffc4 	addi	r2,r2,-1
1108ae44:	d9000f15 	stw	r4,60(sp)
1108ae48:	d8c01015 	stw	r3,64(sp)
1108ae4c:	1180162e 	bgeu	r2,r6,1108aea8 <__muldf3+0x28c>
1108ae50:	1811883a 	mov	r8,r3
1108ae54:	101f883a 	mov	r15,r2
1108ae58:	980497fa 	slli	r2,r19,31
1108ae5c:	9016d07a 	srli	r11,r18,1
1108ae60:	500697fa 	slli	r3,r10,31
1108ae64:	480cd07a 	srli	r6,r9,1
1108ae68:	500ed07a 	srli	r7,r10,1
1108ae6c:	12d6b03a 	or	r11,r2,r11
1108ae70:	00800044 	movi	r2,1
1108ae74:	198cb03a 	or	r6,r3,r6
1108ae78:	4888703a 	and	r4,r9,r2
1108ae7c:	9818d07a 	srli	r12,r19,1
1108ae80:	001b883a 	mov	r13,zero
1108ae84:	03a00034 	movhi	r14,32768
1108ae88:	3013883a 	mov	r9,r6
1108ae8c:	3815883a 	mov	r10,r7
1108ae90:	4091883a 	add	r8,r8,r2
1108ae94:	20000226 	beq	r4,zero,1108aea0 <__muldf3+0x284>
1108ae98:	5b64b03a 	or	r18,r11,r13
1108ae9c:	63a6b03a 	or	r19,r12,r14
1108aea0:	7abfed36 	bltu	r15,r10,1108ae58 <__muldf3+0x23c>
1108aea4:	da001015 	stw	r8,64(sp)
1108aea8:	00840034 	movhi	r2,4096
1108aeac:	10bfffc4 	addi	r2,r2,-1
1108aeb0:	12801436 	bltu	r2,r10,1108af04 <__muldf3+0x2e8>
1108aeb4:	da001017 	ldw	r8,64(sp)
1108aeb8:	101f883a 	mov	r15,r2
1108aebc:	4a45883a 	add	r2,r9,r9
1108aec0:	124d803a 	cmpltu	r6,r2,r9
1108aec4:	5287883a 	add	r3,r10,r10
1108aec8:	9497883a 	add	r11,r18,r18
1108aecc:	5c8f803a 	cmpltu	r7,r11,r18
1108aed0:	9cd9883a 	add	r12,r19,r19
1108aed4:	01000044 	movi	r4,1
1108aed8:	30cd883a 	add	r6,r6,r3
1108aedc:	3b0f883a 	add	r7,r7,r12
1108aee0:	423fffc4 	addi	r8,r8,-1
1108aee4:	1013883a 	mov	r9,r2
1108aee8:	3015883a 	mov	r10,r6
1108aeec:	111ab03a 	or	r13,r2,r4
1108aef0:	98003016 	blt	r19,zero,1108afb4 <__muldf3+0x398>
1108aef4:	5825883a 	mov	r18,r11
1108aef8:	3827883a 	mov	r19,r7
1108aefc:	7abfef2e 	bgeu	r15,r10,1108aebc <__muldf3+0x2a0>
1108af00:	da001015 	stw	r8,64(sp)
1108af04:	00803fc4 	movi	r2,255
1108af08:	488e703a 	and	r7,r9,r2
1108af0c:	00802004 	movi	r2,128
1108af10:	0007883a 	mov	r3,zero
1108af14:	0011883a 	mov	r8,zero
1108af18:	38801826 	beq	r7,r2,1108af7c <__muldf3+0x360>
1108af1c:	008000c4 	movi	r2,3
1108af20:	d9000e04 	addi	r4,sp,56
1108af24:	da801215 	stw	r10,72(sp)
1108af28:	d8800e15 	stw	r2,56(sp)
1108af2c:	da401115 	stw	r9,68(sp)
1108af30:	003f6a06 	br	1108acdc <__muldf3+0xc0>
1108af34:	89802126 	beq	r17,r6,1108afbc <__muldf3+0x3a0>
1108af38:	0009883a 	mov	r4,zero
1108af3c:	5105883a 	add	r2,r10,r4
1108af40:	128d803a 	cmpltu	r6,r2,r10
1108af44:	5d07883a 	add	r3,r11,r20
1108af48:	30cd883a 	add	r6,r6,r3
1108af4c:	0021883a 	mov	r16,zero
1108af50:	0023883a 	mov	r17,zero
1108af54:	1025883a 	mov	r18,r2
1108af58:	3027883a 	mov	r19,r6
1108af5c:	32ff9e2e 	bgeu	r6,r11,1108add8 <__muldf3+0x1bc>
1108af60:	00800044 	movi	r2,1
1108af64:	8089883a 	add	r4,r16,r2
1108af68:	240d803a 	cmpltu	r6,r4,r16
1108af6c:	344d883a 	add	r6,r6,r17
1108af70:	2021883a 	mov	r16,r4
1108af74:	3023883a 	mov	r17,r6
1108af78:	003f9806 	br	1108addc <__muldf3+0x1c0>
1108af7c:	403fe71e 	bne	r8,zero,1108af1c <__muldf3+0x300>
1108af80:	01004004 	movi	r4,256
1108af84:	4904703a 	and	r2,r9,r4
1108af88:	10c4b03a 	or	r2,r2,r3
1108af8c:	103fe31e 	bne	r2,zero,1108af1c <__muldf3+0x300>
1108af90:	94c4b03a 	or	r2,r18,r19
1108af94:	103fe126 	beq	r2,zero,1108af1c <__muldf3+0x300>
1108af98:	49c5883a 	add	r2,r9,r7
1108af9c:	1251803a 	cmpltu	r8,r2,r9
1108afa0:	4291883a 	add	r8,r8,r10
1108afa4:	013fc004 	movi	r4,-256
1108afa8:	1112703a 	and	r9,r2,r4
1108afac:	4015883a 	mov	r10,r8
1108afb0:	003fda06 	br	1108af1c <__muldf3+0x300>
1108afb4:	6813883a 	mov	r9,r13
1108afb8:	003fce06 	br	1108aef4 <__muldf3+0x2d8>
1108afbc:	143f7c36 	bltu	r2,r16,1108adb0 <__muldf3+0x194>
1108afc0:	003fdd06 	br	1108af38 <__muldf3+0x31c>
1108afc4:	12bf852e 	bgeu	r2,r10,1108addc <__muldf3+0x1c0>
1108afc8:	003fe506 	br	1108af60 <__muldf3+0x344>
1108afcc:	00800084 	movi	r2,2
1108afd0:	20bf351e 	bne	r4,r2,1108aca8 <__muldf3+0x8c>
1108afd4:	01044274 	movhi	r4,4361
1108afd8:	213de504 	addi	r4,r4,-2156
1108afdc:	003f3f06 	br	1108acdc <__muldf3+0xc0>

1108afe0 <__divdf3>:
1108afe0:	deffed04 	addi	sp,sp,-76
1108afe4:	dcc01115 	stw	r19,68(sp)
1108afe8:	dcc00404 	addi	r19,sp,16
1108afec:	2011883a 	mov	r8,r4
1108aff0:	2813883a 	mov	r9,r5
1108aff4:	dc000e15 	stw	r16,56(sp)
1108aff8:	d809883a 	mov	r4,sp
1108affc:	980b883a 	mov	r5,r19
1108b000:	dc000904 	addi	r16,sp,36
1108b004:	dfc01215 	stw	ra,72(sp)
1108b008:	da400115 	stw	r9,4(sp)
1108b00c:	d9c00315 	stw	r7,12(sp)
1108b010:	da000015 	stw	r8,0(sp)
1108b014:	d9800215 	stw	r6,8(sp)
1108b018:	dc801015 	stw	r18,64(sp)
1108b01c:	dc400f15 	stw	r17,60(sp)
1108b020:	108bc700 	call	1108bc70 <__unpack_d>
1108b024:	d9000204 	addi	r4,sp,8
1108b028:	800b883a 	mov	r5,r16
1108b02c:	108bc700 	call	1108bc70 <__unpack_d>
1108b030:	d9000417 	ldw	r4,16(sp)
1108b034:	00800044 	movi	r2,1
1108b038:	11000b2e 	bgeu	r2,r4,1108b068 <__divdf3+0x88>
1108b03c:	d9400917 	ldw	r5,36(sp)
1108b040:	1140762e 	bgeu	r2,r5,1108b21c <__divdf3+0x23c>
1108b044:	d8800517 	ldw	r2,20(sp)
1108b048:	d8c00a17 	ldw	r3,40(sp)
1108b04c:	01800104 	movi	r6,4
1108b050:	10c4f03a 	xor	r2,r2,r3
1108b054:	d8800515 	stw	r2,20(sp)
1108b058:	21800226 	beq	r4,r6,1108b064 <__divdf3+0x84>
1108b05c:	00800084 	movi	r2,2
1108b060:	2080141e 	bne	r4,r2,1108b0b4 <__divdf3+0xd4>
1108b064:	29000926 	beq	r5,r4,1108b08c <__divdf3+0xac>
1108b068:	9809883a 	mov	r4,r19
1108b06c:	108b95c0 	call	1108b95c <__pack_d>
1108b070:	dfc01217 	ldw	ra,72(sp)
1108b074:	dcc01117 	ldw	r19,68(sp)
1108b078:	dc801017 	ldw	r18,64(sp)
1108b07c:	dc400f17 	ldw	r17,60(sp)
1108b080:	dc000e17 	ldw	r16,56(sp)
1108b084:	dec01304 	addi	sp,sp,76
1108b088:	f800283a 	ret
1108b08c:	01044274 	movhi	r4,4361
1108b090:	213de504 	addi	r4,r4,-2156
1108b094:	108b95c0 	call	1108b95c <__pack_d>
1108b098:	dfc01217 	ldw	ra,72(sp)
1108b09c:	dcc01117 	ldw	r19,68(sp)
1108b0a0:	dc801017 	ldw	r18,64(sp)
1108b0a4:	dc400f17 	ldw	r17,60(sp)
1108b0a8:	dc000e17 	ldw	r16,56(sp)
1108b0ac:	dec01304 	addi	sp,sp,76
1108b0b0:	f800283a 	ret
1108b0b4:	29805b26 	beq	r5,r6,1108b224 <__divdf3+0x244>
1108b0b8:	28802d26 	beq	r5,r2,1108b170 <__divdf3+0x190>
1108b0bc:	d8c00617 	ldw	r3,24(sp)
1108b0c0:	d8800b17 	ldw	r2,44(sp)
1108b0c4:	d9c00817 	ldw	r7,32(sp)
1108b0c8:	dc400d17 	ldw	r17,52(sp)
1108b0cc:	188bc83a 	sub	r5,r3,r2
1108b0d0:	d9800717 	ldw	r6,28(sp)
1108b0d4:	dc000c17 	ldw	r16,48(sp)
1108b0d8:	d9400615 	stw	r5,24(sp)
1108b0dc:	3c403836 	bltu	r7,r17,1108b1c0 <__divdf3+0x1e0>
1108b0e0:	89c03626 	beq	r17,r7,1108b1bc <__divdf3+0x1dc>
1108b0e4:	0015883a 	mov	r10,zero
1108b0e8:	001d883a 	mov	r14,zero
1108b0ec:	02c40034 	movhi	r11,4096
1108b0f0:	001f883a 	mov	r15,zero
1108b0f4:	003f883a 	mov	ra,zero
1108b0f8:	04800f44 	movi	r18,61
1108b0fc:	00000f06 	br	1108b13c <__divdf3+0x15c>
1108b100:	601d883a 	mov	r14,r12
1108b104:	681f883a 	mov	r15,r13
1108b108:	400d883a 	mov	r6,r8
1108b10c:	100f883a 	mov	r7,r2
1108b110:	3191883a 	add	r8,r6,r6
1108b114:	5808d07a 	srli	r4,r11,1
1108b118:	4185803a 	cmpltu	r2,r8,r6
1108b11c:	39d3883a 	add	r9,r7,r7
1108b120:	28c6b03a 	or	r3,r5,r3
1108b124:	1245883a 	add	r2,r2,r9
1108b128:	1815883a 	mov	r10,r3
1108b12c:	2017883a 	mov	r11,r4
1108b130:	400d883a 	mov	r6,r8
1108b134:	100f883a 	mov	r7,r2
1108b138:	fc801726 	beq	ra,r18,1108b198 <__divdf3+0x1b8>
1108b13c:	580a97fa 	slli	r5,r11,31
1108b140:	5006d07a 	srli	r3,r10,1
1108b144:	ffc00044 	addi	ra,ra,1
1108b148:	3c7ff136 	bltu	r7,r17,1108b110 <__divdf3+0x130>
1108b14c:	3411c83a 	sub	r8,r6,r16
1108b150:	3205803a 	cmpltu	r2,r6,r8
1108b154:	3c53c83a 	sub	r9,r7,r17
1108b158:	7298b03a 	or	r12,r14,r10
1108b15c:	7adab03a 	or	r13,r15,r11
1108b160:	4885c83a 	sub	r2,r9,r2
1108b164:	89ffe61e 	bne	r17,r7,1108b100 <__divdf3+0x120>
1108b168:	343fe936 	bltu	r6,r16,1108b110 <__divdf3+0x130>
1108b16c:	003fe406 	br	1108b100 <__divdf3+0x120>
1108b170:	9809883a 	mov	r4,r19
1108b174:	d9800415 	stw	r6,16(sp)
1108b178:	108b95c0 	call	1108b95c <__pack_d>
1108b17c:	dfc01217 	ldw	ra,72(sp)
1108b180:	dcc01117 	ldw	r19,68(sp)
1108b184:	dc801017 	ldw	r18,64(sp)
1108b188:	dc400f17 	ldw	r17,60(sp)
1108b18c:	dc000e17 	ldw	r16,56(sp)
1108b190:	dec01304 	addi	sp,sp,76
1108b194:	f800283a 	ret
1108b198:	00803fc4 	movi	r2,255
1108b19c:	7090703a 	and	r8,r14,r2
1108b1a0:	00802004 	movi	r2,128
1108b1a4:	0007883a 	mov	r3,zero
1108b1a8:	0013883a 	mov	r9,zero
1108b1ac:	40800d26 	beq	r8,r2,1108b1e4 <__divdf3+0x204>
1108b1b0:	dbc00815 	stw	r15,32(sp)
1108b1b4:	db800715 	stw	r14,28(sp)
1108b1b8:	003fab06 	br	1108b068 <__divdf3+0x88>
1108b1bc:	343fc92e 	bgeu	r6,r16,1108b0e4 <__divdf3+0x104>
1108b1c0:	3185883a 	add	r2,r6,r6
1108b1c4:	1189803a 	cmpltu	r4,r2,r6
1108b1c8:	39c7883a 	add	r3,r7,r7
1108b1cc:	20c9883a 	add	r4,r4,r3
1108b1d0:	297fffc4 	addi	r5,r5,-1
1108b1d4:	100d883a 	mov	r6,r2
1108b1d8:	200f883a 	mov	r7,r4
1108b1dc:	d9400615 	stw	r5,24(sp)
1108b1e0:	003fc006 	br	1108b0e4 <__divdf3+0x104>
1108b1e4:	483ff21e 	bne	r9,zero,1108b1b0 <__divdf3+0x1d0>
1108b1e8:	01004004 	movi	r4,256
1108b1ec:	7104703a 	and	r2,r14,r4
1108b1f0:	10c4b03a 	or	r2,r2,r3
1108b1f4:	103fee1e 	bne	r2,zero,1108b1b0 <__divdf3+0x1d0>
1108b1f8:	31c4b03a 	or	r2,r6,r7
1108b1fc:	103fec26 	beq	r2,zero,1108b1b0 <__divdf3+0x1d0>
1108b200:	7205883a 	add	r2,r14,r8
1108b204:	1391803a 	cmpltu	r8,r2,r14
1108b208:	43d1883a 	add	r8,r8,r15
1108b20c:	013fc004 	movi	r4,-256
1108b210:	111c703a 	and	r14,r2,r4
1108b214:	401f883a 	mov	r15,r8
1108b218:	003fe506 	br	1108b1b0 <__divdf3+0x1d0>
1108b21c:	8009883a 	mov	r4,r16
1108b220:	003f9206 	br	1108b06c <__divdf3+0x8c>
1108b224:	9809883a 	mov	r4,r19
1108b228:	d8000715 	stw	zero,28(sp)
1108b22c:	d8000815 	stw	zero,32(sp)
1108b230:	d8000615 	stw	zero,24(sp)
1108b234:	003f8d06 	br	1108b06c <__divdf3+0x8c>

1108b238 <__eqdf2>:
1108b238:	deffef04 	addi	sp,sp,-68
1108b23c:	dc400f15 	stw	r17,60(sp)
1108b240:	dc400404 	addi	r17,sp,16
1108b244:	2005883a 	mov	r2,r4
1108b248:	2807883a 	mov	r3,r5
1108b24c:	dc000e15 	stw	r16,56(sp)
1108b250:	d809883a 	mov	r4,sp
1108b254:	880b883a 	mov	r5,r17
1108b258:	dc000904 	addi	r16,sp,36
1108b25c:	d8c00115 	stw	r3,4(sp)
1108b260:	d8800015 	stw	r2,0(sp)
1108b264:	d9800215 	stw	r6,8(sp)
1108b268:	dfc01015 	stw	ra,64(sp)
1108b26c:	d9c00315 	stw	r7,12(sp)
1108b270:	108bc700 	call	1108bc70 <__unpack_d>
1108b274:	d9000204 	addi	r4,sp,8
1108b278:	800b883a 	mov	r5,r16
1108b27c:	108bc700 	call	1108bc70 <__unpack_d>
1108b280:	d8800417 	ldw	r2,16(sp)
1108b284:	00c00044 	movi	r3,1
1108b288:	180d883a 	mov	r6,r3
1108b28c:	1880062e 	bgeu	r3,r2,1108b2a8 <__eqdf2+0x70>
1108b290:	d8800917 	ldw	r2,36(sp)
1108b294:	8809883a 	mov	r4,r17
1108b298:	800b883a 	mov	r5,r16
1108b29c:	1880022e 	bgeu	r3,r2,1108b2a8 <__eqdf2+0x70>
1108b2a0:	108bda80 	call	1108bda8 <__fpcmp_parts_d>
1108b2a4:	100d883a 	mov	r6,r2
1108b2a8:	3005883a 	mov	r2,r6
1108b2ac:	dfc01017 	ldw	ra,64(sp)
1108b2b0:	dc400f17 	ldw	r17,60(sp)
1108b2b4:	dc000e17 	ldw	r16,56(sp)
1108b2b8:	dec01104 	addi	sp,sp,68
1108b2bc:	f800283a 	ret

1108b2c0 <__nedf2>:
1108b2c0:	deffef04 	addi	sp,sp,-68
1108b2c4:	dc400f15 	stw	r17,60(sp)
1108b2c8:	dc400404 	addi	r17,sp,16
1108b2cc:	2005883a 	mov	r2,r4
1108b2d0:	2807883a 	mov	r3,r5
1108b2d4:	dc000e15 	stw	r16,56(sp)
1108b2d8:	d809883a 	mov	r4,sp
1108b2dc:	880b883a 	mov	r5,r17
1108b2e0:	dc000904 	addi	r16,sp,36
1108b2e4:	d8c00115 	stw	r3,4(sp)
1108b2e8:	d8800015 	stw	r2,0(sp)
1108b2ec:	d9800215 	stw	r6,8(sp)
1108b2f0:	dfc01015 	stw	ra,64(sp)
1108b2f4:	d9c00315 	stw	r7,12(sp)
1108b2f8:	108bc700 	call	1108bc70 <__unpack_d>
1108b2fc:	d9000204 	addi	r4,sp,8
1108b300:	800b883a 	mov	r5,r16
1108b304:	108bc700 	call	1108bc70 <__unpack_d>
1108b308:	d8800417 	ldw	r2,16(sp)
1108b30c:	00c00044 	movi	r3,1
1108b310:	180d883a 	mov	r6,r3
1108b314:	1880062e 	bgeu	r3,r2,1108b330 <__nedf2+0x70>
1108b318:	d8800917 	ldw	r2,36(sp)
1108b31c:	8809883a 	mov	r4,r17
1108b320:	800b883a 	mov	r5,r16
1108b324:	1880022e 	bgeu	r3,r2,1108b330 <__nedf2+0x70>
1108b328:	108bda80 	call	1108bda8 <__fpcmp_parts_d>
1108b32c:	100d883a 	mov	r6,r2
1108b330:	3005883a 	mov	r2,r6
1108b334:	dfc01017 	ldw	ra,64(sp)
1108b338:	dc400f17 	ldw	r17,60(sp)
1108b33c:	dc000e17 	ldw	r16,56(sp)
1108b340:	dec01104 	addi	sp,sp,68
1108b344:	f800283a 	ret

1108b348 <__gtdf2>:
1108b348:	deffef04 	addi	sp,sp,-68
1108b34c:	dc400f15 	stw	r17,60(sp)
1108b350:	dc400404 	addi	r17,sp,16
1108b354:	2005883a 	mov	r2,r4
1108b358:	2807883a 	mov	r3,r5
1108b35c:	dc000e15 	stw	r16,56(sp)
1108b360:	d809883a 	mov	r4,sp
1108b364:	880b883a 	mov	r5,r17
1108b368:	dc000904 	addi	r16,sp,36
1108b36c:	d8c00115 	stw	r3,4(sp)
1108b370:	d8800015 	stw	r2,0(sp)
1108b374:	d9800215 	stw	r6,8(sp)
1108b378:	dfc01015 	stw	ra,64(sp)
1108b37c:	d9c00315 	stw	r7,12(sp)
1108b380:	108bc700 	call	1108bc70 <__unpack_d>
1108b384:	d9000204 	addi	r4,sp,8
1108b388:	800b883a 	mov	r5,r16
1108b38c:	108bc700 	call	1108bc70 <__unpack_d>
1108b390:	d8800417 	ldw	r2,16(sp)
1108b394:	00c00044 	movi	r3,1
1108b398:	01bfffc4 	movi	r6,-1
1108b39c:	1880062e 	bgeu	r3,r2,1108b3b8 <__gtdf2+0x70>
1108b3a0:	d8800917 	ldw	r2,36(sp)
1108b3a4:	8809883a 	mov	r4,r17
1108b3a8:	800b883a 	mov	r5,r16
1108b3ac:	1880022e 	bgeu	r3,r2,1108b3b8 <__gtdf2+0x70>
1108b3b0:	108bda80 	call	1108bda8 <__fpcmp_parts_d>
1108b3b4:	100d883a 	mov	r6,r2
1108b3b8:	3005883a 	mov	r2,r6
1108b3bc:	dfc01017 	ldw	ra,64(sp)
1108b3c0:	dc400f17 	ldw	r17,60(sp)
1108b3c4:	dc000e17 	ldw	r16,56(sp)
1108b3c8:	dec01104 	addi	sp,sp,68
1108b3cc:	f800283a 	ret

1108b3d0 <__gedf2>:
1108b3d0:	deffef04 	addi	sp,sp,-68
1108b3d4:	dc400f15 	stw	r17,60(sp)
1108b3d8:	dc400404 	addi	r17,sp,16
1108b3dc:	2005883a 	mov	r2,r4
1108b3e0:	2807883a 	mov	r3,r5
1108b3e4:	dc000e15 	stw	r16,56(sp)
1108b3e8:	d809883a 	mov	r4,sp
1108b3ec:	880b883a 	mov	r5,r17
1108b3f0:	dc000904 	addi	r16,sp,36
1108b3f4:	d8c00115 	stw	r3,4(sp)
1108b3f8:	d8800015 	stw	r2,0(sp)
1108b3fc:	d9800215 	stw	r6,8(sp)
1108b400:	dfc01015 	stw	ra,64(sp)
1108b404:	d9c00315 	stw	r7,12(sp)
1108b408:	108bc700 	call	1108bc70 <__unpack_d>
1108b40c:	d9000204 	addi	r4,sp,8
1108b410:	800b883a 	mov	r5,r16
1108b414:	108bc700 	call	1108bc70 <__unpack_d>
1108b418:	d8800417 	ldw	r2,16(sp)
1108b41c:	00c00044 	movi	r3,1
1108b420:	01bfffc4 	movi	r6,-1
1108b424:	1880062e 	bgeu	r3,r2,1108b440 <__gedf2+0x70>
1108b428:	d8800917 	ldw	r2,36(sp)
1108b42c:	8809883a 	mov	r4,r17
1108b430:	800b883a 	mov	r5,r16
1108b434:	1880022e 	bgeu	r3,r2,1108b440 <__gedf2+0x70>
1108b438:	108bda80 	call	1108bda8 <__fpcmp_parts_d>
1108b43c:	100d883a 	mov	r6,r2
1108b440:	3005883a 	mov	r2,r6
1108b444:	dfc01017 	ldw	ra,64(sp)
1108b448:	dc400f17 	ldw	r17,60(sp)
1108b44c:	dc000e17 	ldw	r16,56(sp)
1108b450:	dec01104 	addi	sp,sp,68
1108b454:	f800283a 	ret

1108b458 <__ltdf2>:
1108b458:	deffef04 	addi	sp,sp,-68
1108b45c:	dc400f15 	stw	r17,60(sp)
1108b460:	dc400404 	addi	r17,sp,16
1108b464:	2005883a 	mov	r2,r4
1108b468:	2807883a 	mov	r3,r5
1108b46c:	dc000e15 	stw	r16,56(sp)
1108b470:	d809883a 	mov	r4,sp
1108b474:	880b883a 	mov	r5,r17
1108b478:	dc000904 	addi	r16,sp,36
1108b47c:	d8c00115 	stw	r3,4(sp)
1108b480:	d8800015 	stw	r2,0(sp)
1108b484:	d9800215 	stw	r6,8(sp)
1108b488:	dfc01015 	stw	ra,64(sp)
1108b48c:	d9c00315 	stw	r7,12(sp)
1108b490:	108bc700 	call	1108bc70 <__unpack_d>
1108b494:	d9000204 	addi	r4,sp,8
1108b498:	800b883a 	mov	r5,r16
1108b49c:	108bc700 	call	1108bc70 <__unpack_d>
1108b4a0:	d8800417 	ldw	r2,16(sp)
1108b4a4:	00c00044 	movi	r3,1
1108b4a8:	180d883a 	mov	r6,r3
1108b4ac:	1880062e 	bgeu	r3,r2,1108b4c8 <__ltdf2+0x70>
1108b4b0:	d8800917 	ldw	r2,36(sp)
1108b4b4:	8809883a 	mov	r4,r17
1108b4b8:	800b883a 	mov	r5,r16
1108b4bc:	1880022e 	bgeu	r3,r2,1108b4c8 <__ltdf2+0x70>
1108b4c0:	108bda80 	call	1108bda8 <__fpcmp_parts_d>
1108b4c4:	100d883a 	mov	r6,r2
1108b4c8:	3005883a 	mov	r2,r6
1108b4cc:	dfc01017 	ldw	ra,64(sp)
1108b4d0:	dc400f17 	ldw	r17,60(sp)
1108b4d4:	dc000e17 	ldw	r16,56(sp)
1108b4d8:	dec01104 	addi	sp,sp,68
1108b4dc:	f800283a 	ret

1108b4e0 <__floatsidf>:
1108b4e0:	2006d7fa 	srli	r3,r4,31
1108b4e4:	defff604 	addi	sp,sp,-40
1108b4e8:	008000c4 	movi	r2,3
1108b4ec:	dfc00915 	stw	ra,36(sp)
1108b4f0:	dcc00815 	stw	r19,32(sp)
1108b4f4:	dc800715 	stw	r18,28(sp)
1108b4f8:	dc400615 	stw	r17,24(sp)
1108b4fc:	dc000515 	stw	r16,20(sp)
1108b500:	d8800015 	stw	r2,0(sp)
1108b504:	d8c00115 	stw	r3,4(sp)
1108b508:	20000f1e 	bne	r4,zero,1108b548 <__floatsidf+0x68>
1108b50c:	00800084 	movi	r2,2
1108b510:	d8800015 	stw	r2,0(sp)
1108b514:	d809883a 	mov	r4,sp
1108b518:	108b95c0 	call	1108b95c <__pack_d>
1108b51c:	1009883a 	mov	r4,r2
1108b520:	180b883a 	mov	r5,r3
1108b524:	2005883a 	mov	r2,r4
1108b528:	2807883a 	mov	r3,r5
1108b52c:	dfc00917 	ldw	ra,36(sp)
1108b530:	dcc00817 	ldw	r19,32(sp)
1108b534:	dc800717 	ldw	r18,28(sp)
1108b538:	dc400617 	ldw	r17,24(sp)
1108b53c:	dc000517 	ldw	r16,20(sp)
1108b540:	dec00a04 	addi	sp,sp,40
1108b544:	f800283a 	ret
1108b548:	00800f04 	movi	r2,60
1108b54c:	1807003a 	cmpeq	r3,r3,zero
1108b550:	d8800215 	stw	r2,8(sp)
1108b554:	18001126 	beq	r3,zero,1108b59c <__floatsidf+0xbc>
1108b558:	0027883a 	mov	r19,zero
1108b55c:	2025883a 	mov	r18,r4
1108b560:	d9000315 	stw	r4,12(sp)
1108b564:	dcc00415 	stw	r19,16(sp)
1108b568:	108b8dc0 	call	1108b8dc <__clzsi2>
1108b56c:	11000744 	addi	r4,r2,29
1108b570:	013fe80e 	bge	zero,r4,1108b514 <__floatsidf+0x34>
1108b574:	10bfff44 	addi	r2,r2,-3
1108b578:	10000c16 	blt	r2,zero,1108b5ac <__floatsidf+0xcc>
1108b57c:	90a2983a 	sll	r17,r18,r2
1108b580:	0021883a 	mov	r16,zero
1108b584:	d8800217 	ldw	r2,8(sp)
1108b588:	dc400415 	stw	r17,16(sp)
1108b58c:	dc000315 	stw	r16,12(sp)
1108b590:	1105c83a 	sub	r2,r2,r4
1108b594:	d8800215 	stw	r2,8(sp)
1108b598:	003fde06 	br	1108b514 <__floatsidf+0x34>
1108b59c:	00a00034 	movhi	r2,32768
1108b5a0:	20800a26 	beq	r4,r2,1108b5cc <__floatsidf+0xec>
1108b5a4:	0109c83a 	sub	r4,zero,r4
1108b5a8:	003feb06 	br	1108b558 <__floatsidf+0x78>
1108b5ac:	9006d07a 	srli	r3,r18,1
1108b5b0:	008007c4 	movi	r2,31
1108b5b4:	1105c83a 	sub	r2,r2,r4
1108b5b8:	1886d83a 	srl	r3,r3,r2
1108b5bc:	9922983a 	sll	r17,r19,r4
1108b5c0:	9120983a 	sll	r16,r18,r4
1108b5c4:	1c62b03a 	or	r17,r3,r17
1108b5c8:	003fee06 	br	1108b584 <__floatsidf+0xa4>
1108b5cc:	0009883a 	mov	r4,zero
1108b5d0:	01707834 	movhi	r5,49632
1108b5d4:	003fd306 	br	1108b524 <__floatsidf+0x44>

1108b5d8 <__fixdfsi>:
1108b5d8:	defff804 	addi	sp,sp,-32
1108b5dc:	2005883a 	mov	r2,r4
1108b5e0:	2807883a 	mov	r3,r5
1108b5e4:	d809883a 	mov	r4,sp
1108b5e8:	d9400204 	addi	r5,sp,8
1108b5ec:	d8c00115 	stw	r3,4(sp)
1108b5f0:	d8800015 	stw	r2,0(sp)
1108b5f4:	dfc00715 	stw	ra,28(sp)
1108b5f8:	108bc700 	call	1108bc70 <__unpack_d>
1108b5fc:	d8c00217 	ldw	r3,8(sp)
1108b600:	00800084 	movi	r2,2
1108b604:	1880051e 	bne	r3,r2,1108b61c <__fixdfsi+0x44>
1108b608:	0007883a 	mov	r3,zero
1108b60c:	1805883a 	mov	r2,r3
1108b610:	dfc00717 	ldw	ra,28(sp)
1108b614:	dec00804 	addi	sp,sp,32
1108b618:	f800283a 	ret
1108b61c:	00800044 	movi	r2,1
1108b620:	10fff92e 	bgeu	r2,r3,1108b608 <__fixdfsi+0x30>
1108b624:	00800104 	movi	r2,4
1108b628:	18800426 	beq	r3,r2,1108b63c <__fixdfsi+0x64>
1108b62c:	d8c00417 	ldw	r3,16(sp)
1108b630:	183ff516 	blt	r3,zero,1108b608 <__fixdfsi+0x30>
1108b634:	00800784 	movi	r2,30
1108b638:	10c0080e 	bge	r2,r3,1108b65c <__fixdfsi+0x84>
1108b63c:	d8800317 	ldw	r2,12(sp)
1108b640:	1000121e 	bne	r2,zero,1108b68c <__fixdfsi+0xb4>
1108b644:	00e00034 	movhi	r3,32768
1108b648:	18ffffc4 	addi	r3,r3,-1
1108b64c:	1805883a 	mov	r2,r3
1108b650:	dfc00717 	ldw	ra,28(sp)
1108b654:	dec00804 	addi	sp,sp,32
1108b658:	f800283a 	ret
1108b65c:	00800f04 	movi	r2,60
1108b660:	10d1c83a 	sub	r8,r2,r3
1108b664:	40bff804 	addi	r2,r8,-32
1108b668:	d9800517 	ldw	r6,20(sp)
1108b66c:	d9c00617 	ldw	r7,24(sp)
1108b670:	10000816 	blt	r2,zero,1108b694 <__fixdfsi+0xbc>
1108b674:	3888d83a 	srl	r4,r7,r2
1108b678:	d8800317 	ldw	r2,12(sp)
1108b67c:	2007883a 	mov	r3,r4
1108b680:	103fe226 	beq	r2,zero,1108b60c <__fixdfsi+0x34>
1108b684:	0107c83a 	sub	r3,zero,r4
1108b688:	003fe006 	br	1108b60c <__fixdfsi+0x34>
1108b68c:	00e00034 	movhi	r3,32768
1108b690:	003fde06 	br	1108b60c <__fixdfsi+0x34>
1108b694:	39c7883a 	add	r3,r7,r7
1108b698:	008007c4 	movi	r2,31
1108b69c:	1205c83a 	sub	r2,r2,r8
1108b6a0:	1886983a 	sll	r3,r3,r2
1108b6a4:	3208d83a 	srl	r4,r6,r8
1108b6a8:	1908b03a 	or	r4,r3,r4
1108b6ac:	003ff206 	br	1108b678 <__fixdfsi+0xa0>

1108b6b0 <__floatunsidf>:
1108b6b0:	defff204 	addi	sp,sp,-56
1108b6b4:	dfc00d15 	stw	ra,52(sp)
1108b6b8:	ddc00c15 	stw	r23,48(sp)
1108b6bc:	dd800b15 	stw	r22,44(sp)
1108b6c0:	dd400a15 	stw	r21,40(sp)
1108b6c4:	dd000915 	stw	r20,36(sp)
1108b6c8:	dcc00815 	stw	r19,32(sp)
1108b6cc:	dc800715 	stw	r18,28(sp)
1108b6d0:	dc400615 	stw	r17,24(sp)
1108b6d4:	dc000515 	stw	r16,20(sp)
1108b6d8:	d8000115 	stw	zero,4(sp)
1108b6dc:	20000f1e 	bne	r4,zero,1108b71c <__floatunsidf+0x6c>
1108b6e0:	00800084 	movi	r2,2
1108b6e4:	d8800015 	stw	r2,0(sp)
1108b6e8:	d809883a 	mov	r4,sp
1108b6ec:	108b95c0 	call	1108b95c <__pack_d>
1108b6f0:	dfc00d17 	ldw	ra,52(sp)
1108b6f4:	ddc00c17 	ldw	r23,48(sp)
1108b6f8:	dd800b17 	ldw	r22,44(sp)
1108b6fc:	dd400a17 	ldw	r21,40(sp)
1108b700:	dd000917 	ldw	r20,36(sp)
1108b704:	dcc00817 	ldw	r19,32(sp)
1108b708:	dc800717 	ldw	r18,28(sp)
1108b70c:	dc400617 	ldw	r17,24(sp)
1108b710:	dc000517 	ldw	r16,20(sp)
1108b714:	dec00e04 	addi	sp,sp,56
1108b718:	f800283a 	ret
1108b71c:	008000c4 	movi	r2,3
1108b720:	00c00f04 	movi	r3,60
1108b724:	002f883a 	mov	r23,zero
1108b728:	202d883a 	mov	r22,r4
1108b72c:	d8800015 	stw	r2,0(sp)
1108b730:	d8c00215 	stw	r3,8(sp)
1108b734:	d9000315 	stw	r4,12(sp)
1108b738:	ddc00415 	stw	r23,16(sp)
1108b73c:	108b8dc0 	call	1108b8dc <__clzsi2>
1108b740:	12400744 	addi	r9,r2,29
1108b744:	48000b16 	blt	r9,zero,1108b774 <__floatunsidf+0xc4>
1108b748:	483fe726 	beq	r9,zero,1108b6e8 <__floatunsidf+0x38>
1108b74c:	10bfff44 	addi	r2,r2,-3
1108b750:	10002e16 	blt	r2,zero,1108b80c <__floatunsidf+0x15c>
1108b754:	b0a2983a 	sll	r17,r22,r2
1108b758:	0021883a 	mov	r16,zero
1108b75c:	d8800217 	ldw	r2,8(sp)
1108b760:	dc400415 	stw	r17,16(sp)
1108b764:	dc000315 	stw	r16,12(sp)
1108b768:	1245c83a 	sub	r2,r2,r9
1108b76c:	d8800215 	stw	r2,8(sp)
1108b770:	003fdd06 	br	1108b6e8 <__floatunsidf+0x38>
1108b774:	0255c83a 	sub	r10,zero,r9
1108b778:	51bff804 	addi	r6,r10,-32
1108b77c:	30001b16 	blt	r6,zero,1108b7ec <__floatunsidf+0x13c>
1108b780:	b9a8d83a 	srl	r20,r23,r6
1108b784:	002b883a 	mov	r21,zero
1108b788:	000f883a 	mov	r7,zero
1108b78c:	01000044 	movi	r4,1
1108b790:	0011883a 	mov	r8,zero
1108b794:	30002516 	blt	r6,zero,1108b82c <__floatunsidf+0x17c>
1108b798:	21a6983a 	sll	r19,r4,r6
1108b79c:	0025883a 	mov	r18,zero
1108b7a0:	00bfffc4 	movi	r2,-1
1108b7a4:	9089883a 	add	r4,r18,r2
1108b7a8:	988b883a 	add	r5,r19,r2
1108b7ac:	248d803a 	cmpltu	r6,r4,r18
1108b7b0:	314b883a 	add	r5,r6,r5
1108b7b4:	b104703a 	and	r2,r22,r4
1108b7b8:	b946703a 	and	r3,r23,r5
1108b7bc:	10c4b03a 	or	r2,r2,r3
1108b7c0:	10000226 	beq	r2,zero,1108b7cc <__floatunsidf+0x11c>
1108b7c4:	01c00044 	movi	r7,1
1108b7c8:	0011883a 	mov	r8,zero
1108b7cc:	d9000217 	ldw	r4,8(sp)
1108b7d0:	a1c4b03a 	or	r2,r20,r7
1108b7d4:	aa06b03a 	or	r3,r21,r8
1108b7d8:	2249c83a 	sub	r4,r4,r9
1108b7dc:	d8c00415 	stw	r3,16(sp)
1108b7e0:	d9000215 	stw	r4,8(sp)
1108b7e4:	d8800315 	stw	r2,12(sp)
1108b7e8:	003fbf06 	br	1108b6e8 <__floatunsidf+0x38>
1108b7ec:	bdc7883a 	add	r3,r23,r23
1108b7f0:	008007c4 	movi	r2,31
1108b7f4:	1285c83a 	sub	r2,r2,r10
1108b7f8:	1886983a 	sll	r3,r3,r2
1108b7fc:	b2a8d83a 	srl	r20,r22,r10
1108b800:	baaad83a 	srl	r21,r23,r10
1108b804:	1d28b03a 	or	r20,r3,r20
1108b808:	003fdf06 	br	1108b788 <__floatunsidf+0xd8>
1108b80c:	b006d07a 	srli	r3,r22,1
1108b810:	008007c4 	movi	r2,31
1108b814:	1245c83a 	sub	r2,r2,r9
1108b818:	1886d83a 	srl	r3,r3,r2
1108b81c:	ba62983a 	sll	r17,r23,r9
1108b820:	b260983a 	sll	r16,r22,r9
1108b824:	1c62b03a 	or	r17,r3,r17
1108b828:	003fcc06 	br	1108b75c <__floatunsidf+0xac>
1108b82c:	2006d07a 	srli	r3,r4,1
1108b830:	008007c4 	movi	r2,31
1108b834:	1285c83a 	sub	r2,r2,r10
1108b838:	18a6d83a 	srl	r19,r3,r2
1108b83c:	22a4983a 	sll	r18,r4,r10
1108b840:	003fd706 	br	1108b7a0 <__floatunsidf+0xf0>

1108b844 <__muldi3>:
1108b844:	2011883a 	mov	r8,r4
1108b848:	427fffcc 	andi	r9,r8,65535
1108b84c:	4018d43a 	srli	r12,r8,16
1108b850:	32bfffcc 	andi	r10,r6,65535
1108b854:	3016d43a 	srli	r11,r6,16
1108b858:	4a85383a 	mul	r2,r9,r10
1108b85c:	6295383a 	mul	r10,r12,r10
1108b860:	4ad3383a 	mul	r9,r9,r11
1108b864:	113fffcc 	andi	r4,r2,65535
1108b868:	1004d43a 	srli	r2,r2,16
1108b86c:	4a93883a 	add	r9,r9,r10
1108b870:	3807883a 	mov	r3,r7
1108b874:	1245883a 	add	r2,r2,r9
1108b878:	280f883a 	mov	r7,r5
1108b87c:	180b883a 	mov	r5,r3
1108b880:	1006943a 	slli	r3,r2,16
1108b884:	defffd04 	addi	sp,sp,-12
1108b888:	dc800215 	stw	r18,8(sp)
1108b88c:	1907883a 	add	r3,r3,r4
1108b890:	dc400115 	stw	r17,4(sp)
1108b894:	dc000015 	stw	r16,0(sp)
1108b898:	4165383a 	mul	r18,r8,r5
1108b89c:	31e3383a 	mul	r17,r6,r7
1108b8a0:	1012d43a 	srli	r9,r2,16
1108b8a4:	62d9383a 	mul	r12,r12,r11
1108b8a8:	181f883a 	mov	r15,r3
1108b8ac:	1280022e 	bgeu	r2,r10,1108b8b8 <__muldi3+0x74>
1108b8b0:	00800074 	movhi	r2,1
1108b8b4:	6099883a 	add	r12,r12,r2
1108b8b8:	624d883a 	add	r6,r12,r9
1108b8bc:	9187883a 	add	r3,r18,r6
1108b8c0:	88c7883a 	add	r3,r17,r3
1108b8c4:	7805883a 	mov	r2,r15
1108b8c8:	dc800217 	ldw	r18,8(sp)
1108b8cc:	dc400117 	ldw	r17,4(sp)
1108b8d0:	dc000017 	ldw	r16,0(sp)
1108b8d4:	dec00304 	addi	sp,sp,12
1108b8d8:	f800283a 	ret

1108b8dc <__clzsi2>:
1108b8dc:	00bfffd4 	movui	r2,65535
1108b8e0:	11000e36 	bltu	r2,r4,1108b91c <__clzsi2+0x40>
1108b8e4:	00803fc4 	movi	r2,255
1108b8e8:	01400204 	movi	r5,8
1108b8ec:	0007883a 	mov	r3,zero
1108b8f0:	11001036 	bltu	r2,r4,1108b934 <__clzsi2+0x58>
1108b8f4:	000b883a 	mov	r5,zero
1108b8f8:	20c6d83a 	srl	r3,r4,r3
1108b8fc:	00844274 	movhi	r2,4361
1108b900:	10bdea04 	addi	r2,r2,-2136
1108b904:	1887883a 	add	r3,r3,r2
1108b908:	18800003 	ldbu	r2,0(r3)
1108b90c:	00c00804 	movi	r3,32
1108b910:	2885883a 	add	r2,r5,r2
1108b914:	1885c83a 	sub	r2,r3,r2
1108b918:	f800283a 	ret
1108b91c:	01400404 	movi	r5,16
1108b920:	00804034 	movhi	r2,256
1108b924:	10bfffc4 	addi	r2,r2,-1
1108b928:	2807883a 	mov	r3,r5
1108b92c:	113ff22e 	bgeu	r2,r4,1108b8f8 <__clzsi2+0x1c>
1108b930:	01400604 	movi	r5,24
1108b934:	2807883a 	mov	r3,r5
1108b938:	20c6d83a 	srl	r3,r4,r3
1108b93c:	00844274 	movhi	r2,4361
1108b940:	10bdea04 	addi	r2,r2,-2136
1108b944:	1887883a 	add	r3,r3,r2
1108b948:	18800003 	ldbu	r2,0(r3)
1108b94c:	00c00804 	movi	r3,32
1108b950:	2885883a 	add	r2,r5,r2
1108b954:	1885c83a 	sub	r2,r3,r2
1108b958:	f800283a 	ret

1108b95c <__pack_d>:
1108b95c:	20c00017 	ldw	r3,0(r4)
1108b960:	defffd04 	addi	sp,sp,-12
1108b964:	dc000015 	stw	r16,0(sp)
1108b968:	dc800215 	stw	r18,8(sp)
1108b96c:	dc400115 	stw	r17,4(sp)
1108b970:	00800044 	movi	r2,1
1108b974:	22000317 	ldw	r8,12(r4)
1108b978:	001f883a 	mov	r15,zero
1108b97c:	22400417 	ldw	r9,16(r4)
1108b980:	24000117 	ldw	r16,4(r4)
1108b984:	10c0552e 	bgeu	r2,r3,1108badc <__pack_d+0x180>
1108b988:	00800104 	movi	r2,4
1108b98c:	18804f26 	beq	r3,r2,1108bacc <__pack_d+0x170>
1108b990:	00800084 	movi	r2,2
1108b994:	18800226 	beq	r3,r2,1108b9a0 <__pack_d+0x44>
1108b998:	4244b03a 	or	r2,r8,r9
1108b99c:	10001a1e 	bne	r2,zero,1108ba08 <__pack_d+0xac>
1108b9a0:	000d883a 	mov	r6,zero
1108b9a4:	000f883a 	mov	r7,zero
1108b9a8:	0011883a 	mov	r8,zero
1108b9ac:	00800434 	movhi	r2,16
1108b9b0:	10bfffc4 	addi	r2,r2,-1
1108b9b4:	301d883a 	mov	r14,r6
1108b9b8:	3884703a 	and	r2,r7,r2
1108b9bc:	400a953a 	slli	r5,r8,20
1108b9c0:	79bffc2c 	andhi	r6,r15,65520
1108b9c4:	308cb03a 	or	r6,r6,r2
1108b9c8:	00e00434 	movhi	r3,32784
1108b9cc:	18ffffc4 	addi	r3,r3,-1
1108b9d0:	800497fa 	slli	r2,r16,31
1108b9d4:	30c6703a 	and	r3,r6,r3
1108b9d8:	1946b03a 	or	r3,r3,r5
1108b9dc:	01600034 	movhi	r5,32768
1108b9e0:	297fffc4 	addi	r5,r5,-1
1108b9e4:	194a703a 	and	r5,r3,r5
1108b9e8:	288ab03a 	or	r5,r5,r2
1108b9ec:	2807883a 	mov	r3,r5
1108b9f0:	7005883a 	mov	r2,r14
1108b9f4:	dc800217 	ldw	r18,8(sp)
1108b9f8:	dc400117 	ldw	r17,4(sp)
1108b9fc:	dc000017 	ldw	r16,0(sp)
1108ba00:	dec00304 	addi	sp,sp,12
1108ba04:	f800283a 	ret
1108ba08:	21000217 	ldw	r4,8(r4)
1108ba0c:	00bf0084 	movi	r2,-1022
1108ba10:	20803f16 	blt	r4,r2,1108bb10 <__pack_d+0x1b4>
1108ba14:	0080ffc4 	movi	r2,1023
1108ba18:	11002c16 	blt	r2,r4,1108bacc <__pack_d+0x170>
1108ba1c:	00803fc4 	movi	r2,255
1108ba20:	408c703a 	and	r6,r8,r2
1108ba24:	00802004 	movi	r2,128
1108ba28:	0007883a 	mov	r3,zero
1108ba2c:	000f883a 	mov	r7,zero
1108ba30:	2280ffc4 	addi	r10,r4,1023
1108ba34:	30801e26 	beq	r6,r2,1108bab0 <__pack_d+0x154>
1108ba38:	00801fc4 	movi	r2,127
1108ba3c:	4089883a 	add	r4,r8,r2
1108ba40:	220d803a 	cmpltu	r6,r4,r8
1108ba44:	324d883a 	add	r6,r6,r9
1108ba48:	2011883a 	mov	r8,r4
1108ba4c:	3013883a 	mov	r9,r6
1108ba50:	00880034 	movhi	r2,8192
1108ba54:	10bfffc4 	addi	r2,r2,-1
1108ba58:	12400d36 	bltu	r2,r9,1108ba90 <__pack_d+0x134>
1108ba5c:	4804963a 	slli	r2,r9,24
1108ba60:	400cd23a 	srli	r6,r8,8
1108ba64:	480ed23a 	srli	r7,r9,8
1108ba68:	013fffc4 	movi	r4,-1
1108ba6c:	118cb03a 	or	r6,r2,r6
1108ba70:	01400434 	movhi	r5,16
1108ba74:	297fffc4 	addi	r5,r5,-1
1108ba78:	3104703a 	and	r2,r6,r4
1108ba7c:	3946703a 	and	r3,r7,r5
1108ba80:	5201ffcc 	andi	r8,r10,2047
1108ba84:	100d883a 	mov	r6,r2
1108ba88:	180f883a 	mov	r7,r3
1108ba8c:	003fc706 	br	1108b9ac <__pack_d+0x50>
1108ba90:	480897fa 	slli	r4,r9,31
1108ba94:	4004d07a 	srli	r2,r8,1
1108ba98:	4806d07a 	srli	r3,r9,1
1108ba9c:	52800044 	addi	r10,r10,1
1108baa0:	2084b03a 	or	r2,r4,r2
1108baa4:	1011883a 	mov	r8,r2
1108baa8:	1813883a 	mov	r9,r3
1108baac:	003feb06 	br	1108ba5c <__pack_d+0x100>
1108bab0:	383fe11e 	bne	r7,zero,1108ba38 <__pack_d+0xdc>
1108bab4:	01004004 	movi	r4,256
1108bab8:	4104703a 	and	r2,r8,r4
1108babc:	10c4b03a 	or	r2,r2,r3
1108bac0:	103fe326 	beq	r2,zero,1108ba50 <__pack_d+0xf4>
1108bac4:	3005883a 	mov	r2,r6
1108bac8:	003fdc06 	br	1108ba3c <__pack_d+0xe0>
1108bacc:	000d883a 	mov	r6,zero
1108bad0:	000f883a 	mov	r7,zero
1108bad4:	0201ffc4 	movi	r8,2047
1108bad8:	003fb406 	br	1108b9ac <__pack_d+0x50>
1108badc:	0005883a 	mov	r2,zero
1108bae0:	00c00234 	movhi	r3,8
1108bae4:	408cb03a 	or	r6,r8,r2
1108bae8:	48ceb03a 	or	r7,r9,r3
1108baec:	013fffc4 	movi	r4,-1
1108baf0:	01400434 	movhi	r5,16
1108baf4:	297fffc4 	addi	r5,r5,-1
1108baf8:	3104703a 	and	r2,r6,r4
1108bafc:	3946703a 	and	r3,r7,r5
1108bb00:	100d883a 	mov	r6,r2
1108bb04:	180f883a 	mov	r7,r3
1108bb08:	0201ffc4 	movi	r8,2047
1108bb0c:	003fa706 	br	1108b9ac <__pack_d+0x50>
1108bb10:	1109c83a 	sub	r4,r2,r4
1108bb14:	00800e04 	movi	r2,56
1108bb18:	11004316 	blt	r2,r4,1108bc28 <__pack_d+0x2cc>
1108bb1c:	21fff804 	addi	r7,r4,-32
1108bb20:	38004516 	blt	r7,zero,1108bc38 <__pack_d+0x2dc>
1108bb24:	49d8d83a 	srl	r12,r9,r7
1108bb28:	001b883a 	mov	r13,zero
1108bb2c:	0023883a 	mov	r17,zero
1108bb30:	01400044 	movi	r5,1
1108bb34:	0025883a 	mov	r18,zero
1108bb38:	38004716 	blt	r7,zero,1108bc58 <__pack_d+0x2fc>
1108bb3c:	29d6983a 	sll	r11,r5,r7
1108bb40:	0015883a 	mov	r10,zero
1108bb44:	00bfffc4 	movi	r2,-1
1108bb48:	5089883a 	add	r4,r10,r2
1108bb4c:	588b883a 	add	r5,r11,r2
1108bb50:	228d803a 	cmpltu	r6,r4,r10
1108bb54:	314b883a 	add	r5,r6,r5
1108bb58:	4104703a 	and	r2,r8,r4
1108bb5c:	4946703a 	and	r3,r9,r5
1108bb60:	10c4b03a 	or	r2,r2,r3
1108bb64:	10000226 	beq	r2,zero,1108bb70 <__pack_d+0x214>
1108bb68:	04400044 	movi	r17,1
1108bb6c:	0025883a 	mov	r18,zero
1108bb70:	00803fc4 	movi	r2,255
1108bb74:	644eb03a 	or	r7,r12,r17
1108bb78:	3892703a 	and	r9,r7,r2
1108bb7c:	00802004 	movi	r2,128
1108bb80:	6c90b03a 	or	r8,r13,r18
1108bb84:	0015883a 	mov	r10,zero
1108bb88:	48801626 	beq	r9,r2,1108bbe4 <__pack_d+0x288>
1108bb8c:	01001fc4 	movi	r4,127
1108bb90:	3905883a 	add	r2,r7,r4
1108bb94:	11cd803a 	cmpltu	r6,r2,r7
1108bb98:	320d883a 	add	r6,r6,r8
1108bb9c:	100f883a 	mov	r7,r2
1108bba0:	00840034 	movhi	r2,4096
1108bba4:	10bfffc4 	addi	r2,r2,-1
1108bba8:	3011883a 	mov	r8,r6
1108bbac:	0007883a 	mov	r3,zero
1108bbb0:	11801b36 	bltu	r2,r6,1108bc20 <__pack_d+0x2c4>
1108bbb4:	4004963a 	slli	r2,r8,24
1108bbb8:	3808d23a 	srli	r4,r7,8
1108bbbc:	400ad23a 	srli	r5,r8,8
1108bbc0:	1813883a 	mov	r9,r3
1108bbc4:	1108b03a 	or	r4,r2,r4
1108bbc8:	00bfffc4 	movi	r2,-1
1108bbcc:	00c00434 	movhi	r3,16
1108bbd0:	18ffffc4 	addi	r3,r3,-1
1108bbd4:	208c703a 	and	r6,r4,r2
1108bbd8:	28ce703a 	and	r7,r5,r3
1108bbdc:	4a01ffcc 	andi	r8,r9,2047
1108bbe0:	003f7206 	br	1108b9ac <__pack_d+0x50>
1108bbe4:	503fe91e 	bne	r10,zero,1108bb8c <__pack_d+0x230>
1108bbe8:	01004004 	movi	r4,256
1108bbec:	3904703a 	and	r2,r7,r4
1108bbf0:	0007883a 	mov	r3,zero
1108bbf4:	10c4b03a 	or	r2,r2,r3
1108bbf8:	10000626 	beq	r2,zero,1108bc14 <__pack_d+0x2b8>
1108bbfc:	3a45883a 	add	r2,r7,r9
1108bc00:	11cd803a 	cmpltu	r6,r2,r7
1108bc04:	320d883a 	add	r6,r6,r8
1108bc08:	100f883a 	mov	r7,r2
1108bc0c:	3011883a 	mov	r8,r6
1108bc10:	0007883a 	mov	r3,zero
1108bc14:	00840034 	movhi	r2,4096
1108bc18:	10bfffc4 	addi	r2,r2,-1
1108bc1c:	123fe52e 	bgeu	r2,r8,1108bbb4 <__pack_d+0x258>
1108bc20:	00c00044 	movi	r3,1
1108bc24:	003fe306 	br	1108bbb4 <__pack_d+0x258>
1108bc28:	0009883a 	mov	r4,zero
1108bc2c:	0013883a 	mov	r9,zero
1108bc30:	000b883a 	mov	r5,zero
1108bc34:	003fe406 	br	1108bbc8 <__pack_d+0x26c>
1108bc38:	4a47883a 	add	r3,r9,r9
1108bc3c:	008007c4 	movi	r2,31
1108bc40:	1105c83a 	sub	r2,r2,r4
1108bc44:	1886983a 	sll	r3,r3,r2
1108bc48:	4118d83a 	srl	r12,r8,r4
1108bc4c:	491ad83a 	srl	r13,r9,r4
1108bc50:	1b18b03a 	or	r12,r3,r12
1108bc54:	003fb506 	br	1108bb2c <__pack_d+0x1d0>
1108bc58:	2806d07a 	srli	r3,r5,1
1108bc5c:	008007c4 	movi	r2,31
1108bc60:	1105c83a 	sub	r2,r2,r4
1108bc64:	1896d83a 	srl	r11,r3,r2
1108bc68:	2914983a 	sll	r10,r5,r4
1108bc6c:	003fb506 	br	1108bb44 <__pack_d+0x1e8>

1108bc70 <__unpack_d>:
1108bc70:	20c00117 	ldw	r3,4(r4)
1108bc74:	22400017 	ldw	r9,0(r4)
1108bc78:	00800434 	movhi	r2,16
1108bc7c:	10bfffc4 	addi	r2,r2,-1
1108bc80:	1808d53a 	srli	r4,r3,20
1108bc84:	180cd7fa 	srli	r6,r3,31
1108bc88:	1894703a 	and	r10,r3,r2
1108bc8c:	2201ffcc 	andi	r8,r4,2047
1108bc90:	281b883a 	mov	r13,r5
1108bc94:	4817883a 	mov	r11,r9
1108bc98:	29800115 	stw	r6,4(r5)
1108bc9c:	5019883a 	mov	r12,r10
1108bca0:	40001e1e 	bne	r8,zero,1108bd1c <__unpack_d+0xac>
1108bca4:	4a84b03a 	or	r2,r9,r10
1108bca8:	10001926 	beq	r2,zero,1108bd10 <__unpack_d+0xa0>
1108bcac:	4804d63a 	srli	r2,r9,24
1108bcb0:	500c923a 	slli	r6,r10,8
1108bcb4:	013f0084 	movi	r4,-1022
1108bcb8:	00c40034 	movhi	r3,4096
1108bcbc:	18ffffc4 	addi	r3,r3,-1
1108bcc0:	118cb03a 	or	r6,r2,r6
1108bcc4:	008000c4 	movi	r2,3
1108bcc8:	480a923a 	slli	r5,r9,8
1108bccc:	68800015 	stw	r2,0(r13)
1108bcd0:	69000215 	stw	r4,8(r13)
1108bcd4:	19800b36 	bltu	r3,r6,1108bd04 <__unpack_d+0x94>
1108bcd8:	200f883a 	mov	r7,r4
1108bcdc:	1811883a 	mov	r8,r3
1108bce0:	2945883a 	add	r2,r5,r5
1108bce4:	1149803a 	cmpltu	r4,r2,r5
1108bce8:	3187883a 	add	r3,r6,r6
1108bcec:	20c9883a 	add	r4,r4,r3
1108bcf0:	100b883a 	mov	r5,r2
1108bcf4:	200d883a 	mov	r6,r4
1108bcf8:	39ffffc4 	addi	r7,r7,-1
1108bcfc:	413ff82e 	bgeu	r8,r4,1108bce0 <__unpack_d+0x70>
1108bd00:	69c00215 	stw	r7,8(r13)
1108bd04:	69800415 	stw	r6,16(r13)
1108bd08:	69400315 	stw	r5,12(r13)
1108bd0c:	f800283a 	ret
1108bd10:	00800084 	movi	r2,2
1108bd14:	28800015 	stw	r2,0(r5)
1108bd18:	f800283a 	ret
1108bd1c:	0081ffc4 	movi	r2,2047
1108bd20:	40800f26 	beq	r8,r2,1108bd60 <__unpack_d+0xf0>
1108bd24:	480cd63a 	srli	r6,r9,24
1108bd28:	5006923a 	slli	r3,r10,8
1108bd2c:	4804923a 	slli	r2,r9,8
1108bd30:	0009883a 	mov	r4,zero
1108bd34:	30c6b03a 	or	r3,r6,r3
1108bd38:	01440034 	movhi	r5,4096
1108bd3c:	110cb03a 	or	r6,r2,r4
1108bd40:	423f0044 	addi	r8,r8,-1023
1108bd44:	194eb03a 	or	r7,r3,r5
1108bd48:	008000c4 	movi	r2,3
1108bd4c:	69c00415 	stw	r7,16(r13)
1108bd50:	6a000215 	stw	r8,8(r13)
1108bd54:	68800015 	stw	r2,0(r13)
1108bd58:	69800315 	stw	r6,12(r13)
1108bd5c:	f800283a 	ret
1108bd60:	4a84b03a 	or	r2,r9,r10
1108bd64:	1000031e 	bne	r2,zero,1108bd74 <__unpack_d+0x104>
1108bd68:	00800104 	movi	r2,4
1108bd6c:	28800015 	stw	r2,0(r5)
1108bd70:	f800283a 	ret
1108bd74:	0009883a 	mov	r4,zero
1108bd78:	01400234 	movhi	r5,8
1108bd7c:	4904703a 	and	r2,r9,r4
1108bd80:	5146703a 	and	r3,r10,r5
1108bd84:	10c4b03a 	or	r2,r2,r3
1108bd88:	10000526 	beq	r2,zero,1108bda0 <__unpack_d+0x130>
1108bd8c:	00800044 	movi	r2,1
1108bd90:	68800015 	stw	r2,0(r13)
1108bd94:	6b000415 	stw	r12,16(r13)
1108bd98:	6ac00315 	stw	r11,12(r13)
1108bd9c:	f800283a 	ret
1108bda0:	68000015 	stw	zero,0(r13)
1108bda4:	003ffb06 	br	1108bd94 <__unpack_d+0x124>

1108bda8 <__fpcmp_parts_d>:
1108bda8:	21800017 	ldw	r6,0(r4)
1108bdac:	00c00044 	movi	r3,1
1108bdb0:	19800a2e 	bgeu	r3,r6,1108bddc <__fpcmp_parts_d+0x34>
1108bdb4:	28800017 	ldw	r2,0(r5)
1108bdb8:	1880082e 	bgeu	r3,r2,1108bddc <__fpcmp_parts_d+0x34>
1108bdbc:	00c00104 	movi	r3,4
1108bdc0:	30c02626 	beq	r6,r3,1108be5c <__fpcmp_parts_d+0xb4>
1108bdc4:	10c02226 	beq	r2,r3,1108be50 <__fpcmp_parts_d+0xa8>
1108bdc8:	00c00084 	movi	r3,2
1108bdcc:	30c00526 	beq	r6,r3,1108bde4 <__fpcmp_parts_d+0x3c>
1108bdd0:	10c0071e 	bne	r2,r3,1108bdf0 <__fpcmp_parts_d+0x48>
1108bdd4:	20800117 	ldw	r2,4(r4)
1108bdd8:	1000091e 	bne	r2,zero,1108be00 <__fpcmp_parts_d+0x58>
1108bddc:	00800044 	movi	r2,1
1108bde0:	f800283a 	ret
1108bde4:	10c01a1e 	bne	r2,r3,1108be50 <__fpcmp_parts_d+0xa8>
1108bde8:	0005883a 	mov	r2,zero
1108bdec:	f800283a 	ret
1108bdf0:	22000117 	ldw	r8,4(r4)
1108bdf4:	28800117 	ldw	r2,4(r5)
1108bdf8:	40800326 	beq	r8,r2,1108be08 <__fpcmp_parts_d+0x60>
1108bdfc:	403ff726 	beq	r8,zero,1108bddc <__fpcmp_parts_d+0x34>
1108be00:	00bfffc4 	movi	r2,-1
1108be04:	f800283a 	ret
1108be08:	20c00217 	ldw	r3,8(r4)
1108be0c:	28800217 	ldw	r2,8(r5)
1108be10:	10fffa16 	blt	r2,r3,1108bdfc <__fpcmp_parts_d+0x54>
1108be14:	18800916 	blt	r3,r2,1108be3c <__fpcmp_parts_d+0x94>
1108be18:	21c00417 	ldw	r7,16(r4)
1108be1c:	28c00417 	ldw	r3,16(r5)
1108be20:	21800317 	ldw	r6,12(r4)
1108be24:	28800317 	ldw	r2,12(r5)
1108be28:	19fff436 	bltu	r3,r7,1108bdfc <__fpcmp_parts_d+0x54>
1108be2c:	38c00526 	beq	r7,r3,1108be44 <__fpcmp_parts_d+0x9c>
1108be30:	38c00236 	bltu	r7,r3,1108be3c <__fpcmp_parts_d+0x94>
1108be34:	19ffec1e 	bne	r3,r7,1108bde8 <__fpcmp_parts_d+0x40>
1108be38:	30bfeb2e 	bgeu	r6,r2,1108bde8 <__fpcmp_parts_d+0x40>
1108be3c:	403fe71e 	bne	r8,zero,1108bddc <__fpcmp_parts_d+0x34>
1108be40:	003fef06 	br	1108be00 <__fpcmp_parts_d+0x58>
1108be44:	11bffa2e 	bgeu	r2,r6,1108be30 <__fpcmp_parts_d+0x88>
1108be48:	403fe426 	beq	r8,zero,1108bddc <__fpcmp_parts_d+0x34>
1108be4c:	003fec06 	br	1108be00 <__fpcmp_parts_d+0x58>
1108be50:	28800117 	ldw	r2,4(r5)
1108be54:	103fe11e 	bne	r2,zero,1108bddc <__fpcmp_parts_d+0x34>
1108be58:	003fe906 	br	1108be00 <__fpcmp_parts_d+0x58>
1108be5c:	11bfdd1e 	bne	r2,r6,1108bdd4 <__fpcmp_parts_d+0x2c>
1108be60:	28c00117 	ldw	r3,4(r5)
1108be64:	20800117 	ldw	r2,4(r4)
1108be68:	1885c83a 	sub	r2,r3,r2
1108be6c:	f800283a 	ret

1108be70 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1108be70:	defff804 	addi	sp,sp,-32
1108be74:	dfc00715 	stw	ra,28(sp)
1108be78:	df000615 	stw	fp,24(sp)
1108be7c:	df000604 	addi	fp,sp,24
1108be80:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1108be84:	e0bffc17 	ldw	r2,-16(fp)
1108be88:	1004803a 	cmplt	r2,r2,zero
1108be8c:	1000081e 	bne	r2,zero,1108beb0 <close+0x40>
1108be90:	e0bffc17 	ldw	r2,-16(fp)
1108be94:	10800324 	muli	r2,r2,12
1108be98:	1007883a 	mov	r3,r2
1108be9c:	00844274 	movhi	r2,4361
1108bea0:	10804404 	addi	r2,r2,272
1108bea4:	1887883a 	add	r3,r3,r2
1108bea8:	e0ffff15 	stw	r3,-4(fp)
1108beac:	00000106 	br	1108beb4 <close+0x44>
1108beb0:	e03fff15 	stw	zero,-4(fp)
1108beb4:	e0bfff17 	ldw	r2,-4(fp)
1108beb8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
1108bebc:	e0bffb17 	ldw	r2,-20(fp)
1108bec0:	1005003a 	cmpeq	r2,r2,zero
1108bec4:	10001d1e 	bne	r2,zero,1108bf3c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1108bec8:	e0bffb17 	ldw	r2,-20(fp)
1108becc:	10800017 	ldw	r2,0(r2)
1108bed0:	10800417 	ldw	r2,16(r2)
1108bed4:	1005003a 	cmpeq	r2,r2,zero
1108bed8:	1000071e 	bne	r2,zero,1108bef8 <close+0x88>
1108bedc:	e0bffb17 	ldw	r2,-20(fp)
1108bee0:	10800017 	ldw	r2,0(r2)
1108bee4:	10800417 	ldw	r2,16(r2)
1108bee8:	e13ffb17 	ldw	r4,-20(fp)
1108beec:	103ee83a 	callr	r2
1108bef0:	e0bffe15 	stw	r2,-8(fp)
1108bef4:	00000106 	br	1108befc <close+0x8c>
1108bef8:	e03ffe15 	stw	zero,-8(fp)
1108befc:	e0bffe17 	ldw	r2,-8(fp)
1108bf00:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1108bf04:	e13ffc17 	ldw	r4,-16(fp)
1108bf08:	108c8740 	call	1108c874 <alt_release_fd>
    if (rval < 0)
1108bf0c:	e0bffa17 	ldw	r2,-24(fp)
1108bf10:	1004403a 	cmpge	r2,r2,zero
1108bf14:	1000071e 	bne	r2,zero,1108bf34 <close+0xc4>
    {
      ALT_ERRNO = -rval;
1108bf18:	108bf6c0 	call	1108bf6c <alt_get_errno>
1108bf1c:	e0fffa17 	ldw	r3,-24(fp)
1108bf20:	00c7c83a 	sub	r3,zero,r3
1108bf24:	10c00015 	stw	r3,0(r2)
      return -1;
1108bf28:	00bfffc4 	movi	r2,-1
1108bf2c:	e0bffd15 	stw	r2,-12(fp)
1108bf30:	00000806 	br	1108bf54 <close+0xe4>
    }
    return 0;
1108bf34:	e03ffd15 	stw	zero,-12(fp)
1108bf38:	00000606 	br	1108bf54 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1108bf3c:	108bf6c0 	call	1108bf6c <alt_get_errno>
1108bf40:	1007883a 	mov	r3,r2
1108bf44:	00801444 	movi	r2,81
1108bf48:	18800015 	stw	r2,0(r3)
    return -1;
1108bf4c:	00bfffc4 	movi	r2,-1
1108bf50:	e0bffd15 	stw	r2,-12(fp)
1108bf54:	e0bffd17 	ldw	r2,-12(fp)
  }
}
1108bf58:	e037883a 	mov	sp,fp
1108bf5c:	dfc00117 	ldw	ra,4(sp)
1108bf60:	df000017 	ldw	fp,0(sp)
1108bf64:	dec00204 	addi	sp,sp,8
1108bf68:	f800283a 	ret

1108bf6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1108bf6c:	defffd04 	addi	sp,sp,-12
1108bf70:	dfc00215 	stw	ra,8(sp)
1108bf74:	df000115 	stw	fp,4(sp)
1108bf78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
1108bf7c:	00844274 	movhi	r2,4361
1108bf80:	1084c704 	addi	r2,r2,4892
1108bf84:	10800017 	ldw	r2,0(r2)
1108bf88:	1005003a 	cmpeq	r2,r2,zero
1108bf8c:	1000061e 	bne	r2,zero,1108bfa8 <alt_get_errno+0x3c>
1108bf90:	00844274 	movhi	r2,4361
1108bf94:	1084c704 	addi	r2,r2,4892
1108bf98:	10800017 	ldw	r2,0(r2)
1108bf9c:	103ee83a 	callr	r2
1108bfa0:	e0bfff15 	stw	r2,-4(fp)
1108bfa4:	00000306 	br	1108bfb4 <alt_get_errno+0x48>
1108bfa8:	00844274 	movhi	r2,4361
1108bfac:	108b6a04 	addi	r2,r2,11688
1108bfb0:	e0bfff15 	stw	r2,-4(fp)
1108bfb4:	e0bfff17 	ldw	r2,-4(fp)
}
1108bfb8:	e037883a 	mov	sp,fp
1108bfbc:	dfc00117 	ldw	ra,4(sp)
1108bfc0:	df000017 	ldw	fp,0(sp)
1108bfc4:	dec00204 	addi	sp,sp,8
1108bfc8:	f800283a 	ret

1108bfcc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1108bfcc:	defffc04 	addi	sp,sp,-16
1108bfd0:	df000315 	stw	fp,12(sp)
1108bfd4:	df000304 	addi	fp,sp,12
1108bfd8:	e13ffd15 	stw	r4,-12(fp)
1108bfdc:	e17ffe15 	stw	r5,-8(fp)
1108bfe0:	e1bfff15 	stw	r6,-4(fp)
  return len;
1108bfe4:	e0bfff17 	ldw	r2,-4(fp)
}
1108bfe8:	e037883a 	mov	sp,fp
1108bfec:	df000017 	ldw	fp,0(sp)
1108bff0:	dec00104 	addi	sp,sp,4
1108bff4:	f800283a 	ret

1108bff8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1108bff8:	defff904 	addi	sp,sp,-28
1108bffc:	dfc00615 	stw	ra,24(sp)
1108c000:	df000515 	stw	fp,20(sp)
1108c004:	df000504 	addi	fp,sp,20
1108c008:	e13ffc15 	stw	r4,-16(fp)
1108c00c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1108c010:	e0bffc17 	ldw	r2,-16(fp)
1108c014:	1004803a 	cmplt	r2,r2,zero
1108c018:	1000081e 	bne	r2,zero,1108c03c <fstat+0x44>
1108c01c:	e0bffc17 	ldw	r2,-16(fp)
1108c020:	10800324 	muli	r2,r2,12
1108c024:	1007883a 	mov	r3,r2
1108c028:	00844274 	movhi	r2,4361
1108c02c:	10804404 	addi	r2,r2,272
1108c030:	1887883a 	add	r3,r3,r2
1108c034:	e0ffff15 	stw	r3,-4(fp)
1108c038:	00000106 	br	1108c040 <fstat+0x48>
1108c03c:	e03fff15 	stw	zero,-4(fp)
1108c040:	e0bfff17 	ldw	r2,-4(fp)
1108c044:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1108c048:	e0bffb17 	ldw	r2,-20(fp)
1108c04c:	1005003a 	cmpeq	r2,r2,zero
1108c050:	1000121e 	bne	r2,zero,1108c09c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1108c054:	e0bffb17 	ldw	r2,-20(fp)
1108c058:	10800017 	ldw	r2,0(r2)
1108c05c:	10800817 	ldw	r2,32(r2)
1108c060:	1005003a 	cmpeq	r2,r2,zero
1108c064:	1000081e 	bne	r2,zero,1108c088 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
1108c068:	e0bffb17 	ldw	r2,-20(fp)
1108c06c:	10800017 	ldw	r2,0(r2)
1108c070:	10800817 	ldw	r2,32(r2)
1108c074:	e13ffb17 	ldw	r4,-20(fp)
1108c078:	e17ffd17 	ldw	r5,-12(fp)
1108c07c:	103ee83a 	callr	r2
1108c080:	e0bffe15 	stw	r2,-8(fp)
1108c084:	00000b06 	br	1108c0b4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1108c088:	e0fffd17 	ldw	r3,-12(fp)
1108c08c:	00880004 	movi	r2,8192
1108c090:	18800115 	stw	r2,4(r3)
      return 0;
1108c094:	e03ffe15 	stw	zero,-8(fp)
1108c098:	00000606 	br	1108c0b4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1108c09c:	108c0cc0 	call	1108c0cc <alt_get_errno>
1108c0a0:	1007883a 	mov	r3,r2
1108c0a4:	00801444 	movi	r2,81
1108c0a8:	18800015 	stw	r2,0(r3)
    return -1;
1108c0ac:	00bfffc4 	movi	r2,-1
1108c0b0:	e0bffe15 	stw	r2,-8(fp)
1108c0b4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
1108c0b8:	e037883a 	mov	sp,fp
1108c0bc:	dfc00117 	ldw	ra,4(sp)
1108c0c0:	df000017 	ldw	fp,0(sp)
1108c0c4:	dec00204 	addi	sp,sp,8
1108c0c8:	f800283a 	ret

1108c0cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1108c0cc:	defffd04 	addi	sp,sp,-12
1108c0d0:	dfc00215 	stw	ra,8(sp)
1108c0d4:	df000115 	stw	fp,4(sp)
1108c0d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
1108c0dc:	00844274 	movhi	r2,4361
1108c0e0:	1084c704 	addi	r2,r2,4892
1108c0e4:	10800017 	ldw	r2,0(r2)
1108c0e8:	1005003a 	cmpeq	r2,r2,zero
1108c0ec:	1000061e 	bne	r2,zero,1108c108 <alt_get_errno+0x3c>
1108c0f0:	00844274 	movhi	r2,4361
1108c0f4:	1084c704 	addi	r2,r2,4892
1108c0f8:	10800017 	ldw	r2,0(r2)
1108c0fc:	103ee83a 	callr	r2
1108c100:	e0bfff15 	stw	r2,-4(fp)
1108c104:	00000306 	br	1108c114 <alt_get_errno+0x48>
1108c108:	00844274 	movhi	r2,4361
1108c10c:	108b6a04 	addi	r2,r2,11688
1108c110:	e0bfff15 	stw	r2,-4(fp)
1108c114:	e0bfff17 	ldw	r2,-4(fp)
}
1108c118:	e037883a 	mov	sp,fp
1108c11c:	dfc00117 	ldw	ra,4(sp)
1108c120:	df000017 	ldw	fp,0(sp)
1108c124:	dec00204 	addi	sp,sp,8
1108c128:	f800283a 	ret

1108c12c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
1108c12c:	deffef04 	addi	sp,sp,-68
1108c130:	df001015 	stw	fp,64(sp)
1108c134:	df001004 	addi	fp,sp,64
1108c138:	e13ffc15 	stw	r4,-16(fp)
1108c13c:	e17ffd15 	stw	r5,-12(fp)
1108c140:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
1108c144:	00bffa84 	movi	r2,-22
1108c148:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1108c14c:	e0bffc17 	ldw	r2,-16(fp)
1108c150:	10800828 	cmpgeui	r2,r2,32
1108c154:	1000601e 	bne	r2,zero,1108c2d8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108c158:	0005303a 	rdctl	r2,status
1108c15c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108c160:	e0fff917 	ldw	r3,-28(fp)
1108c164:	00bfff84 	movi	r2,-2
1108c168:	1884703a 	and	r2,r3,r2
1108c16c:	1001703a 	wrctl	status,r2
  
  return context;
1108c170:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
1108c174:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
1108c178:	e0bffc17 	ldw	r2,-16(fp)
1108c17c:	00c44274 	movhi	r3,4361
1108c180:	18cb8504 	addi	r3,r3,11796
1108c184:	100490fa 	slli	r2,r2,3
1108c188:	10c7883a 	add	r3,r2,r3
1108c18c:	e0bffe17 	ldw	r2,-8(fp)
1108c190:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
1108c194:	e0bffc17 	ldw	r2,-16(fp)
1108c198:	00c44274 	movhi	r3,4361
1108c19c:	18cb8504 	addi	r3,r3,11796
1108c1a0:	100490fa 	slli	r2,r2,3
1108c1a4:	10c5883a 	add	r2,r2,r3
1108c1a8:	10c00104 	addi	r3,r2,4
1108c1ac:	e0bffd17 	ldw	r2,-12(fp)
1108c1b0:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
1108c1b4:	e0bffe17 	ldw	r2,-8(fp)
1108c1b8:	1005003a 	cmpeq	r2,r2,zero
1108c1bc:	1000201e 	bne	r2,zero,1108c240 <alt_irq_register+0x114>
1108c1c0:	e0bffc17 	ldw	r2,-16(fp)
1108c1c4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108c1c8:	0005303a 	rdctl	r2,status
1108c1cc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108c1d0:	e0fff617 	ldw	r3,-40(fp)
1108c1d4:	00bfff84 	movi	r2,-2
1108c1d8:	1884703a 	and	r2,r3,r2
1108c1dc:	1001703a 	wrctl	status,r2
  
  return context;
1108c1e0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1108c1e4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
1108c1e8:	e0fff717 	ldw	r3,-36(fp)
1108c1ec:	00800044 	movi	r2,1
1108c1f0:	10c4983a 	sll	r2,r2,r3
1108c1f4:	1007883a 	mov	r3,r2
1108c1f8:	00844274 	movhi	r2,4361
1108c1fc:	108b6b04 	addi	r2,r2,11692
1108c200:	10800017 	ldw	r2,0(r2)
1108c204:	1886b03a 	or	r3,r3,r2
1108c208:	00844274 	movhi	r2,4361
1108c20c:	108b6b04 	addi	r2,r2,11692
1108c210:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1108c214:	00844274 	movhi	r2,4361
1108c218:	108b6b04 	addi	r2,r2,11692
1108c21c:	10800017 	ldw	r2,0(r2)
1108c220:	100170fa 	wrctl	ienable,r2
1108c224:	e0bff817 	ldw	r2,-32(fp)
1108c228:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1108c22c:	e0bff517 	ldw	r2,-44(fp)
1108c230:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1108c234:	0005883a 	mov	r2,zero
1108c238:	e0bfff15 	stw	r2,-4(fp)
1108c23c:	00002006 	br	1108c2c0 <alt_irq_register+0x194>
1108c240:	e0bffc17 	ldw	r2,-16(fp)
1108c244:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108c248:	0005303a 	rdctl	r2,status
1108c24c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108c250:	e0fff217 	ldw	r3,-56(fp)
1108c254:	00bfff84 	movi	r2,-2
1108c258:	1884703a 	and	r2,r3,r2
1108c25c:	1001703a 	wrctl	status,r2
  
  return context;
1108c260:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1108c264:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
1108c268:	e0fff317 	ldw	r3,-52(fp)
1108c26c:	00800044 	movi	r2,1
1108c270:	10c4983a 	sll	r2,r2,r3
1108c274:	0084303a 	nor	r2,zero,r2
1108c278:	1007883a 	mov	r3,r2
1108c27c:	00844274 	movhi	r2,4361
1108c280:	108b6b04 	addi	r2,r2,11692
1108c284:	10800017 	ldw	r2,0(r2)
1108c288:	1886703a 	and	r3,r3,r2
1108c28c:	00844274 	movhi	r2,4361
1108c290:	108b6b04 	addi	r2,r2,11692
1108c294:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1108c298:	00844274 	movhi	r2,4361
1108c29c:	108b6b04 	addi	r2,r2,11692
1108c2a0:	10800017 	ldw	r2,0(r2)
1108c2a4:	100170fa 	wrctl	ienable,r2
1108c2a8:	e0bff417 	ldw	r2,-48(fp)
1108c2ac:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1108c2b0:	e0bff117 	ldw	r2,-60(fp)
1108c2b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1108c2b8:	0005883a 	mov	r2,zero
1108c2bc:	e0bfff15 	stw	r2,-4(fp)
1108c2c0:	e0bfff17 	ldw	r2,-4(fp)
1108c2c4:	e0bffb15 	stw	r2,-20(fp)
1108c2c8:	e0bffa17 	ldw	r2,-24(fp)
1108c2cc:	e0bff015 	stw	r2,-64(fp)
1108c2d0:	e0bff017 	ldw	r2,-64(fp)
1108c2d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
1108c2d8:	e0bffb17 	ldw	r2,-20(fp)
}
1108c2dc:	e037883a 	mov	sp,fp
1108c2e0:	df000017 	ldw	fp,0(sp)
1108c2e4:	dec00104 	addi	sp,sp,4
1108c2e8:	f800283a 	ret

1108c2ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1108c2ec:	deffeb04 	addi	sp,sp,-84
1108c2f0:	dfc01415 	stw	ra,80(sp)
1108c2f4:	df001315 	stw	fp,76(sp)
1108c2f8:	df001304 	addi	fp,sp,76
1108c2fc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1108c300:	e0bffd17 	ldw	r2,-12(fp)
1108c304:	1004803a 	cmplt	r2,r2,zero
1108c308:	1000081e 	bne	r2,zero,1108c32c <isatty+0x40>
1108c30c:	e0bffd17 	ldw	r2,-12(fp)
1108c310:	10800324 	muli	r2,r2,12
1108c314:	1007883a 	mov	r3,r2
1108c318:	00844274 	movhi	r2,4361
1108c31c:	10804404 	addi	r2,r2,272
1108c320:	1887883a 	add	r3,r3,r2
1108c324:	e0ffff15 	stw	r3,-4(fp)
1108c328:	00000106 	br	1108c330 <isatty+0x44>
1108c32c:	e03fff15 	stw	zero,-4(fp)
1108c330:	e0bfff17 	ldw	r2,-4(fp)
1108c334:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
1108c338:	e0bfed17 	ldw	r2,-76(fp)
1108c33c:	1005003a 	cmpeq	r2,r2,zero
1108c340:	10000f1e 	bne	r2,zero,1108c380 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1108c344:	e0bfed17 	ldw	r2,-76(fp)
1108c348:	10800017 	ldw	r2,0(r2)
1108c34c:	10800817 	ldw	r2,32(r2)
1108c350:	1004c03a 	cmpne	r2,r2,zero
1108c354:	1000031e 	bne	r2,zero,1108c364 <isatty+0x78>
    {
      return 1;
1108c358:	00800044 	movi	r2,1
1108c35c:	e0bffe15 	stw	r2,-8(fp)
1108c360:	00000c06 	br	1108c394 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1108c364:	e17fee04 	addi	r5,fp,-72
1108c368:	e13ffd17 	ldw	r4,-12(fp)
1108c36c:	108bff80 	call	1108bff8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1108c370:	e0bfef17 	ldw	r2,-68(fp)
1108c374:	10880020 	cmpeqi	r2,r2,8192
1108c378:	e0bffe15 	stw	r2,-8(fp)
1108c37c:	00000506 	br	1108c394 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1108c380:	108c3ac0 	call	1108c3ac <alt_get_errno>
1108c384:	1007883a 	mov	r3,r2
1108c388:	00801444 	movi	r2,81
1108c38c:	18800015 	stw	r2,0(r3)
    return 0;
1108c390:	e03ffe15 	stw	zero,-8(fp)
1108c394:	e0bffe17 	ldw	r2,-8(fp)
  }
}
1108c398:	e037883a 	mov	sp,fp
1108c39c:	dfc00117 	ldw	ra,4(sp)
1108c3a0:	df000017 	ldw	fp,0(sp)
1108c3a4:	dec00204 	addi	sp,sp,8
1108c3a8:	f800283a 	ret

1108c3ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1108c3ac:	defffd04 	addi	sp,sp,-12
1108c3b0:	dfc00215 	stw	ra,8(sp)
1108c3b4:	df000115 	stw	fp,4(sp)
1108c3b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
1108c3bc:	00844274 	movhi	r2,4361
1108c3c0:	1084c704 	addi	r2,r2,4892
1108c3c4:	10800017 	ldw	r2,0(r2)
1108c3c8:	1005003a 	cmpeq	r2,r2,zero
1108c3cc:	1000061e 	bne	r2,zero,1108c3e8 <alt_get_errno+0x3c>
1108c3d0:	00844274 	movhi	r2,4361
1108c3d4:	1084c704 	addi	r2,r2,4892
1108c3d8:	10800017 	ldw	r2,0(r2)
1108c3dc:	103ee83a 	callr	r2
1108c3e0:	e0bfff15 	stw	r2,-4(fp)
1108c3e4:	00000306 	br	1108c3f4 <alt_get_errno+0x48>
1108c3e8:	00844274 	movhi	r2,4361
1108c3ec:	108b6a04 	addi	r2,r2,11688
1108c3f0:	e0bfff15 	stw	r2,-4(fp)
1108c3f4:	e0bfff17 	ldw	r2,-4(fp)
}
1108c3f8:	e037883a 	mov	sp,fp
1108c3fc:	dfc00117 	ldw	ra,4(sp)
1108c400:	df000017 	ldw	fp,0(sp)
1108c404:	dec00204 	addi	sp,sp,8
1108c408:	f800283a 	ret

1108c40c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1108c40c:	defffe04 	addi	sp,sp,-8
1108c410:	dfc00115 	stw	ra,4(sp)
1108c414:	df000015 	stw	fp,0(sp)
1108c418:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1108c41c:	01044274 	movhi	r4,4361
1108c420:	2104cc04 	addi	r4,r4,4912
1108c424:	01444274 	movhi	r5,4361
1108c428:	297e3504 	addi	r5,r5,-1836
1108c42c:	01844274 	movhi	r6,4361
1108c430:	3184cc04 	addi	r6,r6,4912
1108c434:	108c48c0 	call	1108c48c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1108c438:	01044234 	movhi	r4,4360
1108c43c:	21000804 	addi	r4,r4,32
1108c440:	01444234 	movhi	r5,4360
1108c444:	29400804 	addi	r5,r5,32
1108c448:	01844234 	movhi	r6,4360
1108c44c:	31806d04 	addi	r6,r6,436
1108c450:	108c48c0 	call	1108c48c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1108c454:	01044274 	movhi	r4,4361
1108c458:	213ac904 	addi	r4,r4,-5340
1108c45c:	01444274 	movhi	r5,4361
1108c460:	297ac904 	addi	r5,r5,-5340
1108c464:	01844274 	movhi	r6,4361
1108c468:	31be3504 	addi	r6,r6,-1836
1108c46c:	108c48c0 	call	1108c48c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1108c470:	108d93c0 	call	1108d93c <alt_dcache_flush_all>
  alt_icache_flush_all();
1108c474:	108db5c0 	call	1108db5c <alt_icache_flush_all>
}
1108c478:	e037883a 	mov	sp,fp
1108c47c:	dfc00117 	ldw	ra,4(sp)
1108c480:	df000017 	ldw	fp,0(sp)
1108c484:	dec00204 	addi	sp,sp,8
1108c488:	f800283a 	ret

1108c48c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1108c48c:	defffc04 	addi	sp,sp,-16
1108c490:	df000315 	stw	fp,12(sp)
1108c494:	df000304 	addi	fp,sp,12
1108c498:	e13ffd15 	stw	r4,-12(fp)
1108c49c:	e17ffe15 	stw	r5,-8(fp)
1108c4a0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1108c4a4:	e0fffe17 	ldw	r3,-8(fp)
1108c4a8:	e0bffd17 	ldw	r2,-12(fp)
1108c4ac:	18800e26 	beq	r3,r2,1108c4e8 <alt_load_section+0x5c>
  {
    while( to != end )
1108c4b0:	00000a06 	br	1108c4dc <alt_load_section+0x50>
    {
      *to++ = *from++;
1108c4b4:	e0bffd17 	ldw	r2,-12(fp)
1108c4b8:	10c00017 	ldw	r3,0(r2)
1108c4bc:	e0bffe17 	ldw	r2,-8(fp)
1108c4c0:	10c00015 	stw	r3,0(r2)
1108c4c4:	e0bffe17 	ldw	r2,-8(fp)
1108c4c8:	10800104 	addi	r2,r2,4
1108c4cc:	e0bffe15 	stw	r2,-8(fp)
1108c4d0:	e0bffd17 	ldw	r2,-12(fp)
1108c4d4:	10800104 	addi	r2,r2,4
1108c4d8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1108c4dc:	e0fffe17 	ldw	r3,-8(fp)
1108c4e0:	e0bfff17 	ldw	r2,-4(fp)
1108c4e4:	18bff31e 	bne	r3,r2,1108c4b4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
1108c4e8:	e037883a 	mov	sp,fp
1108c4ec:	df000017 	ldw	fp,0(sp)
1108c4f0:	dec00104 	addi	sp,sp,4
1108c4f4:	f800283a 	ret

1108c4f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1108c4f8:	defff804 	addi	sp,sp,-32
1108c4fc:	dfc00715 	stw	ra,28(sp)
1108c500:	df000615 	stw	fp,24(sp)
1108c504:	df000604 	addi	fp,sp,24
1108c508:	e13ffc15 	stw	r4,-16(fp)
1108c50c:	e17ffd15 	stw	r5,-12(fp)
1108c510:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1108c514:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1108c518:	e0bffc17 	ldw	r2,-16(fp)
1108c51c:	1004803a 	cmplt	r2,r2,zero
1108c520:	1000081e 	bne	r2,zero,1108c544 <lseek+0x4c>
1108c524:	e0bffc17 	ldw	r2,-16(fp)
1108c528:	10800324 	muli	r2,r2,12
1108c52c:	1007883a 	mov	r3,r2
1108c530:	00844274 	movhi	r2,4361
1108c534:	10804404 	addi	r2,r2,272
1108c538:	1887883a 	add	r3,r3,r2
1108c53c:	e0ffff15 	stw	r3,-4(fp)
1108c540:	00000106 	br	1108c548 <lseek+0x50>
1108c544:	e03fff15 	stw	zero,-4(fp)
1108c548:	e0bfff17 	ldw	r2,-4(fp)
1108c54c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
1108c550:	e0bffb17 	ldw	r2,-20(fp)
1108c554:	1005003a 	cmpeq	r2,r2,zero
1108c558:	1000111e 	bne	r2,zero,1108c5a0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1108c55c:	e0bffb17 	ldw	r2,-20(fp)
1108c560:	10800017 	ldw	r2,0(r2)
1108c564:	10800717 	ldw	r2,28(r2)
1108c568:	1005003a 	cmpeq	r2,r2,zero
1108c56c:	1000091e 	bne	r2,zero,1108c594 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1108c570:	e0bffb17 	ldw	r2,-20(fp)
1108c574:	10800017 	ldw	r2,0(r2)
1108c578:	10800717 	ldw	r2,28(r2)
1108c57c:	e13ffb17 	ldw	r4,-20(fp)
1108c580:	e17ffd17 	ldw	r5,-12(fp)
1108c584:	e1bffe17 	ldw	r6,-8(fp)
1108c588:	103ee83a 	callr	r2
1108c58c:	e0bffa15 	stw	r2,-24(fp)
1108c590:	00000506 	br	1108c5a8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1108c594:	00bfde84 	movi	r2,-134
1108c598:	e0bffa15 	stw	r2,-24(fp)
1108c59c:	00000206 	br	1108c5a8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
1108c5a0:	00bfebc4 	movi	r2,-81
1108c5a4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
1108c5a8:	e0bffa17 	ldw	r2,-24(fp)
1108c5ac:	1004403a 	cmpge	r2,r2,zero
1108c5b0:	1000071e 	bne	r2,zero,1108c5d0 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
1108c5b4:	108c5e80 	call	1108c5e8 <alt_get_errno>
1108c5b8:	1007883a 	mov	r3,r2
1108c5bc:	e0bffa17 	ldw	r2,-24(fp)
1108c5c0:	0085c83a 	sub	r2,zero,r2
1108c5c4:	18800015 	stw	r2,0(r3)
    rc = -1;
1108c5c8:	00bfffc4 	movi	r2,-1
1108c5cc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
1108c5d0:	e0bffa17 	ldw	r2,-24(fp)
}
1108c5d4:	e037883a 	mov	sp,fp
1108c5d8:	dfc00117 	ldw	ra,4(sp)
1108c5dc:	df000017 	ldw	fp,0(sp)
1108c5e0:	dec00204 	addi	sp,sp,8
1108c5e4:	f800283a 	ret

1108c5e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1108c5e8:	defffd04 	addi	sp,sp,-12
1108c5ec:	dfc00215 	stw	ra,8(sp)
1108c5f0:	df000115 	stw	fp,4(sp)
1108c5f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
1108c5f8:	00844274 	movhi	r2,4361
1108c5fc:	1084c704 	addi	r2,r2,4892
1108c600:	10800017 	ldw	r2,0(r2)
1108c604:	1005003a 	cmpeq	r2,r2,zero
1108c608:	1000061e 	bne	r2,zero,1108c624 <alt_get_errno+0x3c>
1108c60c:	00844274 	movhi	r2,4361
1108c610:	1084c704 	addi	r2,r2,4892
1108c614:	10800017 	ldw	r2,0(r2)
1108c618:	103ee83a 	callr	r2
1108c61c:	e0bfff15 	stw	r2,-4(fp)
1108c620:	00000306 	br	1108c630 <alt_get_errno+0x48>
1108c624:	00844274 	movhi	r2,4361
1108c628:	108b6a04 	addi	r2,r2,11688
1108c62c:	e0bfff15 	stw	r2,-4(fp)
1108c630:	e0bfff17 	ldw	r2,-4(fp)
}
1108c634:	e037883a 	mov	sp,fp
1108c638:	dfc00117 	ldw	ra,4(sp)
1108c63c:	df000017 	ldw	fp,0(sp)
1108c640:	dec00204 	addi	sp,sp,8
1108c644:	f800283a 	ret

1108c648 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1108c648:	defffd04 	addi	sp,sp,-12
1108c64c:	dfc00215 	stw	ra,8(sp)
1108c650:	df000115 	stw	fp,4(sp)
1108c654:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1108c658:	0009883a 	mov	r4,zero
1108c65c:	108cb400 	call	1108cb40 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1108c660:	108cb740 	call	1108cb74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1108c664:	01044274 	movhi	r4,4361
1108c668:	213e2d04 	addi	r4,r4,-1868
1108c66c:	01444274 	movhi	r5,4361
1108c670:	297e2d04 	addi	r5,r5,-1868
1108c674:	01844274 	movhi	r6,4361
1108c678:	31be2d04 	addi	r6,r6,-1868
1108c67c:	108df1c0 	call	1108df1c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1108c680:	108da940 	call	1108da94 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1108c684:	01044274 	movhi	r4,4361
1108c688:	2136be04 	addi	r4,r4,-9480
1108c68c:	108e7180 	call	1108e718 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1108c690:	d126b017 	ldw	r4,-25920(gp)
1108c694:	d166b117 	ldw	r5,-25916(gp)
1108c698:	d1a6b217 	ldw	r6,-25912(gp)
1108c69c:	10821000 	call	11082100 <main>
1108c6a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1108c6a4:	01000044 	movi	r4,1
1108c6a8:	108be700 	call	1108be70 <close>
  exit (result);
1108c6ac:	e13fff17 	ldw	r4,-4(fp)
1108c6b0:	108e72c0 	call	1108e72c <exit>

1108c6b4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1108c6b4:	defffe04 	addi	sp,sp,-8
1108c6b8:	df000115 	stw	fp,4(sp)
1108c6bc:	df000104 	addi	fp,sp,4
1108c6c0:	e13fff15 	stw	r4,-4(fp)
}
1108c6c4:	e037883a 	mov	sp,fp
1108c6c8:	df000017 	ldw	fp,0(sp)
1108c6cc:	dec00104 	addi	sp,sp,4
1108c6d0:	f800283a 	ret

1108c6d4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1108c6d4:	defffe04 	addi	sp,sp,-8
1108c6d8:	df000115 	stw	fp,4(sp)
1108c6dc:	df000104 	addi	fp,sp,4
1108c6e0:	e13fff15 	stw	r4,-4(fp)
}
1108c6e4:	e037883a 	mov	sp,fp
1108c6e8:	df000017 	ldw	fp,0(sp)
1108c6ec:	dec00104 	addi	sp,sp,4
1108c6f0:	f800283a 	ret

1108c6f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1108c6f4:	defff704 	addi	sp,sp,-36
1108c6f8:	dfc00815 	stw	ra,32(sp)
1108c6fc:	df000715 	stw	fp,28(sp)
1108c700:	df000704 	addi	fp,sp,28
1108c704:	e13ffb15 	stw	r4,-20(fp)
1108c708:	e17ffc15 	stw	r5,-16(fp)
1108c70c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1108c710:	e0bffb17 	ldw	r2,-20(fp)
1108c714:	1004803a 	cmplt	r2,r2,zero
1108c718:	1000081e 	bne	r2,zero,1108c73c <read+0x48>
1108c71c:	e0bffb17 	ldw	r2,-20(fp)
1108c720:	10800324 	muli	r2,r2,12
1108c724:	1007883a 	mov	r3,r2
1108c728:	00844274 	movhi	r2,4361
1108c72c:	10804404 	addi	r2,r2,272
1108c730:	1887883a 	add	r3,r3,r2
1108c734:	e0ffff15 	stw	r3,-4(fp)
1108c738:	00000106 	br	1108c740 <read+0x4c>
1108c73c:	e03fff15 	stw	zero,-4(fp)
1108c740:	e0bfff17 	ldw	r2,-4(fp)
1108c744:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
1108c748:	e0bffa17 	ldw	r2,-24(fp)
1108c74c:	1005003a 	cmpeq	r2,r2,zero
1108c750:	1000241e 	bne	r2,zero,1108c7e4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1108c754:	e0bffa17 	ldw	r2,-24(fp)
1108c758:	10800217 	ldw	r2,8(r2)
1108c75c:	108000cc 	andi	r2,r2,3
1108c760:	10800060 	cmpeqi	r2,r2,1
1108c764:	10001a1e 	bne	r2,zero,1108c7d0 <read+0xdc>
1108c768:	e0bffa17 	ldw	r2,-24(fp)
1108c76c:	10800017 	ldw	r2,0(r2)
1108c770:	10800517 	ldw	r2,20(r2)
1108c774:	1005003a 	cmpeq	r2,r2,zero
1108c778:	1000151e 	bne	r2,zero,1108c7d0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1108c77c:	e0bffa17 	ldw	r2,-24(fp)
1108c780:	10800017 	ldw	r2,0(r2)
1108c784:	10800517 	ldw	r2,20(r2)
1108c788:	e17ffc17 	ldw	r5,-16(fp)
1108c78c:	e1bffd17 	ldw	r6,-12(fp)
1108c790:	e13ffa17 	ldw	r4,-24(fp)
1108c794:	103ee83a 	callr	r2
1108c798:	e0bff915 	stw	r2,-28(fp)
1108c79c:	e0bff917 	ldw	r2,-28(fp)
1108c7a0:	1004403a 	cmpge	r2,r2,zero
1108c7a4:	1000071e 	bne	r2,zero,1108c7c4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
1108c7a8:	108c8140 	call	1108c814 <alt_get_errno>
1108c7ac:	e0fff917 	ldw	r3,-28(fp)
1108c7b0:	00c7c83a 	sub	r3,zero,r3
1108c7b4:	10c00015 	stw	r3,0(r2)
          return -1;
1108c7b8:	00bfffc4 	movi	r2,-1
1108c7bc:	e0bffe15 	stw	r2,-8(fp)
1108c7c0:	00000e06 	br	1108c7fc <read+0x108>
        }
        return rval;
1108c7c4:	e0bff917 	ldw	r2,-28(fp)
1108c7c8:	e0bffe15 	stw	r2,-8(fp)
1108c7cc:	00000b06 	br	1108c7fc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
1108c7d0:	108c8140 	call	1108c814 <alt_get_errno>
1108c7d4:	1007883a 	mov	r3,r2
1108c7d8:	00800344 	movi	r2,13
1108c7dc:	18800015 	stw	r2,0(r3)
1108c7e0:	00000406 	br	1108c7f4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1108c7e4:	108c8140 	call	1108c814 <alt_get_errno>
1108c7e8:	1007883a 	mov	r3,r2
1108c7ec:	00801444 	movi	r2,81
1108c7f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1108c7f4:	00bfffc4 	movi	r2,-1
1108c7f8:	e0bffe15 	stw	r2,-8(fp)
1108c7fc:	e0bffe17 	ldw	r2,-8(fp)
}
1108c800:	e037883a 	mov	sp,fp
1108c804:	dfc00117 	ldw	ra,4(sp)
1108c808:	df000017 	ldw	fp,0(sp)
1108c80c:	dec00204 	addi	sp,sp,8
1108c810:	f800283a 	ret

1108c814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1108c814:	defffd04 	addi	sp,sp,-12
1108c818:	dfc00215 	stw	ra,8(sp)
1108c81c:	df000115 	stw	fp,4(sp)
1108c820:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
1108c824:	00844274 	movhi	r2,4361
1108c828:	1084c704 	addi	r2,r2,4892
1108c82c:	10800017 	ldw	r2,0(r2)
1108c830:	1005003a 	cmpeq	r2,r2,zero
1108c834:	1000061e 	bne	r2,zero,1108c850 <alt_get_errno+0x3c>
1108c838:	00844274 	movhi	r2,4361
1108c83c:	1084c704 	addi	r2,r2,4892
1108c840:	10800017 	ldw	r2,0(r2)
1108c844:	103ee83a 	callr	r2
1108c848:	e0bfff15 	stw	r2,-4(fp)
1108c84c:	00000306 	br	1108c85c <alt_get_errno+0x48>
1108c850:	00844274 	movhi	r2,4361
1108c854:	108b6a04 	addi	r2,r2,11688
1108c858:	e0bfff15 	stw	r2,-4(fp)
1108c85c:	e0bfff17 	ldw	r2,-4(fp)
}
1108c860:	e037883a 	mov	sp,fp
1108c864:	dfc00117 	ldw	ra,4(sp)
1108c868:	df000017 	ldw	fp,0(sp)
1108c86c:	dec00204 	addi	sp,sp,8
1108c870:	f800283a 	ret

1108c874 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1108c874:	defffe04 	addi	sp,sp,-8
1108c878:	df000115 	stw	fp,4(sp)
1108c87c:	df000104 	addi	fp,sp,4
1108c880:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1108c884:	e0bfff17 	ldw	r2,-4(fp)
1108c888:	108000d0 	cmplti	r2,r2,3
1108c88c:	10000d1e 	bne	r2,zero,1108c8c4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1108c890:	e0bfff17 	ldw	r2,-4(fp)
1108c894:	00c44274 	movhi	r3,4361
1108c898:	18c04404 	addi	r3,r3,272
1108c89c:	10800324 	muli	r2,r2,12
1108c8a0:	10c5883a 	add	r2,r2,r3
1108c8a4:	10800204 	addi	r2,r2,8
1108c8a8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1108c8ac:	e0bfff17 	ldw	r2,-4(fp)
1108c8b0:	00c44274 	movhi	r3,4361
1108c8b4:	18c04404 	addi	r3,r3,272
1108c8b8:	10800324 	muli	r2,r2,12
1108c8bc:	10c5883a 	add	r2,r2,r3
1108c8c0:	10000015 	stw	zero,0(r2)
  }
}
1108c8c4:	e037883a 	mov	sp,fp
1108c8c8:	df000017 	ldw	fp,0(sp)
1108c8cc:	dec00104 	addi	sp,sp,4
1108c8d0:	f800283a 	ret

1108c8d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1108c8d4:	defff804 	addi	sp,sp,-32
1108c8d8:	df000715 	stw	fp,28(sp)
1108c8dc:	df000704 	addi	fp,sp,28
1108c8e0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108c8e4:	0005303a 	rdctl	r2,status
1108c8e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108c8ec:	e0fffb17 	ldw	r3,-20(fp)
1108c8f0:	00bfff84 	movi	r2,-2
1108c8f4:	1884703a 	and	r2,r3,r2
1108c8f8:	1001703a 	wrctl	status,r2
  
  return context;
1108c8fc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1108c900:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1108c904:	d0a00d17 	ldw	r2,-32716(gp)
1108c908:	10c000c4 	addi	r3,r2,3
1108c90c:	00bfff04 	movi	r2,-4
1108c910:	1884703a 	and	r2,r3,r2
1108c914:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1108c918:	d0e00d17 	ldw	r3,-32716(gp)
1108c91c:	e0bffe17 	ldw	r2,-8(fp)
1108c920:	1887883a 	add	r3,r3,r2
1108c924:	008442f4 	movhi	r2,4363
1108c928:	10880004 	addi	r2,r2,8192
1108c92c:	10c0072e 	bgeu	r2,r3,1108c94c <sbrk+0x78>
1108c930:	e0bffd17 	ldw	r2,-12(fp)
1108c934:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1108c938:	e0bffa17 	ldw	r2,-24(fp)
1108c93c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1108c940:	00bfffc4 	movi	r2,-1
1108c944:	e0bfff15 	stw	r2,-4(fp)
1108c948:	00000c06 	br	1108c97c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
1108c94c:	d0a00d17 	ldw	r2,-32716(gp)
1108c950:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
1108c954:	d0e00d17 	ldw	r3,-32716(gp)
1108c958:	e0bffe17 	ldw	r2,-8(fp)
1108c95c:	1885883a 	add	r2,r3,r2
1108c960:	d0a00d15 	stw	r2,-32716(gp)
1108c964:	e0bffd17 	ldw	r2,-12(fp)
1108c968:	e0bff915 	stw	r2,-28(fp)
1108c96c:	e0bff917 	ldw	r2,-28(fp)
1108c970:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1108c974:	e0bffc17 	ldw	r2,-16(fp)
1108c978:	e0bfff15 	stw	r2,-4(fp)
1108c97c:	e0bfff17 	ldw	r2,-4(fp)
} 
1108c980:	e037883a 	mov	sp,fp
1108c984:	df000017 	ldw	fp,0(sp)
1108c988:	dec00104 	addi	sp,sp,4
1108c98c:	f800283a 	ret

1108c990 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1108c990:	defffd04 	addi	sp,sp,-12
1108c994:	dfc00215 	stw	ra,8(sp)
1108c998:	df000115 	stw	fp,4(sp)
1108c99c:	df000104 	addi	fp,sp,4
1108c9a0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1108c9a4:	e13fff17 	ldw	r4,-4(fp)
1108c9a8:	108d7f00 	call	1108d7f0 <alt_busy_sleep>
}
1108c9ac:	e037883a 	mov	sp,fp
1108c9b0:	dfc00117 	ldw	ra,4(sp)
1108c9b4:	df000017 	ldw	fp,0(sp)
1108c9b8:	dec00204 	addi	sp,sp,8
1108c9bc:	f800283a 	ret

1108c9c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1108c9c0:	defff704 	addi	sp,sp,-36
1108c9c4:	dfc00815 	stw	ra,32(sp)
1108c9c8:	df000715 	stw	fp,28(sp)
1108c9cc:	df000704 	addi	fp,sp,28
1108c9d0:	e13ffb15 	stw	r4,-20(fp)
1108c9d4:	e17ffc15 	stw	r5,-16(fp)
1108c9d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1108c9dc:	e0bffb17 	ldw	r2,-20(fp)
1108c9e0:	1004803a 	cmplt	r2,r2,zero
1108c9e4:	1000081e 	bne	r2,zero,1108ca08 <write+0x48>
1108c9e8:	e0bffb17 	ldw	r2,-20(fp)
1108c9ec:	10800324 	muli	r2,r2,12
1108c9f0:	1007883a 	mov	r3,r2
1108c9f4:	00844274 	movhi	r2,4361
1108c9f8:	10804404 	addi	r2,r2,272
1108c9fc:	1887883a 	add	r3,r3,r2
1108ca00:	e0ffff15 	stw	r3,-4(fp)
1108ca04:	00000106 	br	1108ca0c <write+0x4c>
1108ca08:	e03fff15 	stw	zero,-4(fp)
1108ca0c:	e0bfff17 	ldw	r2,-4(fp)
1108ca10:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
1108ca14:	e0bffa17 	ldw	r2,-24(fp)
1108ca18:	1005003a 	cmpeq	r2,r2,zero
1108ca1c:	1000241e 	bne	r2,zero,1108cab0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1108ca20:	e0bffa17 	ldw	r2,-24(fp)
1108ca24:	10800217 	ldw	r2,8(r2)
1108ca28:	108000cc 	andi	r2,r2,3
1108ca2c:	1005003a 	cmpeq	r2,r2,zero
1108ca30:	10001a1e 	bne	r2,zero,1108ca9c <write+0xdc>
1108ca34:	e0bffa17 	ldw	r2,-24(fp)
1108ca38:	10800017 	ldw	r2,0(r2)
1108ca3c:	10800617 	ldw	r2,24(r2)
1108ca40:	1005003a 	cmpeq	r2,r2,zero
1108ca44:	1000151e 	bne	r2,zero,1108ca9c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1108ca48:	e0bffa17 	ldw	r2,-24(fp)
1108ca4c:	10800017 	ldw	r2,0(r2)
1108ca50:	10800617 	ldw	r2,24(r2)
1108ca54:	e17ffc17 	ldw	r5,-16(fp)
1108ca58:	e1bffd17 	ldw	r6,-12(fp)
1108ca5c:	e13ffa17 	ldw	r4,-24(fp)
1108ca60:	103ee83a 	callr	r2
1108ca64:	e0bff915 	stw	r2,-28(fp)
1108ca68:	e0bff917 	ldw	r2,-28(fp)
1108ca6c:	1004403a 	cmpge	r2,r2,zero
1108ca70:	1000071e 	bne	r2,zero,1108ca90 <write+0xd0>
      {
        ALT_ERRNO = -rval;
1108ca74:	108cae00 	call	1108cae0 <alt_get_errno>
1108ca78:	e0fff917 	ldw	r3,-28(fp)
1108ca7c:	00c7c83a 	sub	r3,zero,r3
1108ca80:	10c00015 	stw	r3,0(r2)
        return -1;
1108ca84:	00bfffc4 	movi	r2,-1
1108ca88:	e0bffe15 	stw	r2,-8(fp)
1108ca8c:	00000e06 	br	1108cac8 <write+0x108>
      }
      return rval;
1108ca90:	e0bff917 	ldw	r2,-28(fp)
1108ca94:	e0bffe15 	stw	r2,-8(fp)
1108ca98:	00000b06 	br	1108cac8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
1108ca9c:	108cae00 	call	1108cae0 <alt_get_errno>
1108caa0:	1007883a 	mov	r3,r2
1108caa4:	00800344 	movi	r2,13
1108caa8:	18800015 	stw	r2,0(r3)
1108caac:	00000406 	br	1108cac0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1108cab0:	108cae00 	call	1108cae0 <alt_get_errno>
1108cab4:	1007883a 	mov	r3,r2
1108cab8:	00801444 	movi	r2,81
1108cabc:	18800015 	stw	r2,0(r3)
  }
  return -1;
1108cac0:	00bfffc4 	movi	r2,-1
1108cac4:	e0bffe15 	stw	r2,-8(fp)
1108cac8:	e0bffe17 	ldw	r2,-8(fp)
}
1108cacc:	e037883a 	mov	sp,fp
1108cad0:	dfc00117 	ldw	ra,4(sp)
1108cad4:	df000017 	ldw	fp,0(sp)
1108cad8:	dec00204 	addi	sp,sp,8
1108cadc:	f800283a 	ret

1108cae0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1108cae0:	defffd04 	addi	sp,sp,-12
1108cae4:	dfc00215 	stw	ra,8(sp)
1108cae8:	df000115 	stw	fp,4(sp)
1108caec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
1108caf0:	00844274 	movhi	r2,4361
1108caf4:	1084c704 	addi	r2,r2,4892
1108caf8:	10800017 	ldw	r2,0(r2)
1108cafc:	1005003a 	cmpeq	r2,r2,zero
1108cb00:	1000061e 	bne	r2,zero,1108cb1c <alt_get_errno+0x3c>
1108cb04:	00844274 	movhi	r2,4361
1108cb08:	1084c704 	addi	r2,r2,4892
1108cb0c:	10800017 	ldw	r2,0(r2)
1108cb10:	103ee83a 	callr	r2
1108cb14:	e0bfff15 	stw	r2,-4(fp)
1108cb18:	00000306 	br	1108cb28 <alt_get_errno+0x48>
1108cb1c:	00844274 	movhi	r2,4361
1108cb20:	108b6a04 	addi	r2,r2,11688
1108cb24:	e0bfff15 	stw	r2,-4(fp)
1108cb28:	e0bfff17 	ldw	r2,-4(fp)
}
1108cb2c:	e037883a 	mov	sp,fp
1108cb30:	dfc00117 	ldw	ra,4(sp)
1108cb34:	df000017 	ldw	fp,0(sp)
1108cb38:	dec00204 	addi	sp,sp,8
1108cb3c:	f800283a 	ret

1108cb40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1108cb40:	defffd04 	addi	sp,sp,-12
1108cb44:	dfc00215 	stw	ra,8(sp)
1108cb48:	df000115 	stw	fp,4(sp)
1108cb4c:	df000104 	addi	fp,sp,4
1108cb50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
1108cb54:	108e3fc0 	call	1108e3fc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1108cb58:	00800044 	movi	r2,1
1108cb5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1108cb60:	e037883a 	mov	sp,fp
1108cb64:	dfc00117 	ldw	ra,4(sp)
1108cb68:	df000017 	ldw	fp,0(sp)
1108cb6c:	dec00204 	addi	sp,sp,8
1108cb70:	f800283a 	ret

1108cb74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1108cb74:	defffe04 	addi	sp,sp,-8
1108cb78:	dfc00115 	stw	ra,4(sp)
1108cb7c:	df000015 	stw	fp,0(sp)
1108cb80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
1108cb84:	01044274 	movhi	r4,4361
1108cb88:	2100ae04 	addi	r4,r4,696
1108cb8c:	000b883a 	mov	r5,zero
1108cb90:	000d883a 	mov	r6,zero
1108cb94:	108cd380 	call	1108cd38 <altera_avalon_jtag_uart_init>
1108cb98:	01044274 	movhi	r4,4361
1108cb9c:	2100a404 	addi	r4,r4,656
1108cba0:	108cbb80 	call	1108cbb8 <alt_dev_reg>
}
1108cba4:	e037883a 	mov	sp,fp
1108cba8:	dfc00117 	ldw	ra,4(sp)
1108cbac:	df000017 	ldw	fp,0(sp)
1108cbb0:	dec00204 	addi	sp,sp,8
1108cbb4:	f800283a 	ret

1108cbb8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1108cbb8:	defffd04 	addi	sp,sp,-12
1108cbbc:	dfc00215 	stw	ra,8(sp)
1108cbc0:	df000115 	stw	fp,4(sp)
1108cbc4:	df000104 	addi	fp,sp,4
1108cbc8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1108cbcc:	e13fff17 	ldw	r4,-4(fp)
1108cbd0:	01444274 	movhi	r5,4361
1108cbd4:	2944c404 	addi	r5,r5,4880
1108cbd8:	108d9800 	call	1108d980 <alt_dev_llist_insert>
}
1108cbdc:	e037883a 	mov	sp,fp
1108cbe0:	dfc00117 	ldw	ra,4(sp)
1108cbe4:	df000017 	ldw	fp,0(sp)
1108cbe8:	dec00204 	addi	sp,sp,8
1108cbec:	f800283a 	ret

1108cbf0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1108cbf0:	defffa04 	addi	sp,sp,-24
1108cbf4:	dfc00515 	stw	ra,20(sp)
1108cbf8:	df000415 	stw	fp,16(sp)
1108cbfc:	df000404 	addi	fp,sp,16
1108cc00:	e13ffd15 	stw	r4,-12(fp)
1108cc04:	e17ffe15 	stw	r5,-8(fp)
1108cc08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1108cc0c:	e0bffd17 	ldw	r2,-12(fp)
1108cc10:	10800017 	ldw	r2,0(r2)
1108cc14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1108cc18:	e0bffc17 	ldw	r2,-16(fp)
1108cc1c:	11000a04 	addi	r4,r2,40
1108cc20:	e0bffd17 	ldw	r2,-12(fp)
1108cc24:	11c00217 	ldw	r7,8(r2)
1108cc28:	e17ffe17 	ldw	r5,-8(fp)
1108cc2c:	e1bfff17 	ldw	r6,-4(fp)
1108cc30:	108d2380 	call	1108d238 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1108cc34:	e037883a 	mov	sp,fp
1108cc38:	dfc00117 	ldw	ra,4(sp)
1108cc3c:	df000017 	ldw	fp,0(sp)
1108cc40:	dec00204 	addi	sp,sp,8
1108cc44:	f800283a 	ret

1108cc48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1108cc48:	defffa04 	addi	sp,sp,-24
1108cc4c:	dfc00515 	stw	ra,20(sp)
1108cc50:	df000415 	stw	fp,16(sp)
1108cc54:	df000404 	addi	fp,sp,16
1108cc58:	e13ffd15 	stw	r4,-12(fp)
1108cc5c:	e17ffe15 	stw	r5,-8(fp)
1108cc60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1108cc64:	e0bffd17 	ldw	r2,-12(fp)
1108cc68:	10800017 	ldw	r2,0(r2)
1108cc6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1108cc70:	e0bffc17 	ldw	r2,-16(fp)
1108cc74:	11000a04 	addi	r4,r2,40
1108cc78:	e0bffd17 	ldw	r2,-12(fp)
1108cc7c:	11c00217 	ldw	r7,8(r2)
1108cc80:	e17ffe17 	ldw	r5,-8(fp)
1108cc84:	e1bfff17 	ldw	r6,-4(fp)
1108cc88:	108d45c0 	call	1108d45c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1108cc8c:	e037883a 	mov	sp,fp
1108cc90:	dfc00117 	ldw	ra,4(sp)
1108cc94:	df000017 	ldw	fp,0(sp)
1108cc98:	dec00204 	addi	sp,sp,8
1108cc9c:	f800283a 	ret

1108cca0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1108cca0:	defffc04 	addi	sp,sp,-16
1108cca4:	dfc00315 	stw	ra,12(sp)
1108cca8:	df000215 	stw	fp,8(sp)
1108ccac:	df000204 	addi	fp,sp,8
1108ccb0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1108ccb4:	e0bfff17 	ldw	r2,-4(fp)
1108ccb8:	10800017 	ldw	r2,0(r2)
1108ccbc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1108ccc0:	e0bffe17 	ldw	r2,-8(fp)
1108ccc4:	11000a04 	addi	r4,r2,40
1108ccc8:	e0bfff17 	ldw	r2,-4(fp)
1108cccc:	11400217 	ldw	r5,8(r2)
1108ccd0:	108d0d00 	call	1108d0d0 <altera_avalon_jtag_uart_close>
}
1108ccd4:	e037883a 	mov	sp,fp
1108ccd8:	dfc00117 	ldw	ra,4(sp)
1108ccdc:	df000017 	ldw	fp,0(sp)
1108cce0:	dec00204 	addi	sp,sp,8
1108cce4:	f800283a 	ret

1108cce8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1108cce8:	defffa04 	addi	sp,sp,-24
1108ccec:	dfc00515 	stw	ra,20(sp)
1108ccf0:	df000415 	stw	fp,16(sp)
1108ccf4:	df000404 	addi	fp,sp,16
1108ccf8:	e13ffd15 	stw	r4,-12(fp)
1108ccfc:	e17ffe15 	stw	r5,-8(fp)
1108cd00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1108cd04:	e0bffd17 	ldw	r2,-12(fp)
1108cd08:	10800017 	ldw	r2,0(r2)
1108cd0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1108cd10:	e0bffc17 	ldw	r2,-16(fp)
1108cd14:	11000a04 	addi	r4,r2,40
1108cd18:	e17ffe17 	ldw	r5,-8(fp)
1108cd1c:	e1bfff17 	ldw	r6,-4(fp)
1108cd20:	108d1440 	call	1108d144 <altera_avalon_jtag_uart_ioctl>
}
1108cd24:	e037883a 	mov	sp,fp
1108cd28:	dfc00117 	ldw	ra,4(sp)
1108cd2c:	df000017 	ldw	fp,0(sp)
1108cd30:	dec00204 	addi	sp,sp,8
1108cd34:	f800283a 	ret

1108cd38 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1108cd38:	defffa04 	addi	sp,sp,-24
1108cd3c:	dfc00515 	stw	ra,20(sp)
1108cd40:	df000415 	stw	fp,16(sp)
1108cd44:	df000404 	addi	fp,sp,16
1108cd48:	e13ffd15 	stw	r4,-12(fp)
1108cd4c:	e17ffe15 	stw	r5,-8(fp)
1108cd50:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1108cd54:	e0fffd17 	ldw	r3,-12(fp)
1108cd58:	00800044 	movi	r2,1
1108cd5c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1108cd60:	e0bffd17 	ldw	r2,-12(fp)
1108cd64:	10800017 	ldw	r2,0(r2)
1108cd68:	11000104 	addi	r4,r2,4
1108cd6c:	e0bffd17 	ldw	r2,-12(fp)
1108cd70:	10800817 	ldw	r2,32(r2)
1108cd74:	1007883a 	mov	r3,r2
1108cd78:	2005883a 	mov	r2,r4
1108cd7c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1108cd80:	e13ffe17 	ldw	r4,-8(fp)
1108cd84:	e17fff17 	ldw	r5,-4(fp)
1108cd88:	d8000015 	stw	zero,0(sp)
1108cd8c:	01844274 	movhi	r6,4361
1108cd90:	31b37e04 	addi	r6,r6,-12808
1108cd94:	e1fffd17 	ldw	r7,-12(fp)
1108cd98:	108db8c0 	call	1108db8c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1108cd9c:	e0bffd17 	ldw	r2,-12(fp)
1108cda0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1108cda4:	e0bffd17 	ldw	r2,-12(fp)
1108cda8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1108cdac:	00844274 	movhi	r2,4361
1108cdb0:	108b6f04 	addi	r2,r2,11708
1108cdb4:	10800017 	ldw	r2,0(r2)
1108cdb8:	100b883a 	mov	r5,r2
1108cdbc:	01844274 	movhi	r6,4361
1108cdc0:	31b40804 	addi	r6,r6,-12256
1108cdc4:	e1fffd17 	ldw	r7,-12(fp)
1108cdc8:	108d69c0 	call	1108d69c <alt_alarm_start>
1108cdcc:	1004403a 	cmpge	r2,r2,zero
1108cdd0:	1000041e 	bne	r2,zero,1108cde4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1108cdd4:	e0fffd17 	ldw	r3,-12(fp)
1108cdd8:	00a00034 	movhi	r2,32768
1108cddc:	10bfffc4 	addi	r2,r2,-1
1108cde0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1108cde4:	e037883a 	mov	sp,fp
1108cde8:	dfc00117 	ldw	ra,4(sp)
1108cdec:	df000017 	ldw	fp,0(sp)
1108cdf0:	dec00204 	addi	sp,sp,8
1108cdf4:	f800283a 	ret

1108cdf8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1108cdf8:	defff804 	addi	sp,sp,-32
1108cdfc:	df000715 	stw	fp,28(sp)
1108ce00:	df000704 	addi	fp,sp,28
1108ce04:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1108ce08:	e0bfff17 	ldw	r2,-4(fp)
1108ce0c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
1108ce10:	e0bffe17 	ldw	r2,-8(fp)
1108ce14:	10800017 	ldw	r2,0(r2)
1108ce18:	e0bffd15 	stw	r2,-12(fp)
1108ce1c:	00000006 	br	1108ce20 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1108ce20:	e0bffd17 	ldw	r2,-12(fp)
1108ce24:	10800104 	addi	r2,r2,4
1108ce28:	10800037 	ldwio	r2,0(r2)
1108ce2c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1108ce30:	e0bffc17 	ldw	r2,-16(fp)
1108ce34:	1080c00c 	andi	r2,r2,768
1108ce38:	1005003a 	cmpeq	r2,r2,zero
1108ce3c:	1000741e 	bne	r2,zero,1108d010 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1108ce40:	e0bffc17 	ldw	r2,-16(fp)
1108ce44:	1080400c 	andi	r2,r2,256
1108ce48:	1005003a 	cmpeq	r2,r2,zero
1108ce4c:	1000351e 	bne	r2,zero,1108cf24 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1108ce50:	00800074 	movhi	r2,1
1108ce54:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1108ce58:	e0bffe17 	ldw	r2,-8(fp)
1108ce5c:	10800a17 	ldw	r2,40(r2)
1108ce60:	10800044 	addi	r2,r2,1
1108ce64:	1081ffcc 	andi	r2,r2,2047
1108ce68:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
1108ce6c:	e0bffe17 	ldw	r2,-8(fp)
1108ce70:	10c00b17 	ldw	r3,44(r2)
1108ce74:	e0bffa17 	ldw	r2,-24(fp)
1108ce78:	18801626 	beq	r3,r2,1108ced4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1108ce7c:	e0bffd17 	ldw	r2,-12(fp)
1108ce80:	10800037 	ldwio	r2,0(r2)
1108ce84:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1108ce88:	e0bffb17 	ldw	r2,-20(fp)
1108ce8c:	10a0000c 	andi	r2,r2,32768
1108ce90:	1005003a 	cmpeq	r2,r2,zero
1108ce94:	10000f1e 	bne	r2,zero,1108ced4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1108ce98:	e0bffe17 	ldw	r2,-8(fp)
1108ce9c:	10c00a17 	ldw	r3,40(r2)
1108cea0:	e0bffb17 	ldw	r2,-20(fp)
1108cea4:	1009883a 	mov	r4,r2
1108cea8:	e0bffe17 	ldw	r2,-8(fp)
1108ceac:	1885883a 	add	r2,r3,r2
1108ceb0:	10800e04 	addi	r2,r2,56
1108ceb4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1108ceb8:	e0bffe17 	ldw	r2,-8(fp)
1108cebc:	10800a17 	ldw	r2,40(r2)
1108cec0:	10800044 	addi	r2,r2,1
1108cec4:	10c1ffcc 	andi	r3,r2,2047
1108cec8:	e0bffe17 	ldw	r2,-8(fp)
1108cecc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1108ced0:	003fe106 	br	1108ce58 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1108ced4:	e0bffb17 	ldw	r2,-20(fp)
1108ced8:	10bfffec 	andhi	r2,r2,65535
1108cedc:	1005003a 	cmpeq	r2,r2,zero
1108cee0:	1000101e 	bne	r2,zero,1108cf24 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1108cee4:	e0bffe17 	ldw	r2,-8(fp)
1108cee8:	10c00817 	ldw	r3,32(r2)
1108ceec:	00bfff84 	movi	r2,-2
1108cef0:	1886703a 	and	r3,r3,r2
1108cef4:	e0bffe17 	ldw	r2,-8(fp)
1108cef8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1108cefc:	e0bffd17 	ldw	r2,-12(fp)
1108cf00:	11000104 	addi	r4,r2,4
1108cf04:	e0bffe17 	ldw	r2,-8(fp)
1108cf08:	10800817 	ldw	r2,32(r2)
1108cf0c:	1007883a 	mov	r3,r2
1108cf10:	2005883a 	mov	r2,r4
1108cf14:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1108cf18:	e0bffd17 	ldw	r2,-12(fp)
1108cf1c:	10800104 	addi	r2,r2,4
1108cf20:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1108cf24:	e0bffc17 	ldw	r2,-16(fp)
1108cf28:	1080800c 	andi	r2,r2,512
1108cf2c:	1005003a 	cmpeq	r2,r2,zero
1108cf30:	103fbb1e 	bne	r2,zero,1108ce20 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1108cf34:	e0bffc17 	ldw	r2,-16(fp)
1108cf38:	10bfffec 	andhi	r2,r2,65535
1108cf3c:	1004d43a 	srli	r2,r2,16
1108cf40:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1108cf44:	00001506 	br	1108cf9c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1108cf48:	e13ffd17 	ldw	r4,-12(fp)
1108cf4c:	e0bffe17 	ldw	r2,-8(fp)
1108cf50:	10c00d17 	ldw	r3,52(r2)
1108cf54:	e0bffe17 	ldw	r2,-8(fp)
1108cf58:	1885883a 	add	r2,r3,r2
1108cf5c:	10820e04 	addi	r2,r2,2104
1108cf60:	10800003 	ldbu	r2,0(r2)
1108cf64:	10c03fcc 	andi	r3,r2,255
1108cf68:	18c0201c 	xori	r3,r3,128
1108cf6c:	18ffe004 	addi	r3,r3,-128
1108cf70:	2005883a 	mov	r2,r4
1108cf74:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1108cf78:	e0bffe17 	ldw	r2,-8(fp)
1108cf7c:	10800d17 	ldw	r2,52(r2)
1108cf80:	10800044 	addi	r2,r2,1
1108cf84:	10c1ffcc 	andi	r3,r2,2047
1108cf88:	e0bffe17 	ldw	r2,-8(fp)
1108cf8c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1108cf90:	e0bff917 	ldw	r2,-28(fp)
1108cf94:	10bfffc4 	addi	r2,r2,-1
1108cf98:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1108cf9c:	e0bff917 	ldw	r2,-28(fp)
1108cfa0:	1005003a 	cmpeq	r2,r2,zero
1108cfa4:	1000051e 	bne	r2,zero,1108cfbc <altera_avalon_jtag_uart_irq+0x1c4>
1108cfa8:	e0bffe17 	ldw	r2,-8(fp)
1108cfac:	10c00d17 	ldw	r3,52(r2)
1108cfb0:	e0bffe17 	ldw	r2,-8(fp)
1108cfb4:	10800c17 	ldw	r2,48(r2)
1108cfb8:	18bfe31e 	bne	r3,r2,1108cf48 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1108cfbc:	e0bff917 	ldw	r2,-28(fp)
1108cfc0:	1005003a 	cmpeq	r2,r2,zero
1108cfc4:	103f961e 	bne	r2,zero,1108ce20 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1108cfc8:	e0bffe17 	ldw	r2,-8(fp)
1108cfcc:	10c00817 	ldw	r3,32(r2)
1108cfd0:	00bfff44 	movi	r2,-3
1108cfd4:	1886703a 	and	r3,r3,r2
1108cfd8:	e0bffe17 	ldw	r2,-8(fp)
1108cfdc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1108cfe0:	e0bffe17 	ldw	r2,-8(fp)
1108cfe4:	10800017 	ldw	r2,0(r2)
1108cfe8:	11000104 	addi	r4,r2,4
1108cfec:	e0bffe17 	ldw	r2,-8(fp)
1108cff0:	10800817 	ldw	r2,32(r2)
1108cff4:	1007883a 	mov	r3,r2
1108cff8:	2005883a 	mov	r2,r4
1108cffc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1108d000:	e0bffd17 	ldw	r2,-12(fp)
1108d004:	10800104 	addi	r2,r2,4
1108d008:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1108d00c:	003f8406 	br	1108ce20 <altera_avalon_jtag_uart_irq+0x28>
}
1108d010:	e037883a 	mov	sp,fp
1108d014:	df000017 	ldw	fp,0(sp)
1108d018:	dec00104 	addi	sp,sp,4
1108d01c:	f800283a 	ret

1108d020 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1108d020:	defffc04 	addi	sp,sp,-16
1108d024:	df000315 	stw	fp,12(sp)
1108d028:	df000304 	addi	fp,sp,12
1108d02c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1108d030:	e0bfff17 	ldw	r2,-4(fp)
1108d034:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1108d038:	e0bffe17 	ldw	r2,-8(fp)
1108d03c:	10800017 	ldw	r2,0(r2)
1108d040:	10800104 	addi	r2,r2,4
1108d044:	10800037 	ldwio	r2,0(r2)
1108d048:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1108d04c:	e0bffd17 	ldw	r2,-12(fp)
1108d050:	1081000c 	andi	r2,r2,1024
1108d054:	1005003a 	cmpeq	r2,r2,zero
1108d058:	10000c1e 	bne	r2,zero,1108d08c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1108d05c:	e0bffe17 	ldw	r2,-8(fp)
1108d060:	10800017 	ldw	r2,0(r2)
1108d064:	11000104 	addi	r4,r2,4
1108d068:	e0bffe17 	ldw	r2,-8(fp)
1108d06c:	10800817 	ldw	r2,32(r2)
1108d070:	10810014 	ori	r2,r2,1024
1108d074:	1007883a 	mov	r3,r2
1108d078:	2005883a 	mov	r2,r4
1108d07c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
1108d080:	e0bffe17 	ldw	r2,-8(fp)
1108d084:	10000915 	stw	zero,36(r2)
1108d088:	00000a06 	br	1108d0b4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1108d08c:	e0bffe17 	ldw	r2,-8(fp)
1108d090:	10c00917 	ldw	r3,36(r2)
1108d094:	00a00034 	movhi	r2,32768
1108d098:	10bfff04 	addi	r2,r2,-4
1108d09c:	10c00536 	bltu	r2,r3,1108d0b4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
1108d0a0:	e0bffe17 	ldw	r2,-8(fp)
1108d0a4:	10800917 	ldw	r2,36(r2)
1108d0a8:	10c00044 	addi	r3,r2,1
1108d0ac:	e0bffe17 	ldw	r2,-8(fp)
1108d0b0:	10c00915 	stw	r3,36(r2)
1108d0b4:	00844274 	movhi	r2,4361
1108d0b8:	108b6f04 	addi	r2,r2,11708
1108d0bc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1108d0c0:	e037883a 	mov	sp,fp
1108d0c4:	df000017 	ldw	fp,0(sp)
1108d0c8:	dec00104 	addi	sp,sp,4
1108d0cc:	f800283a 	ret

1108d0d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1108d0d0:	defffc04 	addi	sp,sp,-16
1108d0d4:	df000315 	stw	fp,12(sp)
1108d0d8:	df000304 	addi	fp,sp,12
1108d0dc:	e13ffd15 	stw	r4,-12(fp)
1108d0e0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1108d0e4:	00000706 	br	1108d104 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
1108d0e8:	e0bffe17 	ldw	r2,-8(fp)
1108d0ec:	1090000c 	andi	r2,r2,16384
1108d0f0:	1005003a 	cmpeq	r2,r2,zero
1108d0f4:	1000031e 	bne	r2,zero,1108d104 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
1108d0f8:	00bffd44 	movi	r2,-11
1108d0fc:	e0bfff15 	stw	r2,-4(fp)
1108d100:	00000b06 	br	1108d130 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1108d104:	e0bffd17 	ldw	r2,-12(fp)
1108d108:	10c00d17 	ldw	r3,52(r2)
1108d10c:	e0bffd17 	ldw	r2,-12(fp)
1108d110:	10800c17 	ldw	r2,48(r2)
1108d114:	18800526 	beq	r3,r2,1108d12c <altera_avalon_jtag_uart_close+0x5c>
1108d118:	e0bffd17 	ldw	r2,-12(fp)
1108d11c:	10c00917 	ldw	r3,36(r2)
1108d120:	e0bffd17 	ldw	r2,-12(fp)
1108d124:	10800117 	ldw	r2,4(r2)
1108d128:	18bfef36 	bltu	r3,r2,1108d0e8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1108d12c:	e03fff15 	stw	zero,-4(fp)
1108d130:	e0bfff17 	ldw	r2,-4(fp)
}
1108d134:	e037883a 	mov	sp,fp
1108d138:	df000017 	ldw	fp,0(sp)
1108d13c:	dec00104 	addi	sp,sp,4
1108d140:	f800283a 	ret

1108d144 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1108d144:	defff804 	addi	sp,sp,-32
1108d148:	df000715 	stw	fp,28(sp)
1108d14c:	df000704 	addi	fp,sp,28
1108d150:	e13ffb15 	stw	r4,-20(fp)
1108d154:	e17ffc15 	stw	r5,-16(fp)
1108d158:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
1108d15c:	00bff9c4 	movi	r2,-25
1108d160:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
1108d164:	e0bffc17 	ldw	r2,-16(fp)
1108d168:	e0bfff15 	stw	r2,-4(fp)
1108d16c:	e0ffff17 	ldw	r3,-4(fp)
1108d170:	189a8060 	cmpeqi	r2,r3,27137
1108d174:	1000041e 	bne	r2,zero,1108d188 <altera_avalon_jtag_uart_ioctl+0x44>
1108d178:	e0ffff17 	ldw	r3,-4(fp)
1108d17c:	189a80a0 	cmpeqi	r2,r3,27138
1108d180:	10001b1e 	bne	r2,zero,1108d1f0 <altera_avalon_jtag_uart_ioctl+0xac>
1108d184:	00002706 	br	1108d224 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1108d188:	e0bffb17 	ldw	r2,-20(fp)
1108d18c:	10c00117 	ldw	r3,4(r2)
1108d190:	00a00034 	movhi	r2,32768
1108d194:	10bfffc4 	addi	r2,r2,-1
1108d198:	18802226 	beq	r3,r2,1108d224 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
1108d19c:	e0bffd17 	ldw	r2,-12(fp)
1108d1a0:	10800017 	ldw	r2,0(r2)
1108d1a4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1108d1a8:	e0bff917 	ldw	r2,-28(fp)
1108d1ac:	10800090 	cmplti	r2,r2,2
1108d1b0:	1000071e 	bne	r2,zero,1108d1d0 <altera_avalon_jtag_uart_ioctl+0x8c>
1108d1b4:	e0fff917 	ldw	r3,-28(fp)
1108d1b8:	00a00034 	movhi	r2,32768
1108d1bc:	10bfffc4 	addi	r2,r2,-1
1108d1c0:	18800326 	beq	r3,r2,1108d1d0 <altera_avalon_jtag_uart_ioctl+0x8c>
1108d1c4:	e0bff917 	ldw	r2,-28(fp)
1108d1c8:	e0bffe15 	stw	r2,-8(fp)
1108d1cc:	00000306 	br	1108d1dc <altera_avalon_jtag_uart_ioctl+0x98>
1108d1d0:	00e00034 	movhi	r3,32768
1108d1d4:	18ffff84 	addi	r3,r3,-2
1108d1d8:	e0fffe15 	stw	r3,-8(fp)
1108d1dc:	e0bffb17 	ldw	r2,-20(fp)
1108d1e0:	e0fffe17 	ldw	r3,-8(fp)
1108d1e4:	10c00115 	stw	r3,4(r2)
      rc = 0;
1108d1e8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
1108d1ec:	00000d06 	br	1108d224 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1108d1f0:	e0bffb17 	ldw	r2,-20(fp)
1108d1f4:	10c00117 	ldw	r3,4(r2)
1108d1f8:	00a00034 	movhi	r2,32768
1108d1fc:	10bfffc4 	addi	r2,r2,-1
1108d200:	18800826 	beq	r3,r2,1108d224 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1108d204:	e13ffd17 	ldw	r4,-12(fp)
1108d208:	e0bffb17 	ldw	r2,-20(fp)
1108d20c:	10c00917 	ldw	r3,36(r2)
1108d210:	e0bffb17 	ldw	r2,-20(fp)
1108d214:	10800117 	ldw	r2,4(r2)
1108d218:	1885803a 	cmpltu	r2,r3,r2
1108d21c:	20800015 	stw	r2,0(r4)
      rc = 0;
1108d220:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
1108d224:	e0bffa17 	ldw	r2,-24(fp)
}
1108d228:	e037883a 	mov	sp,fp
1108d22c:	df000017 	ldw	fp,0(sp)
1108d230:	dec00104 	addi	sp,sp,4
1108d234:	f800283a 	ret

1108d238 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1108d238:	defff204 	addi	sp,sp,-56
1108d23c:	dfc00d15 	stw	ra,52(sp)
1108d240:	df000c15 	stw	fp,48(sp)
1108d244:	df000c04 	addi	fp,sp,48
1108d248:	e13ffb15 	stw	r4,-20(fp)
1108d24c:	e17ffc15 	stw	r5,-16(fp)
1108d250:	e1bffd15 	stw	r6,-12(fp)
1108d254:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
1108d258:	e0bffc17 	ldw	r2,-16(fp)
1108d25c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1108d260:	00004806 	br	1108d384 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1108d264:	e0bffb17 	ldw	r2,-20(fp)
1108d268:	10800a17 	ldw	r2,40(r2)
1108d26c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1108d270:	e0bffb17 	ldw	r2,-20(fp)
1108d274:	10800b17 	ldw	r2,44(r2)
1108d278:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
1108d27c:	e0fff717 	ldw	r3,-36(fp)
1108d280:	e0bff617 	ldw	r2,-40(fp)
1108d284:	18800536 	bltu	r3,r2,1108d29c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1108d288:	e0bff717 	ldw	r2,-36(fp)
1108d28c:	e0fff617 	ldw	r3,-40(fp)
1108d290:	10c5c83a 	sub	r2,r2,r3
1108d294:	e0bff815 	stw	r2,-32(fp)
1108d298:	00000406 	br	1108d2ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1108d29c:	00820004 	movi	r2,2048
1108d2a0:	e0fff617 	ldw	r3,-40(fp)
1108d2a4:	10c5c83a 	sub	r2,r2,r3
1108d2a8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
1108d2ac:	e0bff817 	ldw	r2,-32(fp)
1108d2b0:	1005003a 	cmpeq	r2,r2,zero
1108d2b4:	10001f1e 	bne	r2,zero,1108d334 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
1108d2b8:	e0fffd17 	ldw	r3,-12(fp)
1108d2bc:	e0bff817 	ldw	r2,-32(fp)
1108d2c0:	1880022e 	bgeu	r3,r2,1108d2cc <altera_avalon_jtag_uart_read+0x94>
        n = space;
1108d2c4:	e0bffd17 	ldw	r2,-12(fp)
1108d2c8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1108d2cc:	e0bffb17 	ldw	r2,-20(fp)
1108d2d0:	10c00e04 	addi	r3,r2,56
1108d2d4:	e0bff617 	ldw	r2,-40(fp)
1108d2d8:	1887883a 	add	r3,r3,r2
1108d2dc:	e0bffa17 	ldw	r2,-24(fp)
1108d2e0:	1009883a 	mov	r4,r2
1108d2e4:	180b883a 	mov	r5,r3
1108d2e8:	e1bff817 	ldw	r6,-32(fp)
1108d2ec:	1087c100 	call	11087c10 <memcpy>
      ptr   += n;
1108d2f0:	e0fff817 	ldw	r3,-32(fp)
1108d2f4:	e0bffa17 	ldw	r2,-24(fp)
1108d2f8:	10c5883a 	add	r2,r2,r3
1108d2fc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
1108d300:	e0fffd17 	ldw	r3,-12(fp)
1108d304:	e0bff817 	ldw	r2,-32(fp)
1108d308:	1885c83a 	sub	r2,r3,r2
1108d30c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1108d310:	e0fff617 	ldw	r3,-40(fp)
1108d314:	e0bff817 	ldw	r2,-32(fp)
1108d318:	1885883a 	add	r2,r3,r2
1108d31c:	10c1ffcc 	andi	r3,r2,2047
1108d320:	e0bffb17 	ldw	r2,-20(fp)
1108d324:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1108d328:	e0bffd17 	ldw	r2,-12(fp)
1108d32c:	10800048 	cmpgei	r2,r2,1
1108d330:	103fcc1e 	bne	r2,zero,1108d264 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
1108d334:	e0fffa17 	ldw	r3,-24(fp)
1108d338:	e0bffc17 	ldw	r2,-16(fp)
1108d33c:	1880141e 	bne	r3,r2,1108d390 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1108d340:	e0bffe17 	ldw	r2,-8(fp)
1108d344:	1090000c 	andi	r2,r2,16384
1108d348:	1004c03a 	cmpne	r2,r2,zero
1108d34c:	1000101e 	bne	r2,zero,1108d390 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1108d350:	e0bffb17 	ldw	r2,-20(fp)
1108d354:	10c00a17 	ldw	r3,40(r2)
1108d358:	e0bff717 	ldw	r2,-36(fp)
1108d35c:	1880051e 	bne	r3,r2,1108d374 <altera_avalon_jtag_uart_read+0x13c>
1108d360:	e0bffb17 	ldw	r2,-20(fp)
1108d364:	10c00917 	ldw	r3,36(r2)
1108d368:	e0bffb17 	ldw	r2,-20(fp)
1108d36c:	10800117 	ldw	r2,4(r2)
1108d370:	18bff736 	bltu	r3,r2,1108d350 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1108d374:	e0bffb17 	ldw	r2,-20(fp)
1108d378:	10c00a17 	ldw	r3,40(r2)
1108d37c:	e0bff717 	ldw	r2,-36(fp)
1108d380:	18800326 	beq	r3,r2,1108d390 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1108d384:	e0bffd17 	ldw	r2,-12(fp)
1108d388:	10800048 	cmpgei	r2,r2,1
1108d38c:	103fb51e 	bne	r2,zero,1108d264 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1108d390:	e0fffa17 	ldw	r3,-24(fp)
1108d394:	e0bffc17 	ldw	r2,-16(fp)
1108d398:	18801926 	beq	r3,r2,1108d400 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108d39c:	0005303a 	rdctl	r2,status
1108d3a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108d3a4:	e0fff517 	ldw	r3,-44(fp)
1108d3a8:	00bfff84 	movi	r2,-2
1108d3ac:	1884703a 	and	r2,r3,r2
1108d3b0:	1001703a 	wrctl	status,r2
  
  return context;
1108d3b4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1108d3b8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1108d3bc:	e0bffb17 	ldw	r2,-20(fp)
1108d3c0:	10800817 	ldw	r2,32(r2)
1108d3c4:	10c00054 	ori	r3,r2,1
1108d3c8:	e0bffb17 	ldw	r2,-20(fp)
1108d3cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1108d3d0:	e0bffb17 	ldw	r2,-20(fp)
1108d3d4:	10800017 	ldw	r2,0(r2)
1108d3d8:	11000104 	addi	r4,r2,4
1108d3dc:	e0bffb17 	ldw	r2,-20(fp)
1108d3e0:	10800817 	ldw	r2,32(r2)
1108d3e4:	1007883a 	mov	r3,r2
1108d3e8:	2005883a 	mov	r2,r4
1108d3ec:	10c00035 	stwio	r3,0(r2)
1108d3f0:	e0bff917 	ldw	r2,-28(fp)
1108d3f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1108d3f8:	e0bff417 	ldw	r2,-48(fp)
1108d3fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1108d400:	e0fffa17 	ldw	r3,-24(fp)
1108d404:	e0bffc17 	ldw	r2,-16(fp)
1108d408:	18800526 	beq	r3,r2,1108d420 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
1108d40c:	e0fffa17 	ldw	r3,-24(fp)
1108d410:	e0bffc17 	ldw	r2,-16(fp)
1108d414:	1887c83a 	sub	r3,r3,r2
1108d418:	e0ffff15 	stw	r3,-4(fp)
1108d41c:	00000906 	br	1108d444 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
1108d420:	e0bffe17 	ldw	r2,-8(fp)
1108d424:	1090000c 	andi	r2,r2,16384
1108d428:	1005003a 	cmpeq	r2,r2,zero
1108d42c:	1000031e 	bne	r2,zero,1108d43c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1108d430:	00bffd44 	movi	r2,-11
1108d434:	e0bfff15 	stw	r2,-4(fp)
1108d438:	00000206 	br	1108d444 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
1108d43c:	00bffec4 	movi	r2,-5
1108d440:	e0bfff15 	stw	r2,-4(fp)
1108d444:	e0bfff17 	ldw	r2,-4(fp)
}
1108d448:	e037883a 	mov	sp,fp
1108d44c:	dfc00117 	ldw	ra,4(sp)
1108d450:	df000017 	ldw	fp,0(sp)
1108d454:	dec00204 	addi	sp,sp,8
1108d458:	f800283a 	ret

1108d45c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1108d45c:	defff204 	addi	sp,sp,-56
1108d460:	dfc00d15 	stw	ra,52(sp)
1108d464:	df000c15 	stw	fp,48(sp)
1108d468:	df000c04 	addi	fp,sp,48
1108d46c:	e13ffb15 	stw	r4,-20(fp)
1108d470:	e17ffc15 	stw	r5,-16(fp)
1108d474:	e1bffd15 	stw	r6,-12(fp)
1108d478:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1108d47c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1108d480:	e0bffc17 	ldw	r2,-16(fp)
1108d484:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1108d488:	00003a06 	br	1108d574 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1108d48c:	e0bffb17 	ldw	r2,-20(fp)
1108d490:	10800c17 	ldw	r2,48(r2)
1108d494:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
1108d498:	e0bffb17 	ldw	r2,-20(fp)
1108d49c:	10800d17 	ldw	r2,52(r2)
1108d4a0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
1108d4a4:	e0fffa17 	ldw	r3,-24(fp)
1108d4a8:	e0bff917 	ldw	r2,-28(fp)
1108d4ac:	1880062e 	bgeu	r3,r2,1108d4c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1108d4b0:	e0fff917 	ldw	r3,-28(fp)
1108d4b4:	e0bffa17 	ldw	r2,-24(fp)
1108d4b8:	1885c83a 	sub	r2,r3,r2
1108d4bc:	10bfffc4 	addi	r2,r2,-1
1108d4c0:	e0bff815 	stw	r2,-32(fp)
1108d4c4:	00000c06 	br	1108d4f8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
1108d4c8:	e0bff917 	ldw	r2,-28(fp)
1108d4cc:	1005003a 	cmpeq	r2,r2,zero
1108d4d0:	1000051e 	bne	r2,zero,1108d4e8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1108d4d4:	00820004 	movi	r2,2048
1108d4d8:	e0fffa17 	ldw	r3,-24(fp)
1108d4dc:	10c5c83a 	sub	r2,r2,r3
1108d4e0:	e0bff815 	stw	r2,-32(fp)
1108d4e4:	00000406 	br	1108d4f8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1108d4e8:	0081ffc4 	movi	r2,2047
1108d4ec:	e0fffa17 	ldw	r3,-24(fp)
1108d4f0:	10c5c83a 	sub	r2,r2,r3
1108d4f4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
1108d4f8:	e0bff817 	ldw	r2,-32(fp)
1108d4fc:	1005003a 	cmpeq	r2,r2,zero
1108d500:	10001f1e 	bne	r2,zero,1108d580 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
1108d504:	e0fffd17 	ldw	r3,-12(fp)
1108d508:	e0bff817 	ldw	r2,-32(fp)
1108d50c:	1880022e 	bgeu	r3,r2,1108d518 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
1108d510:	e0bffd17 	ldw	r2,-12(fp)
1108d514:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1108d518:	e0bffb17 	ldw	r2,-20(fp)
1108d51c:	10c20e04 	addi	r3,r2,2104
1108d520:	e0bffa17 	ldw	r2,-24(fp)
1108d524:	1885883a 	add	r2,r3,r2
1108d528:	e0fffc17 	ldw	r3,-16(fp)
1108d52c:	1009883a 	mov	r4,r2
1108d530:	180b883a 	mov	r5,r3
1108d534:	e1bff817 	ldw	r6,-32(fp)
1108d538:	1087c100 	call	11087c10 <memcpy>
      ptr   += n;
1108d53c:	e0fff817 	ldw	r3,-32(fp)
1108d540:	e0bffc17 	ldw	r2,-16(fp)
1108d544:	10c5883a 	add	r2,r2,r3
1108d548:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
1108d54c:	e0fffd17 	ldw	r3,-12(fp)
1108d550:	e0bff817 	ldw	r2,-32(fp)
1108d554:	1885c83a 	sub	r2,r3,r2
1108d558:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1108d55c:	e0fffa17 	ldw	r3,-24(fp)
1108d560:	e0bff817 	ldw	r2,-32(fp)
1108d564:	1885883a 	add	r2,r3,r2
1108d568:	10c1ffcc 	andi	r3,r2,2047
1108d56c:	e0bffb17 	ldw	r2,-20(fp)
1108d570:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1108d574:	e0bffd17 	ldw	r2,-12(fp)
1108d578:	10800048 	cmpgei	r2,r2,1
1108d57c:	103fc31e 	bne	r2,zero,1108d48c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108d580:	0005303a 	rdctl	r2,status
1108d584:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108d588:	e0fff517 	ldw	r3,-44(fp)
1108d58c:	00bfff84 	movi	r2,-2
1108d590:	1884703a 	and	r2,r3,r2
1108d594:	1001703a 	wrctl	status,r2
  
  return context;
1108d598:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1108d59c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1108d5a0:	e0bffb17 	ldw	r2,-20(fp)
1108d5a4:	10800817 	ldw	r2,32(r2)
1108d5a8:	10c00094 	ori	r3,r2,2
1108d5ac:	e0bffb17 	ldw	r2,-20(fp)
1108d5b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1108d5b4:	e0bffb17 	ldw	r2,-20(fp)
1108d5b8:	10800017 	ldw	r2,0(r2)
1108d5bc:	11000104 	addi	r4,r2,4
1108d5c0:	e0bffb17 	ldw	r2,-20(fp)
1108d5c4:	10800817 	ldw	r2,32(r2)
1108d5c8:	1007883a 	mov	r3,r2
1108d5cc:	2005883a 	mov	r2,r4
1108d5d0:	10c00035 	stwio	r3,0(r2)
1108d5d4:	e0bff717 	ldw	r2,-36(fp)
1108d5d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1108d5dc:	e0bff417 	ldw	r2,-48(fp)
1108d5e0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1108d5e4:	e0bffd17 	ldw	r2,-12(fp)
1108d5e8:	10800050 	cmplti	r2,r2,1
1108d5ec:	1000111e 	bne	r2,zero,1108d634 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
1108d5f0:	e0bffe17 	ldw	r2,-8(fp)
1108d5f4:	1090000c 	andi	r2,r2,16384
1108d5f8:	1004c03a 	cmpne	r2,r2,zero
1108d5fc:	1000101e 	bne	r2,zero,1108d640 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1108d600:	e0bffb17 	ldw	r2,-20(fp)
1108d604:	10c00d17 	ldw	r3,52(r2)
1108d608:	e0bff917 	ldw	r2,-28(fp)
1108d60c:	1880051e 	bne	r3,r2,1108d624 <altera_avalon_jtag_uart_write+0x1c8>
1108d610:	e0bffb17 	ldw	r2,-20(fp)
1108d614:	10c00917 	ldw	r3,36(r2)
1108d618:	e0bffb17 	ldw	r2,-20(fp)
1108d61c:	10800117 	ldw	r2,4(r2)
1108d620:	18bff736 	bltu	r3,r2,1108d600 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
1108d624:	e0bffb17 	ldw	r2,-20(fp)
1108d628:	10c00d17 	ldw	r3,52(r2)
1108d62c:	e0bff917 	ldw	r2,-28(fp)
1108d630:	18800326 	beq	r3,r2,1108d640 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
1108d634:	e0bffd17 	ldw	r2,-12(fp)
1108d638:	10800048 	cmpgei	r2,r2,1
1108d63c:	103fcd1e 	bne	r2,zero,1108d574 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1108d640:	e0fffc17 	ldw	r3,-16(fp)
1108d644:	e0bff617 	ldw	r2,-40(fp)
1108d648:	18800526 	beq	r3,r2,1108d660 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
1108d64c:	e0fffc17 	ldw	r3,-16(fp)
1108d650:	e0bff617 	ldw	r2,-40(fp)
1108d654:	1887c83a 	sub	r3,r3,r2
1108d658:	e0ffff15 	stw	r3,-4(fp)
1108d65c:	00000906 	br	1108d684 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
1108d660:	e0bffe17 	ldw	r2,-8(fp)
1108d664:	1090000c 	andi	r2,r2,16384
1108d668:	1005003a 	cmpeq	r2,r2,zero
1108d66c:	1000031e 	bne	r2,zero,1108d67c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
1108d670:	00bffd44 	movi	r2,-11
1108d674:	e0bfff15 	stw	r2,-4(fp)
1108d678:	00000206 	br	1108d684 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
1108d67c:	00bffec4 	movi	r2,-5
1108d680:	e0bfff15 	stw	r2,-4(fp)
1108d684:	e0bfff17 	ldw	r2,-4(fp)
}
1108d688:	e037883a 	mov	sp,fp
1108d68c:	dfc00117 	ldw	ra,4(sp)
1108d690:	df000017 	ldw	fp,0(sp)
1108d694:	dec00204 	addi	sp,sp,8
1108d698:	f800283a 	ret

1108d69c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1108d69c:	defff404 	addi	sp,sp,-48
1108d6a0:	df000b15 	stw	fp,44(sp)
1108d6a4:	df000b04 	addi	fp,sp,44
1108d6a8:	e13ffb15 	stw	r4,-20(fp)
1108d6ac:	e17ffc15 	stw	r5,-16(fp)
1108d6b0:	e1bffd15 	stw	r6,-12(fp)
1108d6b4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1108d6b8:	e03ff915 	stw	zero,-28(fp)
1108d6bc:	00844274 	movhi	r2,4361
1108d6c0:	108b6f04 	addi	r2,r2,11708
1108d6c4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1108d6c8:	1005003a 	cmpeq	r2,r2,zero
1108d6cc:	1000411e 	bne	r2,zero,1108d7d4 <alt_alarm_start+0x138>
  {
    if (alarm)
1108d6d0:	e0bffb17 	ldw	r2,-20(fp)
1108d6d4:	1005003a 	cmpeq	r2,r2,zero
1108d6d8:	10003b1e 	bne	r2,zero,1108d7c8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
1108d6dc:	e0fffb17 	ldw	r3,-20(fp)
1108d6e0:	e0bffd17 	ldw	r2,-12(fp)
1108d6e4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
1108d6e8:	e0fffb17 	ldw	r3,-20(fp)
1108d6ec:	e0bffe17 	ldw	r2,-8(fp)
1108d6f0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108d6f4:	0005303a 	rdctl	r2,status
1108d6f8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108d6fc:	e0fff817 	ldw	r3,-32(fp)
1108d700:	00bfff84 	movi	r2,-2
1108d704:	1884703a 	and	r2,r3,r2
1108d708:	1001703a 	wrctl	status,r2
  
  return context;
1108d70c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1108d710:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1108d714:	00844274 	movhi	r2,4361
1108d718:	108b7004 	addi	r2,r2,11712
1108d71c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1108d720:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1108d724:	e0fffc17 	ldw	r3,-16(fp)
1108d728:	e0bff917 	ldw	r2,-28(fp)
1108d72c:	1885883a 	add	r2,r3,r2
1108d730:	10c00044 	addi	r3,r2,1
1108d734:	e0bffb17 	ldw	r2,-20(fp)
1108d738:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1108d73c:	e0bffb17 	ldw	r2,-20(fp)
1108d740:	10c00217 	ldw	r3,8(r2)
1108d744:	e0bff917 	ldw	r2,-28(fp)
1108d748:	1880042e 	bgeu	r3,r2,1108d75c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
1108d74c:	e0fffb17 	ldw	r3,-20(fp)
1108d750:	00800044 	movi	r2,1
1108d754:	18800405 	stb	r2,16(r3)
1108d758:	00000206 	br	1108d764 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
1108d75c:	e0bffb17 	ldw	r2,-20(fp)
1108d760:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1108d764:	e0fffb17 	ldw	r3,-20(fp)
1108d768:	00844274 	movhi	r2,4361
1108d76c:	1084ca04 	addi	r2,r2,4904
1108d770:	e0bff615 	stw	r2,-40(fp)
1108d774:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1108d778:	e0fff717 	ldw	r3,-36(fp)
1108d77c:	e0bff617 	ldw	r2,-40(fp)
1108d780:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
1108d784:	e0bff617 	ldw	r2,-40(fp)
1108d788:	10c00017 	ldw	r3,0(r2)
1108d78c:	e0bff717 	ldw	r2,-36(fp)
1108d790:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1108d794:	e0bff617 	ldw	r2,-40(fp)
1108d798:	10c00017 	ldw	r3,0(r2)
1108d79c:	e0bff717 	ldw	r2,-36(fp)
1108d7a0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
1108d7a4:	e0fff617 	ldw	r3,-40(fp)
1108d7a8:	e0bff717 	ldw	r2,-36(fp)
1108d7ac:	18800015 	stw	r2,0(r3)
1108d7b0:	e0bffa17 	ldw	r2,-24(fp)
1108d7b4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1108d7b8:	e0bff517 	ldw	r2,-44(fp)
1108d7bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1108d7c0:	e03fff15 	stw	zero,-4(fp)
1108d7c4:	00000506 	br	1108d7dc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
1108d7c8:	00bffa84 	movi	r2,-22
1108d7cc:	e0bfff15 	stw	r2,-4(fp)
1108d7d0:	00000206 	br	1108d7dc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
1108d7d4:	00bfde84 	movi	r2,-134
1108d7d8:	e0bfff15 	stw	r2,-4(fp)
1108d7dc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
1108d7e0:	e037883a 	mov	sp,fp
1108d7e4:	df000017 	ldw	fp,0(sp)
1108d7e8:	dec00104 	addi	sp,sp,4
1108d7ec:	f800283a 	ret

1108d7f0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1108d7f0:	defffa04 	addi	sp,sp,-24
1108d7f4:	dfc00515 	stw	ra,20(sp)
1108d7f8:	df000415 	stw	fp,16(sp)
1108d7fc:	df000404 	addi	fp,sp,16
1108d800:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
1108d804:	008000c4 	movi	r2,3
1108d808:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
1108d80c:	e0fffc17 	ldw	r3,-16(fp)
1108d810:	008003f4 	movhi	r2,15
1108d814:	10909004 	addi	r2,r2,16960
1108d818:	188b383a 	mul	r5,r3,r2
1108d81c:	01017db4 	movhi	r4,1526
1108d820:	21384004 	addi	r4,r4,-7936
1108d824:	10826a00 	call	110826a0 <__udivsi3>
1108d828:	100b883a 	mov	r5,r2
1108d82c:	01200034 	movhi	r4,32768
1108d830:	213fffc4 	addi	r4,r4,-1
1108d834:	10826a00 	call	110826a0 <__udivsi3>
1108d838:	100b883a 	mov	r5,r2
1108d83c:	e13fff17 	ldw	r4,-4(fp)
1108d840:	10826a00 	call	110826a0 <__udivsi3>
1108d844:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1108d848:	e0bffd17 	ldw	r2,-12(fp)
1108d84c:	1005003a 	cmpeq	r2,r2,zero
1108d850:	1000281e 	bne	r2,zero,1108d8f4 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
1108d854:	e03ffe15 	stw	zero,-8(fp)
1108d858:	00001606 	br	1108d8b4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1108d85c:	00a00034 	movhi	r2,32768
1108d860:	10bfffc4 	addi	r2,r2,-1
1108d864:	10bfffc4 	addi	r2,r2,-1
1108d868:	103ffe1e 	bne	r2,zero,1108d864 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1108d86c:	e0fffc17 	ldw	r3,-16(fp)
1108d870:	008003f4 	movhi	r2,15
1108d874:	10909004 	addi	r2,r2,16960
1108d878:	188b383a 	mul	r5,r3,r2
1108d87c:	01017db4 	movhi	r4,1526
1108d880:	21384004 	addi	r4,r4,-7936
1108d884:	10826a00 	call	110826a0 <__udivsi3>
1108d888:	100b883a 	mov	r5,r2
1108d88c:	01200034 	movhi	r4,32768
1108d890:	213fffc4 	addi	r4,r4,-1
1108d894:	10826a00 	call	110826a0 <__udivsi3>
1108d898:	1007883a 	mov	r3,r2
1108d89c:	e0bfff17 	ldw	r2,-4(fp)
1108d8a0:	10c5c83a 	sub	r2,r2,r3
1108d8a4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1108d8a8:	e0bffe17 	ldw	r2,-8(fp)
1108d8ac:	10800044 	addi	r2,r2,1
1108d8b0:	e0bffe15 	stw	r2,-8(fp)
1108d8b4:	e0fffe17 	ldw	r3,-8(fp)
1108d8b8:	e0bffd17 	ldw	r2,-12(fp)
1108d8bc:	18bfe716 	blt	r3,r2,1108d85c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1108d8c0:	e0fffc17 	ldw	r3,-16(fp)
1108d8c4:	008003f4 	movhi	r2,15
1108d8c8:	10909004 	addi	r2,r2,16960
1108d8cc:	188b383a 	mul	r5,r3,r2
1108d8d0:	01017db4 	movhi	r4,1526
1108d8d4:	21384004 	addi	r4,r4,-7936
1108d8d8:	10826a00 	call	110826a0 <__udivsi3>
1108d8dc:	1007883a 	mov	r3,r2
1108d8e0:	e0bfff17 	ldw	r2,-4(fp)
1108d8e4:	1885383a 	mul	r2,r3,r2
1108d8e8:	10bfffc4 	addi	r2,r2,-1
1108d8ec:	103ffe1e 	bne	r2,zero,1108d8e8 <alt_busy_sleep+0xf8>
1108d8f0:	00000c06 	br	1108d924 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1108d8f4:	e0fffc17 	ldw	r3,-16(fp)
1108d8f8:	008003f4 	movhi	r2,15
1108d8fc:	10909004 	addi	r2,r2,16960
1108d900:	188b383a 	mul	r5,r3,r2
1108d904:	01017db4 	movhi	r4,1526
1108d908:	21384004 	addi	r4,r4,-7936
1108d90c:	10826a00 	call	110826a0 <__udivsi3>
1108d910:	1007883a 	mov	r3,r2
1108d914:	e0bfff17 	ldw	r2,-4(fp)
1108d918:	1885383a 	mul	r2,r3,r2
1108d91c:	10bfffc4 	addi	r2,r2,-1
1108d920:	00bffe16 	blt	zero,r2,1108d91c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1108d924:	0005883a 	mov	r2,zero
}
1108d928:	e037883a 	mov	sp,fp
1108d92c:	dfc00117 	ldw	ra,4(sp)
1108d930:	df000017 	ldw	fp,0(sp)
1108d934:	dec00204 	addi	sp,sp,8
1108d938:	f800283a 	ret

1108d93c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1108d93c:	defffe04 	addi	sp,sp,-8
1108d940:	df000115 	stw	fp,4(sp)
1108d944:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1108d948:	e03fff15 	stw	zero,-4(fp)
1108d94c:	00000506 	br	1108d964 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
1108d950:	e0bfff17 	ldw	r2,-4(fp)
1108d954:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1108d958:	e0bfff17 	ldw	r2,-4(fp)
1108d95c:	10800804 	addi	r2,r2,32
1108d960:	e0bfff15 	stw	r2,-4(fp)
1108d964:	e0bfff17 	ldw	r2,-4(fp)
1108d968:	10820030 	cmpltui	r2,r2,2048
1108d96c:	103ff81e 	bne	r2,zero,1108d950 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1108d970:	e037883a 	mov	sp,fp
1108d974:	df000017 	ldw	fp,0(sp)
1108d978:	dec00104 	addi	sp,sp,4
1108d97c:	f800283a 	ret

1108d980 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1108d980:	defff904 	addi	sp,sp,-28
1108d984:	dfc00615 	stw	ra,24(sp)
1108d988:	df000515 	stw	fp,20(sp)
1108d98c:	df000504 	addi	fp,sp,20
1108d990:	e13ffd15 	stw	r4,-12(fp)
1108d994:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1108d998:	e0bffd17 	ldw	r2,-12(fp)
1108d99c:	1005003a 	cmpeq	r2,r2,zero
1108d9a0:	1000041e 	bne	r2,zero,1108d9b4 <alt_dev_llist_insert+0x34>
1108d9a4:	e0bffd17 	ldw	r2,-12(fp)
1108d9a8:	10800217 	ldw	r2,8(r2)
1108d9ac:	1004c03a 	cmpne	r2,r2,zero
1108d9b0:	1000071e 	bne	r2,zero,1108d9d0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
1108d9b4:	108da340 	call	1108da34 <alt_get_errno>
1108d9b8:	1007883a 	mov	r3,r2
1108d9bc:	00800584 	movi	r2,22
1108d9c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1108d9c4:	00bffa84 	movi	r2,-22
1108d9c8:	e0bfff15 	stw	r2,-4(fp)
1108d9cc:	00001306 	br	1108da1c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1108d9d0:	e0fffd17 	ldw	r3,-12(fp)
1108d9d4:	e0bffe17 	ldw	r2,-8(fp)
1108d9d8:	e0bffb15 	stw	r2,-20(fp)
1108d9dc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1108d9e0:	e0fffc17 	ldw	r3,-16(fp)
1108d9e4:	e0bffb17 	ldw	r2,-20(fp)
1108d9e8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
1108d9ec:	e0bffb17 	ldw	r2,-20(fp)
1108d9f0:	10c00017 	ldw	r3,0(r2)
1108d9f4:	e0bffc17 	ldw	r2,-16(fp)
1108d9f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1108d9fc:	e0bffb17 	ldw	r2,-20(fp)
1108da00:	10c00017 	ldw	r3,0(r2)
1108da04:	e0bffc17 	ldw	r2,-16(fp)
1108da08:	18800115 	stw	r2,4(r3)
  list->next           = entry;
1108da0c:	e0fffb17 	ldw	r3,-20(fp)
1108da10:	e0bffc17 	ldw	r2,-16(fp)
1108da14:	18800015 	stw	r2,0(r3)

  return 0;  
1108da18:	e03fff15 	stw	zero,-4(fp)
1108da1c:	e0bfff17 	ldw	r2,-4(fp)
}
1108da20:	e037883a 	mov	sp,fp
1108da24:	dfc00117 	ldw	ra,4(sp)
1108da28:	df000017 	ldw	fp,0(sp)
1108da2c:	dec00204 	addi	sp,sp,8
1108da30:	f800283a 	ret

1108da34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1108da34:	defffd04 	addi	sp,sp,-12
1108da38:	dfc00215 	stw	ra,8(sp)
1108da3c:	df000115 	stw	fp,4(sp)
1108da40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
1108da44:	00844274 	movhi	r2,4361
1108da48:	1084c704 	addi	r2,r2,4892
1108da4c:	10800017 	ldw	r2,0(r2)
1108da50:	1005003a 	cmpeq	r2,r2,zero
1108da54:	1000061e 	bne	r2,zero,1108da70 <alt_get_errno+0x3c>
1108da58:	00844274 	movhi	r2,4361
1108da5c:	1084c704 	addi	r2,r2,4892
1108da60:	10800017 	ldw	r2,0(r2)
1108da64:	103ee83a 	callr	r2
1108da68:	e0bfff15 	stw	r2,-4(fp)
1108da6c:	00000306 	br	1108da7c <alt_get_errno+0x48>
1108da70:	00844274 	movhi	r2,4361
1108da74:	108b6a04 	addi	r2,r2,11688
1108da78:	e0bfff15 	stw	r2,-4(fp)
1108da7c:	e0bfff17 	ldw	r2,-4(fp)
}
1108da80:	e037883a 	mov	sp,fp
1108da84:	dfc00117 	ldw	ra,4(sp)
1108da88:	df000017 	ldw	fp,0(sp)
1108da8c:	dec00204 	addi	sp,sp,8
1108da90:	f800283a 	ret

1108da94 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1108da94:	defffd04 	addi	sp,sp,-12
1108da98:	dfc00215 	stw	ra,8(sp)
1108da9c:	df000115 	stw	fp,4(sp)
1108daa0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1108daa4:	00bfff04 	movi	r2,-4
1108daa8:	00c44274 	movhi	r3,4361
1108daac:	18fac904 	addi	r3,r3,-5340
1108dab0:	1885883a 	add	r2,r3,r2
1108dab4:	e0bfff15 	stw	r2,-4(fp)
1108dab8:	00000606 	br	1108dad4 <_do_ctors+0x40>
        (*ctor) (); 
1108dabc:	e0bfff17 	ldw	r2,-4(fp)
1108dac0:	10800017 	ldw	r2,0(r2)
1108dac4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1108dac8:	e0bfff17 	ldw	r2,-4(fp)
1108dacc:	10bfff04 	addi	r2,r2,-4
1108dad0:	e0bfff15 	stw	r2,-4(fp)
1108dad4:	e0ffff17 	ldw	r3,-4(fp)
1108dad8:	00844274 	movhi	r2,4361
1108dadc:	10bac804 	addi	r2,r2,-5344
1108dae0:	18bff62e 	bgeu	r3,r2,1108dabc <_do_ctors+0x28>
        (*ctor) (); 
}
1108dae4:	e037883a 	mov	sp,fp
1108dae8:	dfc00117 	ldw	ra,4(sp)
1108daec:	df000017 	ldw	fp,0(sp)
1108daf0:	dec00204 	addi	sp,sp,8
1108daf4:	f800283a 	ret

1108daf8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1108daf8:	defffd04 	addi	sp,sp,-12
1108dafc:	dfc00215 	stw	ra,8(sp)
1108db00:	df000115 	stw	fp,4(sp)
1108db04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1108db08:	00bfff04 	movi	r2,-4
1108db0c:	00c44274 	movhi	r3,4361
1108db10:	18fac904 	addi	r3,r3,-5340
1108db14:	1885883a 	add	r2,r3,r2
1108db18:	e0bfff15 	stw	r2,-4(fp)
1108db1c:	00000606 	br	1108db38 <_do_dtors+0x40>
        (*dtor) (); 
1108db20:	e0bfff17 	ldw	r2,-4(fp)
1108db24:	10800017 	ldw	r2,0(r2)
1108db28:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1108db2c:	e0bfff17 	ldw	r2,-4(fp)
1108db30:	10bfff04 	addi	r2,r2,-4
1108db34:	e0bfff15 	stw	r2,-4(fp)
1108db38:	e0ffff17 	ldw	r3,-4(fp)
1108db3c:	00844274 	movhi	r2,4361
1108db40:	10bac904 	addi	r2,r2,-5340
1108db44:	18bff62e 	bgeu	r3,r2,1108db20 <_do_dtors+0x28>
        (*dtor) (); 
}
1108db48:	e037883a 	mov	sp,fp
1108db4c:	dfc00117 	ldw	ra,4(sp)
1108db50:	df000017 	ldw	fp,0(sp)
1108db54:	dec00204 	addi	sp,sp,8
1108db58:	f800283a 	ret

1108db5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1108db5c:	defffe04 	addi	sp,sp,-8
1108db60:	dfc00115 	stw	ra,4(sp)
1108db64:	df000015 	stw	fp,0(sp)
1108db68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1108db6c:	0009883a 	mov	r4,zero
1108db70:	01440004 	movi	r5,4096
1108db74:	108e6880 	call	1108e688 <alt_icache_flush>
#endif
}
1108db78:	e037883a 	mov	sp,fp
1108db7c:	dfc00117 	ldw	ra,4(sp)
1108db80:	df000017 	ldw	fp,0(sp)
1108db84:	dec00204 	addi	sp,sp,8
1108db88:	f800283a 	ret

1108db8c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1108db8c:	defff904 	addi	sp,sp,-28
1108db90:	dfc00615 	stw	ra,24(sp)
1108db94:	df000515 	stw	fp,20(sp)
1108db98:	df000504 	addi	fp,sp,20
1108db9c:	e13ffc15 	stw	r4,-16(fp)
1108dba0:	e17ffd15 	stw	r5,-12(fp)
1108dba4:	e1bffe15 	stw	r6,-8(fp)
1108dba8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1108dbac:	e0800217 	ldw	r2,8(fp)
1108dbb0:	d8800015 	stw	r2,0(sp)
1108dbb4:	e13ffc17 	ldw	r4,-16(fp)
1108dbb8:	e17ffd17 	ldw	r5,-12(fp)
1108dbbc:	e1bffe17 	ldw	r6,-8(fp)
1108dbc0:	e1ffff17 	ldw	r7,-4(fp)
1108dbc4:	108dd600 	call	1108dd60 <alt_iic_isr_register>
}  
1108dbc8:	e037883a 	mov	sp,fp
1108dbcc:	dfc00117 	ldw	ra,4(sp)
1108dbd0:	df000017 	ldw	fp,0(sp)
1108dbd4:	dec00204 	addi	sp,sp,8
1108dbd8:	f800283a 	ret

1108dbdc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1108dbdc:	defff904 	addi	sp,sp,-28
1108dbe0:	df000615 	stw	fp,24(sp)
1108dbe4:	df000604 	addi	fp,sp,24
1108dbe8:	e13ffe15 	stw	r4,-8(fp)
1108dbec:	e17fff15 	stw	r5,-4(fp)
1108dbf0:	e0bfff17 	ldw	r2,-4(fp)
1108dbf4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108dbf8:	0005303a 	rdctl	r2,status
1108dbfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108dc00:	e0fffb17 	ldw	r3,-20(fp)
1108dc04:	00bfff84 	movi	r2,-2
1108dc08:	1884703a 	and	r2,r3,r2
1108dc0c:	1001703a 	wrctl	status,r2
  
  return context;
1108dc10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1108dc14:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
1108dc18:	e0fffc17 	ldw	r3,-16(fp)
1108dc1c:	00800044 	movi	r2,1
1108dc20:	10c4983a 	sll	r2,r2,r3
1108dc24:	1007883a 	mov	r3,r2
1108dc28:	00844274 	movhi	r2,4361
1108dc2c:	108b6b04 	addi	r2,r2,11692
1108dc30:	10800017 	ldw	r2,0(r2)
1108dc34:	1886b03a 	or	r3,r3,r2
1108dc38:	00844274 	movhi	r2,4361
1108dc3c:	108b6b04 	addi	r2,r2,11692
1108dc40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1108dc44:	00844274 	movhi	r2,4361
1108dc48:	108b6b04 	addi	r2,r2,11692
1108dc4c:	10800017 	ldw	r2,0(r2)
1108dc50:	100170fa 	wrctl	ienable,r2
1108dc54:	e0bffd17 	ldw	r2,-12(fp)
1108dc58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1108dc5c:	e0bffa17 	ldw	r2,-24(fp)
1108dc60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1108dc64:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
1108dc68:	e037883a 	mov	sp,fp
1108dc6c:	df000017 	ldw	fp,0(sp)
1108dc70:	dec00104 	addi	sp,sp,4
1108dc74:	f800283a 	ret

1108dc78 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1108dc78:	defff904 	addi	sp,sp,-28
1108dc7c:	df000615 	stw	fp,24(sp)
1108dc80:	df000604 	addi	fp,sp,24
1108dc84:	e13ffe15 	stw	r4,-8(fp)
1108dc88:	e17fff15 	stw	r5,-4(fp)
1108dc8c:	e0bfff17 	ldw	r2,-4(fp)
1108dc90:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108dc94:	0005303a 	rdctl	r2,status
1108dc98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108dc9c:	e0fffb17 	ldw	r3,-20(fp)
1108dca0:	00bfff84 	movi	r2,-2
1108dca4:	1884703a 	and	r2,r3,r2
1108dca8:	1001703a 	wrctl	status,r2
  
  return context;
1108dcac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1108dcb0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
1108dcb4:	e0fffc17 	ldw	r3,-16(fp)
1108dcb8:	00800044 	movi	r2,1
1108dcbc:	10c4983a 	sll	r2,r2,r3
1108dcc0:	0084303a 	nor	r2,zero,r2
1108dcc4:	1007883a 	mov	r3,r2
1108dcc8:	00844274 	movhi	r2,4361
1108dccc:	108b6b04 	addi	r2,r2,11692
1108dcd0:	10800017 	ldw	r2,0(r2)
1108dcd4:	1886703a 	and	r3,r3,r2
1108dcd8:	00844274 	movhi	r2,4361
1108dcdc:	108b6b04 	addi	r2,r2,11692
1108dce0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1108dce4:	00844274 	movhi	r2,4361
1108dce8:	108b6b04 	addi	r2,r2,11692
1108dcec:	10800017 	ldw	r2,0(r2)
1108dcf0:	100170fa 	wrctl	ienable,r2
1108dcf4:	e0bffd17 	ldw	r2,-12(fp)
1108dcf8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1108dcfc:	e0bffa17 	ldw	r2,-24(fp)
1108dd00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1108dd04:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
1108dd08:	e037883a 	mov	sp,fp
1108dd0c:	df000017 	ldw	fp,0(sp)
1108dd10:	dec00104 	addi	sp,sp,4
1108dd14:	f800283a 	ret

1108dd18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1108dd18:	defffc04 	addi	sp,sp,-16
1108dd1c:	df000315 	stw	fp,12(sp)
1108dd20:	df000304 	addi	fp,sp,12
1108dd24:	e13ffe15 	stw	r4,-8(fp)
1108dd28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1108dd2c:	000530fa 	rdctl	r2,ienable
1108dd30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1108dd34:	e0ffff17 	ldw	r3,-4(fp)
1108dd38:	00800044 	movi	r2,1
1108dd3c:	10c4983a 	sll	r2,r2,r3
1108dd40:	1007883a 	mov	r3,r2
1108dd44:	e0bffd17 	ldw	r2,-12(fp)
1108dd48:	1884703a 	and	r2,r3,r2
1108dd4c:	1004c03a 	cmpne	r2,r2,zero
}
1108dd50:	e037883a 	mov	sp,fp
1108dd54:	df000017 	ldw	fp,0(sp)
1108dd58:	dec00104 	addi	sp,sp,4
1108dd5c:	f800283a 	ret

1108dd60 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1108dd60:	defff404 	addi	sp,sp,-48
1108dd64:	dfc00b15 	stw	ra,44(sp)
1108dd68:	df000a15 	stw	fp,40(sp)
1108dd6c:	df000a04 	addi	fp,sp,40
1108dd70:	e13ffb15 	stw	r4,-20(fp)
1108dd74:	e17ffc15 	stw	r5,-16(fp)
1108dd78:	e1bffd15 	stw	r6,-12(fp)
1108dd7c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
1108dd80:	00bffa84 	movi	r2,-22
1108dd84:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1108dd88:	e0bffc17 	ldw	r2,-16(fp)
1108dd8c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1108dd90:	e0bff917 	ldw	r2,-28(fp)
1108dd94:	10800808 	cmpgei	r2,r2,32
1108dd98:	1000291e 	bne	r2,zero,1108de40 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108dd9c:	0005303a 	rdctl	r2,status
1108dda0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108dda4:	e0fff717 	ldw	r3,-36(fp)
1108dda8:	00bfff84 	movi	r2,-2
1108ddac:	1884703a 	and	r2,r3,r2
1108ddb0:	1001703a 	wrctl	status,r2
  
  return context;
1108ddb4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1108ddb8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
1108ddbc:	e0bff917 	ldw	r2,-28(fp)
1108ddc0:	00c44274 	movhi	r3,4361
1108ddc4:	18cb8504 	addi	r3,r3,11796
1108ddc8:	100490fa 	slli	r2,r2,3
1108ddcc:	10c7883a 	add	r3,r2,r3
1108ddd0:	e0bffd17 	ldw	r2,-12(fp)
1108ddd4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
1108ddd8:	e0bff917 	ldw	r2,-28(fp)
1108dddc:	00c44274 	movhi	r3,4361
1108dde0:	18cb8504 	addi	r3,r3,11796
1108dde4:	100490fa 	slli	r2,r2,3
1108dde8:	10c5883a 	add	r2,r2,r3
1108ddec:	10c00104 	addi	r3,r2,4
1108ddf0:	e0bffe17 	ldw	r2,-8(fp)
1108ddf4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1108ddf8:	e0bffd17 	ldw	r2,-12(fp)
1108ddfc:	1005003a 	cmpeq	r2,r2,zero
1108de00:	1000051e 	bne	r2,zero,1108de18 <alt_iic_isr_register+0xb8>
1108de04:	e17ff917 	ldw	r5,-28(fp)
1108de08:	e13ffb17 	ldw	r4,-20(fp)
1108de0c:	108dbdc0 	call	1108dbdc <alt_ic_irq_enable>
1108de10:	e0bfff15 	stw	r2,-4(fp)
1108de14:	00000406 	br	1108de28 <alt_iic_isr_register+0xc8>
1108de18:	e17ff917 	ldw	r5,-28(fp)
1108de1c:	e13ffb17 	ldw	r4,-20(fp)
1108de20:	108dc780 	call	1108dc78 <alt_ic_irq_disable>
1108de24:	e0bfff15 	stw	r2,-4(fp)
1108de28:	e0bfff17 	ldw	r2,-4(fp)
1108de2c:	e0bffa15 	stw	r2,-24(fp)
1108de30:	e0bff817 	ldw	r2,-32(fp)
1108de34:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1108de38:	e0bff617 	ldw	r2,-40(fp)
1108de3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1108de40:	e0bffa17 	ldw	r2,-24(fp)
}
1108de44:	e037883a 	mov	sp,fp
1108de48:	dfc00117 	ldw	ra,4(sp)
1108de4c:	df000017 	ldw	fp,0(sp)
1108de50:	dec00204 	addi	sp,sp,8
1108de54:	f800283a 	ret

1108de58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1108de58:	defff904 	addi	sp,sp,-28
1108de5c:	dfc00615 	stw	ra,24(sp)
1108de60:	df000515 	stw	fp,20(sp)
1108de64:	df000504 	addi	fp,sp,20
1108de68:	e13ffc15 	stw	r4,-16(fp)
1108de6c:	e17ffd15 	stw	r5,-12(fp)
1108de70:	e1bffe15 	stw	r6,-8(fp)
1108de74:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
1108de78:	e13ffd17 	ldw	r4,-12(fp)
1108de7c:	e17ffe17 	ldw	r5,-8(fp)
1108de80:	e1bfff17 	ldw	r6,-4(fp)
1108de84:	108e0700 	call	1108e070 <open>
1108de88:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1108de8c:	e0bffb17 	ldw	r2,-20(fp)
1108de90:	1004803a 	cmplt	r2,r2,zero
1108de94:	10001c1e 	bne	r2,zero,1108df08 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
1108de98:	e0bffb17 	ldw	r2,-20(fp)
1108de9c:	00c44274 	movhi	r3,4361
1108dea0:	18c04404 	addi	r3,r3,272
1108dea4:	10800324 	muli	r2,r2,12
1108dea8:	10c5883a 	add	r2,r2,r3
1108deac:	10c00017 	ldw	r3,0(r2)
1108deb0:	e0bffc17 	ldw	r2,-16(fp)
1108deb4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1108deb8:	e0bffb17 	ldw	r2,-20(fp)
1108debc:	00c44274 	movhi	r3,4361
1108dec0:	18c04404 	addi	r3,r3,272
1108dec4:	10800324 	muli	r2,r2,12
1108dec8:	10c5883a 	add	r2,r2,r3
1108decc:	10800104 	addi	r2,r2,4
1108ded0:	10c00017 	ldw	r3,0(r2)
1108ded4:	e0bffc17 	ldw	r2,-16(fp)
1108ded8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1108dedc:	e0bffb17 	ldw	r2,-20(fp)
1108dee0:	00c44274 	movhi	r3,4361
1108dee4:	18c04404 	addi	r3,r3,272
1108dee8:	10800324 	muli	r2,r2,12
1108deec:	10c5883a 	add	r2,r2,r3
1108def0:	10800204 	addi	r2,r2,8
1108def4:	10c00017 	ldw	r3,0(r2)
1108def8:	e0bffc17 	ldw	r2,-16(fp)
1108defc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1108df00:	e13ffb17 	ldw	r4,-20(fp)
1108df04:	108c8740 	call	1108c874 <alt_release_fd>
  }
} 
1108df08:	e037883a 	mov	sp,fp
1108df0c:	dfc00117 	ldw	ra,4(sp)
1108df10:	df000017 	ldw	fp,0(sp)
1108df14:	dec00204 	addi	sp,sp,8
1108df18:	f800283a 	ret

1108df1c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1108df1c:	defffb04 	addi	sp,sp,-20
1108df20:	dfc00415 	stw	ra,16(sp)
1108df24:	df000315 	stw	fp,12(sp)
1108df28:	df000304 	addi	fp,sp,12
1108df2c:	e13ffd15 	stw	r4,-12(fp)
1108df30:	e17ffe15 	stw	r5,-8(fp)
1108df34:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1108df38:	01044274 	movhi	r4,4361
1108df3c:	21004704 	addi	r4,r4,284
1108df40:	e17ffd17 	ldw	r5,-12(fp)
1108df44:	01800044 	movi	r6,1
1108df48:	01c07fc4 	movi	r7,511
1108df4c:	108de580 	call	1108de58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1108df50:	01044274 	movhi	r4,4361
1108df54:	21004404 	addi	r4,r4,272
1108df58:	e17ffe17 	ldw	r5,-8(fp)
1108df5c:	000d883a 	mov	r6,zero
1108df60:	01c07fc4 	movi	r7,511
1108df64:	108de580 	call	1108de58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1108df68:	01044274 	movhi	r4,4361
1108df6c:	21004a04 	addi	r4,r4,296
1108df70:	e17fff17 	ldw	r5,-4(fp)
1108df74:	01800044 	movi	r6,1
1108df78:	01c07fc4 	movi	r7,511
1108df7c:	108de580 	call	1108de58 <alt_open_fd>
}  
1108df80:	e037883a 	mov	sp,fp
1108df84:	dfc00117 	ldw	ra,4(sp)
1108df88:	df000017 	ldw	fp,0(sp)
1108df8c:	dec00204 	addi	sp,sp,8
1108df90:	f800283a 	ret

1108df94 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1108df94:	defffc04 	addi	sp,sp,-16
1108df98:	df000315 	stw	fp,12(sp)
1108df9c:	df000304 	addi	fp,sp,12
1108dfa0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1108dfa4:	e0bffe17 	ldw	r2,-8(fp)
1108dfa8:	10800217 	ldw	r2,8(r2)
1108dfac:	10d00034 	orhi	r3,r2,16384
1108dfb0:	e0bffe17 	ldw	r2,-8(fp)
1108dfb4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1108dfb8:	e03ffd15 	stw	zero,-12(fp)
1108dfbc:	00002006 	br	1108e040 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1108dfc0:	e0bffd17 	ldw	r2,-12(fp)
1108dfc4:	00c44274 	movhi	r3,4361
1108dfc8:	18c04404 	addi	r3,r3,272
1108dfcc:	10800324 	muli	r2,r2,12
1108dfd0:	10c5883a 	add	r2,r2,r3
1108dfd4:	10c00017 	ldw	r3,0(r2)
1108dfd8:	e0bffe17 	ldw	r2,-8(fp)
1108dfdc:	10800017 	ldw	r2,0(r2)
1108dfe0:	1880141e 	bne	r3,r2,1108e034 <alt_file_locked+0xa0>
1108dfe4:	e0bffd17 	ldw	r2,-12(fp)
1108dfe8:	00c44274 	movhi	r3,4361
1108dfec:	18c04404 	addi	r3,r3,272
1108dff0:	10800324 	muli	r2,r2,12
1108dff4:	10c5883a 	add	r2,r2,r3
1108dff8:	10800204 	addi	r2,r2,8
1108dffc:	10800017 	ldw	r2,0(r2)
1108e000:	1004403a 	cmpge	r2,r2,zero
1108e004:	10000b1e 	bne	r2,zero,1108e034 <alt_file_locked+0xa0>
1108e008:	e0bffd17 	ldw	r2,-12(fp)
1108e00c:	10800324 	muli	r2,r2,12
1108e010:	1007883a 	mov	r3,r2
1108e014:	00844274 	movhi	r2,4361
1108e018:	10804404 	addi	r2,r2,272
1108e01c:	1887883a 	add	r3,r3,r2
1108e020:	e0bffe17 	ldw	r2,-8(fp)
1108e024:	18800326 	beq	r3,r2,1108e034 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1108e028:	00bffcc4 	movi	r2,-13
1108e02c:	e0bfff15 	stw	r2,-4(fp)
1108e030:	00000a06 	br	1108e05c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1108e034:	e0bffd17 	ldw	r2,-12(fp)
1108e038:	10800044 	addi	r2,r2,1
1108e03c:	e0bffd15 	stw	r2,-12(fp)
1108e040:	00844274 	movhi	r2,4361
1108e044:	1084c604 	addi	r2,r2,4888
1108e048:	10800017 	ldw	r2,0(r2)
1108e04c:	1007883a 	mov	r3,r2
1108e050:	e0bffd17 	ldw	r2,-12(fp)
1108e054:	18bfda2e 	bgeu	r3,r2,1108dfc0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1108e058:	e03fff15 	stw	zero,-4(fp)
1108e05c:	e0bfff17 	ldw	r2,-4(fp)
}
1108e060:	e037883a 	mov	sp,fp
1108e064:	df000017 	ldw	fp,0(sp)
1108e068:	dec00104 	addi	sp,sp,4
1108e06c:	f800283a 	ret

1108e070 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1108e070:	defff404 	addi	sp,sp,-48
1108e074:	dfc00b15 	stw	ra,44(sp)
1108e078:	df000a15 	stw	fp,40(sp)
1108e07c:	df000a04 	addi	fp,sp,40
1108e080:	e13ffb15 	stw	r4,-20(fp)
1108e084:	e17ffc15 	stw	r5,-16(fp)
1108e088:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1108e08c:	00bfffc4 	movi	r2,-1
1108e090:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
1108e094:	00bffb44 	movi	r2,-19
1108e098:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
1108e09c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1108e0a0:	e13ffb17 	ldw	r4,-20(fp)
1108e0a4:	01444274 	movhi	r5,4361
1108e0a8:	2944c404 	addi	r5,r5,4880
1108e0ac:	108e41c0 	call	1108e41c <alt_find_dev>
1108e0b0:	e0bffa15 	stw	r2,-24(fp)
1108e0b4:	e0bffa17 	ldw	r2,-24(fp)
1108e0b8:	1004c03a 	cmpne	r2,r2,zero
1108e0bc:	1000051e 	bne	r2,zero,1108e0d4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1108e0c0:	e13ffb17 	ldw	r4,-20(fp)
1108e0c4:	108e4b00 	call	1108e4b0 <alt_find_file>
1108e0c8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
1108e0cc:	00800044 	movi	r2,1
1108e0d0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1108e0d4:	e0bffa17 	ldw	r2,-24(fp)
1108e0d8:	1005003a 	cmpeq	r2,r2,zero
1108e0dc:	1000301e 	bne	r2,zero,1108e1a0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
1108e0e0:	e13ffa17 	ldw	r4,-24(fp)
1108e0e4:	108e5d00 	call	1108e5d0 <alt_get_fd>
1108e0e8:	e0bff815 	stw	r2,-32(fp)
1108e0ec:	e0bff817 	ldw	r2,-32(fp)
1108e0f0:	1004403a 	cmpge	r2,r2,zero
1108e0f4:	1000031e 	bne	r2,zero,1108e104 <open+0x94>
    {
      status = index;
1108e0f8:	e0bff817 	ldw	r2,-32(fp)
1108e0fc:	e0bff715 	stw	r2,-36(fp)
1108e100:	00002906 	br	1108e1a8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
1108e104:	e0bff817 	ldw	r2,-32(fp)
1108e108:	10800324 	muli	r2,r2,12
1108e10c:	1007883a 	mov	r3,r2
1108e110:	00844274 	movhi	r2,4361
1108e114:	10804404 	addi	r2,r2,272
1108e118:	1885883a 	add	r2,r3,r2
1108e11c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1108e120:	e0fffc17 	ldw	r3,-16(fp)
1108e124:	00900034 	movhi	r2,16384
1108e128:	10bfffc4 	addi	r2,r2,-1
1108e12c:	1886703a 	and	r3,r3,r2
1108e130:	e0bff917 	ldw	r2,-28(fp)
1108e134:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1108e138:	e0bff617 	ldw	r2,-40(fp)
1108e13c:	1004c03a 	cmpne	r2,r2,zero
1108e140:	1000061e 	bne	r2,zero,1108e15c <open+0xec>
1108e144:	e13ff917 	ldw	r4,-28(fp)
1108e148:	108df940 	call	1108df94 <alt_file_locked>
1108e14c:	e0bff715 	stw	r2,-36(fp)
1108e150:	e0bff717 	ldw	r2,-36(fp)
1108e154:	1004803a 	cmplt	r2,r2,zero
1108e158:	1000131e 	bne	r2,zero,1108e1a8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1108e15c:	e0bffa17 	ldw	r2,-24(fp)
1108e160:	10800317 	ldw	r2,12(r2)
1108e164:	1005003a 	cmpeq	r2,r2,zero
1108e168:	1000091e 	bne	r2,zero,1108e190 <open+0x120>
1108e16c:	e0bffa17 	ldw	r2,-24(fp)
1108e170:	10800317 	ldw	r2,12(r2)
1108e174:	e13ff917 	ldw	r4,-28(fp)
1108e178:	e17ffb17 	ldw	r5,-20(fp)
1108e17c:	e1bffc17 	ldw	r6,-16(fp)
1108e180:	e1fffd17 	ldw	r7,-12(fp)
1108e184:	103ee83a 	callr	r2
1108e188:	e0bfff15 	stw	r2,-4(fp)
1108e18c:	00000106 	br	1108e194 <open+0x124>
1108e190:	e03fff15 	stw	zero,-4(fp)
1108e194:	e0bfff17 	ldw	r2,-4(fp)
1108e198:	e0bff715 	stw	r2,-36(fp)
1108e19c:	00000206 	br	1108e1a8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
1108e1a0:	00bffb44 	movi	r2,-19
1108e1a4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1108e1a8:	e0bff717 	ldw	r2,-36(fp)
1108e1ac:	1004403a 	cmpge	r2,r2,zero
1108e1b0:	1000091e 	bne	r2,zero,1108e1d8 <open+0x168>
  {
    alt_release_fd (index);  
1108e1b4:	e13ff817 	ldw	r4,-32(fp)
1108e1b8:	108c8740 	call	1108c874 <alt_release_fd>
    ALT_ERRNO = -status;
1108e1bc:	108e1f80 	call	1108e1f8 <alt_get_errno>
1108e1c0:	e0fff717 	ldw	r3,-36(fp)
1108e1c4:	00c7c83a 	sub	r3,zero,r3
1108e1c8:	10c00015 	stw	r3,0(r2)
    return -1;
1108e1cc:	00bfffc4 	movi	r2,-1
1108e1d0:	e0bffe15 	stw	r2,-8(fp)
1108e1d4:	00000206 	br	1108e1e0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
1108e1d8:	e0bff817 	ldw	r2,-32(fp)
1108e1dc:	e0bffe15 	stw	r2,-8(fp)
1108e1e0:	e0bffe17 	ldw	r2,-8(fp)
}
1108e1e4:	e037883a 	mov	sp,fp
1108e1e8:	dfc00117 	ldw	ra,4(sp)
1108e1ec:	df000017 	ldw	fp,0(sp)
1108e1f0:	dec00204 	addi	sp,sp,8
1108e1f4:	f800283a 	ret

1108e1f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1108e1f8:	defffd04 	addi	sp,sp,-12
1108e1fc:	dfc00215 	stw	ra,8(sp)
1108e200:	df000115 	stw	fp,4(sp)
1108e204:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
1108e208:	00844274 	movhi	r2,4361
1108e20c:	1084c704 	addi	r2,r2,4892
1108e210:	10800017 	ldw	r2,0(r2)
1108e214:	1005003a 	cmpeq	r2,r2,zero
1108e218:	1000061e 	bne	r2,zero,1108e234 <alt_get_errno+0x3c>
1108e21c:	00844274 	movhi	r2,4361
1108e220:	1084c704 	addi	r2,r2,4892
1108e224:	10800017 	ldw	r2,0(r2)
1108e228:	103ee83a 	callr	r2
1108e22c:	e0bfff15 	stw	r2,-4(fp)
1108e230:	00000306 	br	1108e240 <alt_get_errno+0x48>
1108e234:	00844274 	movhi	r2,4361
1108e238:	108b6a04 	addi	r2,r2,11688
1108e23c:	e0bfff15 	stw	r2,-4(fp)
1108e240:	e0bfff17 	ldw	r2,-4(fp)
}
1108e244:	e037883a 	mov	sp,fp
1108e248:	dfc00117 	ldw	ra,4(sp)
1108e24c:	df000017 	ldw	fp,0(sp)
1108e250:	dec00204 	addi	sp,sp,8
1108e254:	f800283a 	ret

1108e258 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1108e258:	defffa04 	addi	sp,sp,-24
1108e25c:	df000515 	stw	fp,20(sp)
1108e260:	df000504 	addi	fp,sp,20
1108e264:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1108e268:	0005303a 	rdctl	r2,status
1108e26c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1108e270:	e0fffd17 	ldw	r3,-12(fp)
1108e274:	00bfff84 	movi	r2,-2
1108e278:	1884703a 	and	r2,r3,r2
1108e27c:	1001703a 	wrctl	status,r2
  
  return context;
1108e280:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1108e284:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
1108e288:	e0bfff17 	ldw	r2,-4(fp)
1108e28c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1108e290:	e0bffc17 	ldw	r2,-16(fp)
1108e294:	10c00017 	ldw	r3,0(r2)
1108e298:	e0bffc17 	ldw	r2,-16(fp)
1108e29c:	10800117 	ldw	r2,4(r2)
1108e2a0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
1108e2a4:	e0bffc17 	ldw	r2,-16(fp)
1108e2a8:	10c00117 	ldw	r3,4(r2)
1108e2ac:	e0bffc17 	ldw	r2,-16(fp)
1108e2b0:	10800017 	ldw	r2,0(r2)
1108e2b4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1108e2b8:	e0fffc17 	ldw	r3,-16(fp)
1108e2bc:	e0bffc17 	ldw	r2,-16(fp)
1108e2c0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
1108e2c4:	e0fffc17 	ldw	r3,-16(fp)
1108e2c8:	e0bffc17 	ldw	r2,-16(fp)
1108e2cc:	18800015 	stw	r2,0(r3)
1108e2d0:	e0bffe17 	ldw	r2,-8(fp)
1108e2d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1108e2d8:	e0bffb17 	ldw	r2,-20(fp)
1108e2dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1108e2e0:	e037883a 	mov	sp,fp
1108e2e4:	df000017 	ldw	fp,0(sp)
1108e2e8:	dec00104 	addi	sp,sp,4
1108e2ec:	f800283a 	ret

1108e2f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1108e2f0:	defffb04 	addi	sp,sp,-20
1108e2f4:	dfc00415 	stw	ra,16(sp)
1108e2f8:	df000315 	stw	fp,12(sp)
1108e2fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1108e300:	d0a00e17 	ldw	r2,-32712(gp)
1108e304:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1108e308:	d0a6b417 	ldw	r2,-25904(gp)
1108e30c:	10800044 	addi	r2,r2,1
1108e310:	d0a6b415 	stw	r2,-25904(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1108e314:	00003106 	br	1108e3dc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
1108e318:	e0bffe17 	ldw	r2,-8(fp)
1108e31c:	10800017 	ldw	r2,0(r2)
1108e320:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1108e324:	e0bffe17 	ldw	r2,-8(fp)
1108e328:	10800403 	ldbu	r2,16(r2)
1108e32c:	10803fcc 	andi	r2,r2,255
1108e330:	1005003a 	cmpeq	r2,r2,zero
1108e334:	1000051e 	bne	r2,zero,1108e34c <alt_tick+0x5c>
1108e338:	d0a6b417 	ldw	r2,-25904(gp)
1108e33c:	1004c03a 	cmpne	r2,r2,zero
1108e340:	1000021e 	bne	r2,zero,1108e34c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
1108e344:	e0bffe17 	ldw	r2,-8(fp)
1108e348:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1108e34c:	e0bffe17 	ldw	r2,-8(fp)
1108e350:	10c00217 	ldw	r3,8(r2)
1108e354:	d0a6b417 	ldw	r2,-25904(gp)
1108e358:	10c01e36 	bltu	r2,r3,1108e3d4 <alt_tick+0xe4>
1108e35c:	e0bffe17 	ldw	r2,-8(fp)
1108e360:	10800403 	ldbu	r2,16(r2)
1108e364:	10803fcc 	andi	r2,r2,255
1108e368:	1004c03a 	cmpne	r2,r2,zero
1108e36c:	1000191e 	bne	r2,zero,1108e3d4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
1108e370:	e0bffe17 	ldw	r2,-8(fp)
1108e374:	10c00317 	ldw	r3,12(r2)
1108e378:	e0bffe17 	ldw	r2,-8(fp)
1108e37c:	11000517 	ldw	r4,20(r2)
1108e380:	183ee83a 	callr	r3
1108e384:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1108e388:	e0bffd17 	ldw	r2,-12(fp)
1108e38c:	1004c03a 	cmpne	r2,r2,zero
1108e390:	1000031e 	bne	r2,zero,1108e3a0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
1108e394:	e13ffe17 	ldw	r4,-8(fp)
1108e398:	108e2580 	call	1108e258 <alt_alarm_stop>
1108e39c:	00000d06 	br	1108e3d4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
1108e3a0:	e0bffe17 	ldw	r2,-8(fp)
1108e3a4:	10c00217 	ldw	r3,8(r2)
1108e3a8:	e0bffd17 	ldw	r2,-12(fp)
1108e3ac:	1887883a 	add	r3,r3,r2
1108e3b0:	e0bffe17 	ldw	r2,-8(fp)
1108e3b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1108e3b8:	e0bffe17 	ldw	r2,-8(fp)
1108e3bc:	10c00217 	ldw	r3,8(r2)
1108e3c0:	d0a6b417 	ldw	r2,-25904(gp)
1108e3c4:	1880032e 	bgeu	r3,r2,1108e3d4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
1108e3c8:	e0fffe17 	ldw	r3,-8(fp)
1108e3cc:	00800044 	movi	r2,1
1108e3d0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
1108e3d4:	e0bfff17 	ldw	r2,-4(fp)
1108e3d8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1108e3dc:	d0e00e04 	addi	r3,gp,-32712
1108e3e0:	e0bffe17 	ldw	r2,-8(fp)
1108e3e4:	10ffcc1e 	bne	r2,r3,1108e318 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
1108e3e8:	e037883a 	mov	sp,fp
1108e3ec:	dfc00117 	ldw	ra,4(sp)
1108e3f0:	df000017 	ldw	fp,0(sp)
1108e3f4:	dec00204 	addi	sp,sp,8
1108e3f8:	f800283a 	ret

1108e3fc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
1108e3fc:	deffff04 	addi	sp,sp,-4
1108e400:	df000015 	stw	fp,0(sp)
1108e404:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1108e408:	000170fa 	wrctl	ienable,zero
}
1108e40c:	e037883a 	mov	sp,fp
1108e410:	df000017 	ldw	fp,0(sp)
1108e414:	dec00104 	addi	sp,sp,4
1108e418:	f800283a 	ret

1108e41c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1108e41c:	defff904 	addi	sp,sp,-28
1108e420:	dfc00615 	stw	ra,24(sp)
1108e424:	df000515 	stw	fp,20(sp)
1108e428:	df000504 	addi	fp,sp,20
1108e42c:	e13ffd15 	stw	r4,-12(fp)
1108e430:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
1108e434:	e0bffe17 	ldw	r2,-8(fp)
1108e438:	10800017 	ldw	r2,0(r2)
1108e43c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1108e440:	e13ffd17 	ldw	r4,-12(fp)
1108e444:	10828b00 	call	110828b0 <strlen>
1108e448:	10800044 	addi	r2,r2,1
1108e44c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1108e450:	00000d06 	br	1108e488 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1108e454:	e0bffc17 	ldw	r2,-16(fp)
1108e458:	11000217 	ldw	r4,8(r2)
1108e45c:	e1bffb17 	ldw	r6,-20(fp)
1108e460:	e17ffd17 	ldw	r5,-12(fp)
1108e464:	108e7640 	call	1108e764 <memcmp>
1108e468:	1004c03a 	cmpne	r2,r2,zero
1108e46c:	1000031e 	bne	r2,zero,1108e47c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1108e470:	e0bffc17 	ldw	r2,-16(fp)
1108e474:	e0bfff15 	stw	r2,-4(fp)
1108e478:	00000706 	br	1108e498 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1108e47c:	e0bffc17 	ldw	r2,-16(fp)
1108e480:	10800017 	ldw	r2,0(r2)
1108e484:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1108e488:	e0fffe17 	ldw	r3,-8(fp)
1108e48c:	e0bffc17 	ldw	r2,-16(fp)
1108e490:	10fff01e 	bne	r2,r3,1108e454 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1108e494:	e03fff15 	stw	zero,-4(fp)
1108e498:	e0bfff17 	ldw	r2,-4(fp)
}
1108e49c:	e037883a 	mov	sp,fp
1108e4a0:	dfc00117 	ldw	ra,4(sp)
1108e4a4:	df000017 	ldw	fp,0(sp)
1108e4a8:	dec00204 	addi	sp,sp,8
1108e4ac:	f800283a 	ret

1108e4b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1108e4b0:	defffa04 	addi	sp,sp,-24
1108e4b4:	dfc00515 	stw	ra,20(sp)
1108e4b8:	df000415 	stw	fp,16(sp)
1108e4bc:	df000404 	addi	fp,sp,16
1108e4c0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1108e4c4:	00844274 	movhi	r2,4361
1108e4c8:	1084c204 	addi	r2,r2,4872
1108e4cc:	10800017 	ldw	r2,0(r2)
1108e4d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1108e4d4:	00003306 	br	1108e5a4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
1108e4d8:	e0bffd17 	ldw	r2,-12(fp)
1108e4dc:	11000217 	ldw	r4,8(r2)
1108e4e0:	10828b00 	call	110828b0 <strlen>
1108e4e4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
1108e4e8:	e0bffd17 	ldw	r2,-12(fp)
1108e4ec:	10c00217 	ldw	r3,8(r2)
1108e4f0:	e0bffc17 	ldw	r2,-16(fp)
1108e4f4:	1885883a 	add	r2,r3,r2
1108e4f8:	10bfffc4 	addi	r2,r2,-1
1108e4fc:	10800003 	ldbu	r2,0(r2)
1108e500:	10803fcc 	andi	r2,r2,255
1108e504:	1080201c 	xori	r2,r2,128
1108e508:	10bfe004 	addi	r2,r2,-128
1108e50c:	10800bd8 	cmpnei	r2,r2,47
1108e510:	1000031e 	bne	r2,zero,1108e520 <alt_find_file+0x70>
    {
      len -= 1;
1108e514:	e0bffc17 	ldw	r2,-16(fp)
1108e518:	10bfffc4 	addi	r2,r2,-1
1108e51c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1108e520:	e0bffc17 	ldw	r2,-16(fp)
1108e524:	1007883a 	mov	r3,r2
1108e528:	e0bffe17 	ldw	r2,-8(fp)
1108e52c:	1885883a 	add	r2,r3,r2
1108e530:	10800003 	ldbu	r2,0(r2)
1108e534:	10803fcc 	andi	r2,r2,255
1108e538:	1080201c 	xori	r2,r2,128
1108e53c:	10bfe004 	addi	r2,r2,-128
1108e540:	10800be0 	cmpeqi	r2,r2,47
1108e544:	10000a1e 	bne	r2,zero,1108e570 <alt_find_file+0xc0>
1108e548:	e0bffc17 	ldw	r2,-16(fp)
1108e54c:	1007883a 	mov	r3,r2
1108e550:	e0bffe17 	ldw	r2,-8(fp)
1108e554:	1885883a 	add	r2,r3,r2
1108e558:	10800003 	ldbu	r2,0(r2)
1108e55c:	10803fcc 	andi	r2,r2,255
1108e560:	1080201c 	xori	r2,r2,128
1108e564:	10bfe004 	addi	r2,r2,-128
1108e568:	1004c03a 	cmpne	r2,r2,zero
1108e56c:	10000a1e 	bne	r2,zero,1108e598 <alt_find_file+0xe8>
1108e570:	e0bffd17 	ldw	r2,-12(fp)
1108e574:	11000217 	ldw	r4,8(r2)
1108e578:	e1bffc17 	ldw	r6,-16(fp)
1108e57c:	e17ffe17 	ldw	r5,-8(fp)
1108e580:	108e7640 	call	1108e764 <memcmp>
1108e584:	1004c03a 	cmpne	r2,r2,zero
1108e588:	1000031e 	bne	r2,zero,1108e598 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1108e58c:	e0bffd17 	ldw	r2,-12(fp)
1108e590:	e0bfff15 	stw	r2,-4(fp)
1108e594:	00000806 	br	1108e5b8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
1108e598:	e0bffd17 	ldw	r2,-12(fp)
1108e59c:	10800017 	ldw	r2,0(r2)
1108e5a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1108e5a4:	00c44274 	movhi	r3,4361
1108e5a8:	18c4c204 	addi	r3,r3,4872
1108e5ac:	e0bffd17 	ldw	r2,-12(fp)
1108e5b0:	10ffc91e 	bne	r2,r3,1108e4d8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1108e5b4:	e03fff15 	stw	zero,-4(fp)
1108e5b8:	e0bfff17 	ldw	r2,-4(fp)
}
1108e5bc:	e037883a 	mov	sp,fp
1108e5c0:	dfc00117 	ldw	ra,4(sp)
1108e5c4:	df000017 	ldw	fp,0(sp)
1108e5c8:	dec00204 	addi	sp,sp,8
1108e5cc:	f800283a 	ret

1108e5d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1108e5d0:	defffc04 	addi	sp,sp,-16
1108e5d4:	df000315 	stw	fp,12(sp)
1108e5d8:	df000304 	addi	fp,sp,12
1108e5dc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
1108e5e0:	00bffa04 	movi	r2,-24
1108e5e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1108e5e8:	e03ffe15 	stw	zero,-8(fp)
1108e5ec:	00001e06 	br	1108e668 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
1108e5f0:	e0bffe17 	ldw	r2,-8(fp)
1108e5f4:	00c44274 	movhi	r3,4361
1108e5f8:	18c04404 	addi	r3,r3,272
1108e5fc:	10800324 	muli	r2,r2,12
1108e600:	10c5883a 	add	r2,r2,r3
1108e604:	10800017 	ldw	r2,0(r2)
1108e608:	1004c03a 	cmpne	r2,r2,zero
1108e60c:	1000131e 	bne	r2,zero,1108e65c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
1108e610:	e0bffe17 	ldw	r2,-8(fp)
1108e614:	00c44274 	movhi	r3,4361
1108e618:	18c04404 	addi	r3,r3,272
1108e61c:	10800324 	muli	r2,r2,12
1108e620:	10c7883a 	add	r3,r2,r3
1108e624:	e0bfff17 	ldw	r2,-4(fp)
1108e628:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
1108e62c:	00844274 	movhi	r2,4361
1108e630:	1084c604 	addi	r2,r2,4888
1108e634:	10c00017 	ldw	r3,0(r2)
1108e638:	e0bffe17 	ldw	r2,-8(fp)
1108e63c:	1880040e 	bge	r3,r2,1108e650 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
1108e640:	00c44274 	movhi	r3,4361
1108e644:	18c4c604 	addi	r3,r3,4888
1108e648:	e0bffe17 	ldw	r2,-8(fp)
1108e64c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
1108e650:	e0bffe17 	ldw	r2,-8(fp)
1108e654:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1108e658:	00000606 	br	1108e674 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1108e65c:	e0bffe17 	ldw	r2,-8(fp)
1108e660:	10800044 	addi	r2,r2,1
1108e664:	e0bffe15 	stw	r2,-8(fp)
1108e668:	e0bffe17 	ldw	r2,-8(fp)
1108e66c:	10800810 	cmplti	r2,r2,32
1108e670:	103fdf1e 	bne	r2,zero,1108e5f0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1108e674:	e0bffd17 	ldw	r2,-12(fp)
}
1108e678:	e037883a 	mov	sp,fp
1108e67c:	df000017 	ldw	fp,0(sp)
1108e680:	dec00104 	addi	sp,sp,4
1108e684:	f800283a 	ret

1108e688 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
1108e688:	defffb04 	addi	sp,sp,-20
1108e68c:	df000415 	stw	fp,16(sp)
1108e690:	df000404 	addi	fp,sp,16
1108e694:	e13ffe15 	stw	r4,-8(fp)
1108e698:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1108e69c:	e0bfff17 	ldw	r2,-4(fp)
1108e6a0:	10840070 	cmpltui	r2,r2,4097
1108e6a4:	1000021e 	bne	r2,zero,1108e6b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
1108e6a8:	00840004 	movi	r2,4096
1108e6ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
1108e6b0:	e0fffe17 	ldw	r3,-8(fp)
1108e6b4:	e0bfff17 	ldw	r2,-4(fp)
1108e6b8:	1885883a 	add	r2,r3,r2
1108e6bc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1108e6c0:	e0bffe17 	ldw	r2,-8(fp)
1108e6c4:	e0bffd15 	stw	r2,-12(fp)
1108e6c8:	00000506 	br	1108e6e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
1108e6cc:	e0bffd17 	ldw	r2,-12(fp)
1108e6d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1108e6d4:	e0bffd17 	ldw	r2,-12(fp)
1108e6d8:	10800804 	addi	r2,r2,32
1108e6dc:	e0bffd15 	stw	r2,-12(fp)
1108e6e0:	e0fffd17 	ldw	r3,-12(fp)
1108e6e4:	e0bffc17 	ldw	r2,-16(fp)
1108e6e8:	18bff836 	bltu	r3,r2,1108e6cc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
1108e6ec:	e0bffe17 	ldw	r2,-8(fp)
1108e6f0:	108007cc 	andi	r2,r2,31
1108e6f4:	1005003a 	cmpeq	r2,r2,zero
1108e6f8:	1000021e 	bne	r2,zero,1108e704 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
1108e6fc:	e0bffd17 	ldw	r2,-12(fp)
1108e700:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
1108e704:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
1108e708:	e037883a 	mov	sp,fp
1108e70c:	df000017 	ldw	fp,0(sp)
1108e710:	dec00104 	addi	sp,sp,4
1108e714:	f800283a 	ret

1108e718 <atexit>:
1108e718:	200b883a 	mov	r5,r4
1108e71c:	000d883a 	mov	r6,zero
1108e720:	0009883a 	mov	r4,zero
1108e724:	000f883a 	mov	r7,zero
1108e728:	108e7d81 	jmpi	1108e7d8 <__register_exitproc>

1108e72c <exit>:
1108e72c:	defffe04 	addi	sp,sp,-8
1108e730:	000b883a 	mov	r5,zero
1108e734:	dc000015 	stw	r16,0(sp)
1108e738:	dfc00115 	stw	ra,4(sp)
1108e73c:	2021883a 	mov	r16,r4
1108e740:	108e9100 	call	1108e910 <__call_exitprocs>
1108e744:	00844274 	movhi	r2,4361
1108e748:	1084bd04 	addi	r2,r2,4852
1108e74c:	11000017 	ldw	r4,0(r2)
1108e750:	20800f17 	ldw	r2,60(r4)
1108e754:	10000126 	beq	r2,zero,1108e75c <exit+0x30>
1108e758:	103ee83a 	callr	r2
1108e75c:	8009883a 	mov	r4,r16
1108e760:	108eb000 	call	1108eb00 <_exit>

1108e764 <memcmp>:
1108e764:	00c000c4 	movi	r3,3
1108e768:	1980032e 	bgeu	r3,r6,1108e778 <memcmp+0x14>
1108e76c:	2144b03a 	or	r2,r4,r5
1108e770:	10c4703a 	and	r2,r2,r3
1108e774:	10000f26 	beq	r2,zero,1108e7b4 <memcmp+0x50>
1108e778:	31ffffc4 	addi	r7,r6,-1
1108e77c:	3000061e 	bne	r6,zero,1108e798 <memcmp+0x34>
1108e780:	00000a06 	br	1108e7ac <memcmp+0x48>
1108e784:	39ffffc4 	addi	r7,r7,-1
1108e788:	00bfffc4 	movi	r2,-1
1108e78c:	21000044 	addi	r4,r4,1
1108e790:	29400044 	addi	r5,r5,1
1108e794:	38800526 	beq	r7,r2,1108e7ac <memcmp+0x48>
1108e798:	20c00003 	ldbu	r3,0(r4)
1108e79c:	28800003 	ldbu	r2,0(r5)
1108e7a0:	18bff826 	beq	r3,r2,1108e784 <memcmp+0x20>
1108e7a4:	1885c83a 	sub	r2,r3,r2
1108e7a8:	f800283a 	ret
1108e7ac:	0005883a 	mov	r2,zero
1108e7b0:	f800283a 	ret
1108e7b4:	180f883a 	mov	r7,r3
1108e7b8:	20c00017 	ldw	r3,0(r4)
1108e7bc:	28800017 	ldw	r2,0(r5)
1108e7c0:	18bfed1e 	bne	r3,r2,1108e778 <memcmp+0x14>
1108e7c4:	31bfff04 	addi	r6,r6,-4
1108e7c8:	21000104 	addi	r4,r4,4
1108e7cc:	29400104 	addi	r5,r5,4
1108e7d0:	39bff936 	bltu	r7,r6,1108e7b8 <memcmp+0x54>
1108e7d4:	003fe806 	br	1108e778 <memcmp+0x14>

1108e7d8 <__register_exitproc>:
1108e7d8:	defffa04 	addi	sp,sp,-24
1108e7dc:	00844274 	movhi	r2,4361
1108e7e0:	1084bd04 	addi	r2,r2,4852
1108e7e4:	dc000015 	stw	r16,0(sp)
1108e7e8:	14000017 	ldw	r16,0(r2)
1108e7ec:	dd000415 	stw	r20,16(sp)
1108e7f0:	2829883a 	mov	r20,r5
1108e7f4:	81405217 	ldw	r5,328(r16)
1108e7f8:	dcc00315 	stw	r19,12(sp)
1108e7fc:	dc800215 	stw	r18,8(sp)
1108e800:	dc400115 	stw	r17,4(sp)
1108e804:	dfc00515 	stw	ra,20(sp)
1108e808:	2023883a 	mov	r17,r4
1108e80c:	3027883a 	mov	r19,r6
1108e810:	3825883a 	mov	r18,r7
1108e814:	28002526 	beq	r5,zero,1108e8ac <__register_exitproc+0xd4>
1108e818:	29000117 	ldw	r4,4(r5)
1108e81c:	008007c4 	movi	r2,31
1108e820:	11002716 	blt	r2,r4,1108e8c0 <__register_exitproc+0xe8>
1108e824:	8800101e 	bne	r17,zero,1108e868 <__register_exitproc+0x90>
1108e828:	2105883a 	add	r2,r4,r4
1108e82c:	1085883a 	add	r2,r2,r2
1108e830:	20c00044 	addi	r3,r4,1
1108e834:	1145883a 	add	r2,r2,r5
1108e838:	0009883a 	mov	r4,zero
1108e83c:	15000215 	stw	r20,8(r2)
1108e840:	28c00115 	stw	r3,4(r5)
1108e844:	2005883a 	mov	r2,r4
1108e848:	dfc00517 	ldw	ra,20(sp)
1108e84c:	dd000417 	ldw	r20,16(sp)
1108e850:	dcc00317 	ldw	r19,12(sp)
1108e854:	dc800217 	ldw	r18,8(sp)
1108e858:	dc400117 	ldw	r17,4(sp)
1108e85c:	dc000017 	ldw	r16,0(sp)
1108e860:	dec00604 	addi	sp,sp,24
1108e864:	f800283a 	ret
1108e868:	29802204 	addi	r6,r5,136
1108e86c:	00800044 	movi	r2,1
1108e870:	110e983a 	sll	r7,r2,r4
1108e874:	30c04017 	ldw	r3,256(r6)
1108e878:	2105883a 	add	r2,r4,r4
1108e87c:	1085883a 	add	r2,r2,r2
1108e880:	1185883a 	add	r2,r2,r6
1108e884:	19c6b03a 	or	r3,r3,r7
1108e888:	14802015 	stw	r18,128(r2)
1108e88c:	14c00015 	stw	r19,0(r2)
1108e890:	00800084 	movi	r2,2
1108e894:	30c04015 	stw	r3,256(r6)
1108e898:	88bfe31e 	bne	r17,r2,1108e828 <__register_exitproc+0x50>
1108e89c:	30804117 	ldw	r2,260(r6)
1108e8a0:	11c4b03a 	or	r2,r2,r7
1108e8a4:	30804115 	stw	r2,260(r6)
1108e8a8:	003fdf06 	br	1108e828 <__register_exitproc+0x50>
1108e8ac:	00844274 	movhi	r2,4361
1108e8b0:	108bc504 	addi	r2,r2,12052
1108e8b4:	100b883a 	mov	r5,r2
1108e8b8:	80805215 	stw	r2,328(r16)
1108e8bc:	003fd606 	br	1108e818 <__register_exitproc+0x40>
1108e8c0:	00800034 	movhi	r2,0
1108e8c4:	10800004 	addi	r2,r2,0
1108e8c8:	1000021e 	bne	r2,zero,1108e8d4 <__register_exitproc+0xfc>
1108e8cc:	013fffc4 	movi	r4,-1
1108e8d0:	003fdc06 	br	1108e844 <__register_exitproc+0x6c>
1108e8d4:	01006404 	movi	r4,400
1108e8d8:	103ee83a 	callr	r2
1108e8dc:	1007883a 	mov	r3,r2
1108e8e0:	103ffa26 	beq	r2,zero,1108e8cc <__register_exitproc+0xf4>
1108e8e4:	80805217 	ldw	r2,328(r16)
1108e8e8:	180b883a 	mov	r5,r3
1108e8ec:	18000115 	stw	zero,4(r3)
1108e8f0:	18800015 	stw	r2,0(r3)
1108e8f4:	80c05215 	stw	r3,328(r16)
1108e8f8:	18006215 	stw	zero,392(r3)
1108e8fc:	18006315 	stw	zero,396(r3)
1108e900:	0009883a 	mov	r4,zero
1108e904:	883fc826 	beq	r17,zero,1108e828 <__register_exitproc+0x50>
1108e908:	003fd706 	br	1108e868 <__register_exitproc+0x90>

1108e90c <register_fini>:
1108e90c:	f800283a 	ret

1108e910 <__call_exitprocs>:
1108e910:	00844274 	movhi	r2,4361
1108e914:	1084bd04 	addi	r2,r2,4852
1108e918:	10800017 	ldw	r2,0(r2)
1108e91c:	defff304 	addi	sp,sp,-52
1108e920:	df000b15 	stw	fp,44(sp)
1108e924:	d8800115 	stw	r2,4(sp)
1108e928:	00800034 	movhi	r2,0
1108e92c:	10800004 	addi	r2,r2,0
1108e930:	1005003a 	cmpeq	r2,r2,zero
1108e934:	d8800215 	stw	r2,8(sp)
1108e938:	d8800117 	ldw	r2,4(sp)
1108e93c:	dd400815 	stw	r21,32(sp)
1108e940:	dd000715 	stw	r20,28(sp)
1108e944:	10805204 	addi	r2,r2,328
1108e948:	dfc00c15 	stw	ra,48(sp)
1108e94c:	ddc00a15 	stw	r23,40(sp)
1108e950:	dd800915 	stw	r22,36(sp)
1108e954:	dcc00615 	stw	r19,24(sp)
1108e958:	dc800515 	stw	r18,20(sp)
1108e95c:	dc400415 	stw	r17,16(sp)
1108e960:	dc000315 	stw	r16,12(sp)
1108e964:	282b883a 	mov	r21,r5
1108e968:	2039883a 	mov	fp,r4
1108e96c:	d8800015 	stw	r2,0(sp)
1108e970:	2829003a 	cmpeq	r20,r5,zero
1108e974:	d8800117 	ldw	r2,4(sp)
1108e978:	14405217 	ldw	r17,328(r2)
1108e97c:	88001026 	beq	r17,zero,1108e9c0 <__call_exitprocs+0xb0>
1108e980:	ddc00017 	ldw	r23,0(sp)
1108e984:	88800117 	ldw	r2,4(r17)
1108e988:	8c802204 	addi	r18,r17,136
1108e98c:	143fffc4 	addi	r16,r2,-1
1108e990:	80000916 	blt	r16,zero,1108e9b8 <__call_exitprocs+0xa8>
1108e994:	05bfffc4 	movi	r22,-1
1108e998:	a000151e 	bne	r20,zero,1108e9f0 <__call_exitprocs+0xe0>
1108e99c:	8409883a 	add	r4,r16,r16
1108e9a0:	2105883a 	add	r2,r4,r4
1108e9a4:	1485883a 	add	r2,r2,r18
1108e9a8:	10c02017 	ldw	r3,128(r2)
1108e9ac:	a8c01126 	beq	r21,r3,1108e9f4 <__call_exitprocs+0xe4>
1108e9b0:	843fffc4 	addi	r16,r16,-1
1108e9b4:	85bff81e 	bne	r16,r22,1108e998 <__call_exitprocs+0x88>
1108e9b8:	d8800217 	ldw	r2,8(sp)
1108e9bc:	10003126 	beq	r2,zero,1108ea84 <__call_exitprocs+0x174>
1108e9c0:	dfc00c17 	ldw	ra,48(sp)
1108e9c4:	df000b17 	ldw	fp,44(sp)
1108e9c8:	ddc00a17 	ldw	r23,40(sp)
1108e9cc:	dd800917 	ldw	r22,36(sp)
1108e9d0:	dd400817 	ldw	r21,32(sp)
1108e9d4:	dd000717 	ldw	r20,28(sp)
1108e9d8:	dcc00617 	ldw	r19,24(sp)
1108e9dc:	dc800517 	ldw	r18,20(sp)
1108e9e0:	dc400417 	ldw	r17,16(sp)
1108e9e4:	dc000317 	ldw	r16,12(sp)
1108e9e8:	dec00d04 	addi	sp,sp,52
1108e9ec:	f800283a 	ret
1108e9f0:	8409883a 	add	r4,r16,r16
1108e9f4:	88c00117 	ldw	r3,4(r17)
1108e9f8:	2105883a 	add	r2,r4,r4
1108e9fc:	1445883a 	add	r2,r2,r17
1108ea00:	18ffffc4 	addi	r3,r3,-1
1108ea04:	11800217 	ldw	r6,8(r2)
1108ea08:	1c001526 	beq	r3,r16,1108ea60 <__call_exitprocs+0x150>
1108ea0c:	10000215 	stw	zero,8(r2)
1108ea10:	303fe726 	beq	r6,zero,1108e9b0 <__call_exitprocs+0xa0>
1108ea14:	00c00044 	movi	r3,1
1108ea18:	1c06983a 	sll	r3,r3,r16
1108ea1c:	90804017 	ldw	r2,256(r18)
1108ea20:	8cc00117 	ldw	r19,4(r17)
1108ea24:	1884703a 	and	r2,r3,r2
1108ea28:	10001426 	beq	r2,zero,1108ea7c <__call_exitprocs+0x16c>
1108ea2c:	90804117 	ldw	r2,260(r18)
1108ea30:	1884703a 	and	r2,r3,r2
1108ea34:	10000c1e 	bne	r2,zero,1108ea68 <__call_exitprocs+0x158>
1108ea38:	2105883a 	add	r2,r4,r4
1108ea3c:	1485883a 	add	r2,r2,r18
1108ea40:	11400017 	ldw	r5,0(r2)
1108ea44:	e009883a 	mov	r4,fp
1108ea48:	303ee83a 	callr	r6
1108ea4c:	88800117 	ldw	r2,4(r17)
1108ea50:	98bfc81e 	bne	r19,r2,1108e974 <__call_exitprocs+0x64>
1108ea54:	b8800017 	ldw	r2,0(r23)
1108ea58:	147fd526 	beq	r2,r17,1108e9b0 <__call_exitprocs+0xa0>
1108ea5c:	003fc506 	br	1108e974 <__call_exitprocs+0x64>
1108ea60:	8c000115 	stw	r16,4(r17)
1108ea64:	003fea06 	br	1108ea10 <__call_exitprocs+0x100>
1108ea68:	2105883a 	add	r2,r4,r4
1108ea6c:	1485883a 	add	r2,r2,r18
1108ea70:	11000017 	ldw	r4,0(r2)
1108ea74:	303ee83a 	callr	r6
1108ea78:	003ff406 	br	1108ea4c <__call_exitprocs+0x13c>
1108ea7c:	303ee83a 	callr	r6
1108ea80:	003ff206 	br	1108ea4c <__call_exitprocs+0x13c>
1108ea84:	88800117 	ldw	r2,4(r17)
1108ea88:	1000081e 	bne	r2,zero,1108eaac <__call_exitprocs+0x19c>
1108ea8c:	89000017 	ldw	r4,0(r17)
1108ea90:	20000726 	beq	r4,zero,1108eab0 <__call_exitprocs+0x1a0>
1108ea94:	b9000015 	stw	r4,0(r23)
1108ea98:	8809883a 	mov	r4,r17
1108ea9c:	00000000 	call	10000000 <__alt_mem_DDR3+0x10000000>
1108eaa0:	bc400017 	ldw	r17,0(r23)
1108eaa4:	883fb71e 	bne	r17,zero,1108e984 <__call_exitprocs+0x74>
1108eaa8:	003fc506 	br	1108e9c0 <__call_exitprocs+0xb0>
1108eaac:	89000017 	ldw	r4,0(r17)
1108eab0:	882f883a 	mov	r23,r17
1108eab4:	2023883a 	mov	r17,r4
1108eab8:	883fb21e 	bne	r17,zero,1108e984 <__call_exitprocs+0x74>
1108eabc:	003fc006 	br	1108e9c0 <__call_exitprocs+0xb0>

1108eac0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
1108eac0:	defffd04 	addi	sp,sp,-12
1108eac4:	df000215 	stw	fp,8(sp)
1108eac8:	df000204 	addi	fp,sp,8
1108eacc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
1108ead0:	e0bfff17 	ldw	r2,-4(fp)
1108ead4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1108ead8:	e0bffe17 	ldw	r2,-8(fp)
1108eadc:	1005003a 	cmpeq	r2,r2,zero
1108eae0:	1000021e 	bne	r2,zero,1108eaec <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
1108eae4:	002af070 	cmpltui	zero,zero,43969
1108eae8:	00000106 	br	1108eaf0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
1108eaec:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
1108eaf0:	e037883a 	mov	sp,fp
1108eaf4:	df000017 	ldw	fp,0(sp)
1108eaf8:	dec00104 	addi	sp,sp,4
1108eafc:	f800283a 	ret

1108eb00 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1108eb00:	defffd04 	addi	sp,sp,-12
1108eb04:	dfc00215 	stw	ra,8(sp)
1108eb08:	df000115 	stw	fp,4(sp)
1108eb0c:	df000104 	addi	fp,sp,4
1108eb10:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
1108eb14:	e13fff17 	ldw	r4,-4(fp)
1108eb18:	108eac00 	call	1108eac0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1108eb1c:	003fff06 	br	1108eb1c <_exit+0x1c>
1108eb20:	1108e90c 	andi	r4,r2,9124
